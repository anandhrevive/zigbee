///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               16/Sep/2011  10:53:15 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZSta /
//                          ck¶¨Ê±¸´Î»¼ì²â\Components\stack\nwk\nwk_globals.c /
//    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg /
//                          " (-DCPU32MHZ -DROOT=__near_func                  /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cf /
//                          g" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Documents and          /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Co /
//                          mponents\stack\nwk\nwk_globals.c" -D ZTOOL_P1 -D  /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D             /
//                          BUILD_ALL_DEVICES -D xLCD_SUPPORTED=DEBUG -D      /
//                          SOFT_SATRT -D ZDO_COORDINATOR -D NV_INIT -D       /
//                          RTR_NWK -lC "C:\Documents and                     /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\Coordina /
//                          torEB\List\" -lA "C:\Documents and                /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\Coordina /
//                          torEB\List\" --diag_suppress Pe001,Pa010 -o       /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\CoordinatorEB\Obj\" -e                  /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "C:\Documents and         /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\" -I     /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\SOURCE\" -I "C:\Documents and        /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \ZMAIN\TI2530DB\" -I "C:\Documents and            /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\MT\" -I "C:\Documents and       /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\HAL\INCLUDE\" -I "C:\Documents  /
//                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì² /
//                          â\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I    /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSO /
//                          C\" -I "C:\Documents and                          /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\OSAL\INCLUDE\" -I               /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"    /
//                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ /
//                          " -I "C:\Documents and Settings\Administrator\×ÀÃ /
//                          æ\ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Samp /
//                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE /
//                          C\" -I "C:\Documents and                          /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\SAPI\" -I "C:\Documents   /
//                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì² /
//                          â\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\STACK\SYS\" -I              /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"   /
//                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\" /
//                           -I "C:\Documents and Settings\Administrator\×ÀÃæ /
//                          \ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"    /
//                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\S /
//                          ADDR\" -I "C:\Documents and                       /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\SERVICES\SDATA\" -I             /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\" /
//                           -I "C:\Documents and Settings\Administrator\×ÀÃæ /
//                          \ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_ /
//                          LEVEL\" -I "C:\Documents and                      /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I        /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL /
//                          \srf04\SINGLE_CHIP\" -I D:\IAR\8051\INC\ -I       /
//                          D:\IAR\8051\INC\CLIB\ -Ohz                        /
//    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\ZSta /
//                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\CoordinatorEB\List\nwk_globals.s51       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME nwk_globals

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??NIB_init?relay
        FUNCTION ??NIB_init?relay,0203H
        PUBLIC ??nwk_Status?relay
        FUNCTION ??nwk_Status?relay,0203H
        PUBLIC ??nwk_UpdateStatistics?relay
        FUNCTION ??nwk_UpdateStatistics?relay,0203H
        PUBLIC ??nwk_globals_init?relay
        FUNCTION ??nwk_globals_init?relay,0203H
        PUBLIC AssociatedDevList
        PUBLIC BindingTable
        PUBLIC Cskip
        PUBLIC CskipChldrn
        PUBLIC CskipRtrs
        PUBLIC NIB_init
        FUNCTION NIB_init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC apsEndDeviceBroadcastTable
        PUBLIC bcastHoldAckMask
        PUBLIC bcastHoldHandle
        PUBLIC bcastTable
        PUBLIC defaultKey
        PUBLIC defaultTCLinkKey
        PUBLIC gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES
        PUBLIC gAPS_MAX_GROUPS
        PUBLIC gBIND_REC_SIZE
        PUBLIC gDEFAULT_ROUTE_REQUEST_RADIUS
        PUBLIC gDEF_NWK_RADIUS
        PUBLIC gLINK_DOWN_TRIGGER
        PUBLIC gLINK_STATUS_JITTER_MASK
        PUBLIC gMAX_BCAST
        PUBLIC gMAX_BINDING_CLUSTER_IDS
        PUBLIC gMAX_BROADCAST_QUEUED
        PUBLIC gMAX_NEIGHBOR_ENTRIES
        PUBLIC gMAX_RREQ_ENTRIES
        PUBLIC gMAX_RTG_ENTRIES
        PUBLIC gMAX_RTG_SRC_ENTRIES
        PUBLIC gMAX_SOURCE_ROUTE
        PUBLIC gMIN_TREE_LINK_COST
        PUBLIC gMTO_ROUTE_EXPIRY_TIME
        PUBLIC gMTO_RREQ_LIMIT_TIME
        PUBLIC gNWK_FREQ_AGILITY_ALL_MAC_ERRS
        PUBLIC gNWK_INDIRECT_CNT_RTG_TMR
        PUBLIC gNWK_INDIRECT_MSG_MAX_ALL
        PUBLIC gNWK_INDIRECT_MSG_MAX_PER
        PUBLIC gNWK_MAX_BINDING_ENTRIES
        PUBLIC gNWK_MAX_DATABUFS_CONFIRMED
        PUBLIC gNWK_MAX_DATABUFS_SCHEDULED
        PUBLIC gNWK_MAX_DATABUFS_TOTAL
        PUBLIC gNWK_MAX_DATABUFS_WAITING
        PUBLIC gNWK_MAX_DEVICE_LIST
        PUBLIC gNWK_MAX_SLEEPING_END_DEVICES
        PUBLIC gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
        PUBLIC neighborTable
        PUBLIC nwk_Status
        FUNCTION nwk_Status,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC nwk_UpdateStatistics
        FUNCTION nwk_UpdateStatistics,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC nwk_globals_init
        FUNCTION nwk_globals_init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC rtDiscTable
        PUBLIC rtgTable
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
AddrMgrInit         SYMBOL "AddrMgrInit"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
RTG_FillCSkipTable  SYMBOL "RTG_FillCSkipTable"
NwkFreqAgilityInit  SYMBOL "NwkFreqAgilityInit"
osal_rand           SYMBOL "osal_rand"
osal_memset         SYMBOL "osal_memset"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
NLME_InitTreeAddressing SYMBOL "NLME_InitTreeAddressing"
??AddrMgrInit?relay SYMBOL "?relay", AddrMgrInit
??NLME_InitTreeAddressing?relay SYMBOL "?relay", NLME_InitTreeAddressing
??NwkFreqAgilityInit?relay SYMBOL "?relay", NwkFreqAgilityInit
??RTG_FillCSkipTable?relay SYMBOL "?relay", RTG_FillCSkipTable
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_rand?relay   SYMBOL "?relay", osal_rand
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
NIB_init            SYMBOL "NIB_init"
??NIB_init?relay    SYMBOL "?relay", NIB_init
nwk_Status          SYMBOL "nwk_Status"
??nwk_Status?relay  SYMBOL "?relay", nwk_Status
nwk_UpdateStatistics SYMBOL "nwk_UpdateStatistics"
??nwk_UpdateStatistics?relay SYMBOL "?relay", nwk_UpdateStatistics
nwk_globals_init    SYMBOL "nwk_globals_init"
??nwk_globals_init?relay SYMBOL "?relay", nwk_globals_init

        EXTERN AddrMgrInit
        FUNCTION AddrMgrInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_FillCSkipTable
        FUNCTION RTG_FillCSkipTable,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NwkFreqAgilityInit
        FUNCTION NwkFreqAgilityInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_InitTreeAddressing
        FUNCTION NLME_InitTreeAddressing,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AddrMgrInit?relay
        FUNCTION ??AddrMgrInit?relay,00H
        EXTERN ??NLME_InitTreeAddressing?relay
        FUNCTION ??NLME_InitTreeAddressing?relay,00H
        EXTERN ??NwkFreqAgilityInit?relay
        FUNCTION ??NwkFreqAgilityInit?relay,00H
        EXTERN ??RTG_FillCSkipTable?relay
        FUNCTION ??RTG_FillCSkipTable?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN _NIB
        EXTERN zgBcastDeliveryTime
        EXTERN zgConcentratorDiscoveryTime
        EXTERN zgConcentratorEnable
        EXTERN zgConcentratorRadius
        EXTERN zgDeviceLogicalType
        EXTERN zgExtendedPANID
        EXTERN zgIndirectMsgTimeout
        EXTERN zgMaxBcastRetires
        EXTERN zgPassiveAckTimeout
        EXTERN zgRouteDiscoveryTime
        EXTERN zgRouteExpiryTime

// C:\Documents and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Components\stack\nwk\nwk_globals.c
//    1 /**************************************************************************************************
//    2   Filename:       nwk_globals.c
//    3   Revised:        $Date: 2010-06-17 08:41:57 -0700 (Thu, 17 Jun 2010) $
//    4   Revision:       $Revision: 22772 $
//    5 
//    6   Description:    User definable Network Parameters.
//    7 
//    8 
//    9   Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComdef.h"
//   44 #include "OSAL.h"
//   45 #include "AddrMgr.h"
//   46 #include "AssocList.h"
//   47 #include "BindingTable.h"
//   48 #include "nwk_util.h"
//   49 #include "nwk_globals.h"
//   50 #include "APS.h"
//   51 #include "ssp.h"
//   52 #include "rtg.h"
//   53 #include "ZDConfig.h"
//   54 #include "ZGlobals.h"
//   55 
//   56 #if defined ( LCD_SUPPORTED )
//   57   #include "OnBoard.h"
//   58 #endif
//   59 
//   60 /* HAL */
//   61 #include "hal_lcd.h"
//   62 
//   63 /*********************************************************************
//   64  * MACROS
//   65  */
//   66 
//   67 /*********************************************************************
//   68  * CONSTANTS
//   69  */
//   70 
//   71 // Maximums for the data buffer queue
//   72 #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
//   73 #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
//   74 #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
//   75 #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
//   76 
//   77 // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
//   78 // A known shortcoming is that when a message is enqueued as "hold" for a
//   79 // sleeping device, the timer tick may have counted down to 1, so that msg
//   80 // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
//   81 // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
//   82 // So the hold time will vary within this interval:
//   83 // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
//   84 //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
//   85 #define NWK_INDIRECT_CNT_RTG_TMR    1
//   86 // To hold msg for sleeping end devices for 30 secs:
//   87 // #define CNT_RTG_TIMER            1
//   88 // #define NWK_INDIRECT_MSG_TIMEOUT 30
//   89 // To hold msg for sleeping end devices for 30 mins:
//   90 // #define CNT_RTG_TIMER            60
//   91 // #define NWK_INDIRECT_MSG_TIMEOUT 30
//   92 // To hold msg for sleeping end devices for 30 days:
//   93 // #define CNT_RTG_TIMER            60
//   94 // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
//   95 // Maximum msgs to hold per associated device.
//   96 #define NWK_INDIRECT_MSG_MAX_PER    3
//   97 // Maximum total msgs to hold for all associated devices.
//   98 #define NWK_INDIRECT_MSG_MAX_ALL    \ 
//   99                             (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
//  100 
//  101 /*********************************************************************
//  102  * TYPEDEFS
//  103  */
//  104 
//  105 /*********************************************************************
//  106  * NWK GLOBAL VARIABLES
//  107  */
//  108 
//  109 // Variables for MAX list size

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  110 CONST uint16 gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
gNWK_MAX_DEVICE_LIST:
        DW 51
//  111 
//  112 // Variables for MAX Sleeping End Devices

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  113 CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
gNWK_MAX_SLEEPING_END_DEVICES:
        DB 45
//  114 
//  115 // Variables for MAX data buffer levels

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  116 CONST uint8 gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
gNWK_MAX_DATABUFS_WAITING:
        DB 8

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  117 CONST uint8 gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
gNWK_MAX_DATABUFS_SCHEDULED:
        DB 5

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  118 CONST uint8 gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
gNWK_MAX_DATABUFS_CONFIRMED:
        DB 5

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  119 CONST uint8 gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
gNWK_MAX_DATABUFS_TOTAL:
        DB 12
//  120 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  121 CONST uint8 gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
gNWK_INDIRECT_CNT_RTG_TMR:
        DB 1

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  122 CONST uint8 gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
gNWK_INDIRECT_MSG_MAX_PER:
        DB 3

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  123 CONST uint8 gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
gNWK_INDIRECT_MSG_MAX_ALL:
        DB 9
//  124 
//  125 // change this if using a different stack profile...
//  126 // Cskip array

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  127 uint16 *Cskip;
Cskip:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  128 
//  129 /*#if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )
//  130   uint8 CskipRtrs[1] = {0};
//  131   uint8 CskipChldrn[1] = {0};*/
//  132 #if ( STACK_PROFILE_ID == HOME_CONTROLS )

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  133   uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
CskipRtrs:
        DS 6
        REQUIRE `?<Initializer for CskipRtrs>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  134   uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
CskipChldrn:
        DS 6
        REQUIRE `?<Initializer for CskipChldrn>`
        REQUIRE __INIT_XDATA_I
//  135 /*#elif ( STACK_PROFILE_ID == GENERIC_STAR )
//  136   uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  137   uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  138 #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
//  139   uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  140   uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};*/
//  141 #endif // STACK_PROFILE_ID
//  142 
//  143 // Minimum lqi value that is required for association

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  144 uint8 gMIN_TREE_LINK_COST = MIN_LQI_COST_3;
gMIN_TREE_LINK_COST:
        DS 1
        REQUIRE `?<Initializer for gMIN_TREE_LINK_COST>`
        REQUIRE __INIT_XDATA_I
//  145 
//  146 // Statically defined Associated Device List

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  147 associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
AssociatedDevList:
        DS 918
        REQUIRE __INIT_XDATA_Z
//  148 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  149 CONST uint16 gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
gMAX_RTG_ENTRIES:
        DW 40

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  150 CONST uint16 gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
gMAX_RTG_SRC_ENTRIES:
        DW 12

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  151 CONST uint8 gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
gMAX_RREQ_ENTRIES:
        DB 8
//  152 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  153 CONST uint8 gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
gMAX_NEIGHBOR_ENTRIES:
        DB 16
//  154 
//  155  // Table of neighboring nodes (not including child nodes)

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  156 neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
neighborTable:
        DS 368
        REQUIRE __INIT_XDATA_Z
//  157 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  158 CONST uint8 gMAX_SOURCE_ROUTE = MAX_SOURCE_ROUTE;
gMAX_SOURCE_ROUTE:
        DB 12
//  159 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  160 CONST uint8 gMAX_BROADCAST_QUEUED = MAX_BROADCAST_QUEUED;
gMAX_BROADCAST_QUEUED:
        DB 10
//  161 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  162 CONST uint8 gLINK_DOWN_TRIGGER = LINK_DOWN_TRIGGER;
gLINK_DOWN_TRIGGER:
        DB 3
//  163 
//  164 // Routing table

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  165 rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
rtgTable:
        DS 280
        REQUIRE __INIT_XDATA_Z
//  166 
//  167 #if defined ( ZIGBEE_SOURCE_ROUTING )
//  168   rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
//  169   uint16 rtgSrcRelayList[MAX_SOURCE_ROUTE];
//  170 #endif
//  171 
//  172 // Table of current RREQ packets in the network

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  173 rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
rtDiscTable:
        DS 64
        REQUIRE __INIT_XDATA_Z
//  174 
//  175 // Table of data broadcast packets currently in circulation.

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  176 bcastEntry_t bcastTable[MAX_BCAST];
bcastTable:
        DS 72
        REQUIRE __INIT_XDATA_Z
//  177 
//  178 // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  179 uint8 bcastHoldHandle[MAX_BCAST];
bcastHoldHandle:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  180 uint32 bcastHoldAckMask[MAX_BCAST];
bcastHoldAckMask:
        DS 36
        REQUIRE __INIT_XDATA_Z
//  181 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  182 CONST uint8 gMAX_BCAST = MAX_BCAST;
gMAX_BCAST:
        DB 9
//  183 
//  184 // For tree addressing, this switch allows the allocation of a
//  185 // router address to an end device when end device address are
//  186 // all used up.  If this option is enabled, address space
//  187 // could be limited.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  188 CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
        DB 0
//  189 
//  190 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
//  191 // number of link status periods after the last received address conflict report
//  192 // (network status command)
//  193 CONST uint8 gNWK_CONFLICTED_ADDR_EXPIRY_TIME = NWK_CONFLICTED_ADDR_EXPIRY_TIME;
//  194 #endif
//  195 
//  196 #if defined ( ZIGBEE_FREQ_AGILITY )

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  197 CONST uint8 gNWK_FREQ_AGILITY_ALL_MAC_ERRS = NWK_FREQ_AGILITY_ALL_MAC_ERRS;
gNWK_FREQ_AGILITY_ALL_MAC_ERRS:
        DB 0
//  198 #endif
//  199 
//  200 // The time limited to one MTO RReq (Concentrator Announce) in milliseconds.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  201 CONST uint16 gMTO_RREQ_LIMIT_TIME = MTO_RREQ_LIMIT_TIME;
gMTO_RREQ_LIMIT_TIME:
        DW 1000
//  202 
//  203 // The number of seconds a MTO routing entry will last.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  204 CONST uint8 gMTO_ROUTE_EXPIRY_TIME = MTO_ROUTE_EXPIRY_TIME;
gMTO_ROUTE_EXPIRY_TIME:
        DB 255
//  205 
//  206 // Route Discovery Request Default Radius

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  207 CONST uint8 gDEFAULT_ROUTE_REQUEST_RADIUS = DEFAULT_ROUTE_REQUEST_RADIUS;
gDEFAULT_ROUTE_REQUEST_RADIUS:
        DB 30
//  208 
//  209 // Network message radius

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  210 CONST uint8 gDEF_NWK_RADIUS = DEF_NWK_RADIUS;
gDEF_NWK_RADIUS:
        DB 30
//  211 
//  212 #if ( ZSTACK_ROUTER_BUILD )

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  213 CONST uint16 gLINK_STATUS_JITTER_MASK = LINK_STATUS_JITTER_MASK;
gLINK_STATUS_JITTER_MASK:
        DW 127
//  214 #endif
//  215 
//  216 /*********************************************************************
//  217  * APS GLOBAL VARIABLES
//  218  */
//  219 
//  220 // The Maximum number of binding records
//  221 // This number is defined in BindingTable.h - change it there.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  222 CONST uint16 gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
gNWK_MAX_BINDING_ENTRIES:
        DW 4
//  223 
//  224 #if defined ( REFLECTOR )
//  225   // The Maximum number of cluster IDs in a binding record
//  226   // This number is defined in BindingTable.h - change it there.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  227   CONST uint8 gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
gMAX_BINDING_CLUSTER_IDS:
        DB 4
//  228 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  229   CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
gBIND_REC_SIZE:
        DW 14
//  230 
//  231   // Binding Table

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  232   BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
BindingTable:
        DS 56
        REQUIRE __INIT_XDATA_Z
//  233 #endif
//  234 
//  235 // Maximum number allowed in the groups table.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  236 CONST uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
gAPS_MAX_GROUPS:
        DB 16
//  237 
//  238 // APS End Device Broadcast Table
//  239 #if ( ZG_BUILD_ENDDEVICE_TYPE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  240   apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
apsEndDeviceBroadcastTable:
        DS 90
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  241   uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES:
        DS 1
        REQUIRE `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`
        REQUIRE __INIT_XDATA_I
//  242 #endif
//  243 
//  244 /*********************************************************************
//  245  * SECURITY GLOBAL VARIABLES
//  246  */
//  247 
//  248 // This is the default pre-configured key,
//  249 // change this to make a unique key
//  250 // SEC_KEY_LEN is defined in ssp.h.
//  251 
//  252 #if defined ( DEFAULT_KEY )

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  253 CONST uint8 defaultKey[SEC_KEY_LEN] = DEFAULT_KEY;
defaultKey:
        DB 1, 3, 5, 7, 9, 11, 13, 15, 0, 2, 4, 6, 8, 10, 12, 13
//  254 #else
//  255 CONST uint8 defaultKey[SEC_KEY_LEN] =
//  256 {
//  257 #if defined ( APP_TP ) || defined ( APP_TP2 )
//  258   // Key for ZigBee Conformance Testing
//  259   0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
//  260   0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
//  261 #else
//  262   // Key for In-House Testing
//  263   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
//  264   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
//  265 #endif
//  266 };
//  267 #endif
//  268 
//  269 // This is the default pre-configured Trust Center Link key,
//  270 // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  271 CONST uint8 defaultTCLinkKey[SEC_KEY_LEN] =
defaultTCLinkKey:
        DB 86, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119
        DB 119, 119
//  272 {
//  273   0x56, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
//  274   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77
//  275 };
//  276 
//  277 /*********************************************************************
//  278  * GLOBAL VARIABLES - Statistics
//  279  */
//  280 
//  281 #if defined ( PACKET_FILTER_STATS )
//  282   uint32 apsInvalidPackets = 0;
//  283   uint32 apsSecurityFailures = 0;
//  284   uint32 nwkInvalidPackets = 0;
//  285   uint32 nwkSecurityFailures = 0;
//  286 #endif
//  287 
//  288 /*********************************************************************
//  289  * STATUS STRINGS
//  290  */
//  291 #if defined ( LCD_SUPPORTED )
//  292   const char PingStr[]         = "Ping Rcvd from";
//  293   const char AssocCnfStr[]     = "Assoc Cnf";
//  294   const char SuccessStr[]      = "Success";
//  295   const char EndDeviceStr[]    = "EndDevice:";
//  296   const char ParentStr[]       = "Parent:";
//  297   const char ZigbeeCoordStr[]  = "ZigBee Coord";
//  298   const char NetworkIDStr[]    = "Network ID:";
//  299   const char RouterStr[]       = "Router:";
//  300   const char OrphanRspStr[]    = "Orphan Response";
//  301   const char SentStr[]         = "Sent";
//  302   const char FailedStr[]       = "Failed";
//  303   const char AssocRspFailStr[] = "Assoc Rsp fail";
//  304   const char AssocIndStr[]     = "Assoc Ind";
//  305   const char AssocCnfFailStr[] = "Assoc Cnf fail";
//  306   const char EnergyLevelStr[]  = "Energy Level";
//  307   const char ScanFailedStr[]   = "Scan Failed";
//  308 #endif
//  309 
//  310 /*********************************************************************
//  311  * @fn       nwk_globals_init()
//  312  *
//  313  * @brief
//  314  *
//  315  *   Initialize nwk layer globals.  These are the system defaults and
//  316  *   should be changed by the user here.  The default definitions are
//  317  *   defined in nwk.h or NLMEDE.h.
//  318  *
//  319  * @param   none
//  320  *
//  321  * @return  none
//  322  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  323 void nwk_globals_init( void )
nwk_globals_init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function nwk_globals_init
//  324 {
        FUNCALL nwk_globals_init, AddrMgrInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_globals_init, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_globals_init, RTG_FillCSkipTable
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_globals_init, NwkFreqAgilityInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  325   AddrMgrInit( NWK_MAX_ADDRESSES );
        ; Setup parameters for call to function AddrMgrInit
        MOV     R2,#0x38
        MOV     R3,#0x0
        LCALL   ??AddrMgrInit?relay
//  326 
//  327 #if !defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
//  328   if ( ZSTACK_ROUTER_BUILD )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??nwk_globals_init_0
        XRL     A,#0x1
        JNZ     ??nwk_globals_init_1
//  329   {
//  330     // Initialize the Cskip Table
//  331     Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
??nwk_globals_init_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xc
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#Cskip
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  332     RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
        ; Setup parameters for call to function RTG_FillCSkipTable
        MOV     DPTR,#Cskip
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 2)
        MOV     R1,#0x5
        MOV     R4,#(CskipRtrs & 0xff)
        MOV     R5,#((CskipRtrs >> 8) & 0xff)
        MOV     R2,#(CskipChldrn & 0xff)
        MOV     R3,#((CskipChldrn >> 8) & 0xff)
        LCALL   ??RTG_FillCSkipTable?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
//  333   }
//  334 #endif
//  335 
//  336   // To compile out the Link Status Feature, set NWK_LINK_STATUS_PERIOD
//  337   // to 0 (compiler flag).
//  338   if ( ZSTACK_ROUTER_BUILD && NWK_LINK_STATUS_PERIOD )
//  339   {
//  340     NLME_InitLinkStatus();
//  341   }
//  342 
//  343 #if defined ( ZIGBEE_FREQ_AGILITY )
//  344   NwkFreqAgilityInit();
??nwk_globals_init_1:
        ; Setup parameters for call to function NwkFreqAgilityInit
        LCALL   ??NwkFreqAgilityInit?relay
        CFI EndBlock cfiBlock0
//  345 #endif
//  346 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  347 
//  348 /*********************************************************************
//  349  * @fn       NIB_init()
//  350  *
//  351  * @brief
//  352  *
//  353  *   Initialize attribute values in NIB
//  354  *
//  355  * @param   none
//  356  *
//  357  * @return  none
//  358  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  359 void NIB_init()
NIB_init:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function NIB_init
//  360 {
        FUNCALL NIB_init, osal_rand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NIB_init, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NIB_init, sAddrExtCpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NIB_init, NLME_InitTreeAddressing
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  361   _NIB.SequenceNum = LO_UINT16(osal_rand());
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     A,R2
        MOV     DPTR,#_NIB
        MOVX    @DPTR,A
//  362 
//  363   _NIB.nwkProtocolVersion = ZB_PROT_VERS;
        MOV     A,#0x2
        MOV     DPTR,#(_NIB + 17)
        MOVX    @DPTR,A
//  364   _NIB.MaxDepth = MAX_NODE_DEPTH;
        MOV     A,#0x5
        MOV     DPTR,#(_NIB + 4)
        MOVX    @DPTR,A
//  365 
//  366 #if ( NWK_MODE == NWK_MODE_MESH )
//  367   _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
        MOV     A,#0xf
        MOV     DPTR,#(_NIB + 40)
        MOVX    @DPTR,A
//  368   _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
        MOV     DPTR,#(_NIB + 41)
        MOVX    @DPTR,A
//  369 #endif
//  370 
//  371   // BROADCAST SETTINGS:
//  372   // *******************
//  373   //   Broadcast Delivery Time
//  374   //     - set to multiples of 100ms
//  375   //     - should be 500ms more than the retry time
//  376   //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
//  377   //   Passive Ack Timeout
//  378   //     - set to multiples of 100ms
//  379   _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
        MOV     DPTR,#zgBcastDeliveryTime
        MOVX    A,@DPTR
        MOV     DPTR,#(_NIB + 7)
        MOVX    @DPTR,A
//  380   _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
        MOV     DPTR,#zgPassiveAckTimeout
        MOVX    A,@DPTR
        MOV     DPTR,#(_NIB + 1)
        MOVX    @DPTR,A
//  381   _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
        MOV     DPTR,#zgMaxBcastRetires
        MOVX    A,@DPTR
        MOV     DPTR,#(_NIB + 2)
        MOVX    @DPTR,A
//  382 
//  383   _NIB.ReportConstantCost = 0;
        CLR     A
        MOV     DPTR,#(_NIB + 8)
        MOVX    @DPTR,A
//  384   _NIB.RouteDiscRetries = 0;
        MOV     DPTR,#(_NIB + 9)
        MOVX    @DPTR,A
//  385   _NIB.SecureAllFrames = USE_NWK_SECURITY;
        MOV     DPTR,#(_NIB + 11)
        MOVX    @DPTR,A
//  386   _NIB.nwkAllFresh = NWK_ALL_FRESH;
        MOV     A,#0x1
        MOV     DPTR,#(_NIB + 104)
        MOVX    @DPTR,A
//  387 
//  388   if ( ZG_SECURE_ENABLED )
//  389   {
//  390     _NIB.SecurityLevel = SECURITY_LEVEL;
//  391   }
//  392   else
//  393   {
//  394     _NIB.SecurityLevel = 0;
        CLR     A
        MOV     DPTR,#(_NIB + 12)
        MOVX    @DPTR,A
//  395   }
//  396 
//  397 #if defined ( ZIGBEEPRO )
//  398   _NIB.SymLink = FALSE;
//  399 #else
//  400   _NIB.SymLink = TRUE;
        MOV     A,#0x1
        MOV     DPTR,#(_NIB + 13)
        MOVX    @DPTR,A
//  401 #endif
//  402 
//  403   _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     DPTR,#(_NIB + 14)
        MOVX    @DPTR,A
//  404 
//  405   _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
        MOV     DPTR,#zgIndirectMsgTimeout
        MOVX    A,@DPTR
        MOV     DPTR,#(_NIB + 15)
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  406 
//  407   _NIB.RouteDiscoveryTime = zgRouteDiscoveryTime;
        MOV     DPTR,#zgRouteDiscoveryTime
        MOVX    A,@DPTR
        MOV     DPTR,#(_NIB + 18)
        MOVX    @DPTR,A
//  408   _NIB.RouteExpiryTime = zgRouteExpiryTime;
        MOV     DPTR,#zgRouteExpiryTime
        MOVX    A,@DPTR
        MOV     DPTR,#(_NIB + 19)
        MOVX    @DPTR,A
//  409 
//  410   _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV     DPTR,#(_NIB + 20)
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  411   _NIB.nwkLogicalChannel = 0;
        CLR     A
        MOV     DPTR,#(_NIB + 22)
        MOVX    @DPTR,A
//  412   _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
        MOV     DPTR,#(_NIB + 23)
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  413   osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#((_NIB + 25) & 0xff)
        MOV     R3,#(((_NIB + 25) >> 8) & 0xff)
        LCALL   ??osal_memset?relay
//  414   _NIB.nwkPanId = INVALID_NODE_ADDR;
        MOV     DPTR,#(_NIB + 33)
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  415 
//  416   osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#(zgExtendedPANID & 0xff)
        MOV     R5,#((zgExtendedPANID >> 8) & 0xff)
        MOV     R2,#((_NIB + 53) & 0xff)
        MOV     R3,#(((_NIB + 53) >> 8) & 0xff)
        LCALL   ??sAddrExtCpy?relay
//  417 
//  418   _NIB.nwkKeyLoaded = FALSE;
        CLR     A
        MOV     DPTR,#(_NIB + 61)
        MOVX    @DPTR,A
//  419 
//  420 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
//  421   _NIB.nwkAddrAlloc  = NWK_ADDRESSING_STOCHASTIC;
//  422   _NIB.nwkUniqueAddr = FALSE;
//  423 #else
//  424   _NIB.nwkAddrAlloc  = NWK_ADDRESSING_DISTRIBUTED;
        MOV     DPTR,#(_NIB + 96)
        MOVX    @DPTR,A
//  425   _NIB.nwkUniqueAddr = TRUE;
        MOV     A,#0x1
        MOV     DPTR,#(_NIB + 97)
        MOVX    @DPTR,A
//  426 #endif
//  427 
//  428   _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD;
        CLR     A
        MOV     DPTR,#(_NIB + 98)
        MOVX    @DPTR,A
//  429   _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
        MOV     A,#0x3
        MOV     DPTR,#(_NIB + 99)
        MOVX    @DPTR,A
//  430 
//  431   //MTO and source routing
//  432   _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
        MOV     DPTR,#zgConcentratorDiscoveryTime
        MOVX    A,@DPTR
        MOV     DPTR,#(_NIB + 102)
        MOVX    @DPTR,A
//  433   _NIB.nwkIsConcentrator = zgConcentratorEnable;
        MOV     DPTR,#zgConcentratorEnable
        MOVX    A,@DPTR
        MOV     DPTR,#(_NIB + 101)
        MOVX    @DPTR,A
//  434   _NIB.nwkConcentratorRadius = zgConcentratorRadius;
        MOV     DPTR,#zgConcentratorRadius
        MOVX    A,@DPTR
        MOV     DPTR,#(_NIB + 103)
        MOVX    @DPTR,A
//  435 
//  436 #if defined ( ZIGBEE_MULTICAST )
//  437   _NIB.nwkUseMultiCast = TRUE;
//  438 #else
//  439   _NIB.nwkUseMultiCast = FALSE;
        CLR     A
        MOV     DPTR,#(_NIB + 100)
        MOVX    @DPTR,A
//  440 #endif
//  441   _NIB.nwkManagerAddr = 0x0000;
        MOV     DPTR,#(_NIB + 105)
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  442   _NIB.nwkUpdateId = 0;
        MOV     DPTR,#(_NIB + 109)
        MOVX    @DPTR,A
//  443   _NIB.nwkTotalTransmissions = 0;
        MOV     DPTR,#(_NIB + 107)
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  444 
//  445   if ( ZSTACK_ROUTER_BUILD )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??NIB_init_0
        XRL     A,#0x1
        JNZ     ??NIB_init_1
//  446   {
//  447 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
//  448     NLME_InitStochasticAddressing();
//  449 #else
//  450     NLME_InitTreeAddressing();
??NIB_init_0:
        ; Setup parameters for call to function NLME_InitTreeAddressing
        LCALL   ??NLME_InitTreeAddressing?relay
//  451 #endif
//  452   }
//  453 }
??NIB_init_1:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock2
//  454 
//  455 /*********************************************************************
//  456  * @fn       nwk_Status()
//  457  *
//  458  * @brief
//  459  *
//  460  *   Status report.
//  461  *
//  462  * @param   statusCode
//  463  * @param   statusValue
//  464  *
//  465  * @return  none
//  466  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  467 void nwk_Status( uint16 statusCode, uint16 statusValue )
nwk_Status:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function nwk_Status
//  468 {
        ; Saved register size: 0
        ; Auto size: 0
//  469 #if defined ( LCD_SUPPORTED )
//  470   switch ( statusCode )
//  471   {
//  472     case NWK_STATUS_COORD_ADDR:
//  473       if ( ZSTACK_ROUTER_BUILD )
//  474       {
//  475         HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
//  476         HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_LINE_2 );
//  477         BuzzerControl( BUZZER_BLIP );
//  478       }
//  479       break;
//  480 
//  481     case NWK_STATUS_ROUTER_ADDR:
//  482       if ( ZSTACK_ROUTER_BUILD )
//  483       {
//  484         HalLcdWriteStringValue( (char*)RouterStr, statusValue, 16, HAL_LCD_LINE_1 );
//  485       }
//  486       break;
//  487 
//  488     case NWK_STATUS_ORPHAN_RSP:
//  489       if ( ZSTACK_ROUTER_BUILD )
//  490       {
//  491         if ( statusValue == ZSuccess )
//  492           HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
//  493         else
//  494           HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
//  495       }
//  496       break;
//  497 
//  498     case NWK_ERROR_ASSOC_RSP:
//  499       if ( ZSTACK_ROUTER_BUILD )
//  500       {
//  501         HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
//  502         HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
//  503       }
//  504       break;
//  505 
//  506     case NWK_STATUS_ED_ADDR:
//  507       if ( ZSTACK_END_DEVICE_BUILD )
//  508       {
//  509         HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_LINE_1 );
//  510       }
//  511       break;
//  512 
//  513     case NWK_STATUS_PARENT_ADDR:
//  514             HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_LINE_2 );
//  515       break;
//  516 
//  517     case NWK_STATUS_ASSOC_CNF:
//  518       HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
//  519       break;
//  520 
//  521     case NWK_ERROR_ASSOC_CNF_DENIED:
//  522       HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
//  523       HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
//  524       break;
//  525 
//  526     case NWK_ERROR_ENERGY_SCAN_FAILED:
//  527       HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
//  528       break;
//  529   }
//  530 #endif
//  531 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
//  532 
//  533 /*********************************************************************
//  534  * @fn       nwk_UpdateStatistics()
//  535  *
//  536  * @brief   Update network layer statistic counters
//  537  *
//  538  * @param   statisticCode
//  539  *
//  540  * @return  none
//  541  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  542 void nwk_UpdateStatistics( uint8 statisticCode )
nwk_UpdateStatistics:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function nwk_UpdateStatistics
//  543 {
        ; Saved register size: 0
        ; Auto size: 0
//  544 #if defined ( PACKET_FILTER_STATS )
//  545   switch ( statisticCode )
//  546   {
//  547     case STAT_NWK_INVALID_PACKET:
//  548       nwkInvalidPackets++;
//  549       break;
//  550 
//  551     case STAT_NWK_SECURITY_FAILURE:
//  552       nwkInvalidPackets++;
//  553       nwkSecurityFailures++;
//  554       break;
//  555 
//  556     case STAT_APS_INVALID_PACKET:
//  557       apsInvalidPackets++;
//  558       break;
//  559 
//  560     case STAT_APS_SECURITY_FAILURE:
//  561       apsSecurityFailures++;
//  562       break;
//  563   }
//  564 #endif
//  565 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock4

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for CskipRtrs>`:
        DB 6, 6, 6, 6, 6, 0

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for CskipChldrn>`:
        DB 20, 20, 20, 20, 20, 0

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for gMIN_TREE_LINK_COST>`:
        DB 6

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`:
        DB 18

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??nwk_globals_init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    nwk_globals_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??NIB_init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    NIB_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??nwk_Status?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    nwk_Status

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??nwk_UpdateStatistics?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    nwk_UpdateStatistics

        END
//  566 
//  567 /*********************************************************************
//  568 *********************************************************************/
// 
//   345 bytes in segment BANKED_CODE
//    24 bytes in segment BANK_RELAYS
//    67 bytes in segment CODE_C
//    14 bytes in segment XDATA_I
//    14 bytes in segment XDATA_ID
// 1 895 bytes in segment XDATA_Z
// 
//   450 bytes of CODE  memory
// 1 909 bytes of XDATA memory
//
//Errors: none
//Warnings: none
