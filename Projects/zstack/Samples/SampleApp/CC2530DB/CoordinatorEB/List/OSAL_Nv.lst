###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                16/Sep/2011  10:52:32 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k¶¨Ê±¸´Î»¼ì²â\Components\osal\mcu\cc2530\OSAL_Nv.c #
#    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"   #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"  #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Documents and           #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Com #
#                          ponents\osal\mcu\cc2530\OSAL_Nv.c" -D ZTOOL_P1 -D  #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D              #
#                          BUILD_ALL_DEVICES -D xLCD_SUPPORTED=DEBUG -D       #
#                          SOFT_SATRT -D ZDO_COORDINATOR -D NV_INIT -D        #
#                          RTR_NWK -lC "C:\Documents and                      #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\Coordinato #
#                          rEB\List\" -lA "C:\Documents and                   #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\Coordinato #
#                          rEB\List\" --diag_suppress Pe001,Pa010 -o          #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\CoordinatorEB\Obj\" -e                     #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\" -I       #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\SOURCE\" -I "C:\Documents and           #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Z #
#                          MAIN\TI2530DB\" -I "C:\Documents and               #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MT\" -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\INCLUDE\" -I "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I       #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\"  #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"   #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"  #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"   #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"   #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"    #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I     #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDA #
#                          TA\" -I "C:\Documents and                          #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\INCLUDE\" -I "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I            #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\sr #
#                          f04\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"  #
#                          -I D:\IAR\8051\INC\ -I D:\IAR\8051\INC\CLIB\ -Ohz  #
#    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\CoordinatorEB\List\OSAL_Nv.lst              #
#    Object file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\CoordinatorEB\Obj\OSAL_Nv.r51               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2010-08-18 18:14:18 -0700 (Wed, 18 Aug 2010) $
      4            Revision:       $Revision: 23450 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /**************************************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id is to
     43                be reserved for use by this module.
     44          **************************************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "OSAL_Nv.h"
     54          #include "ZComDef.h"
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     61          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     62          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     63          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     64          
     65          #define OSAL_NV_ACTIVE          0x00
     66          #define OSAL_NV_ERASED          0xFF
     67          #define OSAL_NV_ERASED_ID       0xFFFF
     68          #define OSAL_NV_ZEROED_ID       0x0000
     69          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     70          #define OSAL_NV_SOURCE_ID       0x8000
     71          
     72          // In case pages 0-1 are ever used, define a null page value.
     73          #define OSAL_NV_PAGE_NULL       0
     74          
     75          // In case item Id 0 is ever used, define a null item value.
     76          #define OSAL_NV_ITEM_NULL       0
     77          
     78          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     79          
     80          #define OSAL_NV_PAGE_HDR_OFFSET 0
     81          
     82          #define OSAL_NV_MAX_HOT         3

   \                                 In  segment XDATA_ROM_C, align 1
     83          static const uint16 hotIds[OSAL_NV_MAX_HOT] = {
   \                     hotIds:
   \   000000   82003A00     DW 130, 58, 59
   \            3B00    
     84            ZCD_NV_NWKKEY,
     85            ZCD_NV_NWK_ACTIVE_KEY_INFO,
     86            ZCD_NV_NWK_ALTERN_KEY_INFO,
     87          };  
     88          
     89          /*********************************************************************
     90           * MACROS
     91           */
     92          
     93          #define OSAL_NV_CHECK_BUS_VOLTAGE  HalAdcCheckVdd(VDD_MIN_NV)
     94          
     95          #define OSAL_NV_DATA_SIZE( LEN )                      \
     96            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE))) ? \
     97                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))  : \
     98                       ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE))
     99          
    100          #define OSAL_NV_ITEM_SIZE( LEN )                                         \
    101            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE - OSAL_NV_HDR_SIZE))) ? \
    102                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))                     : \
    103            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE))
    104          
    105          #define COMPACT_PAGE_CLEANUP( COM_PG ) st ( \
    106            /* In order to recover from a page compaction that is interrupted,\
    107             * the logic in osal_nv_init() depends upon the following order:\
    108             * 1. State of the target of compaction is changed to ePgInUse.\
    109             * 2. Compacted page is erased.\
    110             */\
    111            setPageUse( pgRes, TRUE );  /* Mark the reserve page as being in use. */\
    112            erasePage( (COM_PG) ); \
    113            \
    114            pgRes = (COM_PG);           /* Set the reserve page to be the newly erased page. */\
    115          )
    116          
    117          /*********************************************************************
    118           * TYPEDEFS
    119           */
    120          
    121          typedef struct
    122          {
    123            uint16 id;
    124            uint16 len;   // Enforce Flash-WORD size on len.
    125            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    126            uint16 stat;  // Item status.
    127          } osalNvHdr_t;
    128          // Struct member offsets.
    129          #define OSAL_NV_HDR_ID    0
    130          #define OSAL_NV_HDR_LEN   2
    131          #define OSAL_NV_HDR_CHK   4
    132          #define OSAL_NV_HDR_STAT  6
    133          
    134          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    135          #define OSAL_NV_HDR_SIZE  8
    136          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    137          
    138          typedef struct
    139          {
    140            uint16 active;
    141            uint16 inUse;
    142            uint16 xfer;
    143            uint16 spare;
    144          } osalNvPgHdr_t;
    145          // Struct member offsets.
    146          #define OSAL_NV_PG_ACTIVE 0
    147          #define OSAL_NV_PG_INUSE  2
    148          #define OSAL_NV_PG_XFER   4
    149          #define OSAL_NV_PG_SPARE  6
    150          
    151          #define OSAL_NV_PAGE_HDR_SIZE  8
    152          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    153          
    154          typedef enum
    155          {
    156            eNvXfer,
    157            eNvZero
    158          } eNvHdrEnum;
    159          
    160          typedef enum
    161          {
    162            ePgActive,
    163            ePgInUse,
    164            ePgXfer,
    165            ePgSpare
    166          } ePgHdrEnum;
    167          
    168          /*********************************************************************
    169           * GLOBAL VARIABLES
    170           */
    171          
    172          #ifndef OAD_KEEP_NV_PAGES
    173          // When NV pages are to remain intact during OAD download,
    174          // the image itself should not include NV pages.
    175          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    176          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    177          #pragma required=_nvBuf
    178          #endif // OAD_KEEP_NV_PAGES
    179          
    180          /*********************************************************************
    181           * LOCAL VARIABLES
    182           */
    183          
    184          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvBuf
    186          
    187          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    191          
    192          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    194          
    195          // NV page and offsets for hot items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          static uint8 hotPg[OSAL_NV_MAX_HOT];
   \                     hotPg:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          static uint16 hotOff[OSAL_NV_MAX_HOT];
   \                     hotOff:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    198          
    199          /*********************************************************************
    200           * LOCAL FUNCTIONS
    201           */
    202          
    203          static uint8  initNV( void );
    204          
    205          static void   setPageUse( uint8 pg, uint8 inUse );
    206          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    207          static void   erasePage( uint8 pg );
    208          static uint8  compactPage( uint8 srcPg, uint16 skipId );
    209          
    210          static uint16 findItem( uint16 id );
    211          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    212          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    213          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk );
    214          
    215          static uint16 calcChkB( uint16 len, uint8 *buf );
    216          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len );
    217          
    218          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    219          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    220          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    221          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    222          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    223          
    224          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    225          static uint8  hotItem(uint16 id);
    226          static void   hotItemUpdate(uint8 pg, uint16 off, uint16 id);
    227          
    228          /*********************************************************************
    229           * @fn      initNV
    230           *
    231           * @brief   Initialize the NV flash pages.
    232           *
    233           * @param   none
    234           *
    235           * @return  TRUE
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          static uint8 initNV( void )
   \                     initNV:
    238          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    239            osalNvPgHdr_t pgHdr;
    240            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   7F00         MOV     R7,#0x0
    241            uint8 findDups = FALSE;
   \   00000C   8F..         MOV     ?V0 + 0,R7
    242            uint8 pg;
    243          
    244            pgRes = OSAL_NV_PAGE_NULL;
   \   00000E   E4           CLR     A
   \   00000F   90....       MOV     DPTR,#pgRes
   \   000012   F0           MOVX    @DPTR,A
    245          
    246            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000013   7E79         MOV     R6,#0x79
    247            {
    248              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \                     ??initNV_0:
   \   000015                ; Setup parameters for call to function HalFlashRead
   \   000015   75..08       MOV     ?V0 + 2,#0x8
   \   000018   75..00       MOV     ?V0 + 3,#0x0
   \   00001B   78..         MOV     R0,#?V0 + 2
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   AC82         MOV     R4,DPL
   \   000027   AD83         MOV     R5,DPH
   \   000029   7A00         MOV     R2,#0x0
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   EE           MOV     A,R6
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
    249          
    250              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   64FF         XRL     A,#0xff
   \   00003E   7004         JNZ     ??initNV_1
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   64FF         XRL     A,#0xff
   \                     ??initNV_1:
   \   000044   7013         JNZ     ??initNV_2
    251              {
    252                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   000046   90....       MOV     DPTR,#pgRes
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   7004         JNZ     ??initNV_3
    253                {
    254                  pgRes = pg;
   \   00004C   EE           MOV     A,R6
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   801B         SJMP    ??initNV_4
    255                }
    256                else
    257                {
    258                  setPageUse( pg, TRUE );
   \                     ??initNV_3:
   \   000050                ; Setup parameters for call to function setPageUse
   \   000050   7A01         MOV     R2,#0x1
   \   000052   EE           MOV     A,R6
   \   000053   F9           MOV     R1,A
   \   000054   12....       LCALL   ??setPageUse?relay
   \   000057   8012         SJMP    ??initNV_4
    259                }
    260              }
    261              // An Xfer from this page was in progress.
    262              else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_2:
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   64FF         XRL     A,#0xff
   \   000061   7004         JNZ     ??initNV_5
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   64FF         XRL     A,#0xff
   \                     ??initNV_5:
   \   000067   6002         JZ      ??initNV_4
    263              {
    264                oldPg = pg;
   \   000069   EE           MOV     A,R6
   \   00006A   FF           MOV     R7,A
    265              }
    266            }
   \                     ??initNV_4:
   \   00006B   0E           INC     R6
   \   00006C   EE           MOV     A,R6
   \   00006D   C3           CLR     C
   \   00006E   947F         SUBB    A,#0x7f
   \   000070   40A3         JC      ??initNV_0
    267          
    268            // If a page compaction was interrupted before the old page was erased.
    269            if ( oldPg != OSAL_NV_PAGE_NULL )
   \   000072   EF           MOV     A,R7
   \   000073   90....       MOV     DPTR,#pgRes
   \   000076   601E         JZ      ??initNV_6
    270            {
    271              /* Interrupted compaction before the target of compaction was put in use;
    272               * so erase the target of compaction and start again.
    273               */
    274              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   000078   E0           MOVX    A,@DPTR
   \   000079   600F         JZ      ??initNV_7
    275              {
    276                erasePage( pgRes );
   \   00007B                ; Setup parameters for call to function erasePage
   \   00007B   F9           MOV     R1,A
   \   00007C   12....       LCALL   ??erasePage?relay
    277                (void)compactPage( oldPg, OSAL_NV_ITEM_NULL );
   \   00007F                ; Setup parameters for call to function compactPage
   \   00007F   7A00         MOV     R2,#0x0
   \   000081   7B00         MOV     R3,#0x0
   \   000083   EF           MOV     A,R7
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??compactPage?relay
   \   000088   8013         SJMP    ??initNV_8
    278              }
    279              /* Interrupted compaction after the target of compaction was put in use,
    280               * but before the old page was erased; so erase it now and create a new reserve page.
    281               */
    282              else
    283              {
    284                erasePage( oldPg );
   \                     ??initNV_7:
   \   00008A                ; Setup parameters for call to function erasePage
   \   00008A   EF           MOV     A,R7
   \   00008B   F9           MOV     R1,A
   \   00008C   12....       LCALL   ??erasePage?relay
    285                pgRes = oldPg;
   \   00008F   EF           MOV     A,R7
   \   000090   90....       MOV     DPTR,#pgRes
   \   000093   F0           MOVX    @DPTR,A
   \   000094   8007         SJMP    ??initNV_8
    286              }
    287            }
    288            else if ( pgRes != OSAL_NV_PAGE_NULL )
   \                     ??initNV_6:
   \   000096   E0           MOVX    A,@DPTR
   \   000097   6004         JZ      ??initNV_8
    289            {
    290              erasePage( pgRes );  // The last page erase could have been interrupted by a power-cycle.
   \   000099                ; Setup parameters for call to function erasePage
   \   000099   F9           MOV     R1,A
   \   00009A   12....       LCALL   ??erasePage?relay
    291            }
    292            /* else if there is no reserve page, COMPACT_PAGE_CLEANUP() must have succeeded to put the old
    293             * reserve page (i.e. the target of the compacted items) into use but got interrupted by a reset
    294             * while trying to erase the page to be compacted. Such a page should only contain duplicate items
    295             * (i.e. all items will be marked 'Xfer') and thus should have the lost count equal to the page
    296             * size less the page header.
    297             */
    298          
    299            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_8:
   \   00009D   7E79         MOV     R6,#0x79
    300            {
    301              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    302              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \                     ??initNV_9:
   \   00009F                ; Setup parameters for call to function initPage
   \   00009F   AC..         MOV     R4,?V0 + 0
   \   0000A1   7A00         MOV     R2,#0x0
   \   0000A3   7B00         MOV     R3,#0x0
   \   0000A5   EE           MOV     A,R6
   \   0000A6   F9           MOV     R1,A
   \   0000A7   12....       LCALL   ??initPage?relay
   \   0000AA   EA           MOV     A,R2
   \   0000AB   7001         JNZ     ??initNV_10
   \   0000AD   EB           MOV     A,R3
   \                     ??initNV_10:
   \   0000AE   6005         JZ      ??initNV_11
    303              {
    304                findDups = TRUE;
   \   0000B0   75..01       MOV     ?V0 + 0,#0x1
    305                pg = (OSAL_NV_PAGE_BEG - 1);  // Pre-decrement so that loop increment will start over at zero.
   \   0000B3   7E78         MOV     R6,#0x78
    306                continue;
    307              }
    308            }
   \                     ??initNV_11:
   \   0000B5   0E           INC     R6
   \   0000B6   EE           MOV     A,R6
   \   0000B7   C3           CLR     C
   \   0000B8   947F         SUBB    A,#0x7f
   \   0000BA   40E3         JC      ??initNV_9
    309          
    310            if (findDups)
   \   0000BC   E5..         MOV     A,?V0 + 0
   \   0000BE   6014         JZ      ??initNV_12
    311            {
    312              // Final pass to calculate page lost after invalidating duplicate items.
    313              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   0000C0   7E79         MOV     R6,#0x79
    314              {
    315                (void)initPage( pg, OSAL_NV_ITEM_NULL, FALSE );
   \                     ??initNV_13:
   \   0000C2                ; Setup parameters for call to function initPage
   \   0000C2   7C00         MOV     R4,#0x0
   \   0000C4   7A00         MOV     R2,#0x0
   \   0000C6   7B00         MOV     R3,#0x0
   \   0000C8   EE           MOV     A,R6
   \   0000C9   F9           MOV     R1,A
   \   0000CA   12....       LCALL   ??initPage?relay
    316              }
   \   0000CD   0E           INC     R6
   \   0000CE   EE           MOV     A,R6
   \   0000CF   C3           CLR     C
   \   0000D0   947F         SUBB    A,#0x7f
   \   0000D2   40EE         JC      ??initNV_13
    317            }
    318          
    319            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_12:
   \   0000D4   90....       MOV     DPTR,#pgRes
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   704A         JNZ     ??initNV_14
    320            {
    321              uint8 idx, mostLost = 0;
   \   0000DA   7D00         MOV     R5,#0x0
    322          
    323              for ( idx = 0; idx < OSAL_NV_PAGES_USED; idx++ )
   \   0000DC   7C00         MOV     R4,#0x0
    324              {
    325                // Is this the page that was compacted?
    326                if (pgLost[idx] == (OSAL_NV_PAGE_SIZE - OSAL_NV_PAGE_HDR_SIZE))
   \                     ??initNV_15:
   \   0000DE   EC           MOV     A,R4
   \   0000DF   C3           CLR     C
   \   0000E0   33           RLC     A
   \   0000E1   F8           MOV     R0,A
   \   0000E2   E4           CLR     A
   \   0000E3   33           RLC     A
   \   0000E4   F9           MOV     R1,A
   \   0000E5   E8           MOV     A,R0
   \   0000E6   24..         ADD     A,#(pgLost & 0xff)
   \   0000E8   F582         MOV     DPL,A
   \   0000EA   E9           MOV     A,R1
   \   0000EB   34..         ADDC    A,#((pgLost >> 8) & 0xff)
   \   0000ED   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0000F0   74F8         MOV     A,#-0x8
   \   0000F2   6A           XRL     A,R2
   \   0000F3   7003         JNZ     ??initNV_16
   \   0000F5   7407         MOV     A,#0x7
   \   0000F7   6B           XRL     A,R3
   \                     ??initNV_16:
   \   0000F8   7004         JNZ     ??initNV_17
    327                {
    328                  mostLost = idx;
   \   0000FA   EC           MOV     A,R4
   \   0000FB   FD           MOV     R5,A
    329                  break;
   \   0000FC   801B         SJMP    ??initNV_18
    330                }
    331                /* This check is not expected to be necessary because the above test should always succeed
    332                 * with an early loop exit.
    333                 */
    334                else if (pgLost[idx] > pgLost[mostLost]) 
   \                     ??initNV_17:
   \   0000FE   ED           MOV     A,R5
   \   0000FF   C3           CLR     C
   \   000100   33           RLC     A
   \   000101   F8           MOV     R0,A
   \   000102   E4           CLR     A
   \   000103   33           RLC     A
   \   000104   F9           MOV     R1,A
   \   000105   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000108   C3           CLR     C
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   9A           SUBB    A,R2
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   9B           SUBB    A,R3
   \   00010E   5002         JNC     ??initNV_19
    335                {
    336                  mostLost = idx;
   \   000110   EC           MOV     A,R4
   \   000111   FD           MOV     R5,A
    337                }
    338              }
   \                     ??initNV_19:
   \   000112   0C           INC     R4
   \   000113   EC           MOV     A,R4
   \   000114   C3           CLR     C
   \   000115   9406         SUBB    A,#0x6
   \   000117   40C5         JC      ??initNV_15
    339          
    340              pgRes = mostLost + OSAL_NV_PAGE_BEG;
   \                     ??initNV_18:
   \   000119   7479         MOV     A,#0x79
   \   00011B   2D           ADD     A,R5
   \   00011C   90....       MOV     DPTR,#pgRes
   \   00011F   F0           MOVX    @DPTR,A
    341              erasePage( pgRes );  // The last page erase had been interrupted by a power-cycle.
   \   000120                ; Setup parameters for call to function erasePage
   \   000120   F9           MOV     R1,A
   \   000121   12....       LCALL   ??erasePage?relay
    342            }
    343          
    344            return TRUE;
   \                     ??initNV_14:
   \   000124   7901         MOV     R1,#0x1
   \   000126   7408         MOV     A,#0x8
   \   000128   80..         SJMP    ??Subroutine48_0
    345          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine49_0
   \   000003                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E8           MOV     A,R0
   \   000001   24..         ADD     A,#(pgLost & 0xff)
   \   000003   F582         MOV     DPL,A
   \   000005   E9           MOV     A,R1
   \   000006   34..         ADDC    A,#((pgLost >> 8) & 0xff)
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   12....       LCALL   ??HalFlashRead?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine60_0
   \   000002                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    346          
    347          /*********************************************************************
    348           * @fn      setPageUse
    349           *
    350           * @brief   Set page header active/inUse state according to 'inUse'.
    351           *
    352           * @param   pg - Valid NV page to verify and init.
    353           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    354           *
    355           * @return  none
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    358          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV     A,#-0x8
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    359            osalNvPgHdr_t pgHdr;
    360          
    361            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
    362          
    363            if ( inUse )
   \   000013   EA           MOV     A,R2
   \   000014   6008         JZ      ??setPageUse_0
    364            {
    365              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E4           CLR     A
   \   00001C   8007         SJMP    ??setPageUse_1
    366            }
    367            else
    368            {
    369              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   74FF         MOV     A,#-0x1
    370            }
   \                     ??setPageUse_1:
   \   000025   12....       LCALL   ??Subroutine50_0 & 0xFFFF
    371          
    372            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??CrossCallReturnLabel_76:
   \   000028   7A00         MOV     R2,#0x0
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   ??writeWord?relay
    373          }
   \   00002F   7408         MOV     A,#0x8
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034                REQUIRE ?Subroutine40
   \   000034                ; // Fall through to label ?Subroutine40

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine51_0
   \   000002                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function writeWordH
   \   000001                ; Setup parameters for call to function writeWord
   \   000001                ; Setup parameters for call to function writeWord
   \   000001                ; Setup parameters for call to function writeWord
   \   000001                ; Setup parameters for call to function writeWord
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AC82         MOV     R4,DPL
   \   000009   AD83         MOV     R5,DPH
   \   00000B   22           RET
    374          
    375          /*********************************************************************
    376           * @fn      initPage
    377           *
    378           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    379           *
    380           * @param   pg - Valid NV page to verify and init.
    381           * @param   id - Valid NV item Id to use function as a "findItem".
    382           *               If set to NULL then just perform the page initialization.
    383           * @param   findDups - TRUE on recursive call from initNV() to find and zero-out duplicate items
    384           *                     left from a write that is interrupted by a reset/power-cycle.
    385           *                     FALSE otherwise.
    386           *
    387           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    388           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    391          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 4,R1
   \   00000C   8A..         MOV     ?V0 + 6,R2
   \   00000E   8B..         MOV     ?V0 + 7,R3
   \   000010   8C..         MOV     ?V0 + 5,R4
    392            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000012   75..08       MOV     ?V0 + 2,#0x8
   \   000015   75..00       MOV     ?V0 + 3,#0x0
    393            uint16 sz, lost = 0;
   \   000018   7E00         MOV     R6,#0x0
   \   00001A   7F00         MOV     R7,#0x0
    394            osalNvHdr_t hdr;
    395          
    396            do
    397            {
    398              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??initPage_0:
   \   00001C                ; Setup parameters for call to function HalFlashRead
   \   00001C   75..08       MOV     ?V0 + 0,#0x8
   \   00001F   75..00       MOV     ?V0 + 1,#0x0
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   AC82         MOV     R4,DPL
   \   00002E   AD83         MOV     R5,DPH
   \   000030   AA..         MOV     R2,?V0 + 2
   \   000032   AB..         MOV     R3,?V0 + 3
   \   000034   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
    399          
    400              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   E0           MOVX    A,@DPTR
   \   000041   64FF         XRL     A,#0xff
   \   000043   7004         JNZ     ??initPage_1
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   64FF         XRL     A,#0xff
   \                     ??initPage_1:
   \   000049   7003         JNZ     $+5
   \   00004B   02....       LJMP    ??initPage_2 & 0xFFFF
    401              {
    402                break;
    403              }
    404          
    405              // Get the actual size in bytes which is the ceiling(hdr.len)
    406              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000056   4008         JC      ??initPage_3
   \   000058   75..FC       MOV     ?V0 + 0,#-0x4
   \   00005B   75..FF       MOV     ?V0 + 1,#-0x1
   \   00005E   800A         SJMP    ??initPage_4
   \                     ??initPage_3:
   \   000060   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000063   F5..         MOV     ?V0 + 0,A
   \   000065   74FF         MOV     A,#-0x1
   \   000067   59           ANL     A,R1
   \   000068   F5..         MOV     ?V0 + 1,A
    407          
    408              // A bad 'len' write has blown away the rest of the page.
    409              if (sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - offset))
   \                     ??initPage_4:
   \   00006A   74F8         MOV     A,#-0x8
   \   00006C   C3           CLR     C
   \   00006D   95..         SUBB    A,?V0 + 2
   \   00006F   F8           MOV     R0,A
   \   000070   7407         MOV     A,#0x7
   \   000072   95..         SUBB    A,?V0 + 3
   \   000074   F9           MOV     R1,A
   \   000075   C3           CLR     C
   \   000076   E8           MOV     A,R0
   \   000077   95..         SUBB    A,?V0 + 0
   \   000079   E9           MOV     A,R1
   \   00007A   95..         SUBB    A,?V0 + 1
   \   00007C   5019         JNC     ??initPage_5
    410              {
    411                lost += (OSAL_NV_PAGE_SIZE - offset);
   \   00007E   E4           CLR     A
   \   00007F   2E           ADD     A,R6
   \   000080   F8           MOV     R0,A
   \   000081   7408         MOV     A,#0x8
   \   000083   3F           ADDC    A,R7
   \   000084   F9           MOV     R1,A
   \   000085   E8           MOV     A,R0
   \   000086   C3           CLR     C
   \   000087   95..         SUBB    A,?V0 + 2
   \   000089   FE           MOV     R6,A
   \   00008A   E9           MOV     A,R1
   \   00008B   95..         SUBB    A,?V0 + 3
   \   00008D   FF           MOV     R7,A
    412                offset = OSAL_NV_PAGE_SIZE;
   \   00008E   75..00       MOV     ?V0 + 2,#0x0
   \   000091   75..08       MOV     ?V0 + 3,#0x8
    413                break;
   \   000094   02....       LJMP    ??initPage_2 & 0xFFFF
    414              }
    415          
    416              offset += OSAL_NV_HDR_SIZE;
   \                     ??initPage_5:
   \   000097   E5..         MOV     A,?V0 + 2
   \   000099   2408         ADD     A,#0x8
   \   00009B   F5..         MOV     ?V0 + 2,A
   \   00009D   E5..         MOV     A,?V0 + 3
   \   00009F   3400         ADDC    A,#0x0
   \   0000A1   F5..         MOV     ?V0 + 3,A
    417          
    418              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \   0000A3   85..82       MOV     DPL,?XSP + 0
   \   0000A6   85..83       MOV     DPH,?XSP + 1
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   7002         JNZ     ??initPage_6
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \                     ??initPage_6:
   \   0000AE   7003         JNZ     $+5
   \   0000B0   02....       LJMP    ??initPage_7 & 0xFFFF
    419              {
    420                /* This trick allows function to do double duty for findItem() without
    421                 * compromising its essential functionality at powerup initialization.
    422                 */
    423                if ( id != OSAL_NV_ITEM_NULL )
   \   0000B3   E5..         MOV     A,?V0 + 6
   \   0000B5   7002         JNZ     ??initPage_8
   \   0000B7   E5..         MOV     A,?V0 + 7
   \                     ??initPage_8:
   \   0000B9   6052         JZ      ??initPage_9
    424                {
    425                  /* This trick allows asking to find the old/transferred item in case
    426                   * of a successful new item write that gets interrupted before the
    427                   * old item can be zeroed out.
    428                   */
    429                  if ( (id & 0x7fff) == hdr.id )
   \   0000BB   74FF         MOV     A,#-0x1
   \   0000BD   55..         ANL     A,?V0 + 6
   \   0000BF   F8           MOV     R0,A
   \   0000C0   747F         MOV     A,#0x7f
   \   0000C2   55..         ANL     A,?V0 + 7
   \   0000C4   F9           MOV     R1,A
   \   0000C5   85..82       MOV     DPL,?XSP + 0
   \   0000C8   85..83       MOV     DPH,?XSP + 1
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   68           XRL     A,R0
   \   0000CD   7003         JNZ     ??initPage_10
   \   0000CF   A3           INC     DPTR
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   69           XRL     A,R1
   \                     ??initPage_10:
   \   0000D2   6003         JZ      $+5
   \   0000D4   02....       LJMP    ??initPage_11 & 0xFFFF
    430                  {
    431                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    432                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
   \   0000D7   7406         MOV     A,#0x6
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000DF   7480         MOV     A,#-0x80
   \   0000E1   55..         ANL     A,?V0 + 7
   \   0000E3   FB           MOV     R3,A
   \   0000E4   E4           CLR     A
   \   0000E5   7001         JNZ     ??initPage_12
   \   0000E7   EB           MOV     A,R3
   \                     ??initPage_12:
   \   0000E8   700F         JNZ     ??initPage_13
   \   0000EA   74FF         MOV     A,#-0x1
   \   0000EC   68           XRL     A,R0
   \   0000ED   7003         JNZ     ??initPage_14
   \   0000EF   74FF         MOV     A,#-0x1
   \   0000F1   69           XRL     A,R1
   \                     ??initPage_14:
   \   0000F2   6003         JZ      $+5
   \   0000F4   02....       LJMP    ??initPage_11 & 0xFFFF
   \   0000F7   800D         SJMP    ??initPage_15
   \                     ??initPage_13:
   \   0000F9   74FF         MOV     A,#-0x1
   \   0000FB   68           XRL     A,R0
   \   0000FC   7003         JNZ     ??initPage_16
   \   0000FE   74FF         MOV     A,#-0x1
   \   000100   69           XRL     A,R1
   \                     ??initPage_16:
   \   000101   7003         JNZ     $+5
   \   000103   02....       LJMP    ??initPage_11 & 0xFFFF
    433                    {
    434                      return offset;
   \                     ??initPage_15:
   \   000106   AA..         MOV     R2,?V0 + 2
   \   000108   AB..         MOV     R3,?V0 + 3
   \   00010A   02....       LJMP    ??initPage_17 & 0xFFFF
    435                    }
    436                  }
    437                }
    438                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    439                else
    440                {
    441                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
   \                     ??initPage_9:
   \   00010D                ; Setup parameters for call to function calcChkF
   \   00010D   AA..         MOV     R2,?V0 + 2
   \   00010F   AB..         MOV     R3,?V0 + 3
   \   000111   A9..         MOV     R1,?V0 + 4
   \   000113   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000116   7404         MOV     A,#0x4
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   68           XRL     A,R0
   \   00011D   7003         JNZ     ??initPage_18
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   69           XRL     A,R1
   \                     ??initPage_18:
   \   000122   7048         JNZ     ??initPage_19
    442                  {
    443                    if ( findDups )
   \   000124   7406         MOV     A,#0x6
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00012C   E5..         MOV     A,?V0 + 5
   \   00012E   602C         JZ      ??initPage_20
    444                    {
    445                      if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   000130   74FF         MOV     A,#-0x1
   \   000132   68           XRL     A,R0
   \   000133   7003         JNZ     ??initPage_21
   \   000135   74FF         MOV     A,#-0x1
   \   000137   69           XRL     A,R1
   \                     ??initPage_21:
   \   000138   704C         JNZ     ??initPage_11
    446                      {
    447                        /* The trick of setting the MSB of the item Id causes the logic
    448                         * immediately above to return a valid page only if the header 'stat'
    449                         * indicates that it was the older item being transferred.
    450                         */
    451                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
   \   00013A                ; Setup parameters for call to function findItem
   \   00013A   85..82       MOV     DPL,?XSP + 0
   \   00013D   85..83       MOV     DPH,?XSP + 1
   \   000140   E0           MOVX    A,@DPTR
   \   000141   FA           MOV     R2,A
   \   000142   A3           INC     DPTR
   \   000143   E0           MOVX    A,@DPTR
   \   000144   4480         ORL     A,#0x80
   \   000146   FB           MOV     R3,A
   \   000147   12....       LCALL   ??findItem?relay
    452          
    453                        if ( off != OSAL_NV_ITEM_NULL )
   \   00014A   EA           MOV     A,R2
   \   00014B   7001         JNZ     ??initPage_22
   \   00014D   EB           MOV     A,R3
   \                     ??initPage_22:
   \   00014E   6036         JZ      ??initPage_11
    454                        {
    455                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
   \   000150                ; Setup parameters for call to function setItem
   \   000150   7C01         MOV     R4,#0x1
   \   000152   90....       MOV     DPTR,#findPg
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F9           MOV     R1,A
   \   000157   12....       LCALL   ??setItem?relay
   \   00015A   802A         SJMP    ??initPage_11
    456                        }
    457                      }
    458                    }
    459                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    460                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
   \                     ??initPage_20:
   \   00015C   74FF         MOV     A,#-0x1
   \   00015E   68           XRL     A,R0
   \   00015F   7003         JNZ     ??initPage_23
   \   000161   74FF         MOV     A,#-0x1
   \   000163   69           XRL     A,R1
   \                     ??initPage_23:
   \   000164   6020         JZ      ??initPage_11
    461                    {
    462                      return OSAL_NV_ERASED_ID;
   \   000166   7AFF         MOV     R2,#-0x1
   \   000168   7BFF         MOV     R3,#-0x1
   \   00016A   804B         SJMP    ??initPage_17
    463                    }
    464                  }
    465                  else
    466                  {
    467                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
   \                     ??initPage_19:
   \   00016C                ; Setup parameters for call to function setItem
   \   00016C   7C01         MOV     R4,#0x1
   \   00016E   AA..         MOV     R2,?V0 + 2
   \   000170   AB..         MOV     R3,?V0 + 3
   \   000172   A9..         MOV     R1,?V0 + 4
   \   000174   12....       LCALL   ??setItem?relay
    468                    lost += (OSAL_NV_HDR_SIZE + sz);
    469                  }
    470                }
    471              }
    472              else
    473              {
    474                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_7:
   \   000177   7408         MOV     A,#0x8
   \   000179   25..         ADD     A,?V0 + 0
   \   00017B   F8           MOV     R0,A
   \   00017C   E4           CLR     A
   \   00017D   35..         ADDC    A,?V0 + 1
   \   00017F   F9           MOV     R1,A
   \   000180   EE           MOV     A,R6
   \   000181   28           ADD     A,R0
   \   000182   FE           MOV     R6,A
   \   000183   EF           MOV     A,R7
   \   000184   39           ADDC    A,R1
   \   000185   FF           MOV     R7,A
    475              }
    476              offset += sz;
   \                     ??initPage_11:
   \   000186   E5..         MOV     A,?V0 + 2
   \   000188   25..         ADD     A,?V0 + 0
   \   00018A   F5..         MOV     ?V0 + 2,A
   \   00018C   E5..         MOV     A,?V0 + 3
   \   00018E   35..         ADDC    A,?V0 + 1
   \   000190   F5..         MOV     ?V0 + 3,A
    477          
    478            } while (offset < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE));
   \   000192   C3           CLR     C
   \   000193   E5..         MOV     A,?V0 + 2
   \   000195   94F8         SUBB    A,#-0x8
   \   000197   E5..         MOV     A,?V0 + 3
   \   000199   9407         SUBB    A,#0x7
   \   00019B   5003         JNC     $+5
   \   00019D   02....       LJMP    ??initPage_0 & 0xFFFF
    479          
    480            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_2:
   \   0001A0   E5..         MOV     A,?V0 + 4
   \   0001A2   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0001A5   E5..         MOV     A,?V0 + 2
   \   0001A7   F0           MOVX    @DPTR,A
   \   0001A8   A3           INC     DPTR
   \   0001A9   E5..         MOV     A,?V0 + 3
   \   0001AB   12....       LCALL   ?Subroutine4 & 0xFFFF
    481            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \                     ??CrossCallReturnLabel_4:
   \   0001AE   EE           MOV     A,R6
   \   0001AF   F0           MOVX    @DPTR,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   EF           MOV     A,R7
   \   0001B2   F0           MOVX    @DPTR,A
    482          
    483            return OSAL_NV_ITEM_NULL;
   \   0001B3   7A00         MOV     R2,#0x0
   \   0001B5   7B00         MOV     R3,#0x0
   \                     ??initPage_17:
   \   0001B7   7408         MOV     A,#0x8
   \   0001B9   80..         SJMP    ??Subroutine52_0
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0A         MOV     R7,#0xa
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   E8           MOV     A,R0
   \   000007   24..         ADD     A,#((pgOff + 14) & 0xff)
   \   000009   F582         MOV     DPL,A
   \   00000B   E9           MOV     A,R1
   \   00000C   34..         ADDC    A,#(((pgOff - 242) >> 8) & 0xff)
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E8           MOV     A,R0
   \   000001   24..         ADD     A,#((pgLost + 14) & 0xff)
   \   000003   F582         MOV     DPL,A
   \   000005   E9           MOV     A,R1
   \   000006   34..         ADDC    A,#(((pgLost - 242) >> 8) & 0xff)
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ??calcChkF?relay
   \   000003   8A..         MOV     ?V0 + 8,R2
   \   000005   8B..         MOV     ?V0 + 9,R3
   \   000007   A8..         MOV     R0,?V0 + 8
   \   000009   A9..         MOV     R1,?V0 + 9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   7403         MOV     A,#0x3
   \   000002   2C           ADD     A,R4
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   3D           ADDC    A,R5
   \   000006                REQUIRE ?Subroutine41
   \   000006                ; // Fall through to label ?Subroutine41

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F9           MOV     R1,A
   \   000001   74FC         MOV     A,#-0x4
   \   000003   58           ANL     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   C3           CLR     C
   \   000004   EC           MOV     A,R4
   \   000005   94FC         SUBB    A,#-0x4
   \   000007   ED           MOV     A,R5
   \   000008   94FF         SUBB    A,#-0x1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   A9..         MOV     R1,?V0 + 4
   \   000002                REQUIRE ??Subroutine58_0
   \   000002                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET
    485          
    486          /*********************************************************************
    487           * @fn      erasePage
    488           *
    489           * @brief   Erases a page in Flash.
    490           *
    491           * @param   pg - Valid NV page to erase.
    492           *
    493           * @return  none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          static void erasePage( uint8 pg )
   \                     erasePage:
    496          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    497            HalFlashErase(pg);
   \   000007                ; Setup parameters for call to function HalFlashErase
   \   000007   12....       LCALL   ??HalFlashErase?relay
    498          
    499            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00000A   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00000D   7408         MOV     A,#0x8
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   E4           CLR     A
   \   000012   12....       LCALL   ?Subroutine4 & 0xFFFF
    500            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \                     ??CrossCallReturnLabel_5:
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   F0           MOVX    @DPTR,A
    501          }
   \   000019                REQUIRE ?Subroutine43
   \   000019                ; // Fall through to label ?Subroutine43

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine53_0
   \   000001                ; // Fall through to label ??Subroutine53_0
    502          
    503          /*********************************************************************
    504           * @fn      compactPage
    505           *
    506           * @brief   Compacts the page specified.
    507           *
    508           * @param   srcPg - Valid NV page to erase.
    509           * @param   skipId - Item Id to not compact.
    510           *
    511           * @return  TRUE if valid items from 'srcPg' are successully compacted onto the 'pgRes';
    512           *          FALSE otherwise.
    513           *          Note that on a failure, this could loop, re-erasing the 'pgRes' and re-compacting with
    514           *          the risk of infinitely looping on HAL flash failure.
    515           *          Worst case scenario: HAL flash starts failing in general, perhaps low Vdd?
    516           *          All page compactions will fail which will cause all osal_nv_write() calls to return
    517           *          NV_OPER_FAILED.
    518           *          Eventually, all pages in use may also be in the state of "pending compaction" where
    519           *          the page header member OSAL_NV_PG_XFER is zeroed out.
    520           *          During this "HAL flash brown-out", the code will run and OTA should work (until low Vdd
    521           *          causes an actual chip brown-out, of course.) Although no new NV items will be created
    522           *          or written, the last value written with a return value of SUCCESS can continue to be
    523           *          read successfully.
    524           *          If eventually HAL flash starts working again, all of the pages marked as
    525           *          "pending compaction" may or may not be eventually compacted. But, initNV() will
    526           *          deterministically clean-up one page pending compaction per power-cycle
    527           *          (if HAL flash is working.) Nevertheless, one erased reserve page will be maintained
    528           *          through such a scenario.
    529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          static uint8 compactPage( uint8 srcPg, uint16 skipId )
   \                     compactPage:
    531          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   8A..         MOV     ?V0 + 2,R2
   \   00000E   8B..         MOV     ?V0 + 3,R3
    532            uint16 srcOff;
    533            uint8 rtrn;
    534          
    535            // To minimize code size, only check for a clean page here where it's absolutely required.
    536            for (srcOff = 0; srcOff < OSAL_NV_PAGE_SIZE; srcOff++)
   \   000010   75..00       MOV     ?V0 + 0,#0x0
   \   000013   75..00       MOV     ?V0 + 1,#0x0
    537            {
    538              HalFlashRead(pgRes, srcOff, &rtrn, 1);
   \                     ??compactPage_0:
   \   000016                ; Setup parameters for call to function HalFlashRead
   \   000016   75..01       MOV     ?V0 + 4,#0x1
   \   000019   75..00       MOV     ?V0 + 5,#0x0
   \   00001C   78..         MOV     R0,#?V0 + 4
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   AC82         MOV     R4,DPL
   \   000028   AD83         MOV     R5,DPH
   \   00002A   AA..         MOV     R2,?V0 + 0
   \   00002C   AB..         MOV     R3,?V0 + 1
   \   00002E   90....       MOV     DPTR,#pgRes
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
    539              if (rtrn != OSAL_NV_ERASED)
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   64FF         XRL     A,#0xff
   \   000042   6008         JZ      ??compactPage_1
    540              {
    541                erasePage(pgRes);
   \   000044                ; Setup parameters for call to function erasePage
   \   000044   12....       LCALL   ?Subroutine15 & 0xFFFF
    542                return FALSE;
   \                     ??CrossCallReturnLabel_82:
   \   000047   7900         MOV     R1,#0x0
   \   000049   02....       LJMP    ??compactPage_2 & 0xFFFF
    543              }
    544            }
   \                     ??compactPage_1:
   \   00004C   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00004F   C3           CLR     C
   \   000050   9408         SUBB    A,#0x8
   \   000052   40C2         JC      ??compactPage_0
    545          
    546            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \   000054   75..08       MOV     ?V0 + 0,#0x8
   \   000057   75..00       MOV     ?V0 + 1,#0x0
    547            rtrn = TRUE;
   \   00005A   7401         MOV     A,#0x1
   \   00005C   F0           MOVX    @DPTR,A
    548          
    549            while ( srcOff < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE ) )
    550            {
    551              osalNvHdr_t hdr;
    552              uint16 sz, dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \                     ??compactPage_3:
   \   00005D   90....       MOV     DPTR,#pgRes
   \   000060   E0           MOVX    A,@DPTR
   \   000061   C3           CLR     C
   \   000062   33           RLC     A
   \   000063   F8           MOV     R0,A
   \   000064   E4           CLR     A
   \   000065   33           RLC     A
   \   000066   F9           MOV     R1,A
   \   000067   E8           MOV     A,R0
   \   000068   24..         ADD     A,#((pgOff + 14) & 0xff)
   \   00006A   F582         MOV     DPL,A
   \   00006C   E9           MOV     A,R1
   \   00006D   34..         ADDC    A,#(((pgOff - 242) >> 8) & 0xff)
   \   00006F   12....       LCALL   ?Subroutine10 & 0xFFFF
    553          
    554              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_87:
   \   000072                ; Setup parameters for call to function HalFlashRead
   \   000072   75..08       MOV     ?V0 + 6,#0x8
   \   000075   75..00       MOV     ?V0 + 7,#0x0
   \   000078   78..         MOV     R0,#?V0 + 6
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   7403         MOV     A,#0x3
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   AC82         MOV     R4,DPL
   \   000084   AD83         MOV     R5,DPH
   \   000086   AA..         MOV     R2,?V0 + 0
   \   000088   AB..         MOV     R3,?V0 + 1
   \   00008A   EE           MOV     A,R6
   \   00008B   F9           MOV     R1,A
   \   00008C   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
    555          
    556              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   000092   7401         MOV     A,#0x1
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   E0           MOVX    A,@DPTR
   \   000098   64FF         XRL     A,#0xff
   \   00009A   7004         JNZ     ??compactPage_4
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   64FF         XRL     A,#0xff
   \                     ??compactPage_4:
   \   0000A0   7003         JNZ     $+5
   \   0000A2   02....       LJMP    ??compactPage_5 & 0xFFFF
    557              {
    558                break;
    559              }
    560          
    561              // Get the actual size in bytes which is the ceiling(hdr.len)
    562              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   0000A5   7403         MOV     A,#0x3
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000AD   4008         JC      ??compactPage_6
   \   0000AF   75..FC       MOV     ?V0 + 6,#-0x4
   \   0000B2   75..FF       MOV     ?V0 + 7,#-0x1
   \   0000B5   800A         SJMP    ??compactPage_7
   \                     ??compactPage_6:
   \   0000B7   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000BA   F5..         MOV     ?V0 + 6,A
   \   0000BC   74FF         MOV     A,#-0x1
   \   0000BE   59           ANL     A,R1
   \   0000BF   F5..         MOV     ?V0 + 7,A
    563          
    564              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - srcOff) )
   \                     ??compactPage_7:
   \   0000C1   74F8         MOV     A,#-0x8
   \   0000C3   C3           CLR     C
   \   0000C4   95..         SUBB    A,?V0 + 0
   \   0000C6   F8           MOV     R0,A
   \   0000C7   7407         MOV     A,#0x7
   \   0000C9   95..         SUBB    A,?V0 + 1
   \   0000CB   F9           MOV     R1,A
   \   0000CC   C3           CLR     C
   \   0000CD   E8           MOV     A,R0
   \   0000CE   95..         SUBB    A,?V0 + 6
   \   0000D0   E9           MOV     A,R1
   \   0000D1   95..         SUBB    A,?V0 + 7
   \   0000D3   5003         JNC     $+5
   \   0000D5   02....       LJMP    ??compactPage_5 & 0xFFFF
    565              {
    566                break;
    567              }
    568          
    569              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - dstOff) )
   \   0000D8   74F8         MOV     A,#-0x8
   \   0000DA   C3           CLR     C
   \   0000DB   95..         SUBB    A,?V0 + 4
   \   0000DD   F8           MOV     R0,A
   \   0000DE   7407         MOV     A,#0x7
   \   0000E0   95..         SUBB    A,?V0 + 5
   \   0000E2   F9           MOV     R1,A
   \   0000E3   C3           CLR     C
   \   0000E4   E8           MOV     A,R0
   \   0000E5   95..         SUBB    A,?V0 + 6
   \   0000E7   E9           MOV     A,R1
   \   0000E8   95..         SUBB    A,?V0 + 7
   \   0000EA   500B         JNC     ??compactPage_8
    570              {
    571                rtrn = FALSE;
   \                     ??compactPage_9:
   \   0000EC   E4           CLR     A
   \   0000ED   85..82       MOV     DPL,?XSP + 0
   \   0000F0   85..83       MOV     DPH,?XSP + 1
   \   0000F3   F0           MOVX    @DPTR,A
    572                break;
   \   0000F4   02....       LJMP    ??compactPage_10 & 0xFFFF
    573              }
    574          
    575              srcOff += OSAL_NV_HDR_SIZE;
   \                     ??compactPage_8:
   \   0000F7   E5..         MOV     A,?V0 + 0
   \   0000F9   2408         ADD     A,#0x8
   \   0000FB   F5..         MOV     ?V0 + 0,A
   \   0000FD   E5..         MOV     A,?V0 + 1
   \   0000FF   3400         ADDC    A,#0x0
   \   000101   F5..         MOV     ?V0 + 1,A
    576          
    577              if ( (hdr.id != OSAL_NV_ZEROED_ID) && (hdr.id != skipId) )
   \   000103   7401         MOV     A,#0x1
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   E0           MOVX    A,@DPTR
   \   000109   7002         JNZ     ??compactPage_11
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \                     ??compactPage_11:
   \   00010D   7003         JNZ     $+5
   \   00010F   02....       LJMP    ??compactPage_12 & 0xFFFF
   \   000112   7401         MOV     A,#0x1
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   E0           MOVX    A,@DPTR
   \   000118   65..         XRL     A,?V0 + 2
   \   00011A   7004         JNZ     ??compactPage_13
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   65..         XRL     A,?V0 + 3
   \                     ??compactPage_13:
   \   000120   7003         JNZ     $+5
   \   000122   02....       LJMP    ??compactPage_12 & 0xFFFF
    578              {
    579                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   000125                ; Setup parameters for call to function calcChkF
   \   000125   AA..         MOV     R2,?V0 + 0
   \   000127   AB..         MOV     R3,?V0 + 1
   \   000129   EE           MOV     A,R6
   \   00012A   F9           MOV     R1,A
   \   00012B   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00012E   7405         MOV     A,#0x5
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   E0           MOVX    A,@DPTR
   \   000134   68           XRL     A,R0
   \   000135   7003         JNZ     ??compactPage_14
   \   000137   A3           INC     DPTR
   \   000138   E0           MOVX    A,@DPTR
   \   000139   69           XRL     A,R1
   \                     ??compactPage_14:
   \   00013A   6003         JZ      $+5
   \   00013C   02....       LJMP    ??compactPage_12 & 0xFFFF
    580                {
    581                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
    582                   * OSAL_Nv interruptions caused by resets.
    583                   */
    584                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   00013F   7407         MOV     A,#0x7
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   E0           MOVX    A,@DPTR
   \   000145   64FF         XRL     A,#0xff
   \   000147   7004         JNZ     ??compactPage_15
   \   000149   A3           INC     DPTR
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   64FF         XRL     A,#0xff
   \                     ??compactPage_15:
   \   00014D   700B         JNZ     ??compactPage_16
    585                  {
    586                    setItem( srcPg, srcOff, eNvXfer );
   \   00014F                ; Setup parameters for call to function setItem
   \   00014F   7C00         MOV     R4,#0x0
   \   000151   AA..         MOV     R2,?V0 + 0
   \   000153   AB..         MOV     R3,?V0 + 1
   \   000155   EE           MOV     A,R6
   \   000156   F9           MOV     R1,A
   \   000157   12....       LCALL   ??setItem?relay
    587                  }
    588          
    589                  if ( writeItem( pgRes, hdr.id, hdr.len, NULL, FALSE ) )
   \                     ??compactPage_16:
   \   00015A                ; Setup parameters for call to function writeItem
   \   00015A   75..00       MOV     ?V0 + 8,#0x0
   \   00015D   78..         MOV     R0,#?V0 + 8
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000162   75..00       MOV     ?V0 + 9,#0x0
   \   000165   78..         MOV     R0,#?V0 + 8
   \   000167   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016A   7406         MOV     A,#0x6
   \   00016C   12....       LCALL   ?XSTACK_DISP0_8
   \   00016F   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000172   7404         MOV     A,#0x4
   \   000174   12....       LCALL   ?XSTACK_DISP0_8
   \   000177   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00017A   90....       MOV     DPTR,#pgRes
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   F9           MOV     R1,A
   \   00017F   12....       LCALL   ??writeItem?relay
   \   000182   7403         MOV     A,#0x3
   \   000184   12....       LCALL   ?DEALLOC_XSTACK8
   \   000187   E9           MOV     A,R1
   \   000188   7003         JNZ     $+5
   \   00018A   02....       LJMP    ??compactPage_9 & 0xFFFF
    590                  {
    591                    dstOff += OSAL_NV_HDR_SIZE;
   \   00018D   12....       LCALL   ?Subroutine24 & 0xFFFF
    592                    xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \                     ??CrossCallReturnLabel_41:
   \   000190                ; Setup parameters for call to function xferBuf
   \   000190   78..         MOV     R0,#?V0 + 6
   \   000192   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000195   78..         MOV     R0,#?V0 + 4
   \   000197   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019A   90....       MOV     DPTR,#pgRes
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   FC           MOV     R4,A
   \   00019F   AA..         MOV     R2,?V0 + 0
   \   0001A1   AB..         MOV     R3,?V0 + 1
   \   0001A3   EE           MOV     A,R6
   \   0001A4   F9           MOV     R1,A
   \   0001A5   12....       LCALL   ??xferBuf?relay
   \   0001A8   7404         MOV     A,#0x4
   \   0001AA   12....       LCALL   ?DEALLOC_XSTACK8
    593                    // Calculate and write the new checksum.
    594                    if (hdr.chk == calcChkF(pgRes, dstOff, hdr.len))
   \   0001AD                ; Setup parameters for call to function calcChkF
   \   0001AD   7403         MOV     A,#0x3
   \   0001AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B2   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001B5   12....       LCALL   ??calcChkF?relay
   \   0001B8   7405         MOV     A,#0x5
   \   0001BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001C0   7002         JNZ     ??compactPage_17
   \   0001C2   EB           MOV     A,R3
   \   0001C3   6D           XRL     A,R5
   \                     ??compactPage_17:
   \   0001C4   6003         JZ      $+5
   \   0001C6   02....       LJMP    ??compactPage_9 & 0xFFFF
    595                    {
    596                      if ( hdr.chk != setChk( pgRes, dstOff, hdr.chk ) )
   \   0001C9                ; Setup parameters for call to function setChk
   \   0001C9   AA..         MOV     R2,?V0 + 4
   \   0001CB   AB..         MOV     R3,?V0 + 5
   \   0001CD   90....       MOV     DPTR,#pgRes
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   F9           MOV     R1,A
   \   0001D2   12....       LCALL   ??setChk?relay
   \   0001D5   8A..         MOV     ?V0 + 8,R2
   \   0001D7   8B..         MOV     ?V0 + 9,R3
   \   0001D9   A8..         MOV     R0,?V0 + 8
   \   0001DB   A9..         MOV     R1,?V0 + 9
   \   0001DD   7405         MOV     A,#0x5
   \   0001DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   68           XRL     A,R0
   \   0001E4   7003         JNZ     ??compactPage_18
   \   0001E6   A3           INC     DPTR
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   69           XRL     A,R1
   \                     ??compactPage_18:
   \   0001E9   6003         JZ      $+5
   \   0001EB   02....       LJMP    ??compactPage_9 & 0xFFFF
    597                      {
    598                        rtrn = FALSE;
    599                        break;
    600                      }
    601                      else
    602                      {
    603                        hotItemUpdate(pgRes, dstOff, hdr.id);
   \   0001EE                ; Setup parameters for call to function hotItemUpdate
   \   0001EE   7401         MOV     A,#0x1
   \   0001F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F3   12....       LCALL   ?Subroutine5 & 0xFFFF
    604                      }
    605                    }
    606                    else
    607                    {
    608                      rtrn = FALSE;
    609                      break;
    610                    }
    611                  }
    612                  else
    613                  {
    614                    rtrn = FALSE;
    615                    break;
    616                  }
    617                }
    618              }
   \                     ??CrossCallReturnLabel_7:
   \   0001F6   12....       LCALL   ??hotItemUpdate?relay
    619          
    620              srcOff += sz;
   \                     ??compactPage_12:
   \   0001F9   E5..         MOV     A,?V0 + 0
   \   0001FB   25..         ADD     A,?V0 + 6
   \   0001FD   F5..         MOV     ?V0 + 0,A
   \   0001FF   E5..         MOV     A,?V0 + 1
   \   000201   35..         ADDC    A,?V0 + 7
   \   000203   F5..         MOV     ?V0 + 1,A
    621            }
   \   000205   C3           CLR     C
   \   000206   E5..         MOV     A,?V0 + 0
   \   000208   94F8         SUBB    A,#-0x8
   \   00020A   E5..         MOV     A,?V0 + 1
   \   00020C   9407         SUBB    A,#0x7
   \   00020E   5003         JNC     $+5
   \   000210   02....       LJMP    ??compactPage_3 & 0xFFFF
    622          
    623            if (rtrn == FALSE)
   \                     ??compactPage_5:
   \   000213   85..82       MOV     DPL,?XSP + 0
   \   000216   85..83       MOV     DPH,?XSP + 1
   \   000219   E0           MOVX    A,@DPTR
   \   00021A   7005         JNZ     ??compactPage_19
    624            {
    625              erasePage(pgRes);
   \                     ??compactPage_10:
   \   00021C                ; Setup parameters for call to function erasePage
   \   00021C   12....       LCALL   ?Subroutine15 & 0xFFFF
    626            }
   \                     ??CrossCallReturnLabel_83:
   \   00021F   800C         SJMP    ??compactPage_20
    627            else if (skipId == OSAL_NV_ITEM_NULL)
   \                     ??compactPage_19:
   \   000221   E5..         MOV     A,?V0 + 2
   \   000223   7002         JNZ     ??compactPage_21
   \   000225   E5..         MOV     A,?V0 + 3
   \                     ??compactPage_21:
   \   000227   7004         JNZ     ??compactPage_20
    628            {
    629              COMPACT_PAGE_CLEANUP(srcPg);
   \   000229                ; Setup parameters for call to function setPageUse
   \   000229   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00022C   F0           MOVX    @DPTR,A
    630            }
    631            // else invoking function must cleanup.
    632          
    633            return rtrn;
   \                     ??compactPage_20:
   \   00022D   85..82       MOV     DPL,?XSP + 0
   \   000230   85..83       MOV     DPH,?XSP + 1
   \   000233   E0           MOVX    A,@DPTR
   \   000234   F9           MOV     R1,A
   \                     ??compactPage_2:
   \   000235   7409         MOV     A,#0x9
   \   000237   02....       LJMP    ??Subroutine52_0 & 0xFFFF
    634          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV     DPTR,#pgRes
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??erasePage?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine55_0
   \   000002                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   90....       MOV     DPTR,#pgRes
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7A01         MOV     R2,#0x1
   \   000002   90....       MOV     DPTR,#pgRes
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??setPageUse?relay
   \   00000A                ; Setup parameters for call to function erasePage
   \   00000A                ; Setup parameters for call to function erasePage
   \   00000A   EE           MOV     A,R6
   \   00000B   F9           MOV     R1,A
   \   00000C   12....       LCALL   ??erasePage?relay
   \   00000F   EE           MOV     A,R6
   \   000010   90....       MOV     DPTR,#pgRes
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   AA..         MOV     R2,?V0 + 4
   \   000007   AB..         MOV     R3,?V0 + 5
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   2408         ADD     A,#0x8
   \   000004   F5..         MOV     ?V0 + 4,A
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 5,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000003   EA           MOV     A,R2
   \   000004   6C           XRL     A,R4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2401         ADD     A,#0x1
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 1,A
   \   00000C   22           RET
    635          
    636          /*********************************************************************
    637           * @fn      findItem
    638           *
    639           * @brief   Find an item Id in NV and return the page and offset to its data.
    640           *
    641           * @param   id - Valid NV item Id.
    642           *
    643           * @return  Offset of data corresponding to item Id, if found;
    644           *          otherwise OSAL_NV_ITEM_NULL.
    645           *
    646           *          The page containing the item, if found;
    647           *          otherwise no valid assignment made - left equal to item Id.
    648           *
    649           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          static uint16 findItem( uint16 id )
   \                     findItem:
    651          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   8003         SJMP    ??findItem_0
    652            uint16 off;
    653            uint8 pg;
    654          
    655            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    656            {
    657              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
    658              {
    659                findPg = pg;
    660                return off;
    661              }
    662            }
    663          
    664            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    665            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
    666            {
    667              return findItem( id | OSAL_NV_SOURCE_ID );
   \                     ??findItem_1:
   \   00000A   7480         MOV     A,#-0x80
   \   00000C   4F           ORL     A,R7
   \                     ??findItem_0:
   \   00000D   FF           MOV     R7,A
    668            }
   \   00000E   75..79       MOV     ?V0 + 0,#0x79
   \                     ??findItem_2:
   \   000011                ; Setup parameters for call to function initPage
   \   000011   7C00         MOV     R4,#0x0
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   A9..         MOV     R1,?V0 + 0
   \   000019   12....       LCALL   ??initPage?relay
   \   00001C   EA           MOV     A,R2
   \   00001D   7001         JNZ     ??findItem_3
   \   00001F   EB           MOV     A,R3
   \                     ??findItem_3:
   \   000020   6008         JZ      ??findItem_4
   \   000022   E5..         MOV     A,?V0 + 0
   \   000024   90....       MOV     DPTR,#findPg
   \   000027   F0           MOVX    @DPTR,A
   \   000028   801A         SJMP    ??findItem_5
   \                     ??findItem_4:
   \   00002A   05..         INC     ?V0 + 0
   \   00002C   E5..         MOV     A,?V0 + 0
   \   00002E   C3           CLR     C
   \   00002F   947F         SUBB    A,#0x7f
   \   000031   40DE         JC      ??findItem_2
   \   000033   7480         MOV     A,#-0x80
   \   000035   5F           ANL     A,R7
   \   000036   F9           MOV     R1,A
   \   000037   E4           CLR     A
   \   000038   7001         JNZ     ??findItem_6
   \   00003A   E9           MOV     A,R1
   \                     ??findItem_6:
   \   00003B   60CD         JZ      ??findItem_1
    669            else
    670            {
    671              findPg = OSAL_NV_PAGE_NULL;
   \   00003D   E4           CLR     A
   \   00003E   90....       MOV     DPTR,#findPg
   \   000041   F0           MOVX    @DPTR,A
    672              return OSAL_NV_ITEM_NULL;
   \   000042   FA           MOV     R2,A
   \   000043   FB           MOV     R3,A
    673            }
   \                     ??findItem_5:
   \   000044   02....       LJMP    ??Subroutine49_0 & 0xFFFF
    674          }
    675          
    676          /*********************************************************************
    677           * @fn      initItem
    678           *
    679           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    680           *
    681           * @param   flag - TRUE if the 'buf' parameter contains data for the call to writeItem().
    682           *                 (i.e. if invoked from osal_nv_item_init() ).
    683           *                 FALSE if writeItem() should just write the header and the 'buf' parameter
    684           *                 is ok to use as a return value of the page number to be cleaned with
    685           *                 COMPACT_PAGE_CLEANUP().
    686           *                 (i.e. if invoked from osal_nv_write() ).
    687           * @param   id  - Valid NV item Id.
    688           * @param   len - Item data length.
    689           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    690           *
    691           * @return  The OSAL Nv page number if item write and read back checksums ok; 
    692           *          OSAL_NV_PAGE_NULL otherwise.
    693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007                REQUIRE ??Subroutine50_0
   \   000007                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    694          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    695          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 0,R1
   \   00000C   8A..         MOV     ?V0 + 4,R2
   \   00000E   8B..         MOV     ?V0 + 5,R3
   \   000010   8C..         MOV     ?V0 + 2,R4
   \   000012   8D..         MOV     ?V0 + 3,R5
   \   000014   741C         MOV     A,#0x1c
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 6,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 7,A
    696            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \   000020   C3           CLR     C
   \   000021   EC           MOV     A,R4
   \   000022   94F4         SUBB    A,#-0xc
   \   000024   ED           MOV     A,R5
   \   000025   94FF         SUBB    A,#-0x1
   \   000027   400E         JC      ??initItem_0
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   74FC         MOV     A,#-0x4
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   74FF         MOV     A,#-0x1
   \   000035   801E         SJMP    ??initItem_1
   \                     ??initItem_0:
   \   000037   7403         MOV     A,#0x3
   \   000039   25..         ADD     A,?V0 + 2
   \   00003B   F8           MOV     R0,A
   \   00003C   E4           CLR     A
   \   00003D   35..         ADDC    A,?V0 + 3
   \   00003F   F9           MOV     R1,A
   \   000040   74FC         MOV     A,#-0x4
   \   000042   58           ANL     A,R0
   \   000043   F8           MOV     R0,A
   \   000044   7408         MOV     A,#0x8
   \   000046   28           ADD     A,R0
   \   000047   F8           MOV     R0,A
   \   000048   E4           CLR     A
   \   000049   39           ADDC    A,R1
   \   00004A   F9           MOV     R1,A
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   E8           MOV     A,R0
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   E9           MOV     A,R1
   \                     ??initItem_1:
   \   000055   F0           MOVX    @DPTR,A
    697            uint8 rtrn = OSAL_NV_PAGE_NULL;
   \   000056   7F00         MOV     R7,#0x0
    698            uint8 cnt = OSAL_NV_PAGES_USED;
   \   000058   7C06         MOV     R4,#0x6
    699            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   00005A   90....       MOV     DPTR,#pgRes
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   04           INC     A
   \   00005F   FE           MOV     R6,A
   \   000060   8008         SJMP    ??initItem_2
    700          
    701            do {
    702              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
    703              {
    704                pg = OSAL_NV_PAGE_BEG;
    705              }
    706              if ( pg != pgRes )
    707              {
    708                uint8 idx = pg - OSAL_NV_PAGE_BEG;
    709                if ( sz <= (OSAL_NV_PAGE_SIZE - pgOff[idx] + pgLost[idx]) )
    710                {
    711                  break;
    712                }
    713              }
    714              pg++;
   \                     ??initItem_3:
   \   000062   0E           INC     R6
    715            } while (--cnt);
   \   000063   1C           DEC     R4
   \   000064   EC           MOV     A,R4
   \   000065   7003         JNZ     $+5
   \   000067   02....       LJMP    ??initItem_4 & 0xFFFF
   \                     ??initItem_2:
   \   00006A   EE           MOV     A,R6
   \   00006B   C3           CLR     C
   \   00006C   947F         SUBB    A,#0x7f
   \   00006E   4002         JC      ??initItem_5
   \   000070   7E79         MOV     R6,#0x79
   \                     ??initItem_5:
   \   000072   90....       MOV     DPTR,#pgRes
   \   000075   E0           MOVX    A,@DPTR
   \   000076   6E           XRL     A,R6
   \   000077   60E9         JZ      ??initItem_3
   \   000079   7487         MOV     A,#-0x79
   \   00007B   2E           ADD     A,R6
   \   00007C   C3           CLR     C
   \   00007D   33           RLC     A
   \   00007E   F8           MOV     R0,A
   \   00007F   E4           CLR     A
   \   000080   33           RLC     A
   \   000081   F9           MOV     R1,A
   \   000082   E8           MOV     A,R0
   \   000083   24..         ADD     A,#(pgOff & 0xff)
   \   000085   F582         MOV     DPL,A
   \   000087   E9           MOV     A,R1
   \   000088   34..         ADDC    A,#((pgOff >> 8) & 0xff)
   \   00008A   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   00008D   E4           CLR     A
   \   00008E   C3           CLR     C
   \   00008F   9A           SUBB    A,R2
   \   000090   FA           MOV     R2,A
   \   000091   7408         MOV     A,#0x8
   \   000093   9B           SUBB    A,R3
   \   000094   FB           MOV     R3,A
   \   000095   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000098   E0           MOVX    A,@DPTR
   \   000099   2A           ADD     A,R2
   \   00009A   FA           MOV     R2,A
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   3B           ADDC    A,R3
   \   00009E   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000A1   40BF         JC      ??initItem_3
    716          
    717            if (cnt)
   \   0000A3   EC           MOV     A,R4
   \   0000A4   7003         JNZ     $+5
   \   0000A6   02....       LJMP    ??initItem_4 & 0xFFFF
    718            {
    719              // Item fits if an old page is compacted.
    720              if ( sz > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]) )
   \   0000A9   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000AC   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000AF   FA           MOV     R2,A
   \   0000B0   7408         MOV     A,#0x8
   \   0000B2   99           SUBB    A,R1
   \   0000B3   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000B6   4003         JC      $+5
   \   0000B8   02....       LJMP    ??initItem_6 & 0xFFFF
    721              {
    722                osalNvPgHdr_t pgHdr;
    723          
    724                /* Prevent excessive re-writes to page header caused by numerous, rapid, & successive
    725                 * OSAL_Nv interruptions caused by resets.
    726                 */
    727                HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_PAGE_HDR_SIZE);
   \   0000BB                ; Setup parameters for call to function HalFlashRead
   \   0000BB   75..08       MOV     ?V0 + 8,#0x8
   \   0000BE   8F..         MOV     ?V0 + 9,R7
   \   0000C0   78..         MOV     R0,#?V0 + 8
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C5   7404         MOV     A,#0x4
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   AC82         MOV     R4,DPL
   \   0000CC   AD83         MOV     R5,DPH
   \   0000CE   7A00         MOV     R2,#0x0
   \   0000D0   7B00         MOV     R3,#0x0
   \   0000D2   EE           MOV     A,R6
   \   0000D3   F9           MOV     R1,A
   \   0000D4   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
    728                if ( pgHdr.xfer == OSAL_NV_ERASED_ID )
   \   0000DA   7406         MOV     A,#0x6
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   64FF         XRL     A,#0xff
   \   0000E2   7004         JNZ     ??initItem_7
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   64FF         XRL     A,#0xff
   \                     ??initItem_7:
   \   0000E8   700B         JNZ     ??initItem_8
    729                {
    730                  // Mark the old page as being in process of compaction.
    731                  sz = OSAL_NV_ZEROED_ID;
   \   0000EA   12....       LCALL   ?Subroutine1 & 0xFFFF
    732                  writeWordH( pg, OSAL_NV_PG_XFER, (uint8*)(&sz) );
    733                }
   \                     ??CrossCallReturnLabel_74:
   \   0000ED   7A04         MOV     R2,#0x4
   \   0000EF   FB           MOV     R3,A
   \   0000F0   EE           MOV     A,R6
   \   0000F1   F9           MOV     R1,A
   \   0000F2   12....       LCALL   ??writeWordH?relay
    734          
    735                /* First the old page is compacted, then the new item will be the last one written to what
    736                 * had been the reserved page. 
    737                 */
    738                if (compactPage( pg, id ))
   \                     ??initItem_8:
   \   0000F5                ; Setup parameters for call to function compactPage
   \   0000F5   AA..         MOV     R2,?V0 + 4
   \   0000F7   AB..         MOV     R3,?V0 + 5
   \   0000F9   EE           MOV     A,R6
   \   0000FA   F9           MOV     R1,A
   \   0000FB   12....       LCALL   ??compactPage?relay
   \   0000FE   E9           MOV     A,R1
   \   0000FF   605D         JZ      ??initItem_4
    739                {
    740                  if ( writeItem( pgRes, id, len, buf, flag ) )
   \   000101                ; Setup parameters for call to function writeItem
   \   000101   E5..         MOV     A,?V0 + 0
   \   000103   F5..         MOV     ?V0 + 1,A
   \   000105   78..         MOV     R0,#?V0 + 1
   \   000107   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010A   78..         MOV     R0,#?V0 + 6
   \   00010C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010F   AC..         MOV     R4,?V0 + 2
   \   000111   AD..         MOV     R5,?V0 + 3
   \   000113   AA..         MOV     R2,?V0 + 4
   \   000115   AB..         MOV     R3,?V0 + 5
   \   000117   90....       MOV     DPTR,#pgRes
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   F9           MOV     R1,A
   \   00011C   12....       LCALL   ??writeItem?relay
   \   00011F   7403         MOV     A,#0x3
   \   000121   12....       LCALL   ?DEALLOC_XSTACK8
   \   000124   E9           MOV     A,R1
   \   000125   6005         JZ      ??initItem_9
    741                  {
    742                    rtrn = pgRes;
   \   000127   90....       MOV     DPTR,#pgRes
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   FF           MOV     R7,A
    743                  }
    744          
    745                  if ( flag == FALSE )
   \                     ??initItem_9:
   \   00012C   E5..         MOV     A,?V0 + 0
   \   00012E   700A         JNZ     ??initItem_10
    746                  {
    747                    /* Overload 'buf' as an OUT parameter to pass back to the calling function
    748                     * the old page to be cleaned up.
    749                     */
    750                    *(uint8 *)buf = pg;
   \   000130   EE           MOV     A,R6
   \   000131   85..82       MOV     DPL,?V0 + 6
   \   000134   85..83       MOV     DPH,?V0 + 7
   \                     ??initItem_11:
   \   000137   F0           MOVX    @DPTR,A
   \   000138   8024         SJMP    ??initItem_4
    751                  }
    752                  else
    753                  {
    754                    /* Safe to do the compacted page cleanup even if writeItem() above failed because the
    755                     * item does not yet exist since this call with flag==TRUE is from osal_nv_item_init().
    756                     */
    757                    COMPACT_PAGE_CLEANUP( pg );
   \                     ??initItem_10:
   \   00013A                ; Setup parameters for call to function setPageUse
   \   00013A   12....       LCALL   ?Subroutine6 & 0xFFFF
    758                  }
    759                }
    760              }
   \                     ??CrossCallReturnLabel_9:
   \   00013D   80F8         SJMP    ??initItem_11
    761              else
    762              {
    763                if ( writeItem( pg, id, len, buf, flag ) )
   \                     ??initItem_6:
   \   00013F                ; Setup parameters for call to function writeItem
   \   00013F   78..         MOV     R0,#?V0 + 0
   \   000141   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000144   78..         MOV     R0,#?V0 + 6
   \   000146   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000149   AC..         MOV     R4,?V0 + 2
   \   00014B   AA..         MOV     R2,?V0 + 4
   \   00014D   AB..         MOV     R3,?V0 + 5
   \   00014F   EE           MOV     A,R6
   \   000150   F9           MOV     R1,A
   \   000151   12....       LCALL   ??writeItem?relay
   \   000154   7403         MOV     A,#0x3
   \   000156   12....       LCALL   ?DEALLOC_XSTACK8
   \   000159   E9           MOV     A,R1
   \   00015A   6002         JZ      ??initItem_4
    764                {
    765                  rtrn = pg;
   \   00015C   EE           MOV     A,R6
   \   00015D   FF           MOV     R7,A
    766                }
    767              }
    768            }
    769          
    770            return rtrn;
   \                     ??initItem_4:
   \   00015E   EF           MOV     A,R7
   \   00015F   F9           MOV     R1,A
   \   000160   740A         MOV     A,#0xa
   \   000162   02....       LJMP    ??Subroutine52_0 & 0xFFFF
    771          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   FB           MOV     R3,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   C3           CLR     C
   \   00000D   EA           MOV     A,R2
   \   00000E   98           SUBB    A,R0
   \   00000F   EB           MOV     A,R3
   \   000010   99           SUBB    A,R1
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E4           CLR     A
   \   000006   C3           CLR     C
   \   000007   98           SUBB    A,R0
   \   000008   22           RET
    772          
    773          /*********************************************************************
    774           * @fn      setItem
    775           *
    776           * @brief   Set an item Id or status to mark its state.
    777           *
    778           * @param   pg - Valid NV page.
    779           * @param   offset - Valid offset into the page of the item data - the header
    780           *                   offset is calculated from this.
    781           * @param   stat - Valid enum value for the item status.
    782           *
    783           * @return  none
    784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    785          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    786          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   8C..         MOV     ?V0 + 0,R4
    787            osalNvHdr_t hdr;
    788          
    789            offset -= OSAL_NV_HDR_SIZE;
   \   000012   EE           MOV     A,R6
   \   000013   24F8         ADD     A,#-0x8
   \   000015   FE           MOV     R6,A
   \   000016   EF           MOV     A,R7
   \   000017   34FF         ADDC    A,#-0x1
   \   000019   FF           MOV     R7,A
    790            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   00001A                ; Setup parameters for call to function HalFlashRead
   \   00001A   75..08       MOV     ?V0 + 4,#0x8
   \   00001D   75..00       MOV     ?V0 + 5,#0x0
   \   000020   78..         MOV     R0,#?V0 + 4
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   AC82         MOV     R4,DPL
   \   00002C   AD83         MOV     R5,DPH
   \   00002E   EE           MOV     A,R6
   \   00002F   FA           MOV     R2,A
   \   000030   EF           MOV     A,R7
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
    791          
    792            if ( stat == eNvXfer )
   \   000038   E5..         MOV     A,?V0 + 0
   \   00003A   7020         JNZ     ??setItem_0
    793            {
    794              hdr.stat = OSAL_NV_ACTIVE;
   \   00003C   7406         MOV     A,#0x6
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   F0           MOVX    @DPTR,A
    795              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   000045                ; Setup parameters for call to function writeWord
   \   000045   7404         MOV     A,#0x4
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   AC82         MOV     R4,DPL
   \   00004C   AD83         MOV     R5,DPH
   \   00004E   7404         MOV     A,#0x4
   \   000050   2E           ADD     A,R6
   \   000051   FA           MOV     R2,A
   \   000052   E4           CLR     A
   \   000053   3F           ADDC    A,R7
   \   000054   FB           MOV     R3,A
   \   000055   A9..         MOV     R1,?V0 + 2
   \   000057   12....       LCALL   ??writeWord?relay
   \   00005A   803B         SJMP    ??setItem_1
    796            }
    797            else // if ( stat == eNvZero )
    798            {
    799              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    800                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   E0           MOVX    A,@DPTR
   \   000062   2403         ADD     A,#0x3
   \   000064   F8           MOV     R0,A
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   3400         ADDC    A,#0x0
   \   000069   F9           MOV     R1,A
   \   00006A   74FC         MOV     A,#-0x4
   \   00006C   58           ANL     A,R0
   \   00006D   F8           MOV     R0,A
   \   00006E   7408         MOV     A,#0x8
   \   000070   28           ADD     A,R0
   \   000071   F5..         MOV     ?V0 + 0,A
   \   000073   E4           CLR     A
   \   000074   39           ADDC    A,R1
   \   000075   F5..         MOV     ?V0 + 1,A
    801              hdr.id = 0;
   \   000077   12....       LCALL   ?Subroutine1 & 0xFFFF
    802              writeWord( pg, offset, (uint8 *)(&hdr) );
   \                     ??CrossCallReturnLabel_75:
   \   00007A   EE           MOV     A,R6
   \   00007B   FA           MOV     R2,A
   \   00007C   EF           MOV     A,R7
   \   00007D   FB           MOV     R3,A
   \   00007E   A9..         MOV     R1,?V0 + 2
   \   000080   12....       LCALL   ??writeWord?relay
    803              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   000083   E5..         MOV     A,?V0 + 2
   \   000085   C3           CLR     C
   \   000086   33           RLC     A
   \   000087   F8           MOV     R0,A
   \   000088   E4           CLR     A
   \   000089   33           RLC     A
   \   00008A   F9           MOV     R1,A
   \   00008B   12....       LCALL   ?Subroutine36 & 0xFFFF
    804            }
   \                     ??CrossCallReturnLabel_64:
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   25..         ADD     A,?V0 + 0
   \   000091   F0           MOVX    @DPTR,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   35..         ADDC    A,?V0 + 1
   \   000096   F0           MOVX    @DPTR,A
    805          }
   \                     ??setItem_1:
   \   000097   7408         MOV     A,#0x8
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009C                REQUIRE ?Subroutine44
   \   00009C                ; // Fall through to label ?Subroutine44

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    806          
    807          /*********************************************************************
    808           * @fn      setChk
    809           *
    810           * @brief   Set the item header checksum given the data buffer offset.
    811           *
    812           * @param   pg - Valid NV page.
    813           * @param   offset - Valid offset into the page of the item data - the header
    814           *                   offset is calculated from this.
    815           * @param   chk - The checksum to set.
    816           *
    817           * @return  The checksum read back.
    818           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine48_0
   \   000002                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    819          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk )
   \                     setChk:
    820          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V0 + 0,R1
   \   000017   EA           MOV     A,R2
   \   000018   FE           MOV     R6,A
   \   000019   EB           MOV     A,R3
   \   00001A   FF           MOV     R7,A
    821            offset -= OSAL_NV_WORD_SIZE;
   \   00001B   EE           MOV     A,R6
   \   00001C   24FC         ADD     A,#-0x4
   \   00001E   FE           MOV     R6,A
   \   00001F   EF           MOV     A,R7
   \   000020   34FF         ADDC    A,#-0x1
   \   000022   FF           MOV     R7,A
    822            writeWordH( pg, offset, (uint8 *)&chk );
   \   000023                ; Setup parameters for call to function writeWordH
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   AC82         MOV     R4,DPL
   \   00002B   AD83         MOV     R5,DPH
   \   00002D   EE           MOV     A,R6
   \   00002E   FA           MOV     R2,A
   \   00002F   EF           MOV     A,R7
   \   000030   FB           MOV     R3,A
   \   000031   12....       LCALL   ??writeWordH?relay
    823            HalFlashRead( pg, offset, (uint8 *)(&chk), sizeof( chk ) );
   \   000034                ; Setup parameters for call to function HalFlashRead
   \   000034   75..02       MOV     ?V0 + 2,#0x2
   \   000037   75..00       MOV     ?V0 + 3,#0x0
   \   00003A   78..         MOV     R0,#?V0 + 2
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   AC82         MOV     R4,DPL
   \   000046   AD83         MOV     R5,DPH
   \   000048   EE           MOV     A,R6
   \   000049   FA           MOV     R2,A
   \   00004A   EF           MOV     A,R7
   \   00004B   FB           MOV     R3,A
   \   00004C   A9..         MOV     R1,?V0 + 0
   \   00004E   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
    824          
    825            return chk;
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00005D   02....       LJMP    ?Subroutine39 & 0xFFFF
    826          }
    827          
    828          /*********************************************************************
    829           * @fn      calcChkB
    830           *
    831           * @brief   Calculates the data checksum over the 'buf' parameter.
    832           *
    833           * @param   len - Byte count of the data to be checksummed.
    834           * @param   buf - Data buffer to be checksummed.
    835           *
    836           * @return  Calculated checksum of the data bytes.
    837           */
    838          static uint16 calcChkB( uint16 len, uint8 *buf )
    839          {
    840            uint8 fill = len % OSAL_NV_WORD_SIZE;
    841            uint16 chk;
    842          
    843            if ( !buf )
    844            {
    845              chk = len * OSAL_NV_ERASED;
    846            }
    847            else
    848            {
    849              chk = 0;
    850              while ( len-- )
    851              {
    852                chk += *buf++;
    853              }
    854            }
    855          
    856            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    857            if ( fill )
    858            {
    859              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
    860            }
    861          
    862            return chk;
    863          }
    864          
    865          /*********************************************************************
    866           * @fn      calcChkF
    867           *
    868           * @brief   Calculates the data checksum by reading the data bytes from NV.
    869           *
    870           * @param   pg - A valid NV Flash page.
    871           * @param   offset - A valid offset into the page.
    872           * @param   len - Byte count of the data to be checksummed.
    873           *
    874           * @return  Calculated checksum of the data bytes.
    875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    876          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len )
   \                     calcChkF:
    877          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 4,R1
   \   00000C   8A..         MOV     ?V0 + 2,R2
   \   00000E   8B..         MOV     ?V0 + 3,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
    878            uint16 chk = 0;
   \   000014   75..00       MOV     ?V0 + 0,#0x0
   \   000017   75..00       MOV     ?V0 + 1,#0x0
    879          
    880            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   00001A   7403         MOV     A,#0x3
   \   00001C   2E           ADD     A,R6
   \   00001D   F5..         MOV     ?V0 + 6,A
   \   00001F   E4           CLR     A
   \   000020   3F           ADDC    A,R7
   \   000021   F5..         MOV     ?V0 + 7,A
   \   000023   7402         MOV     A,#0x2
   \   000025   78..         MOV     R0,#?V0 + 6
   \   000027   12....       LCALL   ?US_SHR
   \   00002A   AE..         MOV     R6,?V0 + 6
   \   00002C   AF..         MOV     R7,?V0 + 7
   \   00002E   803C         SJMP    ??calcChkF_0
    881          
    882            while ( len-- )
    883            {
    884              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    885          
    886              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \                     ??calcChkF_1:
   \   000030                ; Setup parameters for call to function HalFlashRead
   \   000030   75..04       MOV     ?V0 + 6,#0x4
   \   000033   75..00       MOV     ?V0 + 7,#0x0
   \   000036   78..         MOV     R0,#?V0 + 6
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   AC82         MOV     R4,DPL
   \   000042   AD83         MOV     R5,DPH
   \   000044   AA..         MOV     R2,?V0 + 2
   \   000046   AB..         MOV     R3,?V0 + 3
   \   000048   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
    887              offset += OSAL_NV_WORD_SIZE;
   \   00004E   12....       LCALL   ?Subroutine37 & 0xFFFF
    888          
    889              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \                     ??CrossCallReturnLabel_66:
   \   000051   7A00         MOV     R2,#0x0
    890              {
    891                chk += tmp[cnt];
   \                     ??calcChkF_2:
   \   000053   8A..         MOV     ?V0 + 6,R2
   \   000055   12....       LCALL   ?Subroutine25 & 0xFFFF
    892              }
   \                     ??CrossCallReturnLabel_43:
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F8           MOV     R0,A
   \   00005A   E5..         MOV     A,?V0 + 0
   \   00005C   28           ADD     A,R0
   \   00005D   F5..         MOV     ?V0 + 0,A
   \   00005F   E5..         MOV     A,?V0 + 1
   \   000061   3400         ADDC    A,#0x0
   \   000063   F5..         MOV     ?V0 + 1,A
   \   000065   0A           INC     R2
   \   000066   EA           MOV     A,R2
   \   000067   C3           CLR     C
   \   000068   9404         SUBB    A,#0x4
   \   00006A   40E7         JC      ??calcChkF_2
    893            }
   \                     ??calcChkF_0:
   \   00006C   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00006F   7001         JNZ     ??calcChkF_3
   \   000071   E9           MOV     A,R1
   \                     ??calcChkF_3:
   \   000072   70BC         JNZ     ??calcChkF_1
    894          
    895            return chk;
   \   000074   AA..         MOV     R2,?V0 + 0
   \   000076   AB..         MOV     R3,?V0 + 1
   \   000078   7404         MOV     A,#0x4
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007D                REQUIRE ?Subroutine45
   \   00007D                ; // Fall through to label ?Subroutine45
    896          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   25..         ADD     A,?V0 + 6
   \   00000A   F582         MOV     DPL,A
   \   00000C   E583         MOV     A,DPH
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   EE           MOV     A,R6
   \   000001   F8           MOV     R0,A
   \   000002   EF           MOV     A,R7
   \   000003   F9           MOV     R1,A
   \   000004   74FF         MOV     A,#-0x1
   \   000006   28           ADD     A,R0
   \   000007   1E           DEC     R6
   \   000008   74FF         MOV     A,#-0x1
   \   00000A   39           ADDC    A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   E8           MOV     A,R0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   2404         ADD     A,#0x4
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   E5..         MOV     A,?V0 + 3
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 3,A
   \   00000C   22           RET
    897          
    898          /*********************************************************************
    899           * @fn      writeWord
    900           *
    901           * @brief   Writes a Flash-WORD to NV.
    902           *
    903           * @param   pg - A valid NV Flash page.
    904           * @param   offset - A valid offset into the page.
    905           * @param   buf - Pointer to source buffer.
    906           *
    907           * @return  none
    908           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    909          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    910          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    911            offset = (offset / HAL_FLASH_WORD_SIZE) +
    912                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    913          
    914            HalFlashWrite(offset, buf, 1);
   \   000005                ; Setup parameters for call to function HalFlashWrite
   \   000005   75..01       MOV     ?V0 + 0,#0x1
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   8A..         MOV     ?V0 + 0,R2
   \   000012   8B..         MOV     ?V0 + 1,R3
   \   000014   7402         MOV     A,#0x2
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?US_SHR
   \   00001B   89..         MOV     ?V0 + 2,R1
   \   00001D   F5..         MOV     ?V0 + 3,A
   \   00001F   7409         MOV     A,#0x9
   \   000021   78..         MOV     R0,#?V0 + 2
   \   000023   12....       LCALL   ?S_SHL
   \   000026   25..         ADD     A,?V0 + 0
   \   000028   FA           MOV     R2,A
   \   000029   E5..         MOV     A,?V0 + 3
   \   00002B   35..         ADDC    A,?V0 + 1
   \   00002D   FB           MOV     R3,A
   \   00002E   12....       LCALL   ??HalFlashWrite?relay
   \   000031   02....       LJMP    ?Subroutine39 & 0xFFFF
    915          }
    916          
    917          /*********************************************************************
    918           * @fn      writeWordM
    919           *
    920           * @brief   Writes multiple Flash-WORDs to NV.
    921           *
    922           * @param   pg - A valid NV Flash page.
    923           * @param   offset - A valid offset into the page.
    924           * @param   buf - Pointer to source buffer.
    925           * @param   cnt - Number of 4-byte blocks to write.
    926           *
    927           * @return  none
    928           */
    929          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
    930          {
    931            offset = (offset / HAL_FLASH_WORD_SIZE) +
    932                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    933            HalFlashWrite(offset, buf, cnt);
    934          }
    935          
    936          /*********************************************************************
    937           * @fn      writeWordH
    938           *
    939           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    940           *
    941           * @param   pg - A valid NV Flash page.
    942           * @param   offset - A valid offset into the page.
    943           * @param   buf - Pointer to source buffer.
    944           *
    945           * @return  none
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    948          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    949            uint8 tmp[4];
    950          
    951            tmp[0] = buf[0];
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   F0           MOVX    @DPTR,A
    952            tmp[1] = buf[1];
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C0E0         PUSH    A
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   D0E0         POP     A
   \   000025   F0           MOVX    @DPTR,A
    953            tmp[2] = OSAL_NV_ERASED;
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   74FF         MOV     A,#-0x1
   \   00002D   F0           MOVX    @DPTR,A
    954            tmp[3] = OSAL_NV_ERASED;
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   74FF         MOV     A,#-0x1
   \   000035   12....       LCALL   ??Subroutine51_0 & 0xFFFF
    955          
    956            writeWord( pg, offset, tmp );
   \                     ??CrossCallReturnLabel_77:
   \   000038   12....       LCALL   ??writeWord?relay
    957          }
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000040   02....       LJMP    ?Subroutine43 & 0xFFFF
    958          
    959          /*********************************************************************
    960           * @fn      writeBuf
    961           *
    962           * @brief   Writes a data buffer to NV.
    963           *
    964           * @param   dstPg - A valid NV Flash page.
    965           * @param   offset - A valid offset into the page.
    966           * @param   len  - Byte count of the data to write.
    967           * @param   buf  - The data to write.
    968           *
    969           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    970           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   7404         MOV     A,#0x4
   \   000002                REQUIRE ??Subroutine52_0
   \   000002                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    971          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    972          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 1,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   8C..         MOV     ?V0 + 4,R4
   \   000012   8D..         MOV     ?V0 + 5,R5
   \   000014   7416         MOV     A,#0x16
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine13 & 0xFFFF
    973            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_19:
   \   00001C   EE           MOV     A,R6
   \   00001D   5403         ANL     A,#0x3
   \   00001F   F5..         MOV     ?V0 + 0,A
    974            uint8 tmp[OSAL_NV_WORD_SIZE];
    975          
    976            if ( rem )
   \   000021   606E         JZ      ??writeBuf_0
    977            {
    978              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   000023   74FC         MOV     A,#-0x4
   \   000025   5E           ANL     A,R6
   \   000026   FE           MOV     R6,A
    979              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000027                ; Setup parameters for call to function HalFlashRead
   \   000027   75..04       MOV     ?V0 + 6,#0x4
   \   00002A   75..00       MOV     ?V0 + 7,#0x0
   \   00002D   78..         MOV     R0,#?V0 + 6
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   AC82         MOV     R4,DPL
   \   000039   AD83         MOV     R5,DPH
   \   00003B   EE           MOV     A,R6
   \   00003C   FA           MOV     R2,A
   \   00003D   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
   \   000043   8022         SJMP    ??writeBuf_1
    980          
    981              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    982              {
    983                tmp[rem++] = *buf++;
   \                     ??writeBuf_2:
   \   000045   85..82       MOV     DPL,?V0 + 2
   \   000048   85..83       MOV     DPH,?V0 + 3
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   C0E0         PUSH    A
   \   00004E   85....       MOV     ?V0 + 6,?V0 + 0
   \   000051   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000054   D0E0         POP     A
   \   000056   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000059   05..         INC     ?V0 + 0
    984                len--;
   \   00005B   E5..         MOV     A,?V0 + 4
   \   00005D   24FF         ADD     A,#-0x1
   \   00005F   F5..         MOV     ?V0 + 4,A
   \   000061   E5..         MOV     A,?V0 + 5
   \   000063   34FF         ADDC    A,#-0x1
   \   000065   F5..         MOV     ?V0 + 5,A
    985              }
   \                     ??writeBuf_1:
   \   000067   E5..         MOV     A,?V0 + 0
   \   000069   C3           CLR     C
   \   00006A   9404         SUBB    A,#0x4
   \   00006C   5008         JNC     ??writeBuf_3
   \   00006E   E5..         MOV     A,?V0 + 4
   \   000070   7002         JNZ     ??writeBuf_4
   \   000072   E5..         MOV     A,?V0 + 5
   \                     ??writeBuf_4:
   \   000074   70CF         JNZ     ??writeBuf_2
    986          
    987              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_3:
   \   000076                ; Setup parameters for call to function writeWord
   \   000076   85..82       MOV     DPL,?XSP + 0
   \   000079   85..83       MOV     DPH,?XSP + 1
   \   00007C   AC82         MOV     R4,DPL
   \   00007E   AD83         MOV     R5,DPH
   \   000080   EE           MOV     A,R6
   \   000081   FA           MOV     R2,A
   \   000082   EF           MOV     A,R7
   \   000083   FB           MOV     R3,A
   \   000084   A9..         MOV     R1,?V0 + 1
   \   000086   12....       LCALL   ??writeWord?relay
    988              dstOff += OSAL_NV_WORD_SIZE;
   \   000089   EE           MOV     A,R6
   \   00008A   2404         ADD     A,#0x4
   \   00008C   FE           MOV     R6,A
   \   00008D   EF           MOV     A,R7
   \   00008E   3400         ADDC    A,#0x0
   \   000090   FF           MOV     R7,A
    989            }
    990          
    991            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??writeBuf_0:
   \   000091   E5..         MOV     A,?V0 + 4
   \   000093   5403         ANL     A,#0x3
   \   000095   F5..         MOV     ?V0 + 0,A
    992            len /= OSAL_NV_WORD_SIZE;
   \   000097   85....       MOV     ?V0 + 6,?V0 + 4
   \   00009A   85....       MOV     ?V0 + 7,?V0 + 5
   \   00009D   7402         MOV     A,#0x2
   \   00009F   78..         MOV     R0,#?V0 + 6
   \   0000A1   12....       LCALL   ?US_SHR
   \   0000A4   85....       MOV     ?V0 + 4,?V0 + 6
   \   0000A7   85....       MOV     ?V0 + 5,?V0 + 7
    993          
    994            if ( len )
   \   0000AA   E5..         MOV     A,?V0 + 4
   \   0000AC   7002         JNZ     ??writeBuf_5
   \   0000AE   E5..         MOV     A,?V0 + 5
   \                     ??writeBuf_5:
   \   0000B0   604B         JZ      ??writeBuf_6
    995            {
    996              writeWordM( dstPg, dstOff, buf, len );
   \   0000B2                ; Setup parameters for call to function HalFlashWrite
   \   0000B2   78..         MOV     R0,#?V0 + 4
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B7   AC..         MOV     R4,?V0 + 2
   \   0000B9   AD..         MOV     R5,?V0 + 3
   \   0000BB   8E..         MOV     ?V0 + 6,R6
   \   0000BD   8F..         MOV     ?V0 + 7,R7
   \   0000BF   7402         MOV     A,#0x2
   \   0000C1   78..         MOV     R0,#?V0 + 6
   \   0000C3   12....       LCALL   ?US_SHR
   \   0000C6   85....       MOV     ?V0 + 8,?V0 + 1
   \   0000C9   F5..         MOV     ?V0 + 9,A
   \   0000CB   7409         MOV     A,#0x9
   \   0000CD   78..         MOV     R0,#?V0 + 8
   \   0000CF   12....       LCALL   ?S_SHL
   \   0000D2   25..         ADD     A,?V0 + 6
   \   0000D4   FA           MOV     R2,A
   \   0000D5   E5..         MOV     A,?V0 + 9
   \   0000D7   35..         ADDC    A,?V0 + 7
   \   0000D9   FB           MOV     R3,A
   \   0000DA   12....       LCALL   ??HalFlashWrite?relay
   \   0000DD   7402         MOV     A,#0x2
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
    997              dstOff += OSAL_NV_WORD_SIZE * len;
   \   0000E2   7402         MOV     A,#0x2
   \   0000E4   78..         MOV     R0,#?V0 + 4
   \   0000E6   12....       LCALL   ?S_SHL
   \   0000E9   A8..         MOV     R0,?V0 + 4
   \   0000EB   A9..         MOV     R1,?V0 + 5
   \   0000ED   EE           MOV     A,R6
   \   0000EE   28           ADD     A,R0
   \   0000EF   FE           MOV     R6,A
   \   0000F0   EF           MOV     A,R7
   \   0000F1   39           ADDC    A,R1
   \   0000F2   FF           MOV     R7,A
    998              buf += OSAL_NV_WORD_SIZE * len;
   \   0000F3   E5..         MOV     A,?V0 + 2
   \   0000F5   28           ADD     A,R0
   \   0000F6   F5..         MOV     ?V0 + 2,A
   \   0000F8   E5..         MOV     A,?V0 + 3
   \   0000FA   39           ADDC    A,R1
   \   0000FB   F5..         MOV     ?V0 + 3,A
    999            }
   1000          
   1001            if ( rem )
   \                     ??writeBuf_6:
   \   0000FD   E5..         MOV     A,?V0 + 0
   \   0000FF   6058         JZ      ??writeBuf_7
   1002            {
   1003              uint8 idx = 0;
   \   000101   75..00       MOV     ?V0 + 4,#0x0
   1004              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000104                ; Setup parameters for call to function HalFlashRead
   \   000104   75..04       MOV     ?V0 + 6,#0x4
   \   000107   75..00       MOV     ?V0 + 7,#0x0
   \   00010A   78..         MOV     R0,#?V0 + 6
   \   00010C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010F   7402         MOV     A,#0x2
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   AC82         MOV     R4,DPL
   \   000116   AD83         MOV     R5,DPH
   \   000118   EE           MOV     A,R6
   \   000119   FA           MOV     R2,A
   \   00011A   EF           MOV     A,R7
   \   00011B   FB           MOV     R3,A
   \   00011C   A9..         MOV     R1,?V0 + 1
   \   00011E   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000121   12....       LCALL   ?DEALLOC_XSTACK8
   \   000124   8016         SJMP    ??writeBuf_8
   1005              while ( rem-- )
   1006              {
   1007                tmp[idx++] = *buf++;
   \                     ??writeBuf_9:
   \   000126   85..82       MOV     DPL,?V0 + 2
   \   000129   85..83       MOV     DPH,?V0 + 3
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   C0E0         PUSH    A
   \   00012F   85....       MOV     ?V0 + 6,?V0 + 4
   \   000132   12....       LCALL   ?Subroutine25 & 0xFFFF
   1008              }
   \                     ??CrossCallReturnLabel_45:
   \   000135   D0E0         POP     A
   \   000137   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00013A   05..         INC     ?V0 + 4
   \                     ??writeBuf_8:
   \   00013C   AA..         MOV     R2,?V0 + 0
   \   00013E   74FF         MOV     A,#-0x1
   \   000140   2A           ADD     A,R2
   \   000141   F5..         MOV     ?V0 + 0,A
   \   000143   EA           MOV     A,R2
   \   000144   70E0         JNZ     ??writeBuf_9
   1009              writeWord( dstPg, dstOff, tmp );
   \   000146                ; Setup parameters for call to function writeWord
   \   000146   85..82       MOV     DPL,?XSP + 0
   \   000149   85..83       MOV     DPH,?XSP + 1
   \   00014C   AC82         MOV     R4,DPL
   \   00014E   AD83         MOV     R5,DPH
   \   000150   EE           MOV     A,R6
   \   000151   FA           MOV     R2,A
   \   000152   EF           MOV     A,R7
   \   000153   FB           MOV     R3,A
   \   000154   A9..         MOV     R1,?V0 + 1
   \   000156   12....       LCALL   ??writeWord?relay
   1010            }
   1011          }
   \                     ??writeBuf_7:
   \   000159   02....       LJMP    ?Subroutine42 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   A3           INC     DPTR
   \   000008   8582..       MOV     ?V0 + 2,DPL
   \   00000B   8583..       MOV     ?V0 + 3,DPH
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET
   1012          
   1013          /*********************************************************************
   1014           * @fn      xferBuf
   1015           *
   1016           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
   1017           *
   1018           * @return  none
   1019           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1020          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
   1021          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 4,R1
   \   00000C   8A..         MOV     ?V0 + 6,R2
   \   00000E   8B..         MOV     ?V0 + 7,R3
   \   000010   8C..         MOV     ?V0 + 1,R4
   \   000012   7416         MOV     A,#0x16
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00001A   7418         MOV     A,#0x18
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FE           MOV     R6,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FF           MOV     R7,A
   1022            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000024   E5..         MOV     A,?V0 + 2
   \   000026   5403         ANL     A,#0x3
   \   000028   F5..         MOV     ?V0 + 0,A
   1023            uint8 tmp[OSAL_NV_WORD_SIZE];
   1024          
   1025            if ( rem )
   \   00002A   6064         JZ      ??CrossCallReturnLabel_33
   1026            {
   1027              dstOff -= rem;
   \   00002C   F5..         MOV     ?V0 + 8,A
   \   00002E   C3           CLR     C
   \   00002F   E5..         MOV     A,?V0 + 2
   \   000031   95..         SUBB    A,?V0 + 8
   \   000033   F5..         MOV     ?V0 + 2,A
   \   000035   E5..         MOV     A,?V0 + 3
   \   000037   9400         SUBB    A,#0x0
   \   000039   F5..         MOV     ?V0 + 3,A
   1028              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00003B                ; Setup parameters for call to function HalFlashRead
   \   00003B   75..04       MOV     ?V0 + 8,#0x4
   \   00003E   75..00       MOV     ?V0 + 9,#0x0
   \   000041   78..         MOV     R0,#?V0 + 8
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   7402         MOV     A,#0x2
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   AC82         MOV     R4,DPL
   \   00004D   AD83         MOV     R5,DPH
   \   00004F   AA..         MOV     R2,?V0 + 2
   \   000051   AB..         MOV     R3,?V0 + 3
   \   000053   A9..         MOV     R1,?V0 + 1
   \   000055   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   8023         SJMP    ??xferBuf_0
   1029          
   1030              while ( (rem < OSAL_NV_WORD_SIZE) && len )
   1031              {
   1032                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \                     ??xferBuf_1:
   \   00005D                ; Setup parameters for call to function HalFlashRead
   \   00005D   75..01       MOV     ?V0 + 8,#0x1
   \   000060   78..         MOV     R0,#?V0 + 8
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   85....       MOV     ?V0 + 8,?V0 + 0
   \   000068   7402         MOV     A,#0x2
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   1033                srcOff++;
   \   000073   12....       LCALL   ?Subroutine30 & 0xFFFF
   1034                rem++;
   \                     ??CrossCallReturnLabel_53:
   \   000076   05..         INC     ?V0 + 0
   1035                len--;
   \   000078   EE           MOV     A,R6
   \   000079   24FF         ADD     A,#-0x1
   \   00007B   1E           DEC     R6
   \   00007C   EF           MOV     A,R7
   \   00007D   34FF         ADDC    A,#-0x1
   \   00007F   FF           MOV     R7,A
   1036              }
   \                     ??xferBuf_0:
   \   000080   E5..         MOV     A,?V0 + 0
   \   000082   C3           CLR     C
   \   000083   9404         SUBB    A,#0x4
   \   000085   5006         JNC     ??xferBuf_2
   \   000087   EE           MOV     A,R6
   \   000088   7001         JNZ     ??xferBuf_3
   \   00008A   EF           MOV     A,R7
   \                     ??xferBuf_3:
   \   00008B   70D0         JNZ     ??xferBuf_1
   1037          
   1038              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_2:
   \   00008D                ; Setup parameters for call to function writeWord
   \   00008D   12....       LCALL   ?Subroutine19 & 0xFFFF
   1039              dstOff += OSAL_NV_WORD_SIZE;
   1040            }
   1041          
   1042            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_33:
   \   000090   EE           MOV     A,R6
   \   000091   5403         ANL     A,#0x3
   \   000093   F5..         MOV     ?V0 + 0,A
   1043            len /= OSAL_NV_WORD_SIZE;
   \   000095   8E..         MOV     ?V0 + 8,R6
   \   000097   8F..         MOV     ?V0 + 9,R7
   \   000099   7402         MOV     A,#0x2
   \   00009B   78..         MOV     R0,#?V0 + 8
   \   00009D   12....       LCALL   ?US_SHR
   \   0000A0   AE..         MOV     R6,?V0 + 8
   \   0000A2   AF..         MOV     R7,?V0 + 9
   \   0000A4   8029         SJMP    ??CrossCallReturnLabel_34
   1044          
   1045            while ( len-- )
   1046            {
   1047              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \                     ??xferBuf_4:
   \   0000A6                ; Setup parameters for call to function HalFlashRead
   \   0000A6   75..04       MOV     ?V0 + 8,#0x4
   \   0000A9   75..00       MOV     ?V0 + 9,#0x0
   \   0000AC   78..         MOV     R0,#?V0 + 8
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   7402         MOV     A,#0x2
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   AC82         MOV     R4,DPL
   \   0000B8   AD83         MOV     R5,DPH
   \   0000BA   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0000BD   12....       LCALL   ?DEALLOC_XSTACK8
   1048              srcOff += OSAL_NV_WORD_SIZE;
   \   0000C0   E5..         MOV     A,?V0 + 6
   \   0000C2   2404         ADD     A,#0x4
   \   0000C4   F5..         MOV     ?V0 + 6,A
   \   0000C6   E5..         MOV     A,?V0 + 7
   \   0000C8   3400         ADDC    A,#0x0
   \   0000CA   F5..         MOV     ?V0 + 7,A
   1049              writeWord( dstPg, dstOff, tmp );
   \   0000CC                ; Setup parameters for call to function writeWord
   \   0000CC   12....       LCALL   ?Subroutine19 & 0xFFFF
   1050              dstOff += OSAL_NV_WORD_SIZE;
   1051            }
   \                     ??CrossCallReturnLabel_34:
   \   0000CF   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000D2   7001         JNZ     ??xferBuf_5
   \   0000D4   E9           MOV     A,R1
   \                     ??xferBuf_5:
   \   0000D5   70CF         JNZ     ??xferBuf_4
   1052          
   1053            if ( rem )
   \   0000D7   E5..         MOV     A,?V0 + 0
   \   0000D9   6059         JZ      ??xferBuf_6
   1054            {
   1055              uint8 idx = 0;
   \   0000DB   7E00         MOV     R6,#0x0
   1056              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   0000DD                ; Setup parameters for call to function HalFlashRead
   \   0000DD   75..04       MOV     ?V0 + 8,#0x4
   \   0000E0   8E..         MOV     ?V0 + 9,R6
   \   0000E2   78..         MOV     R0,#?V0 + 8
   \   0000E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E7   7402         MOV     A,#0x2
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   AC82         MOV     R4,DPL
   \   0000EE   AD83         MOV     R5,DPH
   \   0000F0   AA..         MOV     R2,?V0 + 2
   \   0000F2   AB..         MOV     R3,?V0 + 3
   \   0000F4   A9..         MOV     R1,?V0 + 1
   \   0000F6   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0000F9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FC   8019         SJMP    ??xferBuf_7
   1057              while ( rem-- )
   1058              {
   1059                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \                     ??xferBuf_8:
   \   0000FE                ; Setup parameters for call to function HalFlashRead
   \   0000FE   75..01       MOV     ?V0 + 8,#0x1
   \   000101   78..         MOV     R0,#?V0 + 8
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   8E..         MOV     ?V0 + 8,R6
   \   000108   7402         MOV     A,#0x2
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000110   12....       LCALL   ?DEALLOC_XSTACK8
   1060                srcOff++;
   \   000113   12....       LCALL   ?Subroutine30 & 0xFFFF
   1061                idx++;
   \                     ??CrossCallReturnLabel_54:
   \   000116   0E           INC     R6
   1062              }
   \                     ??xferBuf_7:
   \   000117   AA..         MOV     R2,?V0 + 0
   \   000119   74FF         MOV     A,#-0x1
   \   00011B   2A           ADD     A,R2
   \   00011C   F5..         MOV     ?V0 + 0,A
   \   00011E   EA           MOV     A,R2
   \   00011F   70DD         JNZ     ??xferBuf_8
   1063              writeWord( dstPg, dstOff, tmp );
   \   000121                ; Setup parameters for call to function writeWord
   \   000121   85..82       MOV     DPL,?XSP + 0
   \   000124   85..83       MOV     DPH,?XSP + 1
   \   000127   AC82         MOV     R4,DPL
   \   000129   AD83         MOV     R5,DPH
   \   00012B   AA..         MOV     R2,?V0 + 2
   \   00012D   AB..         MOV     R3,?V0 + 3
   \   00012F   A9..         MOV     R1,?V0 + 1
   \   000131   12....       LCALL   ??writeWord?relay
   1064            }
   1065          }
   \                     ??xferBuf_6:
   \   000134   02....       LJMP    ?Subroutine42 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E5..         MOV     A,?V0 + 6
   \   000002   2401         ADD     A,#0x1
   \   000004   F5..         MOV     ?V0 + 6,A
   \   000006   E5..         MOV     A,?V0 + 7
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 7,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   AC82         MOV     R4,DPL
   \   000008   AD83         MOV     R5,DPH
   \   00000A   AA..         MOV     R2,?V0 + 2
   \   00000C   AB..         MOV     R3,?V0 + 3
   \   00000E   A9..         MOV     R1,?V0 + 1
   \   000010   12....       LCALL   ??writeWord?relay
   \   000013   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E582         MOV     A,DPL
   \   000002   25..         ADD     A,?V0 + 8
   \   000004   FC           MOV     R4,A
   \   000005   E583         MOV     A,DPH
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A                REQUIRE ??Subroutine56_0
   \   00000A                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   AA..         MOV     R2,?V0 + 6
   \   000002   AB..         MOV     R3,?V0 + 7
   \   000004                REQUIRE ??Subroutine57_0
   \   000004                ; // Fall through to label ??Subroutine57_0
   1066          
   1067          /*********************************************************************
   1068           * @fn      writeItem
   1069           *
   1070           * @brief   Writes an item header/data combo to the specified NV page.
   1071           *
   1072           * @param   pg - Valid NV Flash page.
   1073           * @param   id - Valid NV item Id.
   1074           * @param   len  - Byte count of the data to write.
   1075           * @param   buf  - The data to write. If NULL, no data/checksum write.
   1076           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
   1077           *
   1078           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
   1079           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1080          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
   1081          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   8A..         MOV     ?V0 + 12,R2
   \   00000E   8B..         MOV     ?V0 + 13,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
   \   000014   7420         MOV     A,#0x20
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 8,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 9,A
   \   000020   7422         MOV     A,#0x22
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 6,A
   1082            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000028   E9           MOV     A,R1
   \   000029   C3           CLR     C
   \   00002A   33           RLC     A
   \   00002B   F5..         MOV     ?V0 + 0,A
   \   00002D   E4           CLR     A
   \   00002E   33           RLC     A
   \   00002F   F5..         MOV     ?V0 + 1,A
   \   000031   E5..         MOV     A,?V0 + 0
   \   000033   24..         ADD     A,#((pgOff + 14) & 0xff)
   \   000035   F5..         MOV     ?V0 + 14,A
   \   000037   E5..         MOV     A,?V0 + 1
   \   000039   34..         ADDC    A,#(((pgOff - 242) >> 8) & 0xff)
   \   00003B   F5..         MOV     ?V0 + 15,A
   \   00003D   85..82       MOV     DPL,?V0 + 14
   \   000040   12....       LCALL   ?Subroutine10 & 0xFFFF
   1083            uint8 rtrn = FALSE;
   \                     ??CrossCallReturnLabel_88:
   \   000043   75..00       MOV     ?V0 + 3,#0x0
   1084            osalNvHdr_t hdr;
   1085          
   1086            hdr.id = id;
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   EA           MOV     A,R2
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   EB           MOV     A,R3
   \   000050   F0           MOVX    @DPTR,A
   1087            hdr.len = len;
   \   000051   7402         MOV     A,#0x2
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   EE           MOV     A,R6
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   EF           MOV     A,R7
   \   00005A   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   1088          
   1089            writeWord( pg, offset, (uint8 *)&hdr );
   \                     ??CrossCallReturnLabel_78:
   \   00005D   AA..         MOV     R2,?V0 + 4
   \   00005F   AB..         MOV     R3,?V0 + 5
   \   000061   12....       LCALL   ??writeWord?relay
   1090            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000064                ; Setup parameters for call to function HalFlashRead
   \   000064   75..08       MOV     ?V0 + 10,#0x8
   \   000067   75..00       MOV     ?V0 + 11,#0x0
   \   00006A   78..         MOV     R0,#?V0 + 10
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   7402         MOV     A,#0x2
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   AC82         MOV     R4,DPL
   \   000076   AD83         MOV     R5,DPH
   \   000078   AA..         MOV     R2,?V0 + 4
   \   00007A   AB..         MOV     R3,?V0 + 5
   \   00007C   A9..         MOV     R1,?V0 + 2
   \   00007E   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   1091          
   1092            if ( (hdr.id == id) && (hdr.len == len) )
   \   000084   7402         MOV     A,#0x2
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00008C   85..82       MOV     DPL,?XSP + 0
   \   00008F   85..83       MOV     DPH,?XSP + 1
   \   000092   E0           MOVX    A,@DPTR
   \   000093   65..         XRL     A,?V0 + 12
   \   000095   7004         JNZ     ??writeItem_0
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   65..         XRL     A,?V0 + 13
   \                     ??writeItem_0:
   \   00009B   6003         JZ      $+5
   \   00009D   02....       LJMP    ??writeItem_1 & 0xFFFF
   \   0000A0   EE           MOV     A,R6
   \   0000A1   68           XRL     A,R0
   \   0000A2   7002         JNZ     ??writeItem_2
   \   0000A4   EF           MOV     A,R7
   \   0000A5   69           XRL     A,R1
   \                     ??writeItem_2:
   \   0000A6   6003         JZ      $+5
   \   0000A8   02....       LJMP    ??writeItem_1 & 0xFFFF
   1093            {
   1094              if ( flag )
   \   0000AB   E5..         MOV     A,?V0 + 6
   \   0000AD   7003         JNZ     $+5
   \   0000AF   02....       LJMP    ??writeItem_3 & 0xFFFF
   1095              {
   1096                hdr.chk = calcChkB( len, buf );
   \   0000B2   85..82       MOV     DPL,?V0 + 8
   \   0000B5   85..83       MOV     DPH,?V0 + 9
   \   0000B8   EE           MOV     A,R6
   \   0000B9   F8           MOV     R0,A
   \   0000BA   EF           MOV     A,R7
   \   0000BB   F9           MOV     R1,A
   \   0000BC   E8           MOV     A,R0
   \   0000BD   5403         ANL     A,#0x3
   \   0000BF   F5..         MOV     ?V0 + 0,A
   \   0000C1   E582         MOV     A,DPL
   \   0000C3   7002         JNZ     ??writeItem_4
   \   0000C5   E583         MOV     A,DPH
   \                     ??writeItem_4:
   \   0000C7   7015         JNZ     ??writeItem_5
   \   0000C9   E8           MOV     A,R0
   \   0000CA   75F0FF       MOV     B,#-0x1
   \   0000CD   A4           MUL     AB
   \   0000CE   F8           MOV     R0,A
   \   0000CF   AAF0         MOV     R2,B
   \   0000D1   75F0FF       MOV     B,#-0x1
   \   0000D4   E9           MOV     A,R1
   \   0000D5   A4           MUL     AB
   \   0000D6   2A           ADD     A,R2
   \   0000D7   F9           MOV     R1,A
   \   0000D8   E8           MOV     A,R0
   \   0000D9   FA           MOV     R2,A
   \   0000DA   E9           MOV     A,R1
   \   0000DB   FB           MOV     R3,A
   \   0000DC   8022         SJMP    ??writeItem_6
   \                     ??writeItem_5:
   \   0000DE   7A00         MOV     R2,#0x0
   \   0000E0   7B00         MOV     R3,#0x0
   \   0000E2   800A         SJMP    ??writeItem_7
   \                     ??writeItem_8:
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   FC           MOV     R4,A
   \   0000E6   EA           MOV     A,R2
   \   0000E7   2C           ADD     A,R4
   \   0000E8   FA           MOV     R2,A
   \   0000E9   EB           MOV     A,R3
   \   0000EA   3400         ADDC    A,#0x0
   \   0000EC   FB           MOV     R3,A
   \   0000ED   A3           INC     DPTR
   \                     ??writeItem_7:
   \   0000EE   E8           MOV     A,R0
   \   0000EF   FC           MOV     R4,A
   \   0000F0   E9           MOV     A,R1
   \   0000F1   FD           MOV     R5,A
   \   0000F2   74FF         MOV     A,#-0x1
   \   0000F4   2C           ADD     A,R4
   \   0000F5   18           DEC     R0
   \   0000F6   74FF         MOV     A,#-0x1
   \   0000F8   3D           ADDC    A,R5
   \   0000F9   F9           MOV     R1,A
   \   0000FA   EC           MOV     A,R4
   \   0000FB   7001         JNZ     ??writeItem_9
   \   0000FD   ED           MOV     A,R5
   \                     ??writeItem_9:
   \   0000FE   70E4         JNZ     ??writeItem_8
   \                     ??writeItem_6:
   \   000100   E5..         MOV     A,?V0 + 0
   \   000102   601F         JZ      ??writeItem_10
   \   000104   7404         MOV     A,#0x4
   \   000106   C3           CLR     C
   \   000107   95..         SUBB    A,?V0 + 0
   \   000109   F8           MOV     R0,A
   \   00010A   E4           CLR     A
   \   00010B   9400         SUBB    A,#0x0
   \   00010D   F9           MOV     R1,A
   \   00010E   E8           MOV     A,R0
   \   00010F   75F0FF       MOV     B,#-0x1
   \   000112   A4           MUL     AB
   \   000113   F8           MOV     R0,A
   \   000114   ACF0         MOV     R4,B
   \   000116   75F0FF       MOV     B,#-0x1
   \   000119   E9           MOV     A,R1
   \   00011A   A4           MUL     AB
   \   00011B   2C           ADD     A,R4
   \   00011C   F9           MOV     R1,A
   \   00011D   EA           MOV     A,R2
   \   00011E   28           ADD     A,R0
   \   00011F   FA           MOV     R2,A
   \   000120   EB           MOV     A,R3
   \   000121   39           ADDC    A,R1
   \   000122   FB           MOV     R3,A
   \                     ??writeItem_10:
   \   000123   7404         MOV     A,#0x4
   \   000125   12....       LCALL   ?XSTACK_DISP0_8
   \   000128   EA           MOV     A,R2
   \   000129   F0           MOVX    @DPTR,A
   \   00012A   A3           INC     DPTR
   \   00012B   EB           MOV     A,R3
   \   00012C   F0           MOVX    @DPTR,A
   1097          
   1098                offset += OSAL_NV_HDR_SIZE;
   \   00012D   12....       LCALL   ?Subroutine24 & 0xFFFF
   1099                if ( buf != NULL )
   \                     ??CrossCallReturnLabel_42:
   \   000130   E5..         MOV     A,?V0 + 8
   \   000132   7002         JNZ     ??writeItem_11
   \   000134   E5..         MOV     A,?V0 + 9
   \                     ??writeItem_11:
   \   000136   6017         JZ      ??writeItem_12
   1100                {
   1101                  writeBuf( pg, offset, len, buf );
   \   000138                ; Setup parameters for call to function writeBuf
   \   000138   78..         MOV     R0,#?V0 + 8
   \   00013A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013D   EE           MOV     A,R6
   \   00013E   FC           MOV     R4,A
   \   00013F   EF           MOV     A,R7
   \   000140   FD           MOV     R5,A
   \   000141   AA..         MOV     R2,?V0 + 4
   \   000143   AB..         MOV     R3,?V0 + 5
   \   000145   A9..         MOV     R1,?V0 + 2
   \   000147   12....       LCALL   ??writeBuf?relay
   \   00014A   7402         MOV     A,#0x2
   \   00014C   12....       LCALL   ?DEALLOC_XSTACK8
   1102                }
   1103          
   1104                if ( hdr.chk == calcChkF( pg, offset, len ) )
   \                     ??writeItem_12:
   \   00014F                ; Setup parameters for call to function calcChkF
   \   00014F   EE           MOV     A,R6
   \   000150   FC           MOV     R4,A
   \   000151   EF           MOV     A,R7
   \   000152   FD           MOV     R5,A
   \   000153   AA..         MOV     R2,?V0 + 4
   \   000155   AB..         MOV     R3,?V0 + 5
   \   000157   A9..         MOV     R1,?V0 + 2
   \   000159   12....       LCALL   ??calcChkF?relay
   \   00015C   7404         MOV     A,#0x4
   \   00015E   12....       LCALL   ?XSTACK_DISP0_8
   \   000161   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000164   7002         JNZ     ??writeItem_13
   \   000166   EB           MOV     A,R3
   \   000167   6D           XRL     A,R5
   \                     ??writeItem_13:
   \   000168   7026         JNZ     ??writeItem_14
   1105                {
   1106                  if ( hdr.chk == setChk( pg, offset, hdr.chk ) )
   \   00016A                ; Setup parameters for call to function setChk
   \   00016A   AA..         MOV     R2,?V0 + 4
   \   00016C   AB..         MOV     R3,?V0 + 5
   \   00016E   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000171   7404         MOV     A,#0x4
   \   000173   12....       LCALL   ?XSTACK_DISP0_8
   \   000176   E0           MOVX    A,@DPTR
   \   000177   68           XRL     A,R0
   \   000178   7003         JNZ     ??writeItem_15
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   69           XRL     A,R1
   \                     ??writeItem_15:
   \   00017D   7011         JNZ     ??writeItem_14
   1107                  {
   1108                    hotItemUpdate(pg, offset, hdr.id);
   \   00017F                ; Setup parameters for call to function hotItemUpdate
   \   00017F   85..82       MOV     DPL,?XSP + 0
   \   000182   85..83       MOV     DPH,?XSP + 1
   \   000185   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000188   A9..         MOV     R1,?V0 + 2
   \   00018A   12....       LCALL   ??hotItemUpdate?relay
   1109                    rtrn = TRUE;
   1110                  }
   1111                }
   1112              }
   1113              else
   1114              {
   1115                rtrn = TRUE;
   \                     ??writeItem_3:
   \   00018D   75..01       MOV     ?V0 + 3,#0x1
   1116              }
   1117          
   1118              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_14:
   \   000190   7402         MOV     A,#0x2
   \   000192   12....       LCALL   ?XSTACK_DISP0_8
   \   000195   12....       LCALL   ?Subroutine18 & 0xFFFF
   1119            }
   \                     ??CrossCallReturnLabel_31:
   \   000198   C3           CLR     C
   \   000199   E8           MOV     A,R0
   \   00019A   94F4         SUBB    A,#-0xc
   \   00019C   E9           MOV     A,R1
   \   00019D   94FF         SUBB    A,#-0x1
   \   00019F   4006         JC      ??writeItem_16
   \   0001A1   7EFC         MOV     R6,#-0x4
   \   0001A3   7FFF         MOV     R7,#-0x1
   \   0001A5   8043         SJMP    ??writeItem_17
   \                     ??writeItem_16:
   \   0001A7   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0001AA   803E         SJMP    ??writeItem_17
   1120            else
   1121            {
   1122              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_1:
   \   0001AC   C3           CLR     C
   \   0001AD   E8           MOV     A,R0
   \   0001AE   94F4         SUBB    A,#-0xc
   \   0001B0   E9           MOV     A,R1
   \   0001B1   94FF         SUBB    A,#-0x1
   \   0001B3   4006         JC      ??writeItem_18
   \   0001B5   7EFC         MOV     R6,#-0x4
   \   0001B7   7FFF         MOV     R7,#-0x1
   \   0001B9   8003         SJMP    ??CrossCallReturnLabel_38
   \                     ??writeItem_18:
   \   0001BB   12....       LCALL   ?Subroutine21 & 0xFFFF
   1123          
   1124              if (len > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]))
   \                     ??CrossCallReturnLabel_38:
   \   0001BE   85..82       MOV     DPL,?V0 + 14
   \   0001C1   85..83       MOV     DPH,?V0 + 15
   \   0001C4   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0001C7   F8           MOV     R0,A
   \   0001C8   7408         MOV     A,#0x8
   \   0001CA   99           SUBB    A,R1
   \   0001CB   F9           MOV     R1,A
   \   0001CC   C3           CLR     C
   \   0001CD   E8           MOV     A,R0
   \   0001CE   9E           SUBB    A,R6
   \   0001CF   E9           MOV     A,R1
   \   0001D0   9F           SUBB    A,R7
   \   0001D1   5004         JNC     ??writeItem_19
   1125              {
   1126                len = (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]);
   \   0001D3   E8           MOV     A,R0
   \   0001D4   FE           MOV     R6,A
   \   0001D5   E9           MOV     A,R1
   \   0001D6   FF           MOV     R7,A
   1127              }
   1128          
   1129              pgLost[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_19:
   \   0001D7   E5..         MOV     A,?V0 + 0
   \   0001D9   24..         ADD     A,#((pgLost + 14) & 0xff)
   \   0001DB   F582         MOV     DPL,A
   \   0001DD   E5..         MOV     A,?V0 + 1
   \   0001DF   34..         ADDC    A,#(((pgLost - 242) >> 8) & 0xff)
   \   0001E1   F583         MOV     DPH,A
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   2E           ADD     A,R6
   \   0001E5   F0           MOVX    @DPTR,A
   \   0001E6   A3           INC     DPTR
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   3F           ADDC    A,R7
   \   0001E9   F0           MOVX    @DPTR,A
   1130            }
   1131            pgOff[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_17:
   \   0001EA   85..82       MOV     DPL,?V0 + 14
   \   0001ED   85..83       MOV     DPH,?V0 + 15
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   2E           ADD     A,R6
   \   0001F2   F0           MOVX    @DPTR,A
   \   0001F3   A3           INC     DPTR
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   3F           ADDC    A,R7
   \   0001F6   F0           MOVX    @DPTR,A
   1132          
   1133            return rtrn;
   \   0001F7   A9..         MOV     R1,?V0 + 3
   \   0001F9   7408         MOV     A,#0x8
   \   0001FB                REQUIRE ?Subroutine46
   \   0001FB                ; // Fall through to label ?Subroutine46
   1134          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   F8           MOV     R0,A
   \   000004   7408         MOV     A,#0x8
   \   000006   28           ADD     A,R0
   \   000007   FE           MOV     R6,A
   \   000008   E4           CLR     A
   \   000009   39           ADDC    A,R1
   \   00000A   FF           MOV     R7,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   7403         MOV     A,#0x3
   \   000002   28           ADD     A,R0
   \   000003   08           INC     R0
   \   000004   08           INC     R0
   \   000005   08           INC     R0
   \   000006   E4           CLR     A
   \   000007   39           ADDC    A,R1
   \   000008   02....       LJMP    ?Subroutine41 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A9..         MOV     R1,?V0 + 2
   \   000002   12....       LCALL   ??setChk?relay
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   A8..         MOV     R0,?V0 + 0
   \   00000B   A9..         MOV     R1,?V0 + 1
   \   00000D   22           RET
   1135          
   1136          /*********************************************************************
   1137           * @fn      hotItem
   1138           *
   1139           * @brief   Look for the parameter 'id' in the hot items array.
   1140           *
   1141           * @param   id - A valid NV item Id.
   1142           *
   1143           * @return  A valid index into the hot items if the item is hot; OSAL_NV_MAX_HOT if not.
   1144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1145          static uint8 hotItem(uint16 id)
   \                     hotItem:
   1146          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1147            uint8 hotIdx;
   1148          
   1149            for (hotIdx = 0; hotIdx < OSAL_NV_MAX_HOT; hotIdx++)
   \   000004   7900         MOV     R1,#0x0
   1150            {
   1151              if (hotIds[hotIdx] == id)
   \                     ??hotItem_0:
   \   000006   E9           MOV     A,R1
   \   000007   C3           CLR     C
   \   000008   33           RLC     A
   \   000009   FC           MOV     R4,A
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   FD           MOV     R5,A
   \   00000D   EC           MOV     A,R4
   \   00000E   24..         ADD     A,#(hotIds & 0xff)
   \   000010   F582         MOV     DPL,A
   \   000012   ED           MOV     A,R5
   \   000013   34..         ADDC    A,#((hotIds >> 8) & 0xff)
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6A           XRL     A,R2
   \   000019   7003         JNZ     ??hotItem_1
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6B           XRL     A,R3
   \                     ??hotItem_1:
   \   00001E   6007         JZ      ??hotItem_2
   1152              {
   1153                break;
   1154              }
   1155            }
   \   000020   09           INC     R1
   \   000021   E9           MOV     A,R1
   \   000022   C3           CLR     C
   \   000023   9403         SUBB    A,#0x3
   \   000025   40DF         JC      ??hotItem_0
   1156          
   1157            return hotIdx;
   \                     ??hotItem_2:
   \   000027   02....       LJMP    ?Subroutine40 & 0xFFFF
   1158          }
   1159          
   1160          /*********************************************************************
   1161           * @fn      hotItemUpdate
   1162           *
   1163           * @brief   If the parameter 'id' is a hot item, update the corresponding hot item data.
   1164           *
   1165           * @param   pg - The new NV page corresponding to the hot item.
   1166           * @param   off - The new NV page offset corresponding to the hot item.
   1167           * @param   id - A valid NV item Id.
   1168           *
   1169           * @return  none
   1170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1171          static void hotItemUpdate(uint8 pg, uint16 off, uint16 id)
   \                     hotItemUpdate:
   1172          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FA           MOV     R2,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FB           MOV     R3,A
   1173            uint8 hotIdx = hotItem(id);
   \   00000F                ; Setup parameters for call to function hotItem
   \   00000F   12....       LCALL   ??hotItem?relay
   \   000012   E9           MOV     A,R1
   \   000013   FA           MOV     R2,A
   1174          
   1175            if (hotIdx < OSAL_NV_MAX_HOT)
   \   000014   C3           CLR     C
   \   000015   9403         SUBB    A,#0x3
   \   000017   5010         JNC     ??hotItemUpdate_0
   1176            {
   1177              {
   1178                hotPg[hotIdx] = pg;
   \   000019   8A82         MOV     DPL,R2
   \   00001B   12....       LCALL   ?Subroutine31 & 0xFFFF
   1179                hotOff[hotIdx] = off;
   1180              }
   1181            }
   \                     ??CrossCallReturnLabel_110:
   \   00001E   EE           MOV     A,R6
   \   00001F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000022   E5..         MOV     A,?V0 + 0
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   E5..         MOV     A,?V0 + 1
   \   000028   F0           MOVX    @DPTR,A
   1182          }
   \                     ??hotItemUpdate_0:
   \   000029                REQUIRE ?Subroutine47
   \   000029                ; // Fall through to label ?Subroutine47

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   A882         MOV     R0,DPL
   \   000002   E8           MOV     A,R0
   \   000003                REQUIRE ??Subroutine59_0
   \   000003                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   24..         ADD     A,#(hotPg & 0xff)
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   34..         ADDC    A,#((hotPg >> 8) & 0xff)
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E8           MOV     A,R0
   \   000002   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   E8           MOV     A,R0
   \   000007   24..         ADD     A,#(hotOff & 0xff)
   \   000009   F582         MOV     DPL,A
   \   00000B   E9           MOV     A,R1
   \   00000C   34..         ADDC    A,#((hotOff >> 8) & 0xff)
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET
   1183          
   1184          /*********************************************************************
   1185           * @fn      osal_nv_init
   1186           *
   1187           * @brief   Initialize NV service.
   1188           *
   1189           * @param   p - Not used.
   1190           *
   1191           * @return  none
   1192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1193          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1194          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1195            (void)p;  // Suppress Lint warning.
   1196            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000004                ; Setup parameters for call to function initNV
   \   000004   12....       LCALL   ??initNV?relay
   1197          }
   \   000007   02....       LJMP    ?Subroutine40 & 0xFFFF
   1198          
   1199          /*********************************************************************
   1200           * @fn      osal_nv_item_init
   1201           *
   1202           * @brief   If the NV item does not already exist, it is created and
   1203           *          initialized with the data passed to the function, if any.
   1204           *          This function must be called before calling osal_nv_read() or
   1205           *          osal_nv_write().
   1206           *
   1207           * @param   id  - Valid NV item Id.
   1208           * @param   len - Item length.
   1209           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1210           *
   1211           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1212           *          SUCCESS       - Id already existed, no action taken.
   1213           *          NV_OPER_FAILED - Failure to find or create Id.
   1214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1215          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1216          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine13 & 0xFFFF
   1217            uint16 offset;
   1218          
   1219            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \                     ??CrossCallReturnLabel_21:
   \   000015                ; Setup parameters for call to function HalAdcCheckVdd
   \   000015   794E         MOV     R1,#0x4e
   \   000017   12....       LCALL   ??HalAdcCheckVdd?relay
   \   00001A   E9           MOV     A,R1
   \   00001B   7004         JNZ     ??osal_nv_item_init_0
   1220            {
   1221              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_1:
   \   00001D   790A         MOV     R1,#0xa
   \   00001F   8039         SJMP    ??osal_nv_item_init_2
   1222            }
   1223            else if ((offset = findItem(id)) != OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_item_init_0:
   \   000021                ; Setup parameters for call to function findItem
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   ??findItem?relay
   \   000028   EA           MOV     A,R2
   \   000029   7001         JNZ     ??osal_nv_item_init_3
   \   00002B   EB           MOV     A,R3
   \                     ??osal_nv_item_init_3:
   \   00002C   6010         JZ      ??osal_nv_item_init_4
   1224            {
   1225              // Re-populate the NV hot item data if the corresponding items are already established.
   1226              hotItemUpdate(findPg, offset, id);
   \   00002E                ; Setup parameters for call to function hotItemUpdate
   \   00002E   EE           MOV     A,R6
   \   00002F   FC           MOV     R4,A
   \   000030   EF           MOV     A,R7
   \   000031   FD           MOV     R5,A
   \   000032   90....       MOV     DPTR,#findPg
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   12....       LCALL   ??hotItemUpdate?relay
   1227          
   1228              return SUCCESS;
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   801C         SJMP    ??osal_nv_item_init_2
   1229            }
   1230            else if ( initItem( TRUE, id, len, buf ) != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_item_init_4:
   \   00003E                ; Setup parameters for call to function initItem
   \   00003E   78..         MOV     R0,#?V0 + 2
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   AC..         MOV     R4,?V0 + 0
   \   000045   AD..         MOV     R5,?V0 + 1
   \   000047   EE           MOV     A,R6
   \   000048   FA           MOV     R2,A
   \   000049   EF           MOV     A,R7
   \   00004A   FB           MOV     R3,A
   \   00004B   7901         MOV     R1,#0x1
   \   00004D   12....       LCALL   ??initItem?relay
   \   000050   7402         MOV     A,#0x2
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   \   000055   E9           MOV     A,R1
   \   000056   60C5         JZ      ??osal_nv_item_init_1
   1231            {
   1232              return NV_ITEM_UNINIT;
   \   000058   7909         MOV     R1,#0x9
   1233            }
   \                     ??osal_nv_item_init_2:
   \   00005A   02....       LJMP    ?Subroutine44 & 0xFFFF
   1234            else
   1235            {
   1236              return NV_OPER_FAILED;
   1237            }
   1238          }
   1239          
   1240          /*********************************************************************
   1241           * @fn      osal_nv_item_len
   1242           *
   1243           * @brief   Get the data length of the item stored in NV memory.
   1244           *
   1245           * @param   id  - Valid NV item Id.
   1246           *
   1247           * @return  Item length, if found; zero otherwise.
   1248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1249          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1250          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1251            osalNvHdr_t hdr;
   1252            uint16 offset;
   1253            uint8 hotIdx;
   1254          
   1255            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000E                ; Setup parameters for call to function hotItem
   \   00000E   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000011   5046         JNC     ??osal_nv_item_len_0
   1256            {
   1257              findPg = hotPg[hotIdx];
   \   000013   8B82         MOV     DPL,R3
   \   000015   12....       LCALL   ?Subroutine31 & 0xFFFF
   1258              offset = hotOff[hotIdx];
   1259            }
   \                     ??CrossCallReturnLabel_111:
   \   000018   E0           MOVX    A,@DPTR
   \   000019   90....       MOV     DPTR,#findPg
   \   00001C   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00001F   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   1260            else if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   1261            {
   1262              return 0;
   1263            }
   1264          
   1265            HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_114:
   \   000022                ; Setup parameters for call to function HalFlashRead
   \   000022   75..08       MOV     ?V0 + 0,#0x8
   \   000025   75..00       MOV     ?V0 + 1,#0x0
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   7402         MOV     A,#0x2
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   AC82         MOV     R4,DPL
   \   000034   AD83         MOV     R5,DPH
   \   000036   74F8         MOV     A,#-0x8
   \   000038   2A           ADD     A,R2
   \   000039   FA           MOV     R2,A
   \   00003A   74FF         MOV     A,#-0x1
   \   00003C   3B           ADDC    A,R3
   \   00003D   FB           MOV     R3,A
   \   00003E   90....       MOV     DPTR,#findPg
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F9           MOV     R1,A
   \   000043   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
   1266            return hdr.len;
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000051   7408         MOV     A,#0x8
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   02....       LJMP    ?Subroutine47 & 0xFFFF
   \                     ??osal_nv_item_len_0:
   \   000059                ; Setup parameters for call to function findItem
   \   000059   EE           MOV     A,R6
   \   00005A   FA           MOV     R2,A
   \   00005B   EF           MOV     A,R7
   \   00005C   FB           MOV     R3,A
   \   00005D   12....       LCALL   ??findItem?relay
   \   000060   EA           MOV     A,R2
   \   000061   7001         JNZ     ??osal_nv_item_len_1
   \   000063   EB           MOV     A,R3
   \                     ??osal_nv_item_len_1:
   \   000064   70BC         JNZ     ??CrossCallReturnLabel_114
   \   000066   7A00         MOV     R2,#0x0
   \   000068   7B00         MOV     R3,#0x0
   \   00006A   80E5         SJMP    ??CrossCallReturnLabel_115
   1267          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ??hotItem?relay
   \   000003   E9           MOV     A,R1
   \   000004   FB           MOV     R3,A
   \   000005   C3           CLR     C
   \   000006   9403         SUBB    A,#0x3
   \   000008   22           RET
   1268          
   1269          /*********************************************************************
   1270           * @fn      osal_nv_write
   1271           *
   1272           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1273           *          an element of an item by indexing into the item with an offset.
   1274           *
   1275           * @param   id  - Valid NV item Id.
   1276           * @param   ndx - Index offset into item
   1277           * @param   len - Length of data to write.
   1278           * @param  *buf - Data to write.
   1279           *
   1280           * @return  SUCCESS if successful, NV_ITEM_UNINIT if item did not
   1281           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1283          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1284          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   740B         MOV     A,#0xb
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8C..         MOV     ?V0 + 4,R4
   \   000016   8D..         MOV     ?V0 + 5,R5
   \   000018   7425         MOV     A,#0x25
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 14,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V0 + 15,A
   1285            uint8 rtrn = SUCCESS;
   \   000024   75..00       MOV     ?V0 + 10,#0x0
   1286          
   1287            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   000027                ; Setup parameters for call to function HalAdcCheckVdd
   \   000027   794E         MOV     R1,#0x4e
   \   000029   12....       LCALL   ??HalAdcCheckVdd?relay
   \   00002C   E9           MOV     A,R1
   \   00002D   7005         JNZ     ??osal_nv_write_0
   1288            {
   1289              return NV_OPER_FAILED;
   \                     ??osal_nv_write_1:
   \   00002F   790A         MOV     R1,#0xa
   \   000031   02....       LJMP    ??osal_nv_write_2 & 0xFFFF
   1290            }
   1291            else if ( len != 0 )
   \                     ??osal_nv_write_0:
   \   000034   E5..         MOV     A,?V0 + 14
   \   000036   7002         JNZ     ??osal_nv_write_3
   \   000038   E5..         MOV     A,?V0 + 15
   \                     ??osal_nv_write_3:
   \   00003A   7003         JNZ     $+5
   \   00003C   02....       LJMP    ??CrossCallReturnLabel_13 & 0xFFFF
   1292            {
   1293              osalNvHdr_t hdr;
   1294              uint16 origOff, srcOff;
   1295              uint16 cnt, chk;
   1296              uint8 *ptr, srcPg;
   1297          
   1298              origOff = srcOff = findItem( id );
   \   00003F                ; Setup parameters for call to function findItem
   \   00003F   740B         MOV     A,#0xb
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000047   12....       LCALL   ??findItem?relay
   \   00004A   8A..         MOV     ?V0 + 0,R2
   \   00004C   8B..         MOV     ?V0 + 1,R3
   \   00004E   A8..         MOV     R0,?V0 + 0
   \   000050   A9..         MOV     R1,?V0 + 1
   \   000052   7401         MOV     A,#0x1
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   E8           MOV     A,R0
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   E9           MOV     A,R1
   \   00005B   F0           MOVX    @DPTR,A
   1299              srcPg = findPg;
   \   00005C   90....       MOV     DPTR,#findPg
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F5..         MOV     ?V0 + 3,A
   1300              if ( srcOff == OSAL_NV_ITEM_NULL )
   \   000062   E8           MOV     A,R0
   \   000063   7001         JNZ     ??osal_nv_write_4
   \   000065   E9           MOV     A,R1
   \                     ??osal_nv_write_4:
   \   000066   7005         JNZ     ??osal_nv_write_5
   1301              {
   1302                return NV_ITEM_UNINIT;
   \   000068   7909         MOV     R1,#0x9
   \   00006A   02....       LJMP    ??osal_nv_write_2 & 0xFFFF
   1303              }
   1304          
   1305              HalFlashRead(srcPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_5:
   \   00006D                ; Setup parameters for call to function HalFlashRead
   \   00006D   75..08       MOV     ?V0 + 6,#0x8
   \   000070   75..00       MOV     ?V0 + 7,#0x0
   \   000073   78..         MOV     R0,#?V0 + 6
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   7405         MOV     A,#0x5
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   AC82         MOV     R4,DPL
   \   00007F   AD83         MOV     R5,DPH
   \   000081   74F8         MOV     A,#-0x8
   \   000083   25..         ADD     A,?V0 + 0
   \   000085   FA           MOV     R2,A
   \   000086   74FF         MOV     A,#-0x1
   \   000088   35..         ADDC    A,?V0 + 1
   \   00008A   FB           MOV     R3,A
   \   00008B   A9..         MOV     R1,?V0 + 3
   \   00008D   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   1306              if ( hdr.len < (ndx + len) )
   \   000093   7405         MOV     A,#0x5
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   E5..         MOV     A,?V0 + 14
   \   00009A   25..         ADD     A,?V0 + 4
   \   00009C   F8           MOV     R0,A
   \   00009D   E5..         MOV     A,?V0 + 15
   \   00009F   35..         ADDC    A,?V0 + 5
   \   0000A1   F9           MOV     R1,A
   \   0000A2   C3           CLR     C
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   98           SUBB    A,R0
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   99           SUBB    A,R1
   \   0000A8   4085         JC      ??osal_nv_write_1
   1307              {
   1308                return NV_OPER_FAILED;
   1309              }
   1310          
   1311              srcOff += ndx;
   \   0000AA   E5..         MOV     A,?V0 + 0
   \   0000AC   25..         ADD     A,?V0 + 4
   \   0000AE   F5..         MOV     ?V0 + 0,A
   \   0000B0   E5..         MOV     A,?V0 + 1
   \   0000B2   35..         ADDC    A,?V0 + 5
   \   0000B4   F5..         MOV     ?V0 + 1,A
   1312              ptr = buf;
   \   0000B6   7427         MOV     A,#0x27
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F5..         MOV     ?V0 + 6,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F5..         MOV     ?V0 + 7,A
   1313              cnt = len;
   \   0000C2   AE..         MOV     R6,?V0 + 14
   \   0000C4   AF..         MOV     R7,?V0 + 15
   1314              chk = 0;
   \   0000C6   75..00       MOV     ?V0 + 8,#0x0
   \   0000C9   8070         SJMP    ??osal_nv_write_6
   1315              while ( cnt-- )
   1316              {
   1317                uint8 tmp;
   1318                HalFlashRead(srcPg, srcOff, &tmp, 1);
   \                     ??osal_nv_write_7:
   \   0000CB                ; Setup parameters for call to function HalFlashRead
   \   0000CB   75..01       MOV     ?V0 + 12,#0x1
   \   0000CE   75..00       MOV     ?V0 + 13,#0x0
   \   0000D1   78..         MOV     R0,#?V0 + 12
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   AC82         MOV     R4,DPL
   \   0000DD   AD83         MOV     R5,DPH
   \   0000DF   AA..         MOV     R2,?V0 + 0
   \   0000E1   AB..         MOV     R3,?V0 + 1
   \   0000E3   A9..         MOV     R1,?V0 + 3
   \   0000E5   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   1319                if ( tmp != *ptr )
   \   0000EB   85..82       MOV     DPL,?XSP + 0
   \   0000EE   85..83       MOV     DPH,?XSP + 1
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   FA           MOV     R2,A
   \   0000F3   85..82       MOV     DPL,?V0 + 6
   \   0000F6   85..83       MOV     DPH,?V0 + 7
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   6A           XRL     A,R2
   \   0000FB   602E         JZ      ??osal_nv_write_8
   1320                {
   1321                  chk = 1;  // Mark that at least one byte is different.
   \   0000FD   75..01       MOV     ?V0 + 8,#0x1
   1322                  // Calculate expected checksum after transferring old data and writing new data.
   1323                  hdr.chk -= tmp;
   \   000100   85..82       MOV     DPL,?XSP + 0
   \   000103   85..83       MOV     DPH,?XSP + 1
   \   000106   E0           MOVX    A,@DPTR
   \   000107   F8           MOV     R0,A
   \   000108   7407         MOV     A,#0x7
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   C3           CLR     C
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   98           SUBB    A,R0
   \   000110   F0           MOVX    @DPTR,A
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   9400         SUBB    A,#0x0
   \   000115   F0           MOVX    @DPTR,A
   1324                  hdr.chk += *ptr;
   \   000116   85..82       MOV     DPL,?V0 + 6
   \   000119   85..83       MOV     DPH,?V0 + 7
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   F8           MOV     R0,A
   \   00011E   7407         MOV     A,#0x7
   \   000120   12....       LCALL   ?XSTACK_DISP0_8
   \   000123   E0           MOVX    A,@DPTR
   \   000124   28           ADD     A,R0
   \   000125   F0           MOVX    @DPTR,A
   \   000126   A3           INC     DPTR
   \   000127   E0           MOVX    A,@DPTR
   \   000128   3400         ADDC    A,#0x0
   \   00012A   F0           MOVX    @DPTR,A
   1325                }
   1326                srcOff++;
   \                     ??osal_nv_write_8:
   \   00012B   12....       LCALL   ?Subroutine29 & 0xFFFF
   1327                ptr++;
   \                     ??CrossCallReturnLabel_52:
   \   00012E   85..82       MOV     DPL,?V0 + 6
   \   000131   85..83       MOV     DPH,?V0 + 7
   \   000134   A3           INC     DPTR
   \   000135   8582..       MOV     ?V0 + 6,DPL
   \   000138   8583..       MOV     ?V0 + 7,DPH
   1328              }
   \                     ??osal_nv_write_6:
   \   00013B   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00013E   7001         JNZ     ??osal_nv_write_9
   \   000140   E9           MOV     A,R1
   \                     ??osal_nv_write_9:
   \   000141   7088         JNZ     ??osal_nv_write_7
   1329          
   1330              if ( chk != 0 )  // If the buffer to write is different in one or more bytes.
   \   000143   E5..         MOV     A,?V0 + 8
   \   000145   7001         JNZ     ??osal_nv_write_10
   \   000147   E4           CLR     A
   \                     ??osal_nv_write_10:
   \   000148   7003         JNZ     $+5
   \   00014A   02....       LJMP    ??CrossCallReturnLabel_13 & 0xFFFF
   1331              {
   1332                uint8 comPg = OSAL_NV_PAGE_NULL;
   \   00014D   E4           CLR     A
   \   00014E   85..82       MOV     DPL,?XSP + 0
   \   000151   85..83       MOV     DPH,?XSP + 1
   \   000154   F0           MOVX    @DPTR,A
   1333                uint8 dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \   000155                ; Setup parameters for call to function initItem
   \   000155   8582..       MOV     ?V0 + 0,DPL
   \   000158   8583..       MOV     ?V0 + 1,DPH
   \   00015B   78..         MOV     R0,#?V0 + 0
   \   00015D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000160   7407         MOV     A,#0x7
   \   000162   12....       LCALL   ?XSTACK_DISP0_8
   \   000165   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000168   740D         MOV     A,#0xd
   \   00016A   12....       LCALL   ?XSTACK_DISP0_8
   \   00016D   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000170   7900         MOV     R1,#0x0
   \   000172   12....       LCALL   ??initItem?relay
   \   000175   7402         MOV     A,#0x2
   \   000177   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017A   E9           MOV     A,R1
   \   00017B   F5..         MOV     ?V0 + 2,A
   1334          
   1335                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   00017D   7003         JNZ     $+5
   \   00017F   02....       LJMP    ??osal_nv_write_11 & 0xFFFF
   1336                {
   1337                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   000182   7405         MOV     A,#0x5
   \   000184   12....       LCALL   ?XSTACK_DISP0_8
   \   000187   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00018A   C3           CLR     C
   \   00018B   E8           MOV     A,R0
   \   00018C   94FC         SUBB    A,#-0x4
   \   00018E   E9           MOV     A,R1
   \   00018F   94FF         SUBB    A,#-0x1
   \   000191   4008         JC      ??osal_nv_write_12
   \   000193   75..FC       MOV     ?V0 + 0,#-0x4
   \   000196   75..FF       MOV     ?V0 + 1,#-0x1
   \   000199   800A         SJMP    ??osal_nv_write_13
   \                     ??osal_nv_write_12:
   \   00019B   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00019E   F5..         MOV     ?V0 + 0,A
   \   0001A0   74FF         MOV     A,#-0x1
   \   0001A2   59           ANL     A,R1
   \   0001A3   F5..         MOV     ?V0 + 1,A
   1338                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??osal_nv_write_13:
   \   0001A5   E5..         MOV     A,?V0 + 2
   \   0001A7   C3           CLR     C
   \   0001A8   33           RLC     A
   \   0001A9   F8           MOV     R0,A
   \   0001AA   E4           CLR     A
   \   0001AB   33           RLC     A
   \   0001AC   F9           MOV     R1,A
   \   0001AD   E8           MOV     A,R0
   \   0001AE   24..         ADD     A,#((pgOff + 14) & 0xff)
   \   0001B0   F5..         MOV     ?V0 + 8,A
   \   0001B2   E9           MOV     A,R1
   \   0001B3   34..         ADDC    A,#(((pgOff - 242) >> 8) & 0xff)
   \   0001B5   F5..         MOV     ?V0 + 9,A
   \   0001B7   85..82       MOV     DPL,?V0 + 8
   \   0001BA   F583         MOV     DPH,A
   \   0001BC   12....       LCALL   ?Subroutine16 & 0xFFFF
   1339                  srcOff = origOff;
   1340          
   1341                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
   1342                   * OSAL_Nv interruptions caused by resets.
   1343                   */
   1344                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \                     ??CrossCallReturnLabel_24:
   \   0001BF   7409         MOV     A,#0x9
   \   0001C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C4   E0           MOVX    A,@DPTR
   \   0001C5   64FF         XRL     A,#0xff
   \   0001C7   7004         JNZ     ??osal_nv_write_14
   \   0001C9   A3           INC     DPTR
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   64FF         XRL     A,#0xff
   \                     ??osal_nv_write_14:
   \   0001CD   700A         JNZ     ??CrossCallReturnLabel_12
   1345                  {
   1346                    setItem( srcPg, srcOff, eNvXfer );
   \   0001CF                ; Setup parameters for call to function setItem
   \   0001CF   7C00         MOV     R4,#0x0
   \   0001D1   7401         MOV     A,#0x1
   \   0001D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D6   12....       LCALL   ?Subroutine8 & 0xFFFF
   1347                  }
   1348          
   1349                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \                     ??CrossCallReturnLabel_12:
   \   0001D9                ; Setup parameters for call to function xferBuf
   \   0001D9   78..         MOV     R0,#?V0 + 4
   \   0001DB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DE   8E..         MOV     ?V0 + 6,R6
   \   0001E0   8F..         MOV     ?V0 + 7,R7
   \   0001E2   78..         MOV     R0,#?V0 + 6
   \   0001E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E7   AC..         MOV     R4,?V0 + 2
   \   0001E9   7405         MOV     A,#0x5
   \   0001EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EE   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0001F1   A9..         MOV     R1,?V0 + 3
   \   0001F3   12....       LCALL   ??xferBuf?relay
   \   0001F6   7404         MOV     A,#0x4
   \   0001F8   12....       LCALL   ?DEALLOC_XSTACK8
   1350                  srcOff += ndx;
   1351                  dstOff += ndx;
   \   0001FB   EE           MOV     A,R6
   \   0001FC   25..         ADD     A,?V0 + 4
   \   0001FE   FE           MOV     R6,A
   \   0001FF   EF           MOV     A,R7
   \   000200   35..         ADDC    A,?V0 + 5
   \   000202   FF           MOV     R7,A
   1352          
   1353                  writeBuf( dstPg, dstOff, len, buf );
   \   000203                ; Setup parameters for call to function writeBuf
   \   000203   7427         MOV     A,#0x27
   \   000205   12....       LCALL   ?XSTACK_DISP0_8
   \   000208   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00020B   AC..         MOV     R4,?V0 + 14
   \   00020D   AD..         MOV     R5,?V0 + 15
   \   00020F   EE           MOV     A,R6
   \   000210   FA           MOV     R2,A
   \   000211   EF           MOV     A,R7
   \   000212   FB           MOV     R3,A
   \   000213   A9..         MOV     R1,?V0 + 2
   \   000215   12....       LCALL   ??writeBuf?relay
   \   000218   7402         MOV     A,#0x2
   \   00021A   12....       LCALL   ?DEALLOC_XSTACK8
   1354                  srcOff += len;
   1355                  dstOff += len;
   1356          
   1357                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   00021D                ; Setup parameters for call to function xferBuf
   \   00021D   7405         MOV     A,#0x5
   \   00021F   12....       LCALL   ?XSTACK_DISP0_8
   \   000222   E0           MOVX    A,@DPTR
   \   000223   C3           CLR     C
   \   000224   95..         SUBB    A,?V0 + 4
   \   000226   F8           MOV     R0,A
   \   000227   A3           INC     DPTR
   \   000228   E0           MOVX    A,@DPTR
   \   000229   95..         SUBB    A,?V0 + 5
   \   00022B   F9           MOV     R1,A
   \   00022C   E8           MOV     A,R0
   \   00022D   C3           CLR     C
   \   00022E   95..         SUBB    A,?V0 + 14
   \   000230   F5..         MOV     ?V0 + 6,A
   \   000232   E9           MOV     A,R1
   \   000233   95..         SUBB    A,?V0 + 15
   \   000235   F5..         MOV     ?V0 + 7,A
   \   000237   78..         MOV     R0,#?V0 + 6
   \   000239   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023C   E5..         MOV     A,?V0 + 14
   \   00023E   2E           ADD     A,R6
   \   00023F   F5..         MOV     ?V0 + 6,A
   \   000241   E5..         MOV     A,?V0 + 15
   \   000243   3F           ADDC    A,R7
   \   000244   F5..         MOV     ?V0 + 7,A
   \   000246   78..         MOV     R0,#?V0 + 6
   \   000248   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024B   AC..         MOV     R4,?V0 + 2
   \   00024D   7405         MOV     A,#0x5
   \   00024F   12....       LCALL   ?XSTACK_DISP0_8
   \   000252   E0           MOVX    A,@DPTR
   \   000253   25..         ADD     A,?V0 + 4
   \   000255   F8           MOV     R0,A
   \   000256   A3           INC     DPTR
   \   000257   E0           MOVX    A,@DPTR
   \   000258   35..         ADDC    A,?V0 + 5
   \   00025A   F9           MOV     R1,A
   \   00025B   E5..         MOV     A,?V0 + 14
   \   00025D   28           ADD     A,R0
   \   00025E   FA           MOV     R2,A
   \   00025F   E5..         MOV     A,?V0 + 15
   \   000261   39           ADDC    A,R1
   \   000262   FB           MOV     R3,A
   \   000263   A9..         MOV     R1,?V0 + 3
   \   000265   12....       LCALL   ??xferBuf?relay
   \   000268   7404         MOV     A,#0x4
   \   00026A   12....       LCALL   ?DEALLOC_XSTACK8
   1358          
   1359                  // Calculate and write the new checksum.
   1360                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   00026D   85..82       MOV     DPL,?V0 + 8
   \   000270   85..83       MOV     DPH,?V0 + 9
   \   000273   12....       LCALL   ?Subroutine16 & 0xFFFF
   1361          
   1362                  if ( hdr.chk == calcChkF( dstPg, dstOff, hdr.len ) )
   \                     ??CrossCallReturnLabel_25:
   \   000276                ; Setup parameters for call to function calcChkF
   \   000276   7405         MOV     A,#0x5
   \   000278   12....       LCALL   ?XSTACK_DISP0_8
   \   00027B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00027E   12....       LCALL   ??calcChkF?relay
   \   000281   7407         MOV     A,#0x7
   \   000283   12....       LCALL   ?XSTACK_DISP0_8
   \   000286   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000289   7002         JNZ     ??osal_nv_write_15
   \   00028B   EB           MOV     A,R3
   \   00028C   6D           XRL     A,R5
   \                     ??osal_nv_write_15:
   \   00028D   7015         JNZ     ??osal_nv_write_11
   1363                  {
   1364                    if ( hdr.chk != setChk( dstPg, dstOff, hdr.chk ) )
   \   00028F                ; Setup parameters for call to function setChk
   \   00028F   EE           MOV     A,R6
   \   000290   FA           MOV     R2,A
   \   000291   EF           MOV     A,R7
   \   000292   FB           MOV     R3,A
   \   000293   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000296   7407         MOV     A,#0x7
   \   000298   12....       LCALL   ?XSTACK_DISP0_8
   \   00029B   E0           MOVX    A,@DPTR
   \   00029C   68           XRL     A,R0
   \   00029D   7003         JNZ     ??osal_nv_write_16
   \   00029F   A3           INC     DPTR
   \   0002A0   E0           MOVX    A,@DPTR
   \   0002A1   69           XRL     A,R1
   \                     ??osal_nv_write_16:
   \   0002A2   6005         JZ      ??osal_nv_write_17
   1365                    {
   1366                      rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_11:
   \   0002A4   75..0A       MOV     ?V0 + 10,#0xa
   \   0002A7   800B         SJMP    ??osal_nv_write_18
   1367                    }
   1368                    else
   1369                    {
   1370                      hotItemUpdate(dstPg, dstOff, hdr.id);
   \                     ??osal_nv_write_17:
   \   0002A9                ; Setup parameters for call to function hotItemUpdate
   \   0002A9   7403         MOV     A,#0x3
   \   0002AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AE   12....       LCALL   ?Subroutine12 & 0xFFFF
   1371                    }
   1372                  }
   1373                  else
   1374                  {
   1375                    rtrn = NV_OPER_FAILED;
   1376                  }
   1377                }
   \                     ??CrossCallReturnLabel_18:
   \   0002B1   12....       LCALL   ??hotItemUpdate?relay
   1378                else
   1379                {
   1380                  rtrn = NV_OPER_FAILED;
   1381                }
   1382          
   1383                if ( comPg != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_write_18:
   \   0002B4   85..82       MOV     DPL,?XSP + 0
   \   0002B7   85..83       MOV     DPH,?XSP + 1
   \   0002BA   E0           MOVX    A,@DPTR
   \   0002BB   602D         JZ      ??osal_nv_write_19
   1384                {
   1385                  /* Even though the page compaction succeeded, if the new item is coming from the compacted
   1386                   * page and writing the new value failed, then the compaction must be aborted.
   1387                   */
   1388                  if ( (srcPg == comPg) && (rtrn == NV_OPER_FAILED) )
   \   0002BD   65..         XRL     A,?V0 + 3
   \   0002BF   700B         JNZ     ??osal_nv_write_20
   \   0002C1   740A         MOV     A,#0xa
   \   0002C3   65..         XRL     A,?V0 + 10
   \   0002C5   7005         JNZ     ??osal_nv_write_20
   1389                  {
   1390                    erasePage( pgRes );
   \   0002C7                ; Setup parameters for call to function erasePage
   \   0002C7   12....       LCALL   ?Subroutine15 & 0xFFFF
   1391                  }
   \                     ??CrossCallReturnLabel_84:
   \   0002CA   801E         SJMP    ??osal_nv_write_19
   1392                  else
   1393                  {
   1394                    COMPACT_PAGE_CLEANUP( comPg );
   \                     ??osal_nv_write_20:
   \   0002CC                ; Setup parameters for call to function setPageUse
   \   0002CC   7A01         MOV     R2,#0x1
   \   0002CE   90....       MOV     DPTR,#pgRes
   \   0002D1   E0           MOVX    A,@DPTR
   \   0002D2   F9           MOV     R1,A
   \   0002D3   12....       LCALL   ??setPageUse?relay
   \   0002D6                ; Setup parameters for call to function erasePage
   \   0002D6   85..82       MOV     DPL,?XSP + 0
   \   0002D9   85..83       MOV     DPH,?XSP + 1
   \   0002DC   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0002DF   85..82       MOV     DPL,?XSP + 0
   \   0002E2   85..83       MOV     DPH,?XSP + 1
   \   0002E5   E0           MOVX    A,@DPTR
   \   0002E6   90....       MOV     DPTR,#pgRes
   \   0002E9   F0           MOVX    @DPTR,A
   1395                  }
   1396                }
   1397          
   1398                /* Zero of the old item must wait until after compact page cleanup has finished - if the item
   1399                 * is zeroed before and cleanup is interrupted by a power-cycle, the new item can be lost.
   1400                 */
   1401                if ( (srcPg != comPg) && (rtrn != NV_OPER_FAILED) )
   \                     ??osal_nv_write_19:
   \   0002EA   85..82       MOV     DPL,?XSP + 0
   \   0002ED   85..83       MOV     DPH,?XSP + 1
   \   0002F0   E0           MOVX    A,@DPTR
   \   0002F1   65..         XRL     A,?V0 + 3
   \   0002F3   600F         JZ      ??CrossCallReturnLabel_13
   \   0002F5   740A         MOV     A,#0xa
   \   0002F7   65..         XRL     A,?V0 + 10
   \   0002F9   6009         JZ      ??CrossCallReturnLabel_13
   1402                {
   1403                  setItem( srcPg, origOff, eNvZero );
   \   0002FB                ; Setup parameters for call to function setItem
   \   0002FB   7C01         MOV     R4,#0x1
   \   0002FD   EC           MOV     A,R4
   \   0002FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000301   12....       LCALL   ?Subroutine8 & 0xFFFF
   1404                }
   1405              }
   1406            }
   1407          
   1408            return rtrn;
   \                     ??CrossCallReturnLabel_13:
   \   000304   A9..         MOV     R1,?V0 + 10
   \                     ??osal_nv_write_2:
   \   000306   740D         MOV     A,#0xd
   \   000308   02....       LJMP    ?Subroutine46 & 0xFFFF
   1409          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   95..         SUBB    A,?V0 + 0
   \   000004   FE           MOV     R6,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   95..         SUBB    A,?V0 + 1
   \   000009   FF           MOV     R7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   EE           MOV     A,R6
   \   000004   FA           MOV     R2,A
   \   000005   EF           MOV     A,R7
   \   000006   FB           MOV     R3,A
   \   000007   A9..         MOV     R1,?V0 + 2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   A9..         MOV     R1,?V0 + 3
   \   000007   12....       LCALL   ??setItem?relay
   \   00000A   22           RET
   1410          
   1411          /*********************************************************************
   1412           * @fn      osal_nv_read
   1413           *
   1414           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1415           *          an element of an item by indexing into the item with an offset.
   1416           *          Read data is copied into *buf.
   1417           *
   1418           * @param   id  - Valid NV item Id.
   1419           * @param   ndx - Index offset into item
   1420           * @param   len - Length of data to read.
   1421           * @param  *buf - Data is read into this buffer.
   1422           *
   1423           * @return  SUCCESS if NV data was copied to the parameter 'buf'.
   1424           *          Otherwise, NV_OPER_FAILED for failure.
   1425           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1426          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1427          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000015   7412         MOV     A,#0x12
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 1,A
   1428            uint16 offset;
   1429            uint8 hotIdx;
   1430          
   1431            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   000021                ; Setup parameters for call to function hotItem
   \   000021   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000024   5020         JNC     ??osal_nv_read_0
   1432            {
   1433              HalFlashRead(hotPg[hotIdx], hotOff[hotIdx]+ndx, buf, len);
   \   000026   8B82         MOV     DPL,R3
   \   000028   AE82         MOV     R6,DPL
   \   00002A                ; Setup parameters for call to function HalFlashRead
   \   00002A   78..         MOV     R0,#?V0 + 4
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   AC..         MOV     R4,?V0 + 0
   \   000031   AD..         MOV     R5,?V0 + 1
   \   000033   EE           MOV     A,R6
   \   000034   12....       LCALL   ?Subroutine38 & 0xFFFF
   1434              return SUCCESS;
   1435            }
   \                     ??CrossCallReturnLabel_68:
   \   000037   E0           MOVX    A,@DPTR
   \   000038   25..         ADD     A,?V0 + 2
   \   00003A   FA           MOV     R2,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   35..         ADDC    A,?V0 + 3
   \   00003F   FB           MOV     R3,A
   \   000040   EE           MOV     A,R6
   \   000041   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000044   8025         SJMP    ??osal_nv_read_1
   1436          
   1437            if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_read_0:
   \   000046                ; Setup parameters for call to function findItem
   \   000046   EE           MOV     A,R6
   \   000047   FA           MOV     R2,A
   \   000048   EF           MOV     A,R7
   \   000049   FB           MOV     R3,A
   \   00004A   12....       LCALL   ??findItem?relay
   \   00004D   EA           MOV     A,R2
   \   00004E   7001         JNZ     ??osal_nv_read_2
   \   000050   EB           MOV     A,R3
   \                     ??osal_nv_read_2:
   \   000051   7004         JNZ     ??osal_nv_read_3
   1438            {
   1439              return NV_OPER_FAILED;
   \   000053   790A         MOV     R1,#0xa
   \   000055   801E         SJMP    ??osal_nv_read_4
   1440            }
   1441            else
   1442            {
   1443              HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_3:
   \   000057                ; Setup parameters for call to function HalFlashRead
   \   000057   78..         MOV     R0,#?V0 + 4
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   AC..         MOV     R4,?V0 + 0
   \   00005E   AD..         MOV     R5,?V0 + 1
   \   000060   E5..         MOV     A,?V0 + 2
   \   000062   2A           ADD     A,R2
   \   000063   FA           MOV     R2,A
   \   000064   E5..         MOV     A,?V0 + 3
   \   000066   3B           ADDC    A,R3
   \   000067   FB           MOV     R3,A
   \   000068   90....       MOV     DPTR,#findPg
   \                     ??osal_nv_read_1:
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   1444              return SUCCESS;
   \   000073   7900         MOV     R1,#0x0
   1445            }
   \                     ??osal_nv_read_4:
   \   000075   02....       LJMP    ?Subroutine45 & 0xFFFF
   1446          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initNV?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setPageUse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setPageUse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initPage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??erasePage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    erasePage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??compactPage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compactPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??findItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    findItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setChk?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setChk

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??calcChkF?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeWord?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWord

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeWordH?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordH

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??xferBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    xferBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??hotItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??hotItemUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItemUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_item_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_item_len?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_len

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_write?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_read?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_read
   1447          
   1448          /*********************************************************************
   1449          *********************************************************************/

   Maximum stack usage in bytes:

     Function            ISTACK PSTACK XSTACK
     --------            ------ ------ ------
     calcChkF                0      0     59
       -> HalFlashRead       0      0     44
     compactPage             1      0     59
       -> HalFlashRead       0      0     58
       -> erasePage          0      0     54
       -> HalFlashRead       0      0     58
       -> calcChkF           0      0     54
       -> setItem            0      0     54
       -> writeItem          0      0     60
       -> xferBuf            0      0     62
       -> calcChkF           0      0     54
       -> setChk             0      0     54
       -> hotItemUpdate      0      0     54
       -> erasePage          0      0     54
       -> setPageUse         0      0     54
       -> erasePage          0      0     54
     erasePage               0      0     46
       -> HalFlashErase      0      0     18
     findItem                0      0     49
       -> initPage           0      0     24
     hotItem                 2      0     18
     hotItemUpdate           1      0     47
       -> hotItem            0      0     20
     initItem                1      0     70
       -> HalFlashRead       0      0     60
       -> writeWordH         0      0     56
       -> compactPage        0      0     56
       -> writeItem          0      0     62
       -> setPageUse         0      0     56
       -> erasePage          0      0     56
       -> writeItem          0      0     62
     initNV                  0      0     22
       -> HalFlashRead       0      0     44
       -> setPageUse         0      0     40
       -> erasePage          0      0     40
       -> compactPage        0      0     40
       -> erasePage          0      0     40
       -> erasePage          0      0     40
       -> initPage           0      0     40
       -> initPage           0      0     40
       -> erasePage          0      0     40
     initPage                0      0     48
       -> HalFlashRead       0      0     56
       -> calcChkF           0      0     52
       -> findItem           0      0     52
       -> setItem            0      0     52
       -> setItem            0      0     52
     osal_nv_init            2      0      0
       -> initNV             4      0      0
     osal_nv_item_init       0      0     18
       -> HalAdcCheckVdd     0      0     28
       -> findItem           0      0     28
       -> hotItemUpdate      0      0     28
       -> initItem           0      0     32
     osal_nv_item_len        0      0     20
       -> hotItem            0      0     36
       -> HalFlashRead       0      0     40
       -> findItem           0      0     36
     osal_nv_read            0      0     22
       -> hotItem            0      0     32
       -> HalFlashRead       0      0     36
       -> findItem           0      0     32
       -> HalFlashRead       0      0     36
     osal_nv_write           1      0     45
       -> HalAdcCheckVdd     0      0     74
       -> findItem           0      0     74
       -> HalFlashRead       0      0     78
       -> HalFlashRead       0      0     78
       -> initItem           0      0     78
       -> setItem            0      0     74
       -> xferBuf            0      0     82
       -> writeBuf           0      0     78
       -> xferBuf            0      0     82
       -> calcChkF           0      0     74
       -> setChk             0      0     74
       -> hotItemUpdate      0      0     74
       -> erasePage          0      0     74
       -> setPageUse         0      0     74
       -> erasePage          0      0     74
       -> setItem            0      0     74
     setChk                  0      0     53
       -> writeWordH         0      0     28
       -> HalFlashRead       0      0     32
     setItem                 0      0     61
       -> HalFlashRead       0      0     48
       -> writeWord          0      0     44
       -> writeWord          0      0     44
     setPageUse              2      0     45
       -> writeWord          4      0     16
     writeBuf                1      0     63
       -> HalFlashRead       0      0     48
       -> writeWord          0      0     44
       -> HalFlashWrite      0      0     48
       -> HalFlashRead       0      0     48
       -> writeWord          0      0     44
     writeItem               0      0     65
       -> writeWord          0      0     64
       -> HalFlashRead       0      0     68
       -> writeBuf           0      0     68
       -> calcChkF           0      0     64
       -> setChk             0      0     64
       -> hotItemUpdate      0      0     64
     writeWord               0      0     46
       -> HalFlashWrite      0      0     28
     writeWordH              1      0     41
       -> writeWord          0      0     26
     xferBuf                 0      0     65
       -> HalFlashRead       0      0     48
       -> HalFlashRead       0      0     48
       -> writeWord          0      0     44
       -> HalFlashRead       0      0     48
       -> writeWord          0      0     44
       -> HalFlashRead       0      0     48
       -> HalFlashRead       0      0     48
       -> writeWord          0      0     44


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     hotIds                        6
     _nvBuf                    12288
     pgOff                        12
     pgLost                       12
     pgRes                         1
     findPg                        1
     hotPg                         3
     hotOff                        6
     initNV                      298
     ??Subroutine48_0              3
     ??Subroutine49_0              5
     ?Subroutine20                11
     ??Subroutine58_0              6
     ?Subroutine9                  2
     ??Subroutine60_0              6
     setPageUse                   52
     ?Subroutine40                 7
     ??Subroutine50_0              2
     ??Subroutine51_0             12
     initPage                    443
     ??Subroutine52_0              8
     ??Subroutine53_0             17
     ?Subroutine4                  5
     ?Subroutine36                11
     ?Subroutine23                12
     ?Subroutine22                 6
     ?Subroutine41                 5
     ?Subroutine7                 11
     ??Subroutine57_0              2
     ?Subroutine18                 6
     ?Subroutine34                 6
     erasePage                    25
     ?Subroutine43                 5
     ?Subroutine26                 1
     compactPage                 570
     ?Subroutine15                 3
     ??Subroutine54_0              6
     ?Subroutine10                 2
     ??Subroutine55_0              8
     ?Subroutine5                  9
     ?Subroutine6                 20
     ?Subroutine33                10
     ?Subroutine24                13
     ?Subroutine11                 6
     ?Subroutine29                13
     findItem                     71
     ?Subroutine1                  7
     initItem                    357
     ?Subroutine14                18
     ?Subroutine17                 9
     setItem                     156
     ?Subroutine44                 5
     ?Subroutine39                 2
     setChk                       96
     calcChkF                    125
     ?Subroutine45                 5
     ?Subroutine25                19
     ?Subroutine27                14
     ?Subroutine37                13
     writeWord                    52
     writeWordH                   67
     ?Subroutine42                 2
     writeBuf                    348
     ?Subroutine3                 15
     ?Subroutine13                 8
     xferBuf                     311
     ?Subroutine30                13
     ?Subroutine19                23
     ?Subroutine0                 10
     ??Subroutine56_0              4
     writeItem                   507
     ?Subroutine46                 8
     ?Subroutine21                12
     ?Subroutine35                11
     ?Subroutine28                14
     hotItem                      42
     hotItemUpdate                41
     ?Subroutine47                 5
     ?Subroutine31                 3
     ??Subroutine59_0             10
     ?Subroutine2                  6
     ?Subroutine38                17
     osal_nv_init                 10
     osal_nv_item_init            93
     osal_nv_item_len            108
     ?Subroutine32                 9
     osal_nv_write               779
     ?Subroutine16                11
     ?Subroutine12                10
     ?Subroutine8                 11
     osal_nv_read                120
     ??initNV?relay                6
     ??setPageUse?relay            6
     ??initPage?relay              6
     ??erasePage?relay             6
     ??compactPage?relay           6
     ??findItem?relay              6
     ??initItem?relay              6
     ??setItem?relay               6
     ??setChk?relay                6
     ??calcChkF?relay              6
     ??writeWord?relay             6
     ??writeWordH?relay            6
     ??writeBuf?relay              6
     ??xferBuf?relay               6
     ??writeItem?relay             6
     ??hotItem?relay               6
     ??hotItemUpdate?relay         6
     ??osal_nv_init?relay          6
     ??osal_nv_item_init?relay     6
     ??osal_nv_item_len?relay      6
     ??osal_nv_write?relay         6
     ??osal_nv_read?relay          6

 
  5 204 bytes in segment BANKED_CODE
    132 bytes in segment BANK_RELAYS
      6 bytes in segment XDATA_ROM_C
     35 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
  5 336 bytes of CODE  memory
      6 bytes of CONST memory
 12 323 bytes of XDATA memory

Errors: none
Warnings: none
