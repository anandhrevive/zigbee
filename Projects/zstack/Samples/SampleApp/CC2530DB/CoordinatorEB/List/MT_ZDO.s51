///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               16/Sep/2011  10:52:27 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZSta /
//                          ck¶¨Ê±¸´Î»¼ì²â\Components\mt\MT_ZDO.c             /
//    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg /
//                          " (-DCPU32MHZ -DROOT=__near_func                  /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cf /
//                          g" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Documents and          /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Co /
//                          mponents\mt\MT_ZDO.c" -D ZTOOL_P1 -D MT_TASK -D   /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D HAL_UART=TRUE -D    /
//                          SERIAL_APP_PORT=0 -D BUILD_ALL_DEVICES -D         /
//                          xLCD_SUPPORTED=DEBUG -D SOFT_SATRT -D             /
//                          ZDO_COORDINATOR -D NV_INIT -D RTR_NWK -lC         /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\CoordinatorEB\List\" -lA "C:\Documents  /
//                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì² /
//                          â\Projects\zstack\Samples\SampleApp\CC2530DB\Coor /
//                          dinatorEB\List\" --diag_suppress Pe001,Pa010 -o   /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\CoordinatorEB\Obj\" -e                  /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "C:\Documents and         /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\" -I     /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\SOURCE\" -I "C:\Documents and        /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \ZMAIN\TI2530DB\" -I "C:\Documents and            /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\MT\" -I "C:\Documents and       /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\HAL\INCLUDE\" -I "C:\Documents  /
//                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì² /
//                          â\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I    /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSO /
//                          C\" -I "C:\Documents and                          /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\OSAL\INCLUDE\" -I               /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"    /
//                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ /
//                          " -I "C:\Documents and Settings\Administrator\×ÀÃ /
//                          æ\ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Samp /
//                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE /
//                          C\" -I "C:\Documents and                          /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\SAPI\" -I "C:\Documents   /
//                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì² /
//                          â\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\STACK\SYS\" -I              /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"   /
//                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\" /
//                           -I "C:\Documents and Settings\Administrator\×ÀÃæ /
//                          \ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"    /
//                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\S /
//                          ADDR\" -I "C:\Documents and                       /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\SERVICES\SDATA\" -I             /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\" /
//                           -I "C:\Documents and Settings\Administrator\×ÀÃæ /
//                          \ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_ /
//                          LEVEL\" -I "C:\Documents and                      /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I        /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL /
//                          \srf04\SINGLE_CHIP\" -I D:\IAR\8051\INC\ -I       /
//                          D:\IAR\8051\INC\CLIB\ -Ohz                        /
//    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\ZSta /
//                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\CoordinatorEB\List\MT_ZDO.s51            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_ZDO

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??MT_ZdoActiveEpRequest?relay
        EXTERN ??MT_ZdoBindRequest?relay
        EXTERN ??MT_ZdoComplexDescRequest?relay
        EXTERN ??MT_ZdoEndDevAnnce?relay
        EXTERN ??MT_ZdoEndDevBindRequest?relay
        EXTERN ??MT_ZdoIEEEAddrRequest?relay
        EXTERN ??MT_ZdoMatchDescRequest?relay
        EXTERN ??MT_ZdoNWKAddressRequest?relay
        EXTERN ??MT_ZdoNodeDescRequest?relay
        EXTERN ??MT_ZdoPowerDescRequest?relay
        EXTERN ??MT_ZdoRegisterForZDOMsg?relay
        EXTERN ??MT_ZdoRemoveRegisteredCB?relay
        EXTERN ??MT_ZdoServiceDiscRequest?relay
        EXTERN ??MT_ZdoSimpleDescRequest?relay
        EXTERN ??MT_ZdoStartupFromApp?relay
        EXTERN ??MT_ZdoUnbindRequest?relay
        EXTERN ??MT_ZdoUserDescRequest?relay
        EXTERN ??MT_ZdoUserDescSet?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??MT_ZdoActiveEpRequest?relay
        FUNCTION ??MT_ZdoActiveEpRequest?relay,0203H
        PUBLIC ??MT_ZdoBindRequest?relay
        FUNCTION ??MT_ZdoBindRequest?relay,0203H
        PUBLIC ??MT_ZdoCommandProcessing?relay
        FUNCTION ??MT_ZdoCommandProcessing?relay,0203H
        PUBLIC ??MT_ZdoComplexDescRequest?relay
        FUNCTION ??MT_ZdoComplexDescRequest?relay,0203H
        PUBLIC ??MT_ZdoEndDevAnnce?relay
        FUNCTION ??MT_ZdoEndDevAnnce?relay,0203H
        PUBLIC ??MT_ZdoEndDevBindRequest?relay
        FUNCTION ??MT_ZdoEndDevBindRequest?relay,0203H
        PUBLIC ??MT_ZdoIEEEAddrRequest?relay
        FUNCTION ??MT_ZdoIEEEAddrRequest?relay,0203H
        PUBLIC ??MT_ZdoInit?relay
        FUNCTION ??MT_ZdoInit?relay,0203H
        PUBLIC ??MT_ZdoMatchDescRequest?relay
        FUNCTION ??MT_ZdoMatchDescRequest?relay,0203H
        PUBLIC ??MT_ZdoNWKAddressRequest?relay
        FUNCTION ??MT_ZdoNWKAddressRequest?relay,0203H
        PUBLIC ??MT_ZdoNodeDescRequest?relay
        FUNCTION ??MT_ZdoNodeDescRequest?relay,0203H
        PUBLIC ??MT_ZdoPowerDescRequest?relay
        FUNCTION ??MT_ZdoPowerDescRequest?relay,0203H
        PUBLIC ??MT_ZdoRegisterForZDOMsg?relay
        FUNCTION ??MT_ZdoRegisterForZDOMsg?relay,0203H
        PUBLIC ??MT_ZdoRemoveRegisteredCB?relay
        FUNCTION ??MT_ZdoRemoveRegisteredCB?relay,0203H
        PUBLIC ??MT_ZdoSendMsgCB?relay
        FUNCTION ??MT_ZdoSendMsgCB?relay,0203H
        PUBLIC ??MT_ZdoServiceDiscRequest?relay
        FUNCTION ??MT_ZdoServiceDiscRequest?relay,0203H
        PUBLIC ??MT_ZdoSimpleDescRequest?relay
        FUNCTION ??MT_ZdoSimpleDescRequest?relay,0203H
        PUBLIC ??MT_ZdoStartupFromApp?relay
        FUNCTION ??MT_ZdoStartupFromApp?relay,0203H
        PUBLIC ??MT_ZdoUnbindRequest?relay
        FUNCTION ??MT_ZdoUnbindRequest?relay,0203H
        PUBLIC ??MT_ZdoUserDescRequest?relay
        FUNCTION ??MT_ZdoUserDescRequest?relay,0203H
        PUBLIC ??MT_ZdoUserDescSet?relay
        FUNCTION ??MT_ZdoUserDescSet?relay,0203H
        PUBLIC MT_ZdoActiveEpRequest
        FUNCTION MT_ZdoActiveEpRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoBindRequest
        FUNCTION MT_ZdoBindRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC MT_ZdoCommandProcessing
        FUNCTION MT_ZdoCommandProcessing,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MT_ZdoComplexDescRequest
        FUNCTION MT_ZdoComplexDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoEndDevAnnce
        FUNCTION MT_ZdoEndDevAnnce,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC MT_ZdoEndDevBindRequest
        FUNCTION MT_ZdoEndDevBindRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 95, STACK
        PUBLIC MT_ZdoIEEEAddrRequest
        FUNCTION MT_ZdoIEEEAddrRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoInit
        FUNCTION MT_ZdoInit,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC MT_ZdoMatchDescRequest
        FUNCTION MT_ZdoMatchDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 97, STACK
        PUBLIC MT_ZdoNWKAddressRequest
        FUNCTION MT_ZdoNWKAddressRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoNodeDescRequest
        FUNCTION MT_ZdoNodeDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoPowerDescRequest
        FUNCTION MT_ZdoPowerDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoRegisterForZDOMsg
        FUNCTION MT_ZdoRegisterForZDOMsg,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoRemoveRegisteredCB
        FUNCTION MT_ZdoRemoveRegisteredCB,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoSendMsgCB
        FUNCTION MT_ZdoSendMsgCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC MT_ZdoServiceDiscRequest
        FUNCTION MT_ZdoServiceDiscRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoSimpleDescRequest
        FUNCTION MT_ZdoSimpleDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoStartupFromApp
        FUNCTION MT_ZdoStartupFromApp,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoUnbindRequest
        FUNCTION MT_ZdoUnbindRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC MT_ZdoUserDescRequest
        FUNCTION MT_ZdoUserDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoUserDescSet
        FUNCTION MT_ZdoUserDescSet,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 42, STACK
        PUBLIC _zdoCallbackSub
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
osal_memcpy         SYMBOL "osal_memcpy"
ZDP_UserDescSet     SYMBOL "ZDP_UserDescSet"
ZDP_ServerDiscReq   SYMBOL "ZDP_ServerDiscReq"
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
ZDP_BindUnbindReq   SYMBOL "ZDP_BindUnbindReq"
ZDOInitDevice       SYMBOL "ZDOInitDevice"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
ZDO_RemoveRegisteredCB SYMBOL "ZDO_RemoveRegisteredCB"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
osal_mem_free       SYMBOL "osal_mem_free"
??MT_BuildAndSendZToolResponse?relay SYMBOL "?relay", MT_BuildAndSendZToolResponse
??ZDOInitDevice?relay SYMBOL "?relay", ZDOInitDevice
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDO_RemoveRegisteredCB?relay SYMBOL "?relay", ZDO_RemoveRegisteredCB
??ZDP_BindUnbindReq?relay SYMBOL "?relay", ZDP_BindUnbindReq
??ZDP_DeviceAnnce?relay SYMBOL "?relay", ZDP_DeviceAnnce
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
??ZDP_IEEEAddrReq?relay SYMBOL "?relay", ZDP_IEEEAddrReq
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
??ZDP_NWKAddrOfInterestReq?relay SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
??ZDP_NwkAddrReq?relay SYMBOL "?relay", ZDP_NwkAddrReq
??ZDP_ServerDiscReq?relay SYMBOL "?relay", ZDP_ServerDiscReq
??ZDP_SimpleDescReq?relay SYMBOL "?relay", ZDP_SimpleDescReq
??ZDP_UserDescSet?relay SYMBOL "?relay", ZDP_UserDescSet
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
MT_ZdoActiveEpRequest SYMBOL "MT_ZdoActiveEpRequest"
??MT_ZdoActiveEpRequest?relay SYMBOL "?relay", MT_ZdoActiveEpRequest
MT_ZdoBindRequest   SYMBOL "MT_ZdoBindRequest"
??MT_ZdoBindRequest?relay SYMBOL "?relay", MT_ZdoBindRequest
MT_ZdoCommandProcessing SYMBOL "MT_ZdoCommandProcessing"
??MT_ZdoCommandProcessing?relay SYMBOL "?relay", MT_ZdoCommandProcessing
MT_ZdoComplexDescRequest SYMBOL "MT_ZdoComplexDescRequest"
??MT_ZdoComplexDescRequest?relay SYMBOL "?relay", MT_ZdoComplexDescRequest
MT_ZdoEndDevAnnce   SYMBOL "MT_ZdoEndDevAnnce"
??MT_ZdoEndDevAnnce?relay SYMBOL "?relay", MT_ZdoEndDevAnnce
MT_ZdoEndDevBindRequest SYMBOL "MT_ZdoEndDevBindRequest"
??MT_ZdoEndDevBindRequest?relay SYMBOL "?relay", MT_ZdoEndDevBindRequest
MT_ZdoIEEEAddrRequest SYMBOL "MT_ZdoIEEEAddrRequest"
??MT_ZdoIEEEAddrRequest?relay SYMBOL "?relay", MT_ZdoIEEEAddrRequest
MT_ZdoInit          SYMBOL "MT_ZdoInit"
??MT_ZdoInit?relay  SYMBOL "?relay", MT_ZdoInit
MT_ZdoMatchDescRequest SYMBOL "MT_ZdoMatchDescRequest"
??MT_ZdoMatchDescRequest?relay SYMBOL "?relay", MT_ZdoMatchDescRequest
MT_ZdoNWKAddressRequest SYMBOL "MT_ZdoNWKAddressRequest"
??MT_ZdoNWKAddressRequest?relay SYMBOL "?relay", MT_ZdoNWKAddressRequest
MT_ZdoNodeDescRequest SYMBOL "MT_ZdoNodeDescRequest"
??MT_ZdoNodeDescRequest?relay SYMBOL "?relay", MT_ZdoNodeDescRequest
MT_ZdoPowerDescRequest SYMBOL "MT_ZdoPowerDescRequest"
??MT_ZdoPowerDescRequest?relay SYMBOL "?relay", MT_ZdoPowerDescRequest
MT_ZdoRegisterForZDOMsg SYMBOL "MT_ZdoRegisterForZDOMsg"
??MT_ZdoRegisterForZDOMsg?relay SYMBOL "?relay", MT_ZdoRegisterForZDOMsg
MT_ZdoRemoveRegisteredCB SYMBOL "MT_ZdoRemoveRegisteredCB"
??MT_ZdoRemoveRegisteredCB?relay SYMBOL "?relay", MT_ZdoRemoveRegisteredCB
MT_ZdoSendMsgCB     SYMBOL "MT_ZdoSendMsgCB"
??MT_ZdoSendMsgCB?relay SYMBOL "?relay", MT_ZdoSendMsgCB
MT_ZdoServiceDiscRequest SYMBOL "MT_ZdoServiceDiscRequest"
??MT_ZdoServiceDiscRequest?relay SYMBOL "?relay", MT_ZdoServiceDiscRequest
MT_ZdoSimpleDescRequest SYMBOL "MT_ZdoSimpleDescRequest"
??MT_ZdoSimpleDescRequest?relay SYMBOL "?relay", MT_ZdoSimpleDescRequest
MT_ZdoStartupFromApp SYMBOL "MT_ZdoStartupFromApp"
??MT_ZdoStartupFromApp?relay SYMBOL "?relay", MT_ZdoStartupFromApp
MT_ZdoUnbindRequest SYMBOL "MT_ZdoUnbindRequest"
??MT_ZdoUnbindRequest?relay SYMBOL "?relay", MT_ZdoUnbindRequest
MT_ZdoUserDescRequest SYMBOL "MT_ZdoUserDescRequest"
??MT_ZdoUserDescRequest?relay SYMBOL "?relay", MT_ZdoUserDescRequest
MT_ZdoUserDescSet   SYMBOL "MT_ZdoUserDescSet"
??MT_ZdoUserDescSet?relay SYMBOL "?relay", MT_ZdoUserDescSet

        EXTERN ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_UserDescSet
        FUNCTION ZDP_UserDescSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_ServerDiscReq
        FUNCTION ZDP_ServerDiscReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 95, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_BindUnbindReq
        FUNCTION ZDP_BindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDOInitDevice
        FUNCTION ZDOInitDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RemoveRegisteredCB
        FUNCTION ZDO_RemoveRegisteredCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??MT_BuildAndSendZToolResponse?relay
        FUNCTION ??MT_BuildAndSendZToolResponse?relay,00H
        EXTERN ??ZDOInitDevice?relay
        FUNCTION ??ZDOInitDevice?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDO_RemoveRegisteredCB?relay
        FUNCTION ??ZDO_RemoveRegisteredCB?relay,00H
        EXTERN ??ZDP_BindUnbindReq?relay
        FUNCTION ??ZDP_BindUnbindReq?relay,00H
        EXTERN ??ZDP_DeviceAnnce?relay
        FUNCTION ??ZDP_DeviceAnnce?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??ZDP_IEEEAddrReq?relay
        FUNCTION ??ZDP_IEEEAddrReq?relay,00H
        EXTERN ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,00H
        EXTERN ??ZDP_NWKAddrOfInterestReq?relay
        FUNCTION ??ZDP_NWKAddrOfInterestReq?relay,00H
        EXTERN ??ZDP_NwkAddrReq?relay
        FUNCTION ??ZDP_NwkAddrReq?relay,00H
        EXTERN ??ZDP_ServerDiscReq?relay
        FUNCTION ??ZDP_ServerDiscReq?relay,00H
        EXTERN ??ZDP_SimpleDescReq?relay
        FUNCTION ??ZDP_SimpleDescReq?relay,00H
        EXTERN ??ZDP_UserDescSet?relay
        FUNCTION ??ZDP_UserDescSet?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN MT_TaskID

// C:\Documents and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Components\mt\MT_ZDO.c
//    1 /**************************************************************************************************
//    2   Filename:       MT_ZDO.c
//    3   Revised:        $Date: 2010-07-22 11:32:05 -0700 (Thu, 22 Jul 2010) $
//    4   Revision:       $Revision: 23103 $
//    5 
//    6   Description:    MonitorTest functions for the ZDO layer.
//    7 
//    8 
//    9   Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 #ifdef MT_ZDO_FUNC
//   41 
//   42 /**************************************************************************************************
//   43  * INCLUDES
//   44  **************************************************************************************************/
//   45 #include "ZComDef.h"
//   46 #include "OSAL.h"
//   47 #include "OSAL_Nv.h"
//   48 #include "MT.h"
//   49 #include "MT_ZDO.h"
//   50 #include "APSMEDE.h"
//   51 #include "ZDConfig.h"
//   52 #include "ZDProfile.h"
//   53 #include "ZDObject.h"
//   54 #include "ZDApp.h"
//   55 
//   56 #if !defined( WIN32 )
//   57   #include "OnBoard.h"
//   58 #endif
//   59 
//   60 #if defined ( MT_SYS_KEY_MANAGEMENT )
//   61   #include "ZDSecMgr.h"
//   62 #endif
//   63 
//   64 #include "nwk_util.h"
//   65 
//   66 /**************************************************************************************************
//   67  * CONSTANTS
//   68  **************************************************************************************************/
//   69 #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
//   70 #define MT_ZDO_ADDR_RSP_LEN               0x0D
//   71 #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
//   72 
//   73 #define MTZDO_RESPONSE_BUFFER_LEN   100
//   74 
//   75 #define MTZDO_MAX_MATCH_CLUSTERS    16
//   76 #define MTZDO_MAX_ED_BIND_CLUSTERS  15
//   77 
//   78 // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
//   79 #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
//   80 
//   81 #define MT_ZDO_STATUS_LEN   1
//   82 
//   83 /**************************************************************************************************
//   84  * GLOBAL VARIABLES
//   85  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   86 uint32 _zdoCallbackSub;
_zdoCallbackSub:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   87 
//   88 /**************************************************************************************************
//   89  * LOCAL VARIABLES
//   90  **************************************************************************************************/
//   91 
//   92 /**************************************************************************************************
//   93  * LOCAL FUNCTIONS
//   94  **************************************************************************************************/
//   95 #if defined (MT_ZDO_FUNC)
//   96 void MT_ZdoNWKAddressRequest(uint8 *pBuf);
//   97 void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
//   98 void MT_ZdoNodeDescRequest(uint8 *pBuf);
//   99 void MT_ZdoPowerDescRequest(uint8 *pBuf);
//  100 void MT_ZdoSimpleDescRequest(uint8 *pBuf);
//  101 void MT_ZdoActiveEpRequest(uint8 *pBuf);
//  102 void MT_ZdoMatchDescRequest(uint8 *pBuf);
//  103 void MT_ZdoComplexDescRequest(uint8 *pBuf);
//  104 void MT_ZdoUserDescRequest(uint8 *pBuf);
//  105 void MT_ZdoEndDevAnnce(uint8 *pBuf);
//  106 void MT_ZdoUserDescSet(uint8 *pBuf);
//  107 void MT_ZdoServiceDiscRequest(uint8 *pBuf);
//  108 void MT_ZdoEndDevBindRequest(uint8 *pBuf);
//  109 void MT_ZdoBindRequest(uint8 *pBuf);
//  110 void MT_ZdoUnbindRequest(uint8 *pBuf);
//  111 void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
//  112 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  113 void MT_ZdoSetLinkKey(uint8 *pBuf);
//  114 void MT_ZdoRemoveLinkKey(uint8 *pBuf);
//  115 void MT_ZdoGetLinkKey(uint8 *pBuf);
//  116 #endif /* MT_SYS_KEY_MANAGEMENT */
//  117 #if defined (MT_ZDO_MGMT)
//  118 void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
//  119 void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
//  120 void MT_ZdoMgmtBindRequest(uint8 *pBuf);
//  121 void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
//  122 void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
//  123 void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
//  124 void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
//  125 #endif /* MT_ZDO_MGMT */
//  126 void MT_ZdoStartupFromApp(uint8 *pBuf);
//  127 void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
//  128 void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
//  129 #endif /* MT_ZDO_FUNC */
//  130 
//  131 #if defined (MT_ZDO_CB_FUNC)
//  132 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
//  133 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
//  134 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
//  135 void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
//  136 void* MT_ZdoSrcRtgCB( void *pStr );
//  137 #endif /* MT_ZDO_CB_FUNC */
//  138 
//  139 #if defined (MT_ZDO_FUNC)
//  140 /***************************************************************************************************
//  141  * @fn      MT_ZdoInit
//  142  *
//  143  * @brief   MT ZDO initialization
//  144  *
//  145  * @param   none
//  146  *
//  147  * @return  none
//  148  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  149 void MT_ZdoInit(void)
MT_ZdoInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function MT_ZdoInit
//  150 {
        ; Saved register size: 0
        ; Auto size: 0
//  151 #ifdef MT_ZDO_CB_FUNC
//  152   /* Register with ZDO for indication callbacks */
//  153   ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
//  154 #endif
//  155 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//  156 
//  157 /***************************************************************************************************
//  158  * @fn      MT_ZdoCommandProcessing
//  159  *
//  160  * @brief
//  161  *
//  162  *   Process all the ZDO commands that are issued by test tool
//  163  *
//  164  * @param   pBuf - pointer to the msg buffer
//  165  *
//  166  *          | LEN  | CMD0  | CMD1  |  DATA  |
//  167  *          |  1   |   1   |   1   |  0-255 |
//  168  *
//  169  * @return  status
//  170  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  171 uint8 MT_ZdoCommandProcessing(uint8* pBuf)
MT_ZdoCommandProcessing:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function MT_ZdoCommandProcessing
//  172 {
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNWKAddressRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoIEEEAddrRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNodeDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoPowerDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoSimpleDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoActiveEpRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoMatchDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoComplexDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUserDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoEndDevAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUserDescSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoServiceDiscRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoEndDevBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUnbindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoStartupFromApp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoRegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoRemoveRegisteredCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  173   uint8 status = MT_RPC_SUCCESS;
        MOV     R6,#0x0
//  174 
//  175   switch (pBuf[MT_RPC_POS_CMD1])
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for MT_ZdoCommandProcessing>_0`:
        DATA
        DB        0
        DB        18
        DB        0
        DW        ??MT_ZdoCommandProcessing_0
        DB        1
        DW        ??MT_ZdoCommandProcessing_1
        DB        2
        DW        ??MT_ZdoCommandProcessing_2
        DB        3
        DW        ??MT_ZdoCommandProcessing_3
        DB        4
        DW        ??MT_ZdoCommandProcessing_4
        DB        5
        DW        ??MT_ZdoCommandProcessing_5
        DB        6
        DW        ??MT_ZdoCommandProcessing_6
        DB        7
        DW        ??MT_ZdoCommandProcessing_7
        DB        8
        DW        ??MT_ZdoCommandProcessing_8
        DB        10
        DW        ??MT_ZdoCommandProcessing_9
        DB        11
        DW        ??MT_ZdoCommandProcessing_10
        DB        12
        DW        ??MT_ZdoCommandProcessing_11
        DB        32
        DW        ??MT_ZdoCommandProcessing_12
        DB        33
        DW        ??MT_ZdoCommandProcessing_13
        DB        34
        DW        ??MT_ZdoCommandProcessing_14
        DB        62
        DW        ??MT_ZdoCommandProcessing_15
        DB        63
        DW        ??MT_ZdoCommandProcessing_16
        DB        64
        DW        ??MT_ZdoCommandProcessing_17
        DW        ??MT_ZdoCommandProcessing_18
        CODE
//  176   {
//  177 #if defined ( ZDO_NWKADDR_REQUEST )
//  178     case MT_ZDO_NWK_ADDR_REQ:
//  179       MT_ZdoNWKAddressRequest(pBuf);
??MT_ZdoCommandProcessing_0:
        ; Setup parameters for call to function MT_ZdoNWKAddressRequest
        LCALL   ??MT_ZdoNWKAddressRequest?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  180       break;
//  181 #endif
//  182 
//  183 #if defined ( ZDO_IEEEADDR_REQUEST )
//  184     case MT_ZDO_IEEE_ADDR_REQ:
//  185       MT_ZdoIEEEAddrRequest(pBuf);
??MT_ZdoCommandProcessing_1:
        ; Setup parameters for call to function MT_ZdoIEEEAddrRequest
        LCALL   ??MT_ZdoIEEEAddrRequest?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  186       break;
//  187 #endif
//  188 
//  189 #if defined ( ZDO_NODEDESC_REQUEST )
//  190     case MT_ZDO_NODE_DESC_REQ:
//  191       MT_ZdoNodeDescRequest(pBuf);
??MT_ZdoCommandProcessing_2:
        ; Setup parameters for call to function MT_ZdoNodeDescRequest
        LCALL   ??MT_ZdoNodeDescRequest?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  192       break;
//  193 #endif
//  194 
//  195 #if defined ( ZDO_POWERDESC_REQUEST )
//  196     case MT_ZDO_POWER_DESC_REQ:
//  197       MT_ZdoPowerDescRequest(pBuf);
??MT_ZdoCommandProcessing_3:
        ; Setup parameters for call to function MT_ZdoPowerDescRequest
        LCALL   ??MT_ZdoPowerDescRequest?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  198       break;
//  199 #endif
//  200 
//  201 #if defined ( ZDO_SIMPLEDESC_REQUEST )
//  202     case MT_ZDO_SIMPLE_DESC_REQ:
//  203       MT_ZdoSimpleDescRequest(pBuf);
??MT_ZdoCommandProcessing_4:
        ; Setup parameters for call to function MT_ZdoSimpleDescRequest
        LCALL   ??MT_ZdoSimpleDescRequest?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  204       break;
//  205 #endif
//  206 
//  207 #if defined ( ZDO_ACTIVEEP_REQUEST )
//  208     case MT_ZDO_ACTIVE_EP_REQ:
//  209       MT_ZdoActiveEpRequest(pBuf);
??MT_ZdoCommandProcessing_5:
        ; Setup parameters for call to function MT_ZdoActiveEpRequest
        LCALL   ??MT_ZdoActiveEpRequest?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  210       break;
//  211 #endif
//  212 
//  213 #if defined ( ZDO_MATCH_REQUEST )
//  214     case MT_ZDO_MATCH_DESC_REQ:
//  215       MT_ZdoMatchDescRequest(pBuf);
??MT_ZdoCommandProcessing_6:
        ; Setup parameters for call to function MT_ZdoMatchDescRequest
        LCALL   ??MT_ZdoMatchDescRequest?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  216       break;
//  217 #endif
//  218 
//  219 #if defined ( ZDO_COMPLEXDESC_REQUEST )
//  220     case MT_ZDO_COMPLEX_DESC_REQ:
//  221       MT_ZdoComplexDescRequest(pBuf);
??MT_ZdoCommandProcessing_7:
        ; Setup parameters for call to function MT_ZdoComplexDescRequest
        LCALL   ??MT_ZdoComplexDescRequest?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  222       break;
//  223 #endif
//  224 
//  225 #if defined ( ZDO_USERDESC_REQUEST )
//  226     case MT_ZDO_USER_DESC_REQ:
//  227       MT_ZdoUserDescRequest(pBuf);
??MT_ZdoCommandProcessing_8:
        ; Setup parameters for call to function MT_ZdoUserDescRequest
        LCALL   ??MT_ZdoUserDescRequest?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  228       break;
//  229 #endif
//  230 
//  231 #if defined ( ZDO_ENDDEVICE_ANNCE )
//  232     case MT_ZDO_END_DEV_ANNCE:
//  233       MT_ZdoEndDevAnnce(pBuf);
??MT_ZdoCommandProcessing_9:
        ; Setup parameters for call to function MT_ZdoEndDevAnnce
        LCALL   ??MT_ZdoEndDevAnnce?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  234       break;
//  235 #endif      
//  236 
//  237 #if defined ( ZDO_USERDESCSET_REQUEST )
//  238     case MT_ZDO_USER_DESC_SET:
//  239       MT_ZdoUserDescSet(pBuf);
??MT_ZdoCommandProcessing_10:
        ; Setup parameters for call to function MT_ZdoUserDescSet
        LCALL   ??MT_ZdoUserDescSet?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  240       break;
//  241 #endif
//  242 
//  243 #if defined ( ZDO_SERVERDISC_REQUEST )
//  244     case MT_ZDO_SERVICE_DISC_REQ:
//  245       MT_ZdoServiceDiscRequest(pBuf);
??MT_ZdoCommandProcessing_11:
        ; Setup parameters for call to function MT_ZdoServiceDiscRequest
        LCALL   ??MT_ZdoServiceDiscRequest?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  246       break;
//  247 #endif
//  248 
//  249 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
//  250     case MT_ZDO_END_DEV_BIND_REQ:
//  251       MT_ZdoEndDevBindRequest(pBuf);
??MT_ZdoCommandProcessing_12:
        ; Setup parameters for call to function MT_ZdoEndDevBindRequest
        LCALL   ??MT_ZdoEndDevBindRequest?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  252       break;
//  253 #endif
//  254 
//  255 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  256     case MT_ZDO_BIND_REQ:
//  257       MT_ZdoBindRequest(pBuf);
??MT_ZdoCommandProcessing_13:
        ; Setup parameters for call to function MT_ZdoBindRequest
        LCALL   ??MT_ZdoBindRequest?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  258       break;
//  259 #endif
//  260 
//  261 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  262     case MT_ZDO_UNBIND_REQ:
//  263       MT_ZdoUnbindRequest(pBuf);
??MT_ZdoCommandProcessing_14:
        ; Setup parameters for call to function MT_ZdoUnbindRequest
        LCALL   ??MT_ZdoUnbindRequest?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  264       break;
//  265 #endif
//  266       
//  267 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  268     case MT_ZDO_SET_LINK_KEY:
//  269       MT_ZdoSetLinkKey(pBuf);
//  270       break;
//  271 
//  272     case MT_ZDO_REMOVE_LINK_KEY:
//  273       MT_ZdoRemoveLinkKey(pBuf);
//  274       break;
//  275 
//  276     case MT_ZDO_GET_LINK_KEY:
//  277       MT_ZdoGetLinkKey(pBuf);
//  278       break;
//  279 #endif // MT_SYS_KEY_MANAGEMENT    
//  280 
//  281 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
//  282     case MT_ZDO_MGMT_NWKDISC_REQ:
//  283       MT_ZdoMgmtNwkDiscRequest(pBuf);
//  284       break;
//  285 #endif
//  286 
//  287 #if defined ( ZDO_MGMT_LQI_REQUEST )
//  288     case MT_ZDO_MGMT_LQI_REQ:
//  289       MT_ZdoMgmtLqiRequest(pBuf);
//  290       break;
//  291 #endif
//  292 
//  293 #if defined ( ZDO_MGMT_RTG_REQUEST )
//  294     case MT_ZDO_MGMT_RTG_REQ:
//  295       MT_ZdoMgmtRtgRequest(pBuf);
//  296       break;
//  297 #endif
//  298 
//  299 #if defined ( ZDO_MGMT_BIND_REQUEST )
//  300     case MT_ZDO_MGMT_BIND_REQ:
//  301       MT_ZdoMgmtBindRequest(pBuf);
//  302       break;
//  303 #endif
//  304 
//  305 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
//  306     case MT_ZDO_MGMT_LEAVE_REQ:
//  307       MT_ZdoMgmtLeaveRequest(pBuf);
//  308       break;
//  309 #endif
//  310 
//  311 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
//  312     case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
//  313       MT_ZdoMgmtDirectJoinRequest(pBuf);
//  314       break;
//  315 #endif
//  316 
//  317 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
//  318     case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
//  319       MT_ZdoMgmtPermitJoinRequest(pBuf);
//  320       break;
//  321 #endif
//  322 
//  323 #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
//  324     case MT_ZDO_MGMT_NWK_UPDATE_REQ:
//  325       MT_ZdoMgmtNwkUpdateRequest(pBuf);
//  326       break;
//  327 #endif 
//  328 
//  329 #if defined ( ZDO_NETWORKSTART_REQUEST )
//  330     case MT_ZDO_STARTUP_FROM_APP:
//  331       MT_ZdoStartupFromApp(pBuf);
??MT_ZdoCommandProcessing_17:
        ; Setup parameters for call to function MT_ZdoStartupFromApp
        LCALL   ??MT_ZdoStartupFromApp?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  332       break;
//  333 #endif
//  334 
//  335     case MT_ZDO_MSG_CB_REGISTER:
//  336       MT_ZdoRegisterForZDOMsg(pBuf);
??MT_ZdoCommandProcessing_15:
        ; Setup parameters for call to function MT_ZdoRegisterForZDOMsg
        LCALL   ??MT_ZdoRegisterForZDOMsg?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  337       break;
//  338 
//  339     case MT_ZDO_MSG_CB_REMOVE:
//  340       MT_ZdoRemoveRegisteredCB(pBuf);
??MT_ZdoCommandProcessing_16:
        ; Setup parameters for call to function MT_ZdoRemoveRegisteredCB
        LCALL   ??MT_ZdoRemoveRegisteredCB?relay
        SJMP    ??MT_ZdoCommandProcessing_19
//  341       break;
//  342 
//  343     default:
//  344       status = MT_RPC_ERR_COMMAND_ID;
??MT_ZdoCommandProcessing_18:
        INC     R6
        INC     R6
//  345       break;
//  346   }
//  347 
//  348   return status;
??MT_ZdoCommandProcessing_19:
        MOV     A,R6
        MOV     R1,A
        SJMP    ??Subroutine48_0
        CFI EndBlock cfiBlock1
//  349 }
//  350 
//  351 /***************************************************************************************************
//  352  * @fn      MT_ZdoNwkAddrReq
//  353  *
//  354  * @brief   Handle a nwk address request.
//  355  *
//  356  * @param   pData  - MT message data
//  357  *
//  358  * @return  void
//  359  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  360 void MT_ZdoNWKAddressRequest(uint8 *pBuf)
MT_ZdoNWKAddressRequest:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function MT_ZdoNWKAddressRequest
//  361 {
        FUNCALL MT_ZdoNWKAddressRequest, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNWKAddressRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  362   uint8 cmdId;
//  363   uint8 retValue;
//  364   uint8 reqType;
//  365   uint8 startIndex;
//  366   uint8 *pExtAddr;
//  367 
//  368   /* parse header */
//  369   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
//  370   pBuf += MT_RPC_FRAME_HDR_SZ;
//  371 
//  372   /* parse parameters */
//  373   pExtAddr = pBuf;
        MOV     A,R2
        ADD     A,#0x3
        MOV     R6,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R7,A
//  374   pBuf += Z_EXTADDR_LEN;
        MOV     A,R6
        ADD     A,#0x8
        MOV     R2,A
        MOV     A,R7
        LCALL   ?Subroutine10 & 0xFFFF
//  375 
//  376   /* Request type */
//  377   reqType = *pBuf++;
//  378 
//  379   /* Start index */
//  380   startIndex = *pBuf;
//  381 
//  382   retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
??CrossCallReturnLabel_17:
        LCALL   ??ZDP_NwkAddrReq?relay
        CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine42
        ; // Fall through to label ?Subroutine42
//  383 
//  384   /* Build and send back the response */
//  385   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  386 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_58:
        SJMP    ??Subroutine47_0
        CFI EndBlock cfiBlock3
//  387 
//  388 /***************************************************************************************************
//  389  * @fn      MT_ZdoIEEEAddrRequest
//  390  *
//  391  * @brief   Handle a IEEE address request.
//  392  *
//  393  * @param   pData  - MT message data
//  394  *
//  395  * @return  void
//  396  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  397 void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
MT_ZdoIEEEAddrRequest:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function MT_ZdoIEEEAddrRequest
//  398 {
        FUNCALL MT_ZdoIEEEAddrRequest, ZDP_IEEEAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoIEEEAddrRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  399   uint8 cmdId;
//  400   uint8 retValue;
//  401   uint16 shortAddr;
//  402   uint8 reqType;
//  403   uint8 startIndex;
//  404 
//  405   /* parse header */
//  406   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
//  407   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        INC     R2
        LCALL   ??Subroutine51_0 & 0xFFFF
//  408 
//  409   /* Dev address */
//  410   shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
??CrossCallReturnLabel_76:
        MOV     R1,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
//  411   pBuf += 2;
        MOV     A,R2
        ADD     A,#0x2
        INC     R2
        INC     R2
        MOV     A,R3
        LCALL   ?Subroutine10 & 0xFFFF
//  412 
//  413   /* request type */
//  414   reqType = *pBuf++;
//  415 
//  416   /* start index */
//  417   startIndex = *pBuf;
//  418 
//  419   retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
??CrossCallReturnLabel_18:
        LCALL   ??ZDP_IEEEAddrReq?relay
        SJMP    ?Subroutine42
        CFI EndBlock cfiBlock4
//  420 
//  421   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  422 }
//  423 
//  424 /***************************************************************************************************
//  425  * @fn      MT_ZdoNodeDescRequest
//  426  *
//  427  * @brief   Handle a Node Descriptor request.
//  428  *
//  429  * @param   pData  - MT message data
//  430  *
//  431  * @return  void
//  432  ***************************************************************************************************/
//  433 void MT_ZdoNodeDescRequest (uint8 *pBuf)
//  434 {
//  435   uint8 cmdId;
//  436   uint8 retValue;
//  437   zAddrType_t destAddr;
//  438   uint16 shortAddr;
//  439 
//  440   /* parse header */
//  441   cmdId = pBuf[MT_RPC_POS_CMD1];
//  442   pBuf += MT_RPC_FRAME_HDR_SZ;
//  443 
//  444   /* Destination address */
//  445   destAddr.addrMode = Addr16Bit;
//  446   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  447   pBuf += 2;
//  448 
//  449   /* Network address of interest */
//  450   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  451   pBuf += 2;
//  452 
//  453   retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
//  454 
//  455   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  456 }
//  457 
//  458 /***************************************************************************************************
//  459  * @fn      MT_ZdoPowerDescRequest
//  460  *
//  461  * @brief   Handle a Power Descriptor request.
//  462  *
//  463  * @param   pData  - MT message data
//  464  *
//  465  * @return  void
//  466  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?Subroutine6 & 0xFFFF
        CFI EndBlock cfiBlock5
??CrossCallReturnLabel_52:
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine45_0:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
        CFI EndBlock cfiBlock6
??CrossCallReturnLabel_60:
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine46_0:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        LCALL   ?Subroutine18 & 0xFFFF
        CFI EndBlock cfiBlock7
??CrossCallReturnLabel_61:
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine47_0:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock8
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine48_0:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        LCALL   ??Subroutine55_0 & 0xFFFF
??CrossCallReturnLabel_95:
        MOV     R1,A
        INC     DPTR
        ; Setup parameters for call to function ZDP_NwkAddrReq
        ; Setup parameters for call to function ZDP_IEEEAddrReq
        MOV     R5,#0x0
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
MT_ZdoNodeDescRequest:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function MT_ZdoNodeDescRequest
        FUNCALL MT_ZdoNodeDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNodeDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_81:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x2
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_77:
        MOV     R5,A
        MOV     A,R1
        SJMP    ??Subroutine45_0
        CFI EndBlock cfiBlock16

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  467 void MT_ZdoPowerDescRequest(uint8 *pBuf)
MT_ZdoPowerDescRequest:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function MT_ZdoPowerDescRequest
//  468 {
        FUNCALL MT_ZdoPowerDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoPowerDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  469   uint8 cmdId;
//  470   uint8 retValue;
//  471   zAddrType_t destAddr;
//  472   uint16 shortAddr;
//  473 
//  474   /* parse header */
//  475   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine53_0 & 0xFFFF
//  476   pBuf += MT_RPC_FRAME_HDR_SZ;
//  477 
//  478   /* Dev address */
//  479   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_82:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//  480   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_1:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
//  481   pBuf += 2;
//  482 
//  483   /* Network address of interest */
//  484   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  485   pBuf += 2;
//  486 
//  487   retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
??CrossCallReturnLabel_24:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x3
        SJMP    ?Subroutine37
        CFI EndBlock cfiBlock17
//  488 
//  489   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  490 }
//  491 
//  492 /***************************************************************************************************
//  493  * @fn      MT_ZdoSimpleDescRequest
//  494  *
//  495  * @brief   Handle a Simple Descriptor request.
//  496  *
//  497  * @param   pBuf  - MT message data
//  498  *
//  499  * @return  void
//  500  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  501 void MT_ZdoSimpleDescRequest(uint8 *pBuf)
MT_ZdoSimpleDescRequest:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function MT_ZdoSimpleDescRequest
//  502 {
        FUNCALL MT_ZdoSimpleDescRequest, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSimpleDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  503   uint8 cmdId;
//  504   uint8 retValue;
//  505   uint8 epInt;
//  506   zAddrType_t destAddr;
//  507   uint16 shortAddr;
//  508 
//  509   /* parse header */
//  510   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine53_0 & 0xFFFF
//  511   pBuf += MT_RPC_FRAME_HDR_SZ;
//  512 
//  513   /* Dev address */
//  514   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_83:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//  515   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_2:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
//  516   pBuf += 2;
//  517 
//  518   /* Network address of interest */
//  519   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  520   pBuf += 2;
//  521 
//  522   /* endpoint/interface */
//  523   epInt = *pBuf++;
//  524 
//  525   retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
??CrossCallReturnLabel_25:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_SimpleDescReq?relay
        MOV     A,#0x1
        LJMP    ??Subroutine46_0 & 0xFFFF
        CFI EndBlock cfiBlock18
//  526 
//  527   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  528 }
//  529 
//  530 /***************************************************************************************************
//  531  * @fn      MT_ZdoActiveEpRequest
//  532  *
//  533  * @brief   Handle a Active EP request.
//  534  *
//  535  * @param   pBuf  - MT message data
//  536  *
//  537  * @return  void
//  538  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  539 void MT_ZdoActiveEpRequest(uint8 *pBuf)
MT_ZdoActiveEpRequest:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function MT_ZdoActiveEpRequest
//  540 {
        FUNCALL MT_ZdoActiveEpRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoActiveEpRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  541   uint8 cmdId;
//  542   uint8 retValue;
//  543   zAddrType_t destAddr;
//  544   uint16 shortAddr;
//  545 
//  546   /* parse header */
//  547   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine53_0 & 0xFFFF
//  548   pBuf += MT_RPC_FRAME_HDR_SZ;
//  549 
//  550   /* Dev address */
//  551   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_84:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//  552   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_3:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
//  553   pBuf += 2;
//  554 
//  555   /* Network address of interest */
//  556   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  557   pBuf += 2;
//  558 
//  559   retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
??CrossCallReturnLabel_26:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x5
        LJMP    ?Subroutine37 & 0xFFFF
        CFI EndBlock cfiBlock19
//  560 
//  561   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  562 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_NWKAddrOfInterestReq?relay
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV     A,#0xa
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_87:
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_SimpleDescReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_24
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_25
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_26
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_27
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_28
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_69
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_70
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_71
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_72
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        MOVX    @DPTR,A
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50
        REQUIRE ?Subroutine39
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine49_0:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_89
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_23
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_24
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_25
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_26
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_27
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_28
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_69
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_70
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_71
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_72
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiPicker62 Using cfiCommon1
        CFI (cfiPicker62) NoFunction
        CFI (cfiPicker62) Picker
        MOV     A,R2
        ADD     A,#0x2
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiPicker62
        REQUIRE ?Subroutine39
        ; // Fall through to label ?Subroutine39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond63 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_24
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_25
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_26
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_27
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_28
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_69
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_70
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_71
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_72
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_79
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_80
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_81
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_82
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_83
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_84
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_85
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_86
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_29
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_30
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker84 Using cfiCommon1
        CFI (cfiPicker84) NoFunction
        CFI (cfiPicker84) Picker
        INC     R2
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiPicker84

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond85 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker90 Using cfiCommon1
        CFI (cfiPicker90) NoFunction
        CFI (cfiPicker90) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiPicker90
//  563 
//  564 /***************************************************************************************************
//  565  * @fn      MT_ZdoMatchDescRequest
//  566  *
//  567  * @brief   Handle a Match Descriptor request.
//  568  *
//  569  * @param   pBuf  - MT message data
//  570  *
//  571  * @return  void
//  572  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  573 void MT_ZdoMatchDescRequest(uint8 *pBuf)
MT_ZdoMatchDescRequest:
        CFI Block cfiBlock91 Using cfiCommon0
        CFI Function MT_ZdoMatchDescRequest
//  574 {
        FUNCALL MT_ZdoMatchDescRequest, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 97, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 74
        MOV     A,#-0x4a
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 89)
//  575   uint8 cmdId;
//  576   uint8 retValue = 0;
        LCALL   ?Subroutine0 & 0xFFFF
//  577   uint8 i, numInClusters, numOutClusters;
//  578   uint16 profileId;
//  579   zAddrType_t destAddr;
//  580   uint16 shortAddr;
//  581   uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
//  582 
//  583   /* parse header */
//  584   cmdId = pBuf[MT_RPC_POS_CMD1];
//  585   pBuf += MT_RPC_FRAME_HDR_SZ;
//  586 
//  587   /* Dev address */
//  588   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_79:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//  589   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_4:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  590   pBuf += 2;
//  591 
//  592   /* Network address of interest */
//  593   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_73:
        MOV     R5,A
//  594   pBuf += 2;
        LCALL   ??Subroutine49_0 & 0xFFFF
//  595 
//  596   /* Profile ID */
//  597   profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_89:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine5 & 0xFFFF
//  598   pBuf += 2;
//  599 
//  600   /* NumInClusters */
//  601   numInClusters = *pBuf++;
??CrossCallReturnLabel_13:
        MOV     R7,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  602   if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
        CLR     C
        SUBB    A,#0x11
        JNC     ??MT_ZdoMatchDescRequest_0
//  603   {
//  604     /* IN clusters */
//  605     for ( i = 0; i < numInClusters; i++ )
        MOV     ?V0 + 2,R0
??MT_ZdoMatchDescRequest_1:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,R7
        JNC     ??MT_ZdoMatchDescRequest_2
//  606     {
//  607       inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
        LCALL   ?Subroutine7 & 0xFFFF
//  608       pBuf += 2;
//  609     }
//  610   }
??CrossCallReturnLabel_53:
        MOV     A,#0x2a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_69:
        SJMP    ??MT_ZdoMatchDescRequest_1
//  611   else
//  612   {
//  613     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoMatchDescRequest_0:
        MOV     A,#-0x80
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  614   }
//  615 
//  616   /* NumOutClusters */
//  617   numOutClusters = *pBuf++;
??MT_ZdoMatchDescRequest_2:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  618   if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
        CLR     C
        SUBB    A,#0x11
        JNC     ??MT_ZdoMatchDescRequest_3
//  619   {
//  620     /* OUT Clusters */
//  621     for ( i = 0; i < numOutClusters; i++ )
        MOV     ?V0 + 2,#0x0
??MT_ZdoMatchDescRequest_4:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 6
        JNC     ??MT_ZdoMatchDescRequest_5
//  622     {
//  623       outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
        LCALL   ?Subroutine7 & 0xFFFF
//  624       pBuf += 2;
//  625     }
//  626   }
??CrossCallReturnLabel_54:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_70:
        SJMP    ??MT_ZdoMatchDescRequest_4
//  627   else
//  628   {
//  629     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoMatchDescRequest_3:
        MOV     A,#-0x80
        SJMP    ??MT_ZdoMatchDescRequest_6
//  630   }
//  631 
//  632   if ( retValue == 0 )
??MT_ZdoMatchDescRequest_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??MT_ZdoMatchDescRequest_7
//  633   {
//  634     retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
//  635                                        inClusters, numOutClusters, outClusters, 0);
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 90)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 92)
        MOV     A,?V0 + 6
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 95)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 97)
        MOV     A,R7
        MOV     R1,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_MatchDescReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 89)
        MOV     A,R1
??MT_ZdoMatchDescRequest_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  636   }
//  637 
//  638   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoMatchDescRequest_7:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  639 }
        MOV     A,#0x4a
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock91

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond92 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_69
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine50_0:
        CFI Block cfiCond95 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_71
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiPicker99 Using cfiCommon1
        CFI (cfiPicker99) NoFunction
        CFI (cfiPicker99) Picker
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_88:
        INC     ?V0 + 2
        RET
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiPicker99

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond100 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_73
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiPicker103 Using cfiCommon1
        CFI (cfiPicker103) NoFunction
        CFI (cfiPicker103) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x2
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiPicker103
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine51_0:
        CFI Block cfiCond104 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiPicker108 Using cfiCommon1
        CFI (cfiPicker108) NoFunction
        CFI (cfiPicker108) Picker
        INC     R2
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiPicker108
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine52_0:
        CFI Block cfiCond109 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_77
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiPicker115 Using cfiCommon1
        CFI (cfiPicker115) NoFunction
        CFI (cfiPicker115) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond116 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiPicker118 Using cfiCommon1
        CFI (cfiPicker118) NoFunction
        CFI (cfiPicker118) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        ADD     A,?V0 + 4
        MOV     A,R1
        MOV     ?V0 + 5,A
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiPicker118
        REQUIRE ?Subroutine38
        ; // Fall through to label ?Subroutine38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond119 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiPicker123 Using cfiCommon1
        CFI (cfiPicker123) NoFunction
        CFI (cfiPicker123) Picker
        MOV     A,?V0 + 2
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        RET
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiPicker123

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond124 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiPicker133 Using cfiCommon1
        CFI (cfiPicker133) NoFunction
        CFI (cfiPicker133) Picker
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiPicker133
//  640 
//  641 /***************************************************************************************************
//  642  * @fn      MT_ZdoComplexDescRequest
//  643  *
//  644  * @brief   Handle a Complex Descriptor request.
//  645  *
//  646  * @param   pBuf  - MT message data
//  647  *
//  648  * @return  void
//  649  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  650 void MT_ZdoComplexDescRequest(uint8 *pBuf)
MT_ZdoComplexDescRequest:
        CFI Block cfiBlock134 Using cfiCommon0
        CFI Function MT_ZdoComplexDescRequest
//  651 {
        FUNCALL MT_ZdoComplexDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoComplexDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  652   uint8 cmdId;
//  653   uint8 retValue;
//  654   zAddrType_t destAddr;
//  655   uint16 shortAddr;
//  656 
//  657   /* parse header */
//  658   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine53_0 & 0xFFFF
//  659   pBuf += MT_RPC_FRAME_HDR_SZ;
//  660 
//  661   /* Dev address */
//  662   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_85:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//  663   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_5:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
//  664   pBuf += 2;
//  665 
//  666   /* Network address of interest */
//  667   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  668   pBuf += 2;
//  669 
//  670   retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
??CrossCallReturnLabel_27:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x10
        LJMP    ?Subroutine37 & 0xFFFF
        CFI EndBlock cfiBlock134
//  671 
//  672   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  673 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond135 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_79
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiPicker137 Using cfiCommon1
        CFI (cfiPicker137) NoFunction
        CFI (cfiPicker137) Picker
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiPicker137
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine53_0:
        CFI Block cfiCond138 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_81
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiPicker146 Using cfiCommon1
        CFI (cfiPicker146) NoFunction
        CFI (cfiPicker146) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV     A,#0x9
        RET
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiPicker146
//  674 
//  675 /***************************************************************************************************
//  676  * @fn      MT_ZdoUserDescRequest
//  677  *
//  678  * @brief   Handle a User Descriptor request.
//  679  *
//  680  * @param   pBuf  - MT message data
//  681  *
//  682  * @return  void
//  683  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  684 void MT_ZdoUserDescRequest(uint8 *pBuf)
MT_ZdoUserDescRequest:
        CFI Block cfiBlock147 Using cfiCommon0
        CFI Function MT_ZdoUserDescRequest
//  685 {
        FUNCALL MT_ZdoUserDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUserDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  686   uint8 cmdId;
//  687   uint8 retValue;
//  688   zAddrType_t destAddr;
//  689   uint16 shortAddr;
//  690 
//  691   /* parse header */
//  692   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine53_0 & 0xFFFF
//  693   pBuf += MT_RPC_FRAME_HDR_SZ;
//  694 
//  695   /* Dev address */
//  696   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_86:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//  697   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
??CrossCallReturnLabel_6:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
//  698   pBuf += 2;
//  699 
//  700   /* Network address of interest */
//  701   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
//  702   pBuf += 2;
//  703 
//  704   retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
??CrossCallReturnLabel_28:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x11
        LJMP    ?Subroutine37 & 0xFFFF
        CFI EndBlock cfiBlock147
//  705 
//  706   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  707 }
//  708 
//  709 /***************************************************************************************************
//  710  * @fn      MT_ZdoEndDevAnnce
//  711  *
//  712  * @brief   Handle a End Device Announce Descriptor request.
//  713  *
//  714  * @param   pBuf  - MT message data
//  715  *
//  716  * @return  void
//  717  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  718 void MT_ZdoEndDevAnnce(uint8 *pBuf)
MT_ZdoEndDevAnnce:
        CFI Block cfiBlock148 Using cfiCommon0
        CFI Function MT_ZdoEndDevAnnce
//  719 {
        FUNCALL MT_ZdoEndDevAnnce, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevAnnce, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
//  720   uint8 cmdId;
//  721   uint8 retValue;
//  722   uint16 shortAddr;
//  723   uint8 *pIEEEAddr;
//  724 
//  725   /* parse header */
//  726   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  727   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R4
        ADD     A,#0x3
        INC     R4
        INC     R4
        INC     R4
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
//  728 
//  729   /* network address */
//  730   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R3,A
//  731   pBuf += 2;
        MOV     A,R4
        ADD     A,#0x2
        INC     R4
        INC     R4
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
//  732 
//  733   /* extended address */
//  734   pIEEEAddr = pBuf;
//  735   pBuf += Z_EXTADDR_LEN;
//  736 
//  737   retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV     ?V0 + 0,R0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDP_DeviceAnnce?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock148
        REQUIRE ?Subroutine43
        ; // Fall through to label ?Subroutine43
//  738 
//  739   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  740 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
        CFI Block cfiBlock149 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_59:
        LJMP    ??Subroutine47_0 & 0xFFFF
        CFI EndBlock cfiBlock149
//  741 
//  742 /***************************************************************************************************
//  743  * @fn      MT_ZdoUserDescSet
//  744  *
//  745  * @brief   Handle a User Descriptor Set.
//  746  *
//  747  * @param   pBuf  - MT message data
//  748  *
//  749  * @return  void
//  750  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  751 void MT_ZdoUserDescSet(uint8 *pBuf)
MT_ZdoUserDescSet:
        CFI Block cfiBlock150 Using cfiCommon0
        CFI Function MT_ZdoUserDescSet
//  752 {
        FUNCALL MT_ZdoUserDescSet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUserDescSet, ZDP_UserDescSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUserDescSet, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 27
        MOV     A,#-0x1b
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
//  753   uint8 cmdId;
//  754   uint8 retValue;
//  755   zAddrType_t destAddr;
//  756   uint16 shortAddr;
//  757   UserDescriptorFormat_t userDesc;
//  758 
//  759   /* parse header */
//  760   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  761   pBuf += MT_RPC_FRAME_HDR_SZ;
        LCALL   ?Subroutine15 & 0xFFFF
//  762 
//  763   /* Dev address */
//  764   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_29:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//  765   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_7:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  766   pBuf += 2;
//  767 
//  768   /* Network address of interest */
//  769   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_74:
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
//  770   pBuf += 2;
        MOV     A,R2
        ADD     A,#0x2
        INC     R2
        INC     R2
        LCALL   ?Subroutine17 & 0xFFFF
//  771 
//  772   /* User descriptor */
//  773   userDesc.len = *pBuf++;
??CrossCallReturnLabel_31:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  774   osal_memcpy( userDesc.desc, pBuf, userDesc.len );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
//  775   pBuf += 16;
//  776 
//  777   retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
        ; Setup parameters for call to function ZDP_UserDescSet
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R1,#0x0
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_UserDescSet?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        LCALL   ?Subroutine36 & 0xFFFF
//  778 
//  779   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??CrossCallReturnLabel_62:
        MOV     R2,?V0 + 3
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  780 }
        MOV     A,#0x1b
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock150
//  781 
//  782 /***************************************************************************************************
//  783  * @fn      MT_ZdoServiceDiscRequest
//  784  *
//  785  * @brief   Handle a Server Discovery request.
//  786  *
//  787  * @param   pBuf  - MT message data
//  788  *
//  789  * @return  void
//  790  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  791 void MT_ZdoServiceDiscRequest(uint8 *pBuf)
MT_ZdoServiceDiscRequest:
        CFI Block cfiBlock151 Using cfiCommon0
        CFI Function MT_ZdoServiceDiscRequest
//  792 {
        FUNCALL MT_ZdoServiceDiscRequest, ZDP_ServerDiscReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoServiceDiscRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  793   uint8 cmdId;
//  794   uint8 retValue;
//  795   uint16 serviceMask;
//  796 
//  797   /* parse header */
//  798   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  799   pBuf += MT_RPC_FRAME_HDR_SZ;
        LCALL   ?Subroutine15 & 0xFFFF
//  800 
//  801   /* Service Mask */
//  802   serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
//  803   pBuf += 2;
//  804 
//  805   retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
??CrossCallReturnLabel_30:
        ; Setup parameters for call to function ZDP_ServerDiscReq
        MOV     R1,#0x0
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_78:
        MOV     R3,A
        MOV     A,R4
        MOV     R2,A
        LCALL   ??ZDP_ServerDiscReq?relay
        LJMP    ?Subroutine43 & 0xFFFF
        CFI EndBlock cfiBlock151
//  806 
//  807   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  808 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond152 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker154 Using cfiCommon1
        CFI (cfiPicker154) NoFunction
        CFI (cfiPicker154) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiPicker154

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond155 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond159) CFA_SP SP+0
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_59
        CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond161) CFA_SP SP+0
        CFI (cfiCond161) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond162 Using cfiCommon0
        CFI (cfiCond162) NoFunction
        CFI (cfiCond162) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_59
        CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond162) CFA_SP SP+0
        CFI (cfiCond162) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker163 Using cfiCommon1
        CFI (cfiPicker163) NoFunction
        CFI (cfiPicker163) Picker
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV     A,R6
        MOV     R2,A
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiCond162
        CFI EndBlock cfiPicker163
        REQUIRE ?Subroutine40
        ; // Fall through to label ?Subroutine40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond164 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond166) CFA_SP SP+0
        CFI (cfiCond166) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond167) CFA_SP SP+0
        CFI (cfiCond167) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond169) CFA_SP SP+0
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_59
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+0
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_59
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+0
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_58
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_58
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_57
        CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond174) CFA_SP SP+0
        CFI (cfiCond174) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_57
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker176 Using cfiCommon1
        CFI (cfiPicker176) NoFunction
        CFI (cfiPicker176) Picker
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
        RET
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiPicker176

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond177 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond178 Using cfiCommon0
        CFI (cfiCond178) NoFunction
        CFI (cfiCond178) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond178) CFA_SP SP+0
        CFI (cfiCond178) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond179) CFA_SP SP+0
        CFI (cfiCond179) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_61
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_59
        CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond184) CFA_SP SP+0
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_59
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_58
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_58
        CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond187) CFA_SP SP+0
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond188 Using cfiCommon0
        CFI (cfiCond188) NoFunction
        CFI (cfiCond188) Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_57
        CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond188) CFA_SP SP+0
        CFI (cfiCond188) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond189 Using cfiCommon0
        CFI (cfiCond189) NoFunction
        CFI (cfiCond189) Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_57
        CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond189) CFA_SP SP+0
        CFI (cfiCond189) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker190 Using cfiCommon1
        CFI (cfiPicker190) NoFunction
        CFI (cfiPicker190) Picker
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        RET
        CFI EndBlock cfiCond177
        CFI EndBlock cfiCond178
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiCond188
        CFI EndBlock cfiCond189
        CFI EndBlock cfiPicker190

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond191 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond192 Using cfiCommon0
        CFI (cfiCond192) NoFunction
        CFI (cfiCond192) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond192) CFA_SP SP+0
        CFI (cfiCond192) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker193 Using cfiCommon1
        CFI (cfiPicker193) NoFunction
        CFI (cfiPicker193) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_90:
        RET
        CFI EndBlock cfiCond191
        CFI EndBlock cfiCond192
        CFI EndBlock cfiPicker193

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond194 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_79
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond195 Using cfiCommon0
        CFI (cfiCond195) NoFunction
        CFI (cfiCond195) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_80
        CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond195) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond195) CFA_SP SP+0
        CFI (cfiCond195) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond196 Using cfiCommon0
        CFI (cfiCond196) NoFunction
        CFI (cfiCond196) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_81
        CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond196) CFA_SP SP+0
        CFI (cfiCond196) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond197 Using cfiCommon0
        CFI (cfiCond197) NoFunction
        CFI (cfiCond197) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_82
        CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond197) CFA_SP SP+0
        CFI (cfiCond197) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_83
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond199 Using cfiCommon0
        CFI (cfiCond199) NoFunction
        CFI (cfiCond199) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_84
        CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond199) CFA_SP SP+0
        CFI (cfiCond199) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond200 Using cfiCommon0
        CFI (cfiCond200) NoFunction
        CFI (cfiCond200) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_85
        CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond200) CFA_SP SP+0
        CFI (cfiCond200) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond201 Using cfiCommon0
        CFI (cfiCond201) NoFunction
        CFI (cfiCond201) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_86
        CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond201) CFA_SP SP+0
        CFI (cfiCond201) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_29
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_30
        CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond203) CFA_SP SP+0
        CFI (cfiCond203) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker204 Using cfiCommon1
        CFI (cfiPicker204) NoFunction
        CFI (cfiPicker204) Picker
        MOV     A,R2
        ADD     A,#0x3
        INC     R2
        LJMP    ?Subroutine39 & 0xFFFF
        CFI EndBlock cfiCond194
        CFI EndBlock cfiCond195
        CFI EndBlock cfiCond196
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiCond199
        CFI EndBlock cfiCond200
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiPicker204
//  809 
//  810 /***************************************************************************************************
//  811  * @fn      MT_ZdoEndDevBindRequest
//  812  *
//  813  * @brief   Handle a End Device Bind request.
//  814  *
//  815  * @param   pBuf  - MT message data
//  816  *
//  817  * @return  void
//  818  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  819 void MT_ZdoEndDevBindRequest(uint8 *pBuf)
MT_ZdoEndDevBindRequest:
        CFI Block cfiBlock205 Using cfiCommon0
        CFI Function MT_ZdoEndDevBindRequest
//  820 {
        FUNCALL MT_ZdoEndDevBindRequest, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 95, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 95, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 86, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 86, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 70
        MOV     A,#-0x46
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 86)
//  821   uint8 cmdId;
//  822   uint8 retValue = 0;
        LCALL   ?Subroutine0 & 0xFFFF
//  823   uint8 i, epInt, numInClusters, numOutClusters;
//  824   zAddrType_t destAddr;
//  825   uint16 shortAddr;
//  826   uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
//  827 
//  828   /* parse header */
//  829   cmdId = pBuf[MT_RPC_POS_CMD1];
//  830   pBuf += MT_RPC_FRAME_HDR_SZ;
//  831 
//  832   /* Dev address */
//  833   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_80:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//  834   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_8:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  835   pBuf += 2;
//  836 
//  837   /* Local coordinator of the binding */
//  838   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_75:
        MOV     R5,A
//  839   pBuf += 2;
//  840   
//  841   /* For now, skip past the extended address */
//  842   pBuf += Z_EXTADDR_LEN;
        MOV     A,R2
        ADD     A,#0xa
        MOV     R2,A
        LCALL   ?Subroutine17 & 0xFFFF
//  843 
//  844   /* Endpoint */
//  845   epInt = *pBuf++;
??CrossCallReturnLabel_32:
        MOV     R7,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  846 
//  847   /* Profile ID */
//  848   profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
        LCALL   ?Subroutine5 & 0xFFFF
//  849   pBuf += 2;
//  850 
//  851   /* NumInClusters */
//  852   numInClusters = *pBuf++;
??CrossCallReturnLabel_14:
        MOV     ?V0 + 4,A
        INC     DPTR
        INC     R2
        MOV     R3,DPH
//  853   if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
        CLR     C
        SUBB    A,#0x10
        JNC     ??MT_ZdoEndDevBindRequest_0
//  854   {
//  855     for ( i = 0; i < numInClusters; i++ )
        MOV     ?V0 + 2,R0
??MT_ZdoEndDevBindRequest_1:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 4
        JNC     ??MT_ZdoEndDevBindRequest_2
//  856     {
//  857       inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
        LCALL   ?Subroutine8 & 0xFFFF
//  858       pBuf += 2;
//  859     }
//  860   }
??CrossCallReturnLabel_55:
        MOV     A,#0x28
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL   ??Subroutine50_0 & 0xFFFF
??CrossCallReturnLabel_71:
        SJMP    ??MT_ZdoEndDevBindRequest_1
//  861   else
//  862     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoEndDevBindRequest_0:
        MOV     A,#-0x80
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  863 
//  864   /* NumOutClusters */
//  865   numOutClusters = *pBuf++;
??MT_ZdoEndDevBindRequest_2:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  866   if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
        CLR     C
        SUBB    A,#0x10
        JNC     ??MT_ZdoEndDevBindRequest_3
//  867   {
//  868     for ( i = 0; i < numOutClusters; i++ )
        MOV     ?V0 + 2,#0x0
??MT_ZdoEndDevBindRequest_4:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 5
        JNC     ??MT_ZdoEndDevBindRequest_5
//  869     {
//  870       outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
        LCALL   ?Subroutine8 & 0xFFFF
//  871       pBuf += 2;
//  872     }
//  873   }
??CrossCallReturnLabel_56:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL   ??Subroutine50_0 & 0xFFFF
??CrossCallReturnLabel_72:
        SJMP    ??MT_ZdoEndDevBindRequest_4
//  874   else
//  875     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoEndDevBindRequest_3:
        MOV     A,#-0x80
        SJMP    ??MT_ZdoEndDevBindRequest_6
//  876   
//  877   if ( retValue == 0 )
??MT_ZdoEndDevBindRequest_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??MT_ZdoEndDevBindRequest_7
//  878   {
//  879     retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
//  880                                           numInClusters, inClusters, numOutClusters, outClusters, 0);
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 87)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 89)
        MOV     A,?V0 + 5
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 90)
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 92)
        MOV     A,?V0 + 4
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 93)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 95)
        MOV     A,R7
        MOV     R1,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_EndDeviceBindReq?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 86)
        MOV     A,R1
??MT_ZdoEndDevBindRequest_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  881   }
//  882 
//  883   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoEndDevBindRequest_7:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  884 }
        MOV     A,#0x46
        LJMP    ??Subroutine56_0 & 0xFFFF
        CFI EndBlock cfiBlock205

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond206 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond207 Using cfiCommon0
        CFI (cfiCond207) NoFunction
        CFI (cfiCond207) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond207) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond207) CFA_SP SP+0
        CFI (cfiCond207) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiPicker208 Using cfiCommon1
        CFI (cfiPicker208) NoFunction
        CFI (cfiPicker208) Picker
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        RET
        CFI EndBlock cfiCond206
        CFI EndBlock cfiCond207
        CFI EndBlock cfiPicker208

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond209 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_69
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond210 Using cfiCommon0
        CFI (cfiCond210) NoFunction
        CFI (cfiCond210) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_70
        CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond210) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond210) CFA_SP SP+0
        CFI (cfiCond210) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond211 Using cfiCommon0
        CFI (cfiCond211) NoFunction
        CFI (cfiCond211) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_38
        CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond211) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond211) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond211) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond211) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond211) CFA_SP SP+0
        CFI (cfiCond211) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond212 Using cfiCommon0
        CFI (cfiCond212) NoFunction
        CFI (cfiCond212) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_39
        CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond212) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond212) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond212) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond212) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond212) CFA_SP SP+0
        CFI (cfiCond212) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiPicker213 Using cfiCommon1
        CFI (cfiPicker213) NoFunction
        CFI (cfiPicker213) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond209
        CFI EndBlock cfiCond210
        CFI EndBlock cfiCond211
        CFI EndBlock cfiCond212
        CFI EndBlock cfiPicker213

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond214 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond215 Using cfiCommon0
        CFI (cfiCond215) NoFunction
        CFI (cfiCond215) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond215) CFA_SP SP+0
        CFI (cfiCond215) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiPicker216 Using cfiCommon1
        CFI (cfiPicker216) NoFunction
        CFI (cfiPicker216) Picker
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_94:
        RET
        CFI EndBlock cfiCond214
        CFI EndBlock cfiCond215
        CFI EndBlock cfiPicker216

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond217 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond218 Using cfiCommon0
        CFI (cfiCond218) NoFunction
        CFI (cfiCond218) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond218) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond218) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond218) CFA_SP SP+0
        CFI (cfiCond218) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiPicker219 Using cfiCommon1
        CFI (cfiPicker219) NoFunction
        CFI (cfiPicker219) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        ADD     A,?V0 + 6
        MOV     A,R1
        MOV     ?V0 + 7,A
        LJMP    ?Subroutine38 & 0xFFFF
        CFI EndBlock cfiCond217
        CFI EndBlock cfiCond218
        CFI EndBlock cfiPicker219

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond220 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond221 Using cfiCommon0
        CFI (cfiCond221) NoFunction
        CFI (cfiCond221) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond221) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond221) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond221) CFA_SP SP+0
        CFI (cfiCond221) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiPicker222 Using cfiCommon1
        CFI (cfiPicker222) NoFunction
        CFI (cfiPicker222) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     ?V0 + 1,A
        MOV     A,R2
        ADD     A,#0x2
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_92:
        RET
        CFI EndBlock cfiCond220
        CFI EndBlock cfiCond221
        CFI EndBlock cfiPicker222

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond223 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond224 Using cfiCommon0
        CFI (cfiCond224) NoFunction
        CFI (cfiCond224) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_14
        CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond224) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond224) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond224) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond224) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond224) CFA_SP SP+0
        CFI (cfiCond224) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond225 Using cfiCommon0
        CFI (cfiCond225) NoFunction
        CFI (cfiCond225) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_9
        CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond225) CFA_SP SP+0
        CFI (cfiCond225) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond226 Using cfiCommon0
        CFI (cfiCond226) NoFunction
        CFI (cfiCond226) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_10
        CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond226) CFA_SP SP+0
        CFI (cfiCond226) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker227 Using cfiCommon1
        CFI (cfiPicker227) NoFunction
        CFI (cfiPicker227) Picker
        INC     R2
        INC     R2
        CFI EndBlock cfiCond223
        CFI EndBlock cfiCond224
        CFI EndBlock cfiCond225
        CFI EndBlock cfiCond226
        CFI EndBlock cfiPicker227
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine54_0:
        CFI Block cfiCond228 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond229 Using cfiCommon0
        CFI (cfiCond229) NoFunction
        CFI (cfiCond229) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_32
        CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond229) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond229) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond229) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond229) CFA_SP SP+0
        CFI (cfiCond229) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond230 Using cfiCommon0
        CFI (cfiCond230) NoFunction
        CFI (cfiCond230) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_13
        CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond230) CFA_SP SP+0
        CFI (cfiCond230) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond231 Using cfiCommon0
        CFI (cfiCond231) NoFunction
        CFI (cfiCond231) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_14
        CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond231) CFA_SP SP+0
        CFI (cfiCond231) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond232 Using cfiCommon0
        CFI (cfiCond232) NoFunction
        CFI (cfiCond232) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_9
        CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond232) CFA_SP SP+0
        CFI (cfiCond232) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond233 Using cfiCommon0
        CFI (cfiCond233) NoFunction
        CFI (cfiCond233) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_10
        CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond233) CFA_SP SP+0
        CFI (cfiCond233) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker234 Using cfiCommon1
        CFI (cfiPicker234) NoFunction
        CFI (cfiPicker234) Picker
        MOV     A,R3
        CFI EndBlock cfiCond228
        CFI EndBlock cfiCond229
        CFI EndBlock cfiCond230
        CFI EndBlock cfiCond231
        CFI EndBlock cfiCond232
        CFI EndBlock cfiCond233
        CFI EndBlock cfiPicker234
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine55_0:
        CFI Block cfiCond235 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond236 Using cfiCommon0
        CFI (cfiCond236) NoFunction
        CFI (cfiCond236) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_18
        CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond236) CFA_SP SP+0
        CFI (cfiCond236) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond237 Using cfiCommon0
        CFI (cfiCond237) NoFunction
        CFI (cfiCond237) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_31
        CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond237) CFA_SP SP+0
        CFI (cfiCond237) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_32
        CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond238) CFA_SP SP+0
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond239 Using cfiCommon0
        CFI (cfiCond239) NoFunction
        CFI (cfiCond239) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_13
        CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond239) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond239) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond239) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond239) CFA_SP SP+0
        CFI (cfiCond239) CFA_XSP16 add(XSP16, 89)
        CFI Block cfiCond240 Using cfiCommon0
        CFI (cfiCond240) NoFunction
        CFI (cfiCond240) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_14
        CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond240) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond240) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond240) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond240) CFA_SP SP+0
        CFI (cfiCond240) CFA_XSP16 add(XSP16, 86)
        CFI Block cfiCond241 Using cfiCommon0
        CFI (cfiCond241) NoFunction
        CFI (cfiCond241) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_9
        CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond241) CFA_SP SP+0
        CFI (cfiCond241) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_10
        CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond242) CFA_SP SP+0
        CFI (cfiCond242) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker243 Using cfiCommon1
        CFI (cfiPicker243) NoFunction
        CFI (cfiPicker243) Picker
        ADDC    A,#0x0
        MOV     R3,A
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        ; Setup parameters for call to function ZDO_RemoveRegisteredCB
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond235
        CFI EndBlock cfiCond236
        CFI EndBlock cfiCond237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiCond239
        CFI EndBlock cfiCond240
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiPicker243
//  885 
//  886 /***************************************************************************************************
//  887  * @fn      MT_ZdoBindRequest
//  888  *
//  889  * @brief   Handle a Bind request.
//  890  *
//  891  * @param   pBuf  - MT message data
//  892  *
//  893  * @return  void
//  894  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  895 void MT_ZdoBindRequest(uint8 *pBuf)
MT_ZdoBindRequest:
        CFI Block cfiBlock244 Using cfiCommon0
        CFI Function MT_ZdoBindRequest
//  896 {
        FUNCALL MT_ZdoBindRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 19
        MOV     A,#-0x13
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
        LCALL   ?Subroutine9 & 0xFFFF
//  897   uint8 cmdId;
//  898   uint8 retValue;
//  899   zAddrType_t destAddr, devAddr;
//  900   uint8 *pSrcAddr, *ptr;
//  901   uint8 srcEPInt, dstEPInt;
//  902   uint16 clusterID;
//  903 
//  904   /* parse header */
//  905   cmdId = pBuf[MT_RPC_POS_CMD1];
//  906   pBuf += MT_RPC_FRAME_HDR_SZ;
//  907 
//  908   /* Dev address */
//  909   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_15:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  910   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_19:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  911   pBuf += 2;
//  912 
//  913   /* SrcAddress */
//  914   pSrcAddr = pBuf;
//  915   pBuf += Z_EXTADDR_LEN;
//  916 
//  917   /* SrcEPInt */
//  918   srcEPInt = *pBuf++;
//  919 
//  920   /* ClusterID */
//  921   clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
//  922   pBuf += 2;
//  923 
//  924   /* Destination Address mode */
//  925   devAddr.addrMode = *pBuf++;
??CrossCallReturnLabel_11:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
//  926 
//  927   /* Destination Address */
//  928   if ( devAddr.addrMode == Addr64Bit )
??CrossCallReturnLabel_33:
        JNZ     ??MT_ZdoBindRequest_0
//  929   {
//  930     ptr = pBuf;
//  931     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sAddrExtCpy?relay
        SJMP    ??MT_ZdoBindRequest_1
//  932   }
//  933   else
//  934   {
//  935     devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoBindRequest_0:
        LCALL   ?Subroutine12 & 0xFFFF
//  936   }
??CrossCallReturnLabel_21:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  937   /* The short address occupies LSB two bytes */
//  938   pBuf += Z_EXTADDR_LEN;
//  939 
//  940   /* DstEPInt */
//  941   dstEPInt = *pBuf;
//  942 
//  943   retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
??MT_ZdoBindRequest_1:
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     R1,?V0 + 1
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x21
        CFI EndBlock cfiBlock244
        REQUIRE ?Subroutine41
        ; // Fall through to label ?Subroutine41
//  944 
//  945   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  946 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiBlock245 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 43)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R3,#0x0
        LCALL   ??ZDP_BindUnbindReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
        LCALL   ?Subroutine21 & 0xFFFF
        CFI EndBlock cfiBlock245
??CrossCallReturnLabel_57:
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine56_0:
        CFI Block cfiBlock246 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 86)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock246
//  947 
//  948 /***************************************************************************************************
//  949  * @fn      MT_ZdoUnbindRequest
//  950  *
//  951  * @brief   Handle a Unbind request.
//  952  *
//  953  * @param   pBuf  - MT message data
//  954  *
//  955  * @return  void
//  956  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  957 void MT_ZdoUnbindRequest(uint8 *pBuf)
MT_ZdoUnbindRequest:
        CFI Block cfiBlock247 Using cfiCommon0
        CFI Function MT_ZdoUnbindRequest
//  958 {
        FUNCALL MT_ZdoUnbindRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 19
        MOV     A,#-0x13
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
        LCALL   ?Subroutine9 & 0xFFFF
//  959   uint8 cmdId;
//  960   uint8 retValue;
//  961   zAddrType_t destAddr, devAddr;
//  962   uint8 *pSrcAddr, *ptr;
//  963   uint8 srcEPInt, dstEPInt;
//  964   uint16 clusterID;
//  965 
//  966   /* parse header */
//  967   cmdId = pBuf[MT_RPC_POS_CMD1];
//  968   pBuf += MT_RPC_FRAME_HDR_SZ;
//  969 
//  970   /* dev address */
//  971   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_16:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  972   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_20:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  973   pBuf += 2;
//  974 
//  975   /* SrcAddress */
//  976   pSrcAddr = pBuf;
//  977   pBuf += Z_EXTADDR_LEN;
//  978 
//  979   /* SrcEPInt */
//  980   srcEPInt = *pBuf++;
//  981 
//  982   /* ClusterID */
//  983   clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
//  984   pBuf += 2;
//  985 
//  986   /* Destination Address mode */
//  987   devAddr.addrMode = *pBuf++;
??CrossCallReturnLabel_12:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
//  988 
//  989   /* Destination Address */
//  990   if ( devAddr.addrMode == Addr64Bit )
??CrossCallReturnLabel_34:
        JNZ     ??MT_ZdoUnbindRequest_0
//  991   {
//  992     ptr = pBuf;
//  993     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sAddrExtCpy?relay
        SJMP    ??MT_ZdoUnbindRequest_1
//  994   }
//  995   else
//  996   {
//  997     devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoUnbindRequest_0:
        LCALL   ?Subroutine12 & 0xFFFF
//  998   }
??CrossCallReturnLabel_22:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  999   /* The short address occupies LSB two bytes */
// 1000   pBuf += Z_EXTADDR_LEN;
// 1001 
// 1002   /* dstEPInt */
// 1003   dstEPInt = *pBuf;
// 1004 
// 1005   retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
??MT_ZdoUnbindRequest_1:
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     R1,?V0 + 1
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x22
        LJMP    ?Subroutine41 & 0xFFFF
        CFI EndBlock cfiBlock247
// 1006 
// 1007   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1008 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond248 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond249 Using cfiCommon0
        CFI (cfiCond249) NoFunction
        CFI (cfiCond249) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond249) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond249) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond249) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond249) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond249) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond249) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond249) CFA_SP SP+0
        CFI (cfiCond249) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker250 Using cfiCommon1
        CFI (cfiPicker250) NoFunction
        CFI (cfiPicker250) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        MOV     A,#0x3
        XRL     A,R2
        RET
        CFI EndBlock cfiCond248
        CFI EndBlock cfiCond249
        CFI EndBlock cfiPicker250

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond251 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond252 Using cfiCommon0
        CFI (cfiCond252) NoFunction
        CFI (cfiCond252) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond252) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond252) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond252) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond252) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond252) CFA_SP SP+0
        CFI (cfiCond252) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker253 Using cfiCommon1
        CFI (cfiPicker253) NoFunction
        CFI (cfiPicker253) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     A,#0x13
        RET
        CFI EndBlock cfiCond251
        CFI EndBlock cfiCond252
        CFI EndBlock cfiPicker253

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond254 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond255 Using cfiCommon0
        CFI (cfiCond255) NoFunction
        CFI (cfiCond255) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_58
        CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond255) CFA_SP SP+0
        CFI (cfiCond255) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond256 Using cfiCommon0
        CFI (cfiCond256) NoFunction
        CFI (cfiCond256) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_57
        CFI (cfiCond256) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond256) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond256) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond256) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond256) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond256) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond256) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond256) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond256) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond256) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond256) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond256) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond256) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond256) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond256) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond256) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond256) CFA_SP SP+0
        CFI (cfiCond256) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond257 Using cfiCommon0
        CFI (cfiCond257) NoFunction
        CFI (cfiCond257) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_57
        CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond257) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond257) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond257) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond257) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond257) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond257) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond257) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond257) CFA_SP SP+0
        CFI (cfiCond257) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker258 Using cfiCommon1
        CFI (cfiPicker258) NoFunction
        CFI (cfiPicker258) Picker
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV     R2,?V0 + 0
        LJMP    ?Subroutine40 & 0xFFFF
        CFI EndBlock cfiCond254
        CFI EndBlock cfiCond255
        CFI EndBlock cfiCond256
        CFI EndBlock cfiCond257
        CFI EndBlock cfiPicker258

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond259 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond260 Using cfiCommon0
        CFI (cfiCond260) NoFunction
        CFI (cfiCond260) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond260) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond260) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond260) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond260) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond260) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond260) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond260) CFA_SP SP+0
        CFI (cfiCond260) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker261 Using cfiCommon1
        CFI (cfiPicker261) NoFunction
        CFI (cfiPicker261) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV     R0,A
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond259
        CFI EndBlock cfiCond260
        CFI EndBlock cfiPicker261

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond262 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond263 Using cfiCommon0
        CFI (cfiCond263) NoFunction
        CFI (cfiCond263) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond263) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond263) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond263) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond263) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond263) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond263) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond263) CFA_SP SP+0
        CFI (cfiCond263) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker264 Using cfiCommon1
        CFI (cfiPicker264) NoFunction
        CFI (cfiPicker264) Picker
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV     R0,A
        MOV     A,#0xa
        RET
        CFI EndBlock cfiCond262
        CFI EndBlock cfiCond263
        CFI EndBlock cfiPicker264

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond265 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond266 Using cfiCommon0
        CFI (cfiCond266) NoFunction
        CFI (cfiCond266) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_22
        CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond266) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond266) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond266) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond266) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond266) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond266) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond266) CFA_SP SP+0
        CFI (cfiCond266) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond267 Using cfiCommon0
        CFI (cfiCond267) NoFunction
        CFI (cfiCond267) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_19
        CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond267) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond267) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond267) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond267) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond267) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond267) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond267) CFA_SP SP+0
        CFI (cfiCond267) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond268 Using cfiCommon0
        CFI (cfiCond268) NoFunction
        CFI (cfiCond268) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_20
        CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond268) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond268) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond268) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond268) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond268) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond268) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond268) CFA_SP SP+0
        CFI (cfiCond268) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond269 Using cfiCommon0
        CFI (cfiCond269) NoFunction
        CFI (cfiCond269) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_11
        CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond269) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond269) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond269) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond269) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond269) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond269) CFA_SP SP+0
        CFI (cfiCond269) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond270 Using cfiCommon0
        CFI (cfiCond270) NoFunction
        CFI (cfiCond270) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_12
        CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond270) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond270) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond270) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond270) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond270) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond270) CFA_SP SP+0
        CFI (cfiCond270) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker271 Using cfiCommon1
        CFI (cfiPicker271) NoFunction
        CFI (cfiPicker271) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        RET
        CFI EndBlock cfiCond265
        CFI EndBlock cfiCond266
        CFI EndBlock cfiCond267
        CFI EndBlock cfiCond268
        CFI EndBlock cfiCond269
        CFI EndBlock cfiCond270
        CFI EndBlock cfiPicker271

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond272 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond273 Using cfiCommon0
        CFI (cfiCond273) NoFunction
        CFI (cfiCond273) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond273) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond273) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond273) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond273) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond273) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond273) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond273) CFA_SP SP+0
        CFI (cfiCond273) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker274 Using cfiCommon1
        CFI (cfiPicker274) NoFunction
        CFI (cfiPicker274) Picker
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,R6
        ADD     A,#0x3
        INC     R6
        INC     R6
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        MOV     A,#0x12
        RET
        CFI EndBlock cfiCond272
        CFI EndBlock cfiCond273
        CFI EndBlock cfiPicker274

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond275 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond276 Using cfiCommon0
        CFI (cfiCond276) NoFunction
        CFI (cfiCond276) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond276) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond276) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond276) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond276) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond276) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond276) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond276) CFA_SP SP+0
        CFI (cfiCond276) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker277 Using cfiCommon1
        CFI (cfiPicker277) NoFunction
        CFI (cfiPicker277) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V0 + 2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     A,?V0 + 2
        ADD     A,#0x8
        MOV     R6,A
        MOV     A,?V0 + 3
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     ?V0 + 1,A
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     ?V0 + 6,A
        MOV     A,R1
        MOV     ?V0 + 7,A
        MOV     A,R6
        ADD     A,#0x2
        INC     R6
        INC     R6
        MOV     A,R7
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     R2,A
        MOV     A,#0x9
        RET
        CFI EndBlock cfiCond275
        CFI EndBlock cfiCond276
        CFI EndBlock cfiPicker277

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond278 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond279 Using cfiCommon0
        CFI (cfiCond279) NoFunction
        CFI (cfiCond279) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_12
        CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond279) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond279) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond279) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond279) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond279) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond279) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond279) CFA_SP SP+0
        CFI (cfiCond279) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond280 Using cfiCommon0
        CFI (cfiCond280) NoFunction
        CFI (cfiCond280) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_11
        CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond280) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond280) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond280) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond280) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond280) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond280) CFA_SP SP+0
        CFI (cfiCond280) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond281 Using cfiCommon0
        CFI (cfiCond281) NoFunction
        CFI (cfiCond281) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_12
        CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond281) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond281) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond281) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond281) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond281) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond281) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond281) CFA_SP SP+0
        CFI (cfiCond281) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker282 Using cfiCommon1
        CFI (cfiPicker282) NoFunction
        CFI (cfiPicker282) Picker
        ADDC    A,#0x0
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond278
        CFI EndBlock cfiCond279
        CFI EndBlock cfiCond280
        CFI EndBlock cfiCond281
        CFI EndBlock cfiPicker282
// 1009 
// 1010 #if defined (MT_SYS_KEY_MANAGEMENT)
// 1011 /***************************************************************************************************
// 1012  * @fn      MT_ZdoSetLinkKey
// 1013  *
// 1014  * @brief   Set an application or trust center link key.
// 1015  *
// 1016  * @param   pBuf  - MT message data
// 1017  *
// 1018  * @return  void
// 1019  ***************************************************************************************************/
// 1020 void MT_ZdoSetLinkKey(uint8 *pBuf)
// 1021 {
// 1022   uint8 cmdId;
// 1023   uint8 retValue;
// 1024   uint8 *pExtAddr;
// 1025   uint8 *pKey;
// 1026   uint16 shortAddr;
// 1027   
// 1028   /* parse header */
// 1029   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1030   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1031 
// 1032   /* ShortAddr */
// 1033   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1034   pBuf += 2;
// 1035   
// 1036   /* Extended Addr */
// 1037   pExtAddr = pBuf;
// 1038   pBuf += Z_EXTADDR_LEN;
// 1039   
// 1040   /* Key data */
// 1041   pKey = pBuf;
// 1042 
// 1043   retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
// 1044 
// 1045   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1046 }
// 1047 
// 1048 /***************************************************************************************************
// 1049  * @fn      MT_ZdoRemoveLinkKey
// 1050  *
// 1051  * @brief   Remove an application or trust center link key.
// 1052  *
// 1053  * @param   pBuf  - MT message data
// 1054  *
// 1055  * @return  void
// 1056  ***************************************************************************************************/
// 1057 void MT_ZdoRemoveLinkKey(uint8 *pBuf)
// 1058 {
// 1059   uint8 cmdId;
// 1060   uint8 retValue;
// 1061   uint8 *pExtAddr;
// 1062     
// 1063   /* parse header */
// 1064   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1065   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1066   
// 1067   /* ShortAddr */
// 1068   pExtAddr = pBuf;
// 1069 
// 1070   retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
// 1071 
// 1072   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1073 }
// 1074 
// 1075 /***************************************************************************************************
// 1076  * @fn      MT_ZdoGetLinkKey
// 1077  *
// 1078  * @brief   Get the application link key.
// 1079  *
// 1080  * @param   pBuf  - MT message data
// 1081  *
// 1082  * @return  void
// 1083  ***************************************************************************************************/
// 1084 void MT_ZdoGetLinkKey(uint8 *pBuf)
// 1085 {
// 1086   uint8 cmdId;
// 1087   uint8 retValue;
// 1088   uint8 *pExtAddr;
// 1089   uint8 *retBuf = NULL;
// 1090   uint8 len;
// 1091   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 1092   uint16 apsLinkKeyNvId;
// 1093   
// 1094   // parse header
// 1095   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1096   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1097   
// 1098   // Extended Address
// 1099   pExtAddr = pBuf;
// 1100 
// 1101   // Fetch the key NV ID
// 1102   retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
// 1103 
// 1104   if (retValue == ZSuccess)
// 1105   {
// 1106     if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
// 1107     {
// 1108       // retrieve key from NV
// 1109       if (osal_nv_read( apsLinkKeyNvId, 0, 
// 1110                        sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
// 1111       {
// 1112         retValue = ZNwkUnknownDevice;
// 1113       }
// 1114     }
// 1115     else
// 1116     {
// 1117       retValue = ZNwkUnknownDevice;
// 1118     }
// 1119   }
// 1120   
// 1121   // Construct the response message
// 1122   len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
// 1123   if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
// 1124   {  
// 1125     if (retValue == ZSuccess)
// 1126     {
// 1127       // Extended Address
// 1128       osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
// 1129       
// 1130       // Key data
// 1131       osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );      
// 1132     }
// 1133     else
// 1134     {
// 1135       // Failed case - set the rest fields to all FF
// 1136       osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );   
// 1137     }    
// 1138     
// 1139     retBuf[0] = retValue;  // Status
// 1140     
// 1141     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
// 1142 
// 1143     // clear retBuf because it contains key data and free allocated memory
// 1144     osal_memset(retBuf, 0x00, len);   
// 1145     
// 1146     osal_mem_free(retBuf);
// 1147   }
// 1148   
// 1149   // clear copy of key in RAM
// 1150   if (pApsLinkKey != NULL)
// 1151   {
// 1152     osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
// 1153     
// 1154     osal_mem_free(pApsLinkKey);
// 1155   }
// 1156 
// 1157   return;
// 1158 }
// 1159 #endif // MT_SYS_KEY_MANAGEMENT
// 1160 
// 1161 #if defined (MT_ZDO_MGMT)
// 1162 /***************************************************************************************************
// 1163  * @fn      MT_ZdoMgmtNwkDiscRequest
// 1164  *
// 1165  * @brief   Handle a Mgmt Nwk Discovery request.
// 1166  *
// 1167  * @param   pBuf  - MT message data
// 1168  *
// 1169  * @return  void
// 1170  ***************************************************************************************************/
// 1171 void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
// 1172 {
// 1173   uint8 cmdId;
// 1174   uint8 retValue;
// 1175   zAddrType_t destAddr;
// 1176   uint32 scanChannels;
// 1177   uint8 scanDuration, startIndex;
// 1178 
// 1179   /* parse header */
// 1180   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1181   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1182 
// 1183   /* Dev address */
// 1184   destAddr.addrMode = Addr16Bit;
// 1185   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1186   pBuf += 2;
// 1187 
// 1188   /* Scan Channels */
// 1189   scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
// 1190   pBuf += 4;
// 1191 
// 1192   /* Scan Duration */
// 1193   scanDuration = *pBuf++;
// 1194 
// 1195   /* Start Index */
// 1196   startIndex = *pBuf;
// 1197 
// 1198   retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
// 1199 
// 1200   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1201 }
// 1202 
// 1203 /***************************************************************************************************
// 1204  * @fn      MT_ZdoMgmtLqiRequest
// 1205  *
// 1206  * @brief   Handle a Mgmt Lqi request.
// 1207  *
// 1208  * @param   pBuf  - MT message data
// 1209  *
// 1210  * @return  void
// 1211  ***************************************************************************************************/
// 1212 void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
// 1213 {
// 1214   uint8 cmdId;
// 1215   uint8 retValue;
// 1216   zAddrType_t destAddr;
// 1217   uint8 startIndex;
// 1218 
// 1219   /* parse header */
// 1220   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1221   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1222 
// 1223   /* Dev address */
// 1224   destAddr.addrMode = Addr16Bit;
// 1225   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1226   pBuf += 2;
// 1227 
// 1228   /* Start Index */
// 1229   startIndex = *pBuf;
// 1230 
// 1231   retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
// 1232 
// 1233   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1234 }
// 1235 
// 1236 /***************************************************************************************************
// 1237  * @fn      MT_ZdoMgmtRtgRequest
// 1238  *
// 1239  * @brief   Handle a Mgmt Rtg request.
// 1240  *
// 1241  * @param   pBuf  - MT message data
// 1242  *
// 1243  * @return  void
// 1244  ***************************************************************************************************/
// 1245 void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
// 1246 {
// 1247   uint8 cmdId;
// 1248   uint8 retValue;
// 1249   zAddrType_t destAddr;
// 1250   uint8 startIndex;
// 1251 
// 1252   /* parse header */
// 1253   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1254   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1255 
// 1256   /* Dev Address */
// 1257   destAddr.addrMode = Addr16Bit;
// 1258   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
// 1259   pBuf += 2;
// 1260 
// 1261   /* Start Index */
// 1262   startIndex = *pBuf;
// 1263 
// 1264   retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
// 1265 
// 1266   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1267 }
// 1268 
// 1269 /***************************************************************************************************
// 1270  * @fn      MT_ZdoMgmtBindRequest
// 1271  *
// 1272  * @brief   Handle a Mgmt Bind request.
// 1273  *
// 1274  * @param   pBuf  - MT message data
// 1275  *
// 1276  * @return  void
// 1277  ***************************************************************************************************/
// 1278 void MT_ZdoMgmtBindRequest(uint8 *pBuf)
// 1279 {
// 1280   uint8 cmdId;
// 1281   uint8 retValue;
// 1282   zAddrType_t destAddr;
// 1283   uint8 startIndex;
// 1284 
// 1285   /* parse header */
// 1286   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1287   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1288 
// 1289   /* Dev Address */
// 1290   destAddr.addrMode = Addr16Bit;
// 1291   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1292   pBuf += 2;
// 1293 
// 1294   /* Start Index */
// 1295   startIndex = *pBuf;
// 1296 
// 1297   retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
// 1298 
// 1299   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1300 }
// 1301 
// 1302 /***************************************************************************************************
// 1303  * @fn      MT_ZdoMgmtLeaveRequest
// 1304  *
// 1305  * @brief   Handle a Mgmt Leave request.
// 1306  *
// 1307  * @param   pBuf  - MT message data
// 1308  *
// 1309  * @return  void
// 1310  ***************************************************************************************************/
// 1311 void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
// 1312 {
// 1313   uint8 cmdId;
// 1314   uint8 retValue;
// 1315   zAddrType_t destAddr;
// 1316   uint8 *pIEEEAddr;
// 1317   uint8 removeChildren, rejoin;
// 1318 
// 1319   /* parse header */
// 1320   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1321   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1322 
// 1323   /* Destination Address */
// 1324   destAddr.addrMode = Addr16Bit;
// 1325   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1326   pBuf += 2;
// 1327 
// 1328   /* IEEE address */
// 1329   pIEEEAddr = pBuf;
// 1330   pBuf += Z_EXTADDR_LEN;
// 1331 
// 1332   /* Remove Children */
// 1333   removeChildren = *pBuf++;
// 1334 
// 1335   /* Rejoin */
// 1336   rejoin = *pBuf;
// 1337 
// 1338   retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
// 1339 
// 1340   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1341 }
// 1342 
// 1343 
// 1344 /***************************************************************************************************
// 1345  * @fn      MT_ZdoMgmtDirectJoinRequest
// 1346  *
// 1347  * @brief   Handle a Mgmt Direct Join request.
// 1348  *
// 1349  * @param   pBuf  - MT message data
// 1350  *
// 1351  * @return  void
// 1352  ***************************************************************************************************/
// 1353 void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
// 1354 {
// 1355   uint8 cmdId;
// 1356   uint8 retValue;
// 1357   zAddrType_t destAddr;
// 1358   uint8 *deviceAddr;
// 1359   uint8 capInfo;
// 1360 
// 1361   /* parse header */
// 1362   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1363   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1364 
// 1365   /* Destination Address */
// 1366   destAddr.addrMode = Addr16Bit;
// 1367   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1368   pBuf += 2;
// 1369 
// 1370   /* Device Address */
// 1371   deviceAddr = pBuf;
// 1372   pBuf += Z_EXTADDR_LEN;
// 1373 
// 1374   /* Capability information */
// 1375   capInfo = *pBuf;
// 1376 
// 1377   retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
// 1378 
// 1379   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1380 }
// 1381 
// 1382 /***************************************************************************************************
// 1383  * @fn      MT_ZdoMgmtPermitJoinRequest
// 1384  *
// 1385  * @brief   Handle a Mgmt Permit Join request.
// 1386  *
// 1387  * @param   pBuf  - MT message data
// 1388  *
// 1389  * @return  void
// 1390  ***************************************************************************************************/
// 1391 void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
// 1392 {
// 1393   uint8 cmdId;
// 1394   uint8 retValue;
// 1395   zAddrType_t destAddr;
// 1396   uint8 duration, tcSignificance;
// 1397 
// 1398   /* parse header */
// 1399   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1400   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1401 
// 1402   /* Destination Address */
// 1403   destAddr.addrMode = Addr16Bit;
// 1404   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1405   pBuf += 2;
// 1406 
// 1407   /* Duration */
// 1408   duration = *pBuf++;
// 1409 
// 1410   /* Trust center significance */
// 1411   tcSignificance = *pBuf;
// 1412 
// 1413   retValue = (byte)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
// 1414 
// 1415   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1416 }
// 1417 
// 1418 /***************************************************************************************************
// 1419  * @fn      MT_ZdoMgmtNwkUpdateRequest
// 1420  *
// 1421  * @brief   Handle a Mgmt Nwk Update request.
// 1422  *
// 1423  * @param   pBuf  - MT message data
// 1424  *
// 1425  * @return  void
// 1426  ***************************************************************************************************/
// 1427 void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
// 1428 {
// 1429   uint8 cmdId;
// 1430   uint8 retValue;
// 1431   zAddrType_t destAddr;
// 1432   uint32 channelMask;
// 1433   uint8 scanDuration, scanCount;
// 1434   uint16 nwkManagerAddr;
// 1435 
// 1436     /* parse header */
// 1437   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1438   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1439 
// 1440   /* Destination address */
// 1441   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1442   pBuf += 2;
// 1443 
// 1444   /* Destination address mode */
// 1445   destAddr.addrMode = *pBuf++;
// 1446 
// 1447   channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
// 1448   pBuf += 4;
// 1449 
// 1450   /* Scan duration */
// 1451   scanDuration = *pBuf++;
// 1452 
// 1453   /* Scan count */
// 1454   scanCount = *pBuf++;
// 1455 
// 1456   /* NWK manager address */
// 1457   nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1458 
// 1459   /* Send the Management Network Update request */
// 1460   retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1461                                           scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1462 
// 1463   /*
// 1464     Since we don't recevied our own broadcast messages, we should
// 1465     send a unicast copy of the message to ourself.
// 1466   */
// 1467   if ( destAddr.addrMode == AddrBroadcast )
// 1468   {
// 1469     destAddr.addrMode = Addr16Bit;
// 1470     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
// 1471     retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1472                                              scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1473   }
// 1474 
// 1475   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1476 }
// 1477 #endif /* MT_ZDO_MGMT */
// 1478 
// 1479 /***************************************************************************************************
// 1480  * @fn      MT_ZdoStartupFromApp
// 1481  *
// 1482  * @brief   Handle a Startup from App request.
// 1483  *
// 1484  * @param   pBuf  - MT message data
// 1485  *
// 1486  * @return  void
// 1487  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1488 void MT_ZdoStartupFromApp(uint8 *pBuf)
MT_ZdoStartupFromApp:
        CFI Block cfiBlock283 Using cfiCommon0
        CFI Function MT_ZdoStartupFromApp
// 1489 {
        FUNCALL MT_ZdoStartupFromApp, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoStartupFromApp, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1490   uint8 cmd0, cmd1, retValue;
// 1491 
// 1492   /* parse header */
// 1493   cmd0 = pBuf[MT_RPC_POS_CMD0];
        LCALL   ?Subroutine28 & 0xFFFF
// 1494   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 1495   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1496 
// 1497   retValue = ZDOInitDevice(100);
??CrossCallReturnLabel_42:
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??ZDOInitDevice?relay
        LCALL   ?Subroutine23 & 0xFFFF
// 1498 
// 1499   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
??CrossCallReturnLabel_35:
        JNZ     ??MT_ZdoStartupFromApp_0
// 1500   {
// 1501     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R7
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
        CFI EndBlock cfiBlock283
// 1502   }
// 1503 }
??MT_ZdoStartupFromApp_0:
        REQUIRE ?Subroutine44
        ; // Fall through to label ?Subroutine44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
        CFI Block cfiBlock284 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x1
        LJMP    ??Subroutine47_0 & 0xFFFF
        CFI EndBlock cfiBlock284
// 1504 
// 1505 /*************************************************************************************************
// 1506  * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
// 1507  *
// 1508  * @brief   MT proxy for ZDO_RegisterForZDOMsg.
// 1509  *
// 1510  * @param   pBuf  - MT message data
// 1511  *
// 1512  * @return  void
// 1513  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1514 void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
MT_ZdoRegisterForZDOMsg:
        CFI Block cfiBlock285 Using cfiCommon0
        CFI Function MT_ZdoRegisterForZDOMsg
// 1515 {
        FUNCALL MT_ZdoRegisterForZDOMsg, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoRegisterForZDOMsg, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1516   uint8 cmd0, cmd1, tmp;
// 1517   uint16 cId;
// 1518 
// 1519   /* parse header */
// 1520   cmd0 = pBuf[MT_RPC_POS_CMD0];
        LCALL   ?Subroutine3 & 0xFFFF
// 1521   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 1522   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1523 
// 1524   cId = BUILD_UINT16(pBuf[0], pBuf[1]);
// 1525   tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
??CrossCallReturnLabel_9:
        LCALL   ??ZDO_RegisterForZDOMsg?relay
        LCALL   ?Subroutine23 & 0xFFFF
// 1526 
// 1527   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
??CrossCallReturnLabel_36:
        JNZ     ??MT_ZdoRegisterForZDOMsg_0
// 1528   {
// 1529     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R7
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 1530   }
// 1531 }
??MT_ZdoRegisterForZDOMsg_0:
        SJMP    ?Subroutine44
        CFI EndBlock cfiBlock285

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond286 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond287 Using cfiCommon0
        CFI (cfiCond287) NoFunction
        CFI (cfiCond287) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond287) CFA_SP SP+0
        CFI (cfiCond287) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond288 Using cfiCommon0
        CFI (cfiCond288) NoFunction
        CFI (cfiCond288) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond288) CFA_SP SP+0
        CFI (cfiCond288) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker289 Using cfiCommon1
        CFI (cfiPicker289) NoFunction
        CFI (cfiPicker289) Picker
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#-0x20
        ANL     A,R6
        XRL     A,#0x20
        RET
        CFI EndBlock cfiCond286
        CFI EndBlock cfiCond287
        CFI EndBlock cfiCond288
        CFI EndBlock cfiPicker289
// 1532 
// 1533 /*************************************************************************************************
// 1534  * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
// 1535  *
// 1536  * @brief   MT proxy for ZDO_RemoveRegisteredCB.
// 1537  *
// 1538  * @param   pBuf  - MT message data
// 1539  *
// 1540  * @return  void
// 1541  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1542 void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
MT_ZdoRemoveRegisteredCB:
        CFI Block cfiBlock290 Using cfiCommon0
        CFI Function MT_ZdoRemoveRegisteredCB
// 1543 {
        FUNCALL MT_ZdoRemoveRegisteredCB, ZDO_RemoveRegisteredCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoRemoveRegisteredCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1544   uint8 cmd0, cmd1, tmp;
// 1545   uint16 cId;
// 1546 
// 1547   /* parse header */
// 1548   cmd0 = pBuf[MT_RPC_POS_CMD0];
        LCALL   ?Subroutine3 & 0xFFFF
// 1549   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 1550   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1551 
// 1552   cId = BUILD_UINT16(pBuf[0], pBuf[1]);
// 1553   tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
??CrossCallReturnLabel_10:
        LCALL   ??ZDO_RemoveRegisteredCB?relay
        LCALL   ?Subroutine23 & 0xFFFF
// 1554 
// 1555   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
??CrossCallReturnLabel_37:
        JNZ     ??MT_ZdoRemoveRegisteredCB_0
// 1556   {
// 1557     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R7
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 1558   }
// 1559 }
??MT_ZdoRemoveRegisteredCB_0:
        SJMP    ?Subroutine44
        CFI EndBlock cfiBlock290

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond291 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond292 Using cfiCommon0
        CFI (cfiCond292) NoFunction
        CFI (cfiCond292) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond292) CFA_SP SP+0
        CFI (cfiCond292) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker293 Using cfiCommon1
        CFI (cfiPicker293) NoFunction
        CFI (cfiPicker293) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     A,R2
        ADD     A,#0x3
        INC     R2
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPTR,#MT_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond291
        CFI EndBlock cfiCond292
        CFI EndBlock cfiPicker293

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond294 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond295 Using cfiCommon0
        CFI (cfiCond295) NoFunction
        CFI (cfiCond295) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_9
        CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond295) CFA_SP SP+0
        CFI (cfiCond295) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond296 Using cfiCommon0
        CFI (cfiCond296) NoFunction
        CFI (cfiCond296) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_10
        CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond296) CFA_SP SP+0
        CFI (cfiCond296) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker297 Using cfiCommon1
        CFI (cfiPicker297) NoFunction
        CFI (cfiPicker297) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        RET
        CFI EndBlock cfiCond294
        CFI EndBlock cfiCond295
        CFI EndBlock cfiCond296
        CFI EndBlock cfiPicker297
// 1560 
// 1561 #endif /* MT_ZDO_FUNC */
// 1562 
// 1563 
// 1564 /***************************************************************************************************
// 1565  * Callback handling function
// 1566  ***************************************************************************************************/
// 1567 
// 1568 #if defined (MT_ZDO_CB_FUNC)
// 1569 
// 1570 /***************************************************************************************************
// 1571  * @fn      MT_ZdoStateChangeCB
// 1572  *
// 1573  * @brief   Handle state change OSAL message from ZDO.
// 1574  *
// 1575  * @param   pMsg  - Message data
// 1576  *
// 1577  * @return  void
// 1578  */
// 1579 void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
// 1580 {
// 1581   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1582                                        MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
// 1583 }
// 1584 
// 1585 /***************************************************************************************************
// 1586  * @fn     MT_ZdoDirectCB()
// 1587  *
// 1588  * @brief  ZDO direct callback.  Build an MT message directly from the
// 1589  *         over-the-air ZDO message.
// 1590  *
// 1591  * @param  pData - Incoming AF frame.
// 1592  *
// 1593  * @return  none
// 1594  ***************************************************************************************************/
// 1595 void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData,  zdoIncomingMsg_t *inMsg )
// 1596 {
// 1597   uint8 len, *pBuf;
// 1598   uint16 origClusterId;
// 1599   
// 1600   // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId 
// 1601   origClusterId = pData->clusterId;
// 1602   
// 1603   // Is the message an exception or not a response?
// 1604   if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
// 1605   {
// 1606     return;  // Handled somewhere else or not needed.
// 1607   }
// 1608 
// 1609   /* ZDO data starts after one-byte sequence number and the msg buffer length includes
// 1610    * two bytes for srcAddr.
// 1611    */
// 1612   len = pData->cmd.DataLength - 1 + sizeof(uint16);
// 1613 
// 1614   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 1615   {
// 1616     uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
// 1617 
// 1618     pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
// 1619     pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
// 1620 
// 1621     /* copy ZDO data, skipping one-byte sequence number */
// 1622     osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
// 1623 
// 1624     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
// 1625     osal_mem_free(pBuf);
// 1626   }
// 1627 }
// 1628 
// 1629 /***************************************************************************************************
// 1630  * @fn     MT_ZdoHandleExceptions()
// 1631  *
// 1632  * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
// 1633  *
// 1634  * @param  pData - Incoming AF frame.
// 1635  *
// 1636  * @return  TRUE if handled by this function, FALSE if not
// 1637  ***************************************************************************************************/
// 1638 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 1639 {
// 1640   uint8 ret = TRUE;
// 1641   ZDO_NwkIEEEAddrResp_t *nwkRsp = NULL;
// 1642   ZDO_DeviceAnnce_t devAnnce;
// 1643   uint8 doDefault = FALSE;
// 1644   
// 1645   switch ( inMsg->clusterID )
// 1646   {
// 1647     case NWK_addr_rsp:
// 1648     case IEEE_addr_rsp:
// 1649       nwkRsp = ZDO_ParseAddrRsp( inMsg );
// 1650       MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
// 1651       if ( nwkRsp )
// 1652         osal_mem_free( nwkRsp );
// 1653       break;
// 1654       
// 1655     case Device_annce:
// 1656       ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
// 1657       MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
// 1658       break;
// 1659       
// 1660     case Simple_Desc_rsp:
// 1661       if ( pData->cmd.DataLength > 5 )
// 1662         ret = FALSE;
// 1663       else
// 1664         doDefault = TRUE;        
// 1665       break;  
// 1666       
// 1667     default:
// 1668       ret = FALSE;
// 1669       break;
// 1670   }
// 1671   
// 1672   if ( doDefault )
// 1673   {
// 1674     ret = FALSE;
// 1675     pData->clusterId = MtZdoDef_rsp;
// 1676     pData->cmd.DataLength = 2;
// 1677   }
// 1678 
// 1679   return ( ret );
// 1680 }
// 1681 
// 1682 /***************************************************************************************************
// 1683  * @fn      MT_ZdoAddrRspCB
// 1684  *
// 1685  * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
// 1686  *
// 1687  * @param   pMsg  - Message data
// 1688  *
// 1689  * @return  void
// 1690  */
// 1691 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
// 1692 {
// 1693   uint8   listLen, len, *pBuf;
// 1694 
// 1695   /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
// 1696 
// 1697   /* get length, sanity check length */
// 1698   listLen = pMsg->numAssocDevs;
// 1699   
// 1700   /* calculate msg length */
// 1701   len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
// 1702 
// 1703   /* get buffer */
// 1704   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 1705   {
// 1706     uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
// 1707     uint8 *pTmp = pBuf;
// 1708 
// 1709     *pTmp++ = pMsg->status;
// 1710 
// 1711     osal_cpyExtAddr(pTmp, pMsg->extAddr);
// 1712     pTmp += Z_EXTADDR_LEN;
// 1713 
// 1714     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
// 1715     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
// 1716 
// 1717     *pTmp++ = pMsg->startIndex;
// 1718     *pTmp++ = listLen;
// 1719 
// 1720     MT_Word2Buf(pTmp, pMsg->devList, listLen);
// 1721 
// 1722     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
// 1723     osal_mem_free(pBuf);
// 1724   }
// 1725 }
// 1726 
// 1727 /***************************************************************************************************
// 1728  * @fn      MT_ZdoEndDevAnnceCB
// 1729  *
// 1730  * @brief   Handle end device announce OSAL message from ZDO.
// 1731  *
// 1732  * @param   pMsg  - Message data
// 1733  *
// 1734  * @return  void
// 1735  */
// 1736 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
// 1737 {
// 1738   uint8 *pBuf;
// 1739 
// 1740   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
// 1741   {
// 1742     uint8 *pTmp = pBuf;
// 1743 
// 1744     *pTmp++ = LO_UINT16(srcAddr);
// 1745     *pTmp++ = HI_UINT16(srcAddr);
// 1746 
// 1747     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
// 1748     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
// 1749 
// 1750     osal_cpyExtAddr(pTmp, pMsg->extAddr);
// 1751     pTmp += Z_EXTADDR_LEN;
// 1752 
// 1753     *pTmp = pMsg->capabilities;
// 1754 
// 1755     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), 
// 1756                                          MT_ZDO_END_DEVICE_ANNCE_IND, 
// 1757                                          MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
// 1758     osal_mem_free(pBuf);
// 1759   }
// 1760 }
// 1761 
// 1762 /***************************************************************************************************
// 1763  * @fn      MT_ZdoSrcRtgCB
// 1764  *
// 1765  * @brief   Handle Src Route from ZDO.
// 1766  *
// 1767  * @param   pStr  - pointer to the data structure for the src route
// 1768  *
// 1769  * @return  void* 
// 1770  */
// 1771 void* MT_ZdoSrcRtgCB( void *pStr )
// 1772 {
// 1773   uint8 len, *pBuf;
// 1774   zdoSrcRtg_t *pSrcRtg = pStr;
// 1775   
// 1776   // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
// 1777   len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
// 1778 
// 1779   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 1780   {
// 1781     uint8 idx, *pTmp = pBuf;
// 1782     uint16 *pRelay;
// 1783 
// 1784     // Packet payload
// 1785     *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
// 1786     *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
// 1787     *pTmp++ = pSrcRtg->relayCnt;
// 1788     
// 1789     // Relay List
// 1790     if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
// 1791     {
// 1792       for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
// 1793       {
// 1794         *pTmp++ = LO_UINT16(*pRelay);
// 1795         *pTmp++ = HI_UINT16(*pRelay);
// 1796         pRelay++;
// 1797       }
// 1798     }
// 1799     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1800                                          MT_ZDO_SRC_RTG_IND, len, pBuf);
// 1801     osal_mem_free(pBuf);
// 1802   }
// 1803   
// 1804   return NULL;
// 1805 }
// 1806 #endif // MT_ZDO_CB_FUNC
// 1807 
// 1808 /***************************************************************************************************
// 1809  * @fn      MT_ZdoSendMsgCB
// 1810  *
// 1811  * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
// 1812  *
// 1813  * @param   pMsg  - Message data
// 1814  *
// 1815  * @return  void
// 1816  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1817 void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
MT_ZdoSendMsgCB:
        CFI Block cfiBlock298 Using cfiCommon0
        CFI Function MT_ZdoSendMsgCB
// 1818 {
        FUNCALL MT_ZdoSendMsgCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 1819   uint8 len = pMsg->asduLen + 9;
        MOV     A,R2
        ADD     A,#0x10
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x9
        MOV     ?V0 + 4,A
// 1820   uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     R6,?V0 + 6
        MOV     R7,?V0 + 7
// 1821 
// 1822   if (pBuf != NULL)
        MOV     A,R6
        JNZ     ??MT_ZdoSendMsgCB_0
        MOV     A,R7
??MT_ZdoSendMsgCB_0:
        JZ      ??MT_ZdoSendMsgCB_1
// 1823   {
// 1824     uint8 *pTmp = pBuf;
// 1825 
// 1826     // Assuming exclusive use of network short addresses.
// 1827     *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
        MOV     A,?V0 + 0
        ADD     A,#0x2
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     R2,DPL
        LCALL   ??Subroutine57_0 & 0xFFFF
// 1828     *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
// 1829     *pTmp++ = pMsg->wasBroadcast;
??CrossCallReturnLabel_98:
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ??Subroutine58_0 & 0xFFFF
// 1830     *pTmp++ = LO_UINT16(pMsg->clusterID);
??CrossCallReturnLabel_99:
        ADD     A,#0xc
        LCALL   ?Subroutine2 & 0xFFFF
// 1831     *pTmp++ = HI_UINT16(pMsg->clusterID);
// 1832     *pTmp++ = pMsg->SecurityUse;
??CrossCallReturnLabel_96:
        ADD     A,#0xe
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ??Subroutine58_0 & 0xFFFF
// 1833     *pTmp++ = pMsg->TransSeq;
??CrossCallReturnLabel_100:
        ADD     A,#0xf
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ??Subroutine58_0 & 0xFFFF
// 1834     // Skipping asduLen since it can be deduced from the RPC packet length.
// 1835     *pTmp++ = LO_UINT16(pMsg->macDestAddr);
??CrossCallReturnLabel_101:
        ADD     A,#0x11
        LCALL   ?Subroutine2 & 0xFFFF
// 1836     *pTmp++ = HI_UINT16(pMsg->macDestAddr);
// 1837     (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
??CrossCallReturnLabel_97:
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 8,?V0 + 0
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
// 1838 
// 1839     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1840                                          MT_ZDO_MSG_CB_INCOMING, len, pBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R3,?V0 + 4
        MOV     R2,#-0x1
        MOV     R1,#0x45
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 1841     
// 1842     osal_mem_free(pBuf);
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
// 1843   }
// 1844 }
??MT_ZdoSendMsgCB_1:
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock298

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond299 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_96
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond300 Using cfiCommon0
        CFI (cfiCond300) NoFunction
        CFI (cfiCond300) Conditional ??CrossCallReturnLabel_97
        CFI (cfiCond300) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond300) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond300) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond300) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond300) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond300) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond300) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond300) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond300) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond300) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond300) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond300) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond300) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond300) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond300) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond300) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond300) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond300) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond300) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond300) CFA_SP SP+0
        CFI (cfiCond300) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker301 Using cfiCommon1
        CFI (cfiPicker301) NoFunction
        CFI (cfiPicker301) Picker
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_41:
        INC     R2
        CFI EndBlock cfiCond299
        CFI EndBlock cfiCond300
        CFI EndBlock cfiPicker301
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine57_0:
        CFI Block cfiCond302 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_98
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond303 Using cfiCommon0
        CFI (cfiCond303) NoFunction
        CFI (cfiCond303) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond303) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond303) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond303) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond303) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond303) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond303) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond303) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond303) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond303) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond303) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond303) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond303) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond303) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond303) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond303) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond303) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond303) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond303) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond303) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond303) CFA_SP SP+0
        CFI (cfiCond303) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond304 Using cfiCommon0
        CFI (cfiCond304) NoFunction
        CFI (cfiCond304) Conditional ??CrossCallReturnLabel_97
        CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond304) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond304) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond304) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond304) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond304) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond304) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond304) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond304) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond304) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond304) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond304) CFA_SP SP+0
        CFI (cfiCond304) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker305 Using cfiCommon1
        CFI (cfiPicker305) NoFunction
        CFI (cfiPicker305) Picker
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        CFI EndBlock cfiCond302
        CFI EndBlock cfiCond303
        CFI EndBlock cfiCond304
        CFI EndBlock cfiPicker305
        REQUIRE ??Subroutine58_0
        ; // Fall through to label ??Subroutine58_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine58_0:
        CFI Block cfiCond306 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_99
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond307 Using cfiCommon0
        CFI (cfiCond307) NoFunction
        CFI (cfiCond307) Conditional ??CrossCallReturnLabel_100
        CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond307) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond307) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond307) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond307) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond307) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond307) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond307) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond307) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond307) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond307) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond307) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond307) CFA_SP SP+0
        CFI (cfiCond307) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond308 Using cfiCommon0
        CFI (cfiCond308) NoFunction
        CFI (cfiCond308) Conditional ??CrossCallReturnLabel_101
        CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond308) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond308) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond308) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond308) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond308) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond308) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond308) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond308) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond308) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond308) CFA_SP SP+0
        CFI (cfiCond308) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond309 Using cfiCommon0
        CFI (cfiCond309) NoFunction
        CFI (cfiCond309) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond309) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond309) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond309) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond309) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond309) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond309) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond309) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond309) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond309) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond309) CFA_SP SP+0
        CFI (cfiCond309) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond310 Using cfiCommon0
        CFI (cfiCond310) NoFunction
        CFI (cfiCond310) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond310) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond310) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond310) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond310) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond310) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond310) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond310) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond310) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond310) CFA_SP SP+0
        CFI (cfiCond310) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond311 Using cfiCommon0
        CFI (cfiCond311) NoFunction
        CFI (cfiCond311) Conditional ??CrossCallReturnLabel_97
        CFI (cfiCond311) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond311) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond311) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond311) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond311) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond311) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond311) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond311) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond311) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond311) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond311) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond311) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond311) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond311) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond311) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond311) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond311) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond311) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond311) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond311) CFA_SP SP+0
        CFI (cfiCond311) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker312 Using cfiCommon1
        CFI (cfiPicker312) NoFunction
        CFI (cfiPicker312) Picker
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        INC     R2
        MOV     R3,DPH
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0 + 0
        RET
        CFI EndBlock cfiCond306
        CFI EndBlock cfiCond307
        CFI EndBlock cfiCond308
        CFI EndBlock cfiCond309
        CFI EndBlock cfiCond310
        CFI EndBlock cfiCond311
        CFI EndBlock cfiPicker312

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond313 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond314 Using cfiCommon0
        CFI (cfiCond314) NoFunction
        CFI (cfiCond314) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_96
        CFI (cfiCond314) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond314) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond314) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond314) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond314) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond314) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond314) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond314) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond314) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond314) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond314) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond314) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond314) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond314) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond314) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond314) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond314) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond314) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond314) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond314) CFA_SP SP+0
        CFI (cfiCond314) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond315 Using cfiCommon0
        CFI (cfiCond315) NoFunction
        CFI (cfiCond315) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_97
        CFI (cfiCond315) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond315) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond315) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond315) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond315) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond315) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond315) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond315) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond315) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond315) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond315) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond315) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond315) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond315) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond315) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond315) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond315) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond315) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond315) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond315) CFA_SP SP+0
        CFI (cfiCond315) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker316 Using cfiCommon1
        CFI (cfiPicker316) NoFunction
        CFI (cfiPicker316) Picker
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        RET
        CFI EndBlock cfiCond313
        CFI EndBlock cfiCond314
        CFI EndBlock cfiCond315
        CFI EndBlock cfiPicker316

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoCommandProcessing?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoNWKAddressRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoNWKAddressRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoIEEEAddrRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoIEEEAddrRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoNodeDescRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoNodeDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoPowerDescRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoPowerDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoSimpleDescRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoSimpleDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoActiveEpRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoActiveEpRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoMatchDescRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoMatchDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoComplexDescRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoComplexDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoUserDescRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoUserDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoEndDevAnnce?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoEndDevAnnce

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoUserDescSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoUserDescSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoServiceDiscRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoServiceDiscRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoEndDevBindRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoEndDevBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoBindRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoUnbindRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoUnbindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoStartupFromApp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoStartupFromApp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoRegisterForZDOMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoRegisterForZDOMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoRemoveRegisteredCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoRemoveRegisteredCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoSendMsgCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ZdoSendMsgCB

        END
// 1845 
// 1846 #endif   /*ZDO Command Processing in MT*/
// 1847 /***************************************************************************************************
// 1848 ***************************************************************************************************/
// 
// 2 390 bytes in segment BANKED_CODE
//   126 bytes in segment BANK_RELAYS
//     4 bytes in segment XDATA_Z
// 
// 2 516 bytes of CODE  memory
//     4 bytes of XDATA memory
//
//Errors: none
//Warnings: none
