###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                16/Sep/2011  10:52:59 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k¶¨Ê±¸´Î»¼ì²â\Components\stack\sys\ZGlobals.c      #
#    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"   #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"  #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Documents and           #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Com #
#                          ponents\stack\sys\ZGlobals.c" -D ZTOOL_P1 -D       #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D              #
#                          BUILD_ALL_DEVICES -D xLCD_SUPPORTED=DEBUG -D       #
#                          SOFT_SATRT -D ZDO_COORDINATOR -D NV_INIT -D        #
#                          RTR_NWK -lC "C:\Documents and                      #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\Coordinato #
#                          rEB\List\" -lA "C:\Documents and                   #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\Coordinato #
#                          rEB\List\" --diag_suppress Pe001,Pa010 -o          #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\CoordinatorEB\Obj\" -e                     #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\" -I       #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\SOURCE\" -I "C:\Documents and           #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Z #
#                          MAIN\TI2530DB\" -I "C:\Documents and               #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MT\" -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\INCLUDE\" -I "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I       #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\"  #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"   #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"  #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"   #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"   #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"    #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I     #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDA #
#                          TA\" -I "C:\Documents and                          #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\INCLUDE\" -I "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I            #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\sr #
#                          f04\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"  #
#                          -I D:\IAR\8051\INC\ -I D:\IAR\8051\INC\CLIB\ -Ohz  #
#    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\CoordinatorEB\List\ZGlobals.lst             #
#    Object file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\CoordinatorEB\Obj\ZGlobals.r51              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Components\stack\sys\ZGlobals.c
      1          /**************************************************************************************************
      2            Filename:       ZGlobals.c
      3            Revised:        $Date: 2010-08-18 18:19:45 -0700 (Wed, 18 Aug 2010) $
      4            Revision:       $Revision: 23451 $
      5          
      6            Description:    User definable Z-Stack parameters.
      7          
      8          
      9            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL_Nv.h"
     46          #include "ZDObject.h"
     47          #include "ZGlobals.h"
     48          #include "ZDNwkMgr.h"
     49          #include "OnBoard.h"
     50          #include "ZDSecMgr.h"
     51          
     52          /*********************************************************************
     53           * MACROS
     54           */
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          /*********************************************************************
     61           * TYPEDEFS
     62           */
     63          
     64          typedef struct zgItem
     65          {
     66            uint16 id;
     67            uint16 len;
     68            void *buf;
     69          } zgItem_t;
     70          
     71          /*********************************************************************
     72           * NWK GLOBAL VARIABLES
     73           */
     74          
     75          // Polling values

   \                                 In  segment XDATA_I, align 1, keep-with-next
     76          uint16 zgPollRate = POLL_RATE;
   \                     zgPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     77          uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
   \                     zgQueuedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgQueuedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     78          uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
   \                     zgResponsePollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgResponsePollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     79          uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
   \                     zgRejoinPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgRejoinPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
     80          
     81          // Transmission retries numbers

   \                                 In  segment XDATA_I, align 1, keep-with-next
     82          uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
   \                     zgMaxDataRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxDataRetries>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     83          uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
   \                     zgMaxPollFailureRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxPollFailureRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
     84          
     85          // Default channel list

   \                                 In  segment XDATA_I, align 1, keep-with-next
     86          uint32 zgDefaultChannelList = DEFAULT_CHANLIST;
   \                     zgDefaultChannelList:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultChannelList>`
   \   000004                REQUIRE __INIT_XDATA_I
     87          
     88          // Default starting scan duration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     89          uint8 zgDefaultStartingScanDuration = STARTING_SCAN_DURATION;
   \                     zgDefaultStartingScanDuration:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgDefaultStartingScanDuratio`
   \   000001                REQUIRE __INIT_XDATA_I
     90          
     91          // Stack profile Id

   \                                 In  segment XDATA_I, align 1, keep-with-next
     92          uint8 zgStackProfile = STACK_PROFILE_ID;
   \                     zgStackProfile:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStackProfile>`
   \   000001                REQUIRE __INIT_XDATA_I
     93          
     94          // Default indirect message holding timeout

   \                                 In  segment XDATA_I, align 1, keep-with-next
     95          uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
   \                     zgIndirectMsgTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgIndirectMsgTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I
     96          
     97          // Security mode

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          uint8 zgSecurityMode = ZG_SECURITY_MODE;
   \                     zgSecurityMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     99          
    100          // Secure permit join

   \                                 In  segment XDATA_I, align 1, keep-with-next
    101          uint8 zgSecurePermitJoin = true;
   \                     zgSecurePermitJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSecurePermitJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    102          
    103          // Trust center address

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint16 zgTrustCenterAddr = ZG_TRUSTCENTER_ADDR;
   \                     zgTrustCenterAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          // Route Discovery Time - amount of time that a route request lasts

   \                                 In  segment XDATA_I, align 1, keep-with-next
    107          uint8 zgRouteDiscoveryTime = ROUTE_DISCOVERY_TIME;
   \                     zgRouteDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteDiscoveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    108          
    109          // Route expiry

   \                                 In  segment XDATA_I, align 1, keep-with-next
    110          uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
   \                     zgRouteExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    111          
    112          // Extended PAN Id

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          uint8 zgExtendedPANID[Z_EXTADDR_LEN];
   \                     zgExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    114          
    115          // Broadcast parameters

   \                                 In  segment XDATA_I, align 1, keep-with-next
    116          uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
   \                     zgMaxBcastRetires:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxBcastRetires>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    117          uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
   \                     zgPassiveAckTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgPassiveAckTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    118          uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
   \                     zgBcastDeliveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgBcastDeliveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    119          
    120          // Network mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    121          uint8 zgNwkMode = NWK_MODE;
   \                     zgNwkMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    122          
    123          // Many-to-one values

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
   \                     zgConcentratorEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
   \                     zgConcentratorDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    126          uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
   \                     zgConcentratorRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgConcentratorRadius>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          uint8 zgConcentratorRC = CONCENTRATOR_ROUTE_CACHE;   // concentrator with route cache (no memory constraints)
   \                     zgConcentratorRC:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    128          uint8 zgNwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
   \                     zgNwkSrcRtgExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkSrcRtgExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    129          
    130          /*********************************************************************
    131           * APS GLOBAL VARIABLES
    132           */
    133          
    134          // The maximum number of retries allowed after a transmission failure

   \                                 In  segment XDATA_I, align 1, keep-with-next
    135          uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
   \                     zgApscMaxFrameRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscMaxFrameRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
    136          
    137          // The maximum number of seconds (milliseconds) to wait for an
    138          // acknowledgement to a transmitted frame.
    139          
    140          // This number is used by polled devices.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    141          uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
   \                     zgApscAckWaitDurationPolled:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscAckWaitDurationPolled>`
   \   000002                REQUIRE __INIT_XDATA_I
    142          
    143          // This number is used by non-polled devices in the following formula:
    144          //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)

   \                                 In  segment XDATA_I, align 1, keep-with-next
    145          uint8 zgApsAckWaitMultiplier = 2;
   \                     zgApsAckWaitMultiplier:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsAckWaitMultiplier>`
   \   000001                REQUIRE __INIT_XDATA_I
    146          
    147          // The maximum number of milliseconds for the end device binding

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
   \                     zgApsDefaultMaxBindingTime:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsDefaultMaxBindingTime>`
   \   000002                REQUIRE __INIT_XDATA_I
    149          
    150          // The 64-big identifier of the network to join or form.
    151          // Default set to all zeros

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 zgApsUseExtendedPANID[Z_EXTADDR_LEN] = {00,00,00,00,00,00,00,00};
   \                     zgApsUseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    153          
    154          // A boolean flag that indicates whether it is OK to use insecure join
    155          // on startup. Default set to true

   \                                 In  segment XDATA_I, align 1, keep-with-next
    156          uint8 zgApsUseInsecureJoin = TRUE;
   \                     zgApsUseInsecureJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsUseInsecureJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    157          
    158          // The radius of broadcast multicast transmissions

   \                                 In  segment XDATA_I, align 1, keep-with-next
    159          uint8 zgApsNonMemberRadius = APS_DEFAULT_NONMEMBER_RADIUS;
   \                     zgApsNonMemberRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsNonMemberRadius>`
   \   000001                REQUIRE __INIT_XDATA_I
    160          
    161          // The size of a tx window when using fragmentation

   \                                 In  segment XDATA_I, align 1, keep-with-next
    162          uint8 zgApsfMaxWindowSize = APSF_DEFAULT_WINDOW_SIZE;
   \                     zgApsfMaxWindowSize:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsfMaxWindowSize>`
   \   000001                REQUIRE __INIT_XDATA_I
    163          
    164          // The delay between tx packets when using fragmentaition

   \                                 In  segment XDATA_I, align 1, keep-with-next
    165          uint16 zgApsfInterframeDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \                     zgApsfInterframeDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsfInterframeDelay>`
   \   000002                REQUIRE __INIT_XDATA_I
    166          
    167          /*********************************************************************
    168           * SECURITY GLOBAL VARIABLES
    169           */
    170          
    171          // If true, preConfigKey should be configured on all devices on the network
    172          // If false, it is configured only on the coordinator and sent to other
    173          // devices upon joining.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zgPreConfigKeys = FALSE;// TRUE;
   \                     zgPreConfigKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    175          
    176          // If true, defaultTCLinkKey should be configured on all devices on the
    177          // network. If false, individual trust center link key between each device and
    178          // the trust center should be manually configured via MT_WRITE_NV

   \                                 In  segment XDATA_I, align 1, keep-with-next
    179          uint8 zgUseDefaultTCLK = TRUE; // FALSE
   \                     zgUseDefaultTCLK:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgUseDefaultTCLK>`
   \   000001                REQUIRE __INIT_XDATA_I
    180          
    181          /*********************************************************************
    182           * ZDO GLOBAL VARIABLES
    183           */
    184          
    185          // Configured PAN ID

   \                                 In  segment XDATA_I, align 1, keep-with-next
    186          uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
   \                     zgConfigPANID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgConfigPANID>`
   \   000002                REQUIRE __INIT_XDATA_I
    187          //uint16 zgConfigPANID;   //ÕâÀïÄ¬ÈÏÏÈ²»ÒªÊýÖµ£¬³õÊ¼»¯¸ø
    188          // Device Logical Type

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          uint8 zgDeviceLogicalType = DEVICE_LOGICAL_TYPE;
   \                     zgDeviceLogicalType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    190          
    191          // Startup Delay

   \                                 In  segment XDATA_I, align 1, keep-with-next
    192          uint8 zgStartDelay = START_DELAY;
   \                     zgStartDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStartDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    193          
    194          #if !defined MT_TASK
    195          // Flag to use verbose (i.e. "cc2480-style") direct MT callbacks in ZDProfile.c, ZDP_IncomingData().
    196          uint8 zgZdoDirectCB = FALSE;
    197          #endif
    198          
    199          // Min number of attempted transmissions for Channel Interference detection

   \                                 In  segment XDATA_I, align 1, keep-with-next
    200          uint8 zgNwkMgrMinTransmissions = ZDNWKMGR_MIN_TRANSMISSIONS;
   \                     zgNwkMgrMinTransmissions:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMinTransmissions>`
   \   000001                REQUIRE __INIT_XDATA_I
    201          
    202          /*********************************************************************
    203           * APPLICATION GLOBAL VARIABLES
    204           */
    205          
    206          // Network Manager Mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    207          uint8 zgNwkMgrMode = ZDNWKMGR_ENABLE;
   \                     zgNwkMgrMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    208          
    209          /*********************************************************************
    210           * NON-STANDARD GLOBAL VARIABLES
    211           */
    212          
    213          // Simple API Endpoint

   \                                 In  segment XDATA_I, align 1, keep-with-next
    214          uint8 zgSapiEndpoint = SAPI_ENDPOINT;
   \                     zgSapiEndpoint:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSapiEndpoint>`
   \   000001                REQUIRE __INIT_XDATA_I
    215          
    216          /*********************************************************************
    217           * LOCAL VARIABLES
    218           */
    219          
    220          /*********************************************************************
    221           * @fn          Setpanid
    222           *
    223           * @brief       Reads the ZCD_NV_PANID NV Item.and set the Item to PANID
    224           *
    225           * @param       none
    226           *
    227           * @return      none
    228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    229          void Setpanid(void)
   \                     Setpanid:
    230          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    231            uint16 gu16RecBuffLen;
    232            
    233             if ( osal_nv_item_init( ZCD_NV_PANID,
    234                                        2,
    235                                        &gu16RecBuffLen ) == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   8582..       MOV     ?V0 + 0,DPL
   \   000013   8583..       MOV     ?V0 + 1,DPH
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00001E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000021   E9           MOV     A,R1
   \   000022   7016         JNZ     ??Setpanid_0
    236            
    237            {
    238              osal_nv_read(ZCD_NV_PANID,0,2,&gu16RecBuffLen);
   \   000024                ; Setup parameters for call to function osal_nv_read
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   75..02       MOV     ?V0 + 0,#0x2
   \   00002C   75..00       MOV     ?V0 + 1,#0x0
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   12....       LCALL   ?Subroutine1 & 0xFFFF
    239            }
   \                     ??CrossCallReturnLabel_11:
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
    240            zgConfigPANID=gu16RecBuffLen;
   \                     ??Setpanid_0:
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   12....       LCALL   ?Subroutine2 & 0xFFFF
    241          }
   \                     ??CrossCallReturnLabel_0:
   \   000043   7402         MOV     A,#0x2
   \   000045   80..         SJMP    ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7C02         MOV     R4,#0x2
   \   000002   7D00         MOV     R5,#0x0
   \   000004   7A83         MOV     R2,#-0x7d
   \   000006                REQUIRE ??Subroutine7_0
   \   000006                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002                REQUIRE ??Subroutine8_0
   \   000002                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   12....       LCALL   ??osal_nv_item_init?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   90....       MOV     DPTR,#zgConfigPANID
   \   000008   E8           MOV     A,R0
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   E9           MOV     A,R1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7C00         MOV     R4,#0x0
   \   000002   7D00         MOV     R5,#0x0
   \   000004   7A83         MOV     R2,#-0x7d
   \   000006                REQUIRE ??Subroutine10_0
   \   000006                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002                REQUIRE ??Subroutine11_0
   \   000002                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   12....       LCALL   ??osal_nv_read?relay
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET
    242          
    243          
    244          
    245          /*********************************************************************
    246           * @fn          Initpanid
    247           *
    248           * @brief       If the PANID is not set by the user,use the default id
    249                          in this function ,we set it 0x12ff.but you can change 
    250                          you like.
    251           *
    252           * @param       none
    253           *
    254           * @return      none
    255           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    256          void Initpanid(void)
   \                     Initpanid:
    257          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    258            uint16 gu16RecBuffLen=0xFFFF;       //Ä¬ÈÏPANID£¬×Ô¼º¿ÉÒÔÈÎÒâÐÞ¸Ä
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FF         MOV     A,#-0x1
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   F0           MOVX    @DPTR,A
    259            uint16 panidbuffe;
    260            uint16 panidpre;                    //Õâ¸öÊÇÖ¸ÏòZCD_NV_PANIDµÄÖµ
    261            uint16 panid;                       //Õâ¸öÏëZCD_NV_PANID1µÄÖµ
    262            
    263            osal_nv_read(ZCD_NV_PANID,0,2,&panidpre);
   \   000015                ; Setup parameters for call to function osal_nv_read
   \   000015   7404         MOV     A,#0x4
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   8582..       MOV     ?V0 + 0,DPL
   \   00001D   8583..       MOV     ?V0 + 1,DPH
   \   000020   78..         MOV     R0,#?V0 + 0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   75..02       MOV     ?V0 + 0,#0x2
   \   000028   75..00       MOV     ?V0 + 1,#0x0
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
    264            osal_nv_read(ZCD_NV_PANID1,0,2,&panid);
   \   000036                ; Setup parameters for call to function osal_nv_read
   \   000036   7402         MOV     A,#0x2
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   8582..       MOV     ?V0 + 0,DPL
   \   00003E   8583..       MOV     ?V0 + 1,DPH
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75..02       MOV     ?V0 + 0,#0x2
   \   000049   75..00       MOV     ?V0 + 1,#0x0
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7C00         MOV     R4,#0x0
   \   000053   7D00         MOV     R5,#0x0
   \   000055   7A85         MOV     R2,#-0x7b
   \   000057   7B04         MOV     R3,#0x4
   \   000059   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
    265            //Èç¹ûÓÃ´®¿Úµ÷ÊÔÖúÊÖÐÞ¸ÄÁË£¬ÔòÍ¬Ê±ÐÞ¸ÄZCD_NV_PANIDºÍZCD_NV_PANID1
    266            //²¢ÇÒÕâÁ½¸öÖµÊÇÏàÍ¬µÄ£¬ËùÒÔµ±ÐÞ¸ÄºóÔò²»»á½øÈëÏÂÃæÕâ¸öÌõ¼þÓï¾äÖÐ
    267            //¶øÔÚÐÞ¸ÄÖ®Ç°Í¨¹ýÏÂÃæµÄÓï¾ä½«Ä¬ÈÏPANIDID´æÈëNVÖÐ£¬Ê¹µÃÉè±¸Æô¶¯µÄ
    268            //Ê±ºòÓÐÒ»¸ö¹Ì¶¨µÄPANID
    269            if(panidpre!=panid)
   \   00005F   7404         MOV     A,#0x4
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F8           MOV     R0,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F9           MOV     R1,A
   \   000069   7402         MOV     A,#0x2
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   68           XRL     A,R0
   \   000070   7003         JNZ     ??Initpanid_0
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   69           XRL     A,R1
   \                     ??Initpanid_0:
   \   000075   6063         JZ      ??CrossCallReturnLabel_1
    270            {
    271             if ( osal_nv_item_init( ZCD_NV_PANID,
    272                                        2,
    273                                        &gu16RecBuffLen ) == ZSUCCESS )
   \   000077                ; Setup parameters for call to function osal_nv_item_init
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   8582..       MOV     ?V0 + 0,DPL
   \   000080   8583..       MOV     ?V0 + 1,DPH
   \   000083   78..         MOV     R0,#?V0 + 0
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000088   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E   E9           MOV     A,R1
   \   00008F   7049         JNZ     ??CrossCallReturnLabel_1
    274            
    275              {  
    276                  osal_nv_write(ZCD_NV_PANID,0,2,&gu16RecBuffLen);
   \   000091                ; Setup parameters for call to function osal_nv_write
   \   000091   78..         MOV     R0,#?V0 + 0
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   75..02       MOV     ?V0 + 0,#0x2
   \   000099   75..00       MOV     ?V0 + 1,#0x0
   \   00009C   78..         MOV     R0,#?V0 + 0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   7C00         MOV     R4,#0x0
   \   0000A3   7D00         MOV     R5,#0x0
   \   0000A5   7A83         MOV     R2,#-0x7d
   \   0000A7   7B00         MOV     R3,#0x0
   \   0000A9   12....       LCALL   ??osal_nv_write?relay
   \   0000AC   7404         MOV     A,#0x4
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
    277                  osal_nv_read(ZCD_NV_PANID,0,2,&panidbuffe);
   \   0000B1                ; Setup parameters for call to function osal_nv_read
   \   0000B1   7406         MOV     A,#0x6
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   8582..       MOV     ?V0 + 0,DPL
   \   0000B9   8583..       MOV     ?V0 + 1,DPH
   \   0000BC   78..         MOV     R0,#?V0 + 0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   75..02       MOV     ?V0 + 0,#0x2
   \   0000C4   75..00       MOV     ?V0 + 1,#0x0
   \   0000C7   78..         MOV     R0,#?V0 + 0
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000CF   12....       LCALL   ?DEALLOC_XSTACK8
    278                  zgConfigPANID=panidbuffe;
   \   0000D2   7406         MOV     A,#0x6
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   12....       LCALL   ?Subroutine2 & 0xFFFF
    279              } 
    280            }
    281          }
   \                     ??CrossCallReturnLabel_1:
   \   0000DA   7408         MOV     A,#0x8
   \   0000DC   02....       LJMP    ??Subroutine6_0 & 0xFFFF
    282          
    283          /*********************************************************************
    284           * ZGlobal Item Table
    285           */
    286          

   \                                 In  segment CODE_C, align 1
    287          static CONST zgItem_t zgItemTable[] =
   \                     zgItemTable:
   \   000000   87000100     DW 135, 1, zgDeviceLogicalType, 36, 2, zgPollRate, 37, 2
   \            ....2400
   \            0200....
   \            25000200
   \   000010   ....2600     DW zgQueuedPollRate, 38, 2, zgResponsePollRate, 39, 2, zgRejoinPollRate
   \            0200....
   \            27000200
   \            ....    
   \   00001E   28000100     DW 40, 1, zgMaxDataRetries, 41, 1, zgMaxPollFailureRetries, 132, 4
   \            ....2900
   \            0100....
   \            84000400
   \   00002E   ....8600     DW zgDefaultChannelList, 134, 1, zgDefaultStartingScanDuration, 42, 1
   \            0100....
   \            2A000100
   \   00003A   ....2B00     DW zgStackProfile, 43, 1, zgIndirectMsgTimeout, 44, 1
   \            0100....
   \            2C000100
   \   000046   ....2D00     DW zgRouteExpiryTime, 45, 8, zgExtendedPANID, 46, 1, zgMaxBcastRetires
   \            0800....
   \            2E000100
   \            ....    
   \   000054   2F000100     DW 47, 1, zgPassiveAckTimeout, 48, 1, zgBcastDeliveryTime, 49, 1
   \            ....3000
   \            0100....
   \            31000100
   \   000064   ....3200     DW zgNwkMode, 50, 1, zgConcentratorEnable, 51, 1
   \            0100....
   \            33000100
   \   000070   ....3400     DW zgConcentratorDiscoveryTime, 52, 1, zgConcentratorRadius, 54, 1
   \            0100....
   \            36000100
   \   00007C   ....3800     DW zgConcentratorRC, 56, 1, zgNwkSrcRtgExpiryTime, 57, 1
   \            0100....
   \            39000100
   \   000088   ....8300     DW zgRouteDiscoveryTime, 131, 2, zgConfigPANID, 99, 1, zgPreConfigKeys
   \            0200....
   \            63000100
   \            ....    
   \   000096   64000100     DW 100, 1, zgSecurityMode, 101, 1, zgSecurePermitJoin, 109, 1
   \            ....6500
   \            0100....
   \            6D000100
   \   0000A6   ....6E00     DW zgUseDefaultTCLK, 110, 2, zgTrustCenterAddr, 67, 1
   \            0200....
   \            43000100
   \   0000B2   ....4400     DW zgApscMaxFrameRetries, 68, 2, zgApscAckWaitDurationPolled, 69, 1
   \            0200....
   \            45000100
   \   0000BE   ....4600     DW zgApsAckWaitMultiplier, 70, 2, zgApsDefaultMaxBindingTime, 71, 8
   \            0200....
   \            47000800
   \   0000CA   ....4800     DW zgApsUseExtendedPANID, 72, 1, zgApsUseInsecureJoin, 73, 1
   \            0100....
   \            49000100
   \   0000D6   ....4A00     DW zgApsfMaxWindowSize, 74, 2, zgApsfInterframeDelay, 75, 1
   \            0200....
   \            4B000100
   \   0000E2   ....0400     DW zgApsNonMemberRadius, 4, 1, zgStartDelay, 161, 1, zgSapiEndpoint, 55
   \            0100....
   \            A1000100
   \            ....3700
   \   0000F2   0100....     DW 1, zgNwkMgrMode, 136, 1, zgNwkMgrMinTransmissions, 0, 0, 0H
   \            88000100
   \            ....0000
   \            00000000
    288          {
    289          #if defined ( NV_INIT )
    290          #if !defined MT_TASK
    291            {
    292              ZCD_NV_ZDO_DIRECT_CB, sizeof(zgZdoDirectCB), &zgZdoDirectCB
    293            },
    294          #endif
    295            {
    296              ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
    297            },
    298            {
    299              ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
    300            },
    301            {
    302              ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
    303            },
    304            {
    305              ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
    306            },
    307            {
    308              ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
    309            },
    310            {
    311              ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
    312            },
    313            {
    314              ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
    315            },
    316            {
    317              ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
    318            },
    319            {
    320              ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
    321            },
    322            {
    323              ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
    324            },
    325            {
    326              ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
    327            },
    328            {
    329              ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
    330            },
    331            {
    332              ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, zgExtendedPANID
    333            },
    334            {
    335              ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
    336            },
    337            {
    338              ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
    339            },
    340            {
    341              ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
    342            },
    343            {
    344              ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
    345            },
    346            {
    347              ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
    348            },
    349            {
    350              ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
    351            },
    352            {
    353              ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
    354            },
    355            {
    356              ZCD_NV_CONCENTRATOR_RC, sizeof(zgConcentratorRC), &zgConcentratorRC
    357            },
    358            {
    359              ZCD_NV_SRC_RTG_EXPIRY_TIME, sizeof(zgNwkSrcRtgExpiryTime), &zgNwkSrcRtgExpiryTime
    360            },
    361            {
    362              ZCD_NV_ROUTE_DISCOVERY_TIME, sizeof(zgRouteDiscoveryTime), &zgRouteDiscoveryTime
    363            },
    364          #ifndef NONWK
    365            {
    366              ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
    367            },
    368            {
    369              ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
    370            },
    371            {
    372              ZCD_NV_SECURITY_MODE, sizeof(zgSecurityMode), &zgSecurityMode
    373            },
    374            {
    375              ZCD_NV_SECURE_PERMIT_JOIN, sizeof(zgSecurePermitJoin), &zgSecurePermitJoin
    376            },
    377            {
    378              ZCD_NV_USE_DEFAULT_TCLK, sizeof(zgUseDefaultTCLK), &zgUseDefaultTCLK
    379            },
    380            {
    381              ZCD_NV_TRUSTCENTER_ADDR, sizeof(zgTrustCenterAddr), &zgTrustCenterAddr
    382            },
    383          #endif // NONWK
    384            {
    385              ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
    386            },
    387            {
    388              ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
    389            },
    390            {
    391              ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
    392            },
    393            {
    394              ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
    395            },
    396            {
    397              ZCD_NV_APS_USE_EXT_PANID, Z_EXTADDR_LEN, zgApsUseExtendedPANID
    398            },
    399            {
    400              ZCD_NV_APS_USE_INSECURE_JOIN, sizeof(zgApsUseInsecureJoin), &zgApsUseInsecureJoin
    401            },
    402            {
    403              ZCD_NV_APSF_WINDOW_SIZE, sizeof(zgApsfMaxWindowSize), &zgApsfMaxWindowSize
    404            },
    405            {
    406              ZCD_NV_APSF_INTERFRAME_DELAY, sizeof(zgApsfInterframeDelay), &zgApsfInterframeDelay
    407            },
    408            {
    409              ZCD_NV_APS_NONMEMBER_RADIUS, sizeof(zgApsNonMemberRadius), &zgApsNonMemberRadius
    410            },
    411            {
    412              ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
    413            },
    414            {
    415              ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
    416            },
    417            {
    418              ZCD_NV_NWK_MGR_MODE, sizeof(zgNwkMgrMode), &zgNwkMgrMode
    419            },
    420            {
    421              ZCD_NV_NWKMGR_MIN_TX, sizeof(zgNwkMgrMinTransmissions), &zgNwkMgrMinTransmissions
    422            },
    423          #endif // NV_INIT
    424            // Last item -- DO NOT MOVE IT!
    425            {
    426              0x00, 0, NULL
    427            }
    428          };
    429          
    430          /*********************************************************************
    431           * LOCAL FUNCTIONS
    432           */
    433          
    434          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
    435          static uint8 zgPreconfigKeyInit( uint8 setDefault );
    436          
    437          /*********************************************************************
    438           * @fn       zgItemInit()
    439           *
    440           * @brief
    441           *
    442           *   Initialize a global item. If the item doesn't exist in NV memory,
    443           *   write the system default (value passed in) into NV memory. But if
    444           *   it exists, set the item to the value stored in NV memory.
    445           *
    446           *   Also, if setDefault is TRUE and the item exists, we will write
    447           *   the default value to NV space.
    448           *
    449           * @param   id - item id
    450           * @param   len - item len
    451           * @param   buf - pointer to the item
    452           * @param   setDefault - TRUE to set default, not read
    453           *
    454           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    455           *          exist in NV, NV_OPER_FAILED if failure.
    456           */
    457          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
    458          {
    459            uint8 status;
    460          
    461            // If the item doesn't exist in NV memory, create and initialize
    462            // it with the value passed in.
    463            status = osal_nv_item_init( id, len, buf );
    464            if ( status == ZSUCCESS )
    465            {
    466              if ( setDefault )
    467              {
    468                // Write the default value back to NV
    469                status = osal_nv_write( id, 0, len, buf );
    470              }
    471              else
    472              {
    473                // The item exists in NV memory, read it from NV memory
    474                status = osal_nv_read( id, 0, len, buf );
    475              }
    476            }
    477          
    478            return (status);
    479          }
    480          
    481          /*********************************************************************
    482           * API FUNCTIONS
    483           */
    484          
    485          /*********************************************************************
    486           * @fn          zgInit
    487           *
    488           * @brief
    489           *
    490           *   Initialize the Z-Stack Globals. If an item doesn't exist in
    491           *   NV memory, write the system default into NV memory. But if
    492           *   it exists, set the item to the value stored in NV memory.
    493           *
    494           * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
    495           *       that the Config state items (zgItemTable) need to be
    496           *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
    497           *
    498           * @param       none
    499           *
    500           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    501           *              exist in NV, NV_OPER_FAILED if failure.
    502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    503          uint8 zgInit( void )
   \                     zgInit:
    504          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    505            uint8  setDefault = FALSE;
   \   000005   7E00         MOV     R6,#0x0
    506          
    507            // Do we want to default the Config state values
    508            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   ??zgReadStartupOptions?relay
   \   00000A   E9           MOV     A,R1
   \   00000B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000D   5001         JNC     ??zgInit_0
    509            {
    510              setDefault = TRUE;
   \   00000F   0E           INC     R6
    511            }
    512          
    513          #if 0
    514            // Enable this section if you need to track the number of resets
    515            // This section is normally disabled to minimize "wear" on NV memory
    516            uint16 bootCnt = 0;
    517          
    518            // Update the Boot Counter
    519            if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
    520            {
    521              // Get the old value from NV memory
    522              osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    523            }
    524          
    525            // Increment the Boot Counter and store it into NV memory
    526            if ( setDefault )
    527              bootCnt = 0;
    528            else
    529              bootCnt++;
    530            osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    531          #endif
    532          
    533            // Initialize the Extended PAN ID as my own extended address
    534            ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
   \                     ??zgInit_0:
   \   000010                ; Setup parameters for call to function ZMacGetReq
   \   000010   7A..         MOV     R2,#(zgExtendedPANID & 0xff)
   \   000012   7B..         MOV     R3,#((zgExtendedPANID >> 8) & 0xff)
   \   000014   79E2         MOV     R1,#-0x1e
   \   000016   12....       LCALL   ??ZMacGetReq?relay
    535          
    536            // Initialize the items table
    537            zgInitItems( setDefault );
   \   000019                ; Setup parameters for call to function zgInitItems
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??zgInitItems?relay
    538          
    539          #ifndef NONWK
    540            if ( ZG_SECURE_ENABLED )
    541            {
    542              // Initialize the Pre-Configured Key to the default key
    543              zgPreconfigKeyInit( setDefault );
    544          
    545              // Initialize NV items for all Keys: NWK, APS, TCLK and Master
    546              ZDSecMgrInitNVKeyTables( setDefault );
    547            }
    548          #endif // NONWK
    549          
    550            // Clear the Config State default
    551            if ( setDefault )
   \   00001E   EE           MOV     A,R6
   \   00001F   6007         JZ      ??zgInit_1
    552            {
    553              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
   \   000021                ; Setup parameters for call to function zgWriteStartupOptions
   \   000021   7A01         MOV     R2,#0x1
   \   000023   7900         MOV     R1,#0x0
   \   000025   12....       LCALL   ??zgWriteStartupOptions?relay
    554            }
    555          
    556            return ( ZSUCCESS );
   \                     ??zgInit_1:
   \   000028   7900         MOV     R1,#0x0
   \   00002A   7F01         MOV     R7,#0x1
   \   00002C   02....       LJMP    ?BANKED_LEAVE_XDATA
    557          }
    558          
    559          /*********************************************************************
    560           * @fn          zgInitItems
    561           *
    562           * @brief       Initializes RAM variables from NV.  If NV items don't
    563           *              exist, then the NV is initialize with what is in RAM
    564           *              variables.
    565           *
    566           * @param       none
    567           *
    568           * @return      none
    569           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    570          void zgInitItems( uint8 setDefault )
   \                     zgInitItems:
    571          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 5,R1
    572            uint8  i = 0;
   \   000007   75..00       MOV     ?V0 + 4,#0x0
   \   00000A   801A         SJMP    ??zgInitItems_0
    573          
    574            while ( zgItemTable[i].id != 0x00 )
    575            {
   \                     ??zgInitItems_1:
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000F   78..         MOV     R0,#?V0 + 0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   7C00         MOV     R4,#0x0
   \   000016   7D00         MOV     R5,#0x0
   \   000018   EE           MOV     A,R6
   \   000019   FA           MOV     R2,A
   \   00001A   EF           MOV     A,R7
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   ??osal_nv_read?relay
   \                     ??zgInitItems_2:
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
    576              // Initialize the item
    577              zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
    578          
    579              // Move on to the next item
    580              i++;
   \                     ??zgInitItems_3:
   \   000024   05..         INC     ?V0 + 4
   \                     ??zgInitItems_0:
   \   000026   E5..         MOV     A,?V0 + 4
   \   000028   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00002B   8882         MOV     DPL,R0
   \   00002D   8983         MOV     DPH,R1
   \   00002F   E4           CLR     A
   \   000030   93           MOVC    A,@A+DPTR
   \   000031   FA           MOV     R2,A
   \   000032   7401         MOV     A,#0x1
   \   000034   93           MOVC    A,@A+DPTR
   \   000035   FB           MOV     R3,A
   \   000036   EA           MOV     A,R2
   \   000037   7001         JNZ     ??zgInitItems_4
   \   000039   EB           MOV     A,R3
   \                     ??zgInitItems_4:
   \   00003A   606C         JZ      ??zgInitItems_5
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E4           CLR     A
   \   000041   93           MOVC    A,@A+DPTR
   \   000042   F5..         MOV     ?V0 + 2,A
   \   000044   7401         MOV     A,#0x1
   \   000046   93           MOVC    A,@A+DPTR
   \   000047   F5..         MOV     ?V0 + 3,A
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   E4           CLR     A
   \   000050   93           MOVC    A,@A+DPTR
   \   000051   C0E0         PUSH    A
   \   000053   7401         MOV     A,#0x1
   \   000055   93           MOVC    A,@A+DPTR
   \   000056   F583         MOV     DPH,A
   \   000058   D082         POP     DPL
   \   00005A   8582..       MOV     ?V0 + 0,DPL
   \   00005D   8583..       MOV     ?V0 + 1,DPH
   \   000060   8882         MOV     DPL,R0
   \   000062   8983         MOV     DPH,R1
   \   000064   E4           CLR     A
   \   000065   93           MOVC    A,@A+DPTR
   \   000066   C0E0         PUSH    A
   \   000068   7401         MOV     A,#0x1
   \   00006A   93           MOVC    A,@A+DPTR
   \   00006B   F583         MOV     DPH,A
   \   00006D   D082         POP     DPL
   \   00006F   AE82         MOV     R6,DPL
   \   000071   AF83         MOV     R7,DPH
   \   000073                ; Setup parameters for call to function osal_nv_item_init
   \   000073   78..         MOV     R0,#?V0 + 2
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   AC..         MOV     R4,?V0 + 0
   \   00007A   AD..         MOV     R5,?V0 + 1
   \   00007C   EE           MOV     A,R6
   \   00007D   FA           MOV     R2,A
   \   00007E   EF           MOV     A,R7
   \   00007F   FB           MOV     R3,A
   \   000080   12....       LCALL   ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
   \   000086   E9           MOV     A,R1
   \   000087   709B         JNZ     ??zgInitItems_3
   \   000089   E5..         MOV     A,?V0 + 5
   \   00008B   78..         MOV     R0,#?V0 + 2
   \   00008D   7003         JNZ     $+5
   \   00008F   02....       LJMP    ??zgInitItems_1 & 0xFFFF
   \   000092                ; Setup parameters for call to function osal_nv_write
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   78..         MOV     R0,#?V0 + 0
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009A   7C00         MOV     R4,#0x0
   \   00009C   7D00         MOV     R5,#0x0
   \   00009E   EE           MOV     A,R6
   \   00009F   FA           MOV     R2,A
   \   0000A0   EF           MOV     A,R7
   \   0000A1   FB           MOV     R3,A
   \   0000A2   12....       LCALL   ??osal_nv_write?relay
   \   0000A5   02....       LJMP    ??zgInitItems_2 & 0xFFFF
    581            }
    582          }
   \                     ??zgInitItems_5:
   \   0000A8   7F06         MOV     R7,#0x6
   \   0000AA   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   75F006       MOV     B,#0x6
   \   000003   A4           MUL     AB
   \   000004   24..         ADD     A,#(zgItemTable & 0xff)
   \   000006   F8           MOV     R0,A
   \   000007   E5F0         MOV     A,B
   \   000009   34..         ADDC    A,#((zgItemTable >> 8) & 0xff)
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET
    583          
    584          /*********************************************************************
    585           * @fn          zgReadStartupOptions
    586           *
    587           * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
    588           *
    589           * @param       none
    590           *
    591           * @return      the ZCD_NV_STARTUP_OPTION NV item
    592           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine6_0
   \   000002                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    593          uint8 zgReadStartupOptions( void )
   \                     zgReadStartupOptions:
    594          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    595            // Default to Use Config State and Use Network State
    596            uint8 startupOption = 0;
   \   00000A   12....       LCALL   ?Subroutine0 & 0xFFFF
    597          
    598            // This should have been done in ZMain.c, but just in case.
    599            if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
    600                                        sizeof(startupOption),
    601                                        &startupOption ) == ZSUCCESS )
   \                     ??CrossCallReturnLabel_8:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   7C01         MOV     R4,#0x1
   \   000012   7D00         MOV     R5,#0x0
   \   000014   7A03         MOV     R2,#0x3
   \   000016   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000019   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001C   E9           MOV     A,R1
   \   00001D   701C         JNZ     ??zgReadStartupOptions_0
    602            {
    603              // Read saved startup control
    604              osal_nv_read( ZCD_NV_STARTUP_OPTION,
    605                            0,
    606                            sizeof( startupOption ),
    607                            &startupOption);
   \   00001F                ; Setup parameters for call to function osal_nv_read
   \   00001F   78..         MOV     R0,#?V0 + 0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..01       MOV     ?V0 + 0,#0x1
   \   000027   75..00       MOV     ?V0 + 1,#0x0
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A03         MOV     R2,#0x3
   \   000035   12....       LCALL   ??Subroutine10_0 & 0xFFFF
    608            }
   \                     ??CrossCallReturnLabel_14:
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
    609            return ( startupOption );
   \                     ??zgReadStartupOptions_0:
   \   00003B   85..82       MOV     DPL,?XSP + 0
   \   00003E   85..83       MOV     DPH,?XSP + 1
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F9           MOV     R1,A
   \   000043   02....       LJMP    ?Subroutine5 & 0xFFFF
    610          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E4           CLR     A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine9_0
   \   000007                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_item_init
   \   000001                ; Setup parameters for call to function osal_nv_read
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001   8582..       MOV     ?V0 + 0,DPL
   \   000004   8583..       MOV     ?V0 + 1,DPH
   \   000007   78..         MOV     R0,#?V0 + 0
   \   000009   22           RET
    611          
    612          /*********************************************************************
    613           * @fn          zgWriteStartupOptions
    614           *
    615           * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
    616           *
    617           * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
    618           *               clear bit. The set bit is an OR operation, and the
    619           *               clear bit is an AND ~(bitOptions) operation.
    620           *
    621           * @param       bitOptions - which bits to perform action on:
    622           *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
    623           *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    624           *
    625           * @return      ZSUCCESS if successful
    626           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    627          uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
   \                     zgWriteStartupOptions:
    628          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    629            uint8 status;
    630            uint8 startupOptions = 0;
   \   00000E   12....       LCALL   ?Subroutine0 & 0xFFFF
    631          
    632            status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
    633                          0,
    634                          sizeof( startupOptions ),
    635                          &startupOptions );
   \                     ??CrossCallReturnLabel_9:
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   75..01       MOV     ?V0 + 0,#0x1
   \   000017   75..00       MOV     ?V0 + 1,#0x0
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   7C00         MOV     R4,#0x0
   \   000021   7D00         MOV     R5,#0x0
   \   000023   7A03         MOV     R2,#0x3
   \   000025   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002B   E9           MOV     A,R1
    636          
    637            if ( status == ZSUCCESS )
   \   00002C   703C         JNZ     ??zgWriteStartupOptions_0
    638            {
    639              if ( action == ZG_STARTUP_SET )
   \   00002E   74FF         MOV     A,#-0x1
   \   000030   6E           XRL     A,R6
   \   000031   700A         JNZ     ??zgWriteStartupOptions_1
    640              {
    641                // Set bits
    642                startupOptions |= bitOptions;
   \   000033   85..82       MOV     DPL,?XSP + 0
   \   000036   85..83       MOV     DPH,?XSP + 1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   4F           ORL     A,R7
   \   00003B   800C         SJMP    ??zgWriteStartupOptions_2
    643              }
    644              else
    645              {
    646                // Clear bits
    647                startupOptions &= (bitOptions ^ 0xFF);
   \                     ??zgWriteStartupOptions_1:
   \   00003D   74FF         MOV     A,#-0x1
   \   00003F   6F           XRL     A,R7
   \   000040   FA           MOV     R2,A
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   E0           MOVX    A,@DPTR
   \   000048   5A           ANL     A,R2
    648              }
    649          
    650              // Changed?
    651              status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
    652                           0,
    653                           sizeof( startupOptions ),
    654                           &startupOptions );
    655            }
   \                     ??zgWriteStartupOptions_2:
   \   000049   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   75..01       MOV     ?V0 + 0,#0x1
   \   000052   75..00       MOV     ?V0 + 1,#0x0
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7C00         MOV     R4,#0x0
   \   00005C   7D00         MOV     R5,#0x0
   \   00005E   7A03         MOV     R2,#0x3
   \   000060   7B00         MOV     R3,#0x0
   \   000062   12....       LCALL   ??osal_nv_write?relay
   \   000065   7404         MOV     A,#0x4
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
    656          
    657            return ( status );
   \                     ??zgWriteStartupOptions_0:
   \   00006A   02....       LJMP    ?Subroutine5 & 0xFFFF
    658          }
    659          
    660          /*********************************************************************
    661           * @fn          zgSetItem
    662           *
    663           * @brief       Set RAM variables from set-NV, if it exist in the zgItemTable
    664           *
    665           * @param       id - NV ID
    666           *              len - NV item length
    667           *              buf - pointer to the input buffer
    668           *
    669           * @return      none
    670           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    671          void zgSetItem( uint16 id, uint16 len, void *buf )
   \                     zgSetItem:
    672          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0 + 0,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0 + 1,A
    673          
    674            uint8  i = 0;
   \   000011   75..00       MOV     ?V0 + 2,#0x0
   \   000014   8002         SJMP    ??zgSetItem_0
    675          
    676            // Look up the NV item table
    677            while ( zgItemTable[i].id != 0x00 )
    678            {
    679              if( zgItemTable[i].id == id )
    680              {
    681                if ( zgItemTable[i].len == len )
    682                {
    683                  osal_memcpy( zgItemTable[i].buf, buf, len );
    684                }
    685                break;
    686              }
    687              // Move on to the next item
    688              i++;
   \                     ??zgSetItem_1:
   \   000016   05..         INC     ?V0 + 2
   \                     ??zgSetItem_0:
   \   000018   E5..         MOV     A,?V0 + 2
   \   00001A   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00001D   E8           MOV     A,R0
   \   00001E   FE           MOV     R6,A
   \   00001F   E9           MOV     A,R1
   \   000020   FF           MOV     R7,A
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E4           CLR     A
   \   000026   93           MOVC    A,@A+DPTR
   \   000027   C0E0         PUSH    A
   \   000029   7401         MOV     A,#0x1
   \   00002B   93           MOVC    A,@A+DPTR
   \   00002C   F583         MOV     DPH,A
   \   00002E   D082         POP     DPL
   \   000030   A882         MOV     R0,DPL
   \   000032   A983         MOV     R1,DPH
   \   000034   E8           MOV     A,R0
   \   000035   7001         JNZ     ??zgSetItem_2
   \   000037   E9           MOV     A,R1
   \                     ??zgSetItem_2:
   \   000038   603C         JZ      ??zgSetItem_3
   \   00003A   EA           MOV     A,R2
   \   00003B   68           XRL     A,R0
   \   00003C   7002         JNZ     ??zgSetItem_4
   \   00003E   EB           MOV     A,R3
   \   00003F   69           XRL     A,R1
   \                     ??zgSetItem_4:
   \   000040   70D4         JNZ     ??zgSetItem_1
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E4           CLR     A
   \   000049   93           MOVC    A,@A+DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   7401         MOV     A,#0x1
   \   00004D   93           MOVC    A,@A+DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   EC           MOV     A,R4
   \   000050   68           XRL     A,R0
   \   000051   7002         JNZ     ??zgSetItem_5
   \   000053   ED           MOV     A,R5
   \   000054   69           XRL     A,R1
   \                     ??zgSetItem_5:
   \   000055   701F         JNZ     ??zgSetItem_3
   \   000057                ; Setup parameters for call to function osal_memcpy
   \   000057   75..00       MOV     ?V0 + 2,#0x0
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   E4           CLR     A
   \   000068   93           MOVC    A,@A+DPTR
   \   000069   FA           MOV     R2,A
   \   00006A   7401         MOV     A,#0x1
   \   00006C   93           MOVC    A,@A+DPTR
   \   00006D   FB           MOV     R3,A
   \   00006E   12....       LCALL   ??osal_memcpy?relay
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
    689            }
    690          }
   \                     ??zgSetItem_3:
   \   000076   7F04         MOV     R7,#0x4
   \   000078   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgQueuedPollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgResponsePollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRejoinPollRate>`:
   \   000000   B801         DW 440

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxDataRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxPollFailureRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultChannelList>`:
   \   000000   00080000     DD 2048

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultStartingScanDuratio`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStackProfile>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgIndirectMsgTimeout>`:
   \   000000   07           DB 7

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSecurePermitJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteDiscoveryTime>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteExpiryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxBcastRetires>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPassiveAckTimeout>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBcastDeliveryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConcentratorRadius>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkSrcRtgExpiryTime>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscMaxFrameRetries>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscAckWaitDurationPolled>`:
   \   000000   B80B         DW 3000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsAckWaitMultiplier>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsDefaultMaxBindingTime>`:
   \   000000   803E         DW 16000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsUseInsecureJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsNonMemberRadius>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsfMaxWindowSize>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsfInterframeDelay>`:
   \   000000   3200         DW 50

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgUseDefaultTCLK>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConfigPANID>`:
   \   000000   FFFF         DW 65535

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStartDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMinTransmissions>`:
   \   000000   14           DB 20

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMode>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSapiEndpoint>`:
   \   000000   E0           DB 224

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Setpanid?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Setpanid

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Initpanid?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Initpanid

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgInitItems?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInitItems

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgReadStartupOptions?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgReadStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgWriteStartupOptions?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgWriteStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgSetItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgSetItem
    691          
    692          /*********************************************************************
    693           * @fn       zgPreconfigKeyInit()
    694           *
    695           * @brief
    696           *
    697           *   Initialize ZCD_NV_PRECFGKEY NV item. If the item doesn't exist in NV memory,
    698           *   write the system default (value passed in) into NV memory. But if
    699           *   it exists do not overwrite it.
    700           *
    701           *   Also, if setDefault is TRUE and the item exists, we will write
    702           *   the default value to NV space.
    703           *
    704           * @param   setDefault - TRUE to set default
    705           *
    706           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    707           *          exist in NV, NV_OPER_FAILED if failure.
    708           */
    709          static uint8 zgPreconfigKeyInit( uint8 setDefault )
    710          {
    711            uint8 zgPreConfigKey[SEC_KEY_LEN];
    712            uint8 status;
    713          
    714            // Initialize the Pre-Configured Key to the default key
    715            osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );
    716          
    717            // If the item doesn't exist in NV memory, create and initialize it
    718            status = osal_nv_item_init( ZCD_NV_PRECFGKEY, SEC_KEY_LEN, zgPreConfigKey );
    719            if ( status == ZSUCCESS )
    720            {
    721              if ( setDefault )
    722              {
    723                // Write the default value back to NV
    724                status =  osal_nv_write( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, zgPreConfigKey );
    725              }
    726            }
    727          
    728            // clear local copy of default key
    729            osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    730          
    731            return (status);
    732          }
    733          
    734          /*********************************************************************
    735          *********************************************************************/

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     Initpanid                      0      0     22
       -> osal_nv_read              0      0     44
       -> osal_nv_read              0      0     44
       -> osal_nv_item_init         0      0     40
       -> osal_nv_write             0      0     44
       -> osal_nv_read              0      0     44
     Setpanid                       0      0     16
       -> osal_nv_item_init         0      0     28
       -> osal_nv_read              0      0     32
     zgInit                         0      0      9
       -> zgReadStartupOptions      0      0     18
       -> ZMacGetReq                0      0     18
       -> zgInitItems               0      0     18
       -> zgWriteStartupOptions     0      0     18
     zgInitItems                    0      0     27
       -> osal_nv_read              0      0     36
       -> osal_nv_item_init         0      0     32
       -> osal_nv_write             0      0     36
     zgReadStartupOptions           1      0     24
       -> osal_nv_item_init         0      0     26
       -> osal_nv_read              0      0     30
     zgSetItem                      0      0     17
       -> osal_memcpy               0      0     30
     zgWriteStartupOptions          1      0     24
       -> osal_nv_read              0      0     30
       -> osal_nv_write             0      0     30


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     zgPollRate                                        2
     zgQueuedPollRate                                  2
     zgResponsePollRate                                2
     zgRejoinPollRate                                  2
     zgMaxDataRetries                                  1
     zgMaxPollFailureRetries                           1
     zgDefaultChannelList                              4
     zgDefaultStartingScanDuration                     1
     zgStackProfile                                    1
     zgIndirectMsgTimeout                              1
     zgSecurityMode                                    1
     zgSecurePermitJoin                                1
     zgTrustCenterAddr                                 2
     zgRouteDiscoveryTime                              1
     zgRouteExpiryTime                                 1
     zgExtendedPANID                                   8
     zgMaxBcastRetires                                 1
     zgPassiveAckTimeout                               1
     zgBcastDeliveryTime                               1
     zgNwkMode                                         1
     zgConcentratorEnable                              1
     zgConcentratorDiscoveryTime                       1
     zgConcentratorRadius                              1
     zgConcentratorRC                                  1
     zgNwkSrcRtgExpiryTime                             1
     zgApscMaxFrameRetries                             1
     zgApscAckWaitDurationPolled                       2
     zgApsAckWaitMultiplier                            1
     zgApsDefaultMaxBindingTime                        2
     zgApsUseExtendedPANID                             8
     zgApsUseInsecureJoin                              1
     zgApsNonMemberRadius                              1
     zgApsfMaxWindowSize                               1
     zgApsfInterframeDelay                             2
     zgPreConfigKeys                                   1
     zgUseDefaultTCLK                                  1
     zgConfigPANID                                     2
     zgDeviceLogicalType                               1
     zgStartDelay                                      1
     zgNwkMgrMinTransmissions                          1
     zgNwkMgrMode                                      1
     zgSapiEndpoint                                    1
     Setpanid                                         71
     ??Subroutine6_0                                   8
     ?Subroutine3                                      6
     ??Subroutine7_0                                   2
     ??Subroutine8_0                                   6
     ?Subroutine2                                     14
     ?Subroutine1                                      6
     ??Subroutine10_0                                  2
     ??Subroutine11_0                                  6
     Initpanid                                       223
     zgItemTable                                     258
     zgInit                                           47
     zgInitItems                                     173
     ?Subroutine4                                     13
     ?Subroutine5                                      2
     zgReadStartupOptions                             70
     ?Subroutine0                                      7
     ??Subroutine9_0                                  10
     zgWriteStartupOptions                           109
     zgSetItem                                       123
     ?<Initializer for zgPollRate>                     2
     ?<Initializer for zgQueuedPollRate>               2
     ?<Initializer for zgResponsePollRate>             2
     ?<Initializer for zgRejoinPollRate>               2
     ?<Initializer for zgMaxDataRetries>               1
     ?<Initializer for zgMaxPollFailureRetries>        1
     ?<Initializer for zgDefaultChannelList>           4
     ?<Initializer for zgDefaultStartingScanDuratio    1
     ?<Initializer for zgStackProfile>                 1
     ?<Initializer for zgIndirectMsgTimeout>           1
     ?<Initializer for zgSecurePermitJoin>             1
     ?<Initializer for zgRouteDiscoveryTime>           1
     ?<Initializer for zgRouteExpiryTime>              1
     ?<Initializer for zgMaxBcastRetires>              1
     ?<Initializer for zgPassiveAckTimeout>            1
     ?<Initializer for zgBcastDeliveryTime>            1
     ?<Initializer for zgNwkMode>                      1
     ?<Initializer for zgConcentratorRadius>           1
     ?<Initializer for zgNwkSrcRtgExpiryTime>          1
     ?<Initializer for zgApscMaxFrameRetries>          1
     ?<Initializer for zgApscAckWaitDurationPolled>    2
     ?<Initializer for zgApsAckWaitMultiplier>         1
     ?<Initializer for zgApsDefaultMaxBindingTime>     2
     ?<Initializer for zgApsUseInsecureJoin>           1
     ?<Initializer for zgApsNonMemberRadius>           1
     ?<Initializer for zgApsfMaxWindowSize>            1
     ?<Initializer for zgApsfInterframeDelay>          2
     ?<Initializer for zgUseDefaultTCLK>               1
     ?<Initializer for zgConfigPANID>                  2
     ?<Initializer for zgStartDelay>                   1
     ?<Initializer for zgNwkMgrMinTransmissions>       1
     ?<Initializer for zgNwkMgrMode>                   1
     ?<Initializer for zgSapiEndpoint>                 1
     ??Setpanid?relay                                  6
     ??Initpanid?relay                                 6
     ??zgInit?relay                                    6
     ??zgInitItems?relay                               6
     ??zgReadStartupOptions?relay                      6
     ??zgWriteStartupOptions?relay                     6
     ??zgSetItem?relay                                 6

 
 898 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
 258 bytes in segment CODE_C
  44 bytes in segment XDATA_I
  44 bytes in segment XDATA_ID
  24 bytes in segment XDATA_Z
 
 1 242 bytes of CODE  memory
    68 bytes of XDATA memory

Errors: none
Warnings: none
