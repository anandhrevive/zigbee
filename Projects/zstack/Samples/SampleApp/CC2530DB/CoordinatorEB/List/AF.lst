###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                16/Sep/2011  10:52:16 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k¶¨Ê±¸´Î»¼ì²â\Components\stack\af\AF.c             #
#    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"   #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"  #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Documents and           #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Com #
#                          ponents\stack\af\AF.c" -D ZTOOL_P1 -D MT_TASK -D   #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D HAL_UART=TRUE -D     #
#                          SERIAL_APP_PORT=0 -D BUILD_ALL_DEVICES -D          #
#                          xLCD_SUPPORTED=DEBUG -D SOFT_SATRT -D              #
#                          ZDO_COORDINATOR -D NV_INIT -D RTR_NWK -lC          #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\CoordinatorEB\List\" -lA "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\Coordi #
#                          natorEB\List\" --diag_suppress Pe001,Pa010 -o      #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\CoordinatorEB\Obj\" -e                     #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\" -I       #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\SOURCE\" -I "C:\Documents and           #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Z #
#                          MAIN\TI2530DB\" -I "C:\Documents and               #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MT\" -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\INCLUDE\" -I "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I       #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\"  #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"   #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"  #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"   #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"   #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"    #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I     #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDA #
#                          TA\" -I "C:\Documents and                          #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\INCLUDE\" -I "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I            #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\sr #
#                          f04\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"  #
#                          -I D:\IAR\8051\INC\ -I D:\IAR\8051\INC\CLIB\ -Ohz  #
#    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\CoordinatorEB\List\AF.lst                   #
#    Object file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\CoordinatorEB\Obj\AF.r51                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2010-08-09 12:12:10 -0700 (Mon, 09 Aug 2010) $
      4            Revision:       $Revision: 23350 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afSend
     67           *
     68           * @brief   Helper macro for V1 API to invoke V2 API.
     69           *
     70           * input parameters
     71           *
     72           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     73           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     74           * @param   cID - A valid cluster ID as specified by the Profile.
     75           * @param   len - Number of bytes of data pointed to by next param.
     76           * @param  *buf - A pointer to the data bytes to send.
     77           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     78           * @param  *transID - A pointer to a byte which can be modified and which will
     79           *                    be used as the transaction sequence number of the msg.
     80           *
     81           * output parameters
     82           *
     83           * @param  *transID - Incremented by one if the return value is success.
     84           *
     85           * @return  afStatus_t - See previous definition of afStatus_... types.
     86           */
     87          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     88                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     89                                    (cID), (len), (buf), (transID), (options), (radius) )
     90          
     91          /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          /*********************************************************************
     96           * TYPEDEFS
     97           */
     98          
     99          /*********************************************************************
    100           * GLOBAL VARIABLES
    101           */
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    104          
    105          /*********************************************************************
    106           * EXTERNAL VARIABLES
    107           */
    108          
    109          /*********************************************************************
    110           * EXTERNAL FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * LOCAL VARIABLES
    115           */
    116          
    117          /*********************************************************************
    118           * LOCAL FUNCTIONS
    119           */
    120          
    121          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    122                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    123                          byte SecurityUse, uint32 timestamp );
    124          
    125          static epList_t *afFindEndPointDescList( byte EndPoint );
    126          
    127          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    128          
    129          /*********************************************************************
    130           * NETWORK LAYER CALLBACKS
    131           */
    132          
    133          /*********************************************************************
    134           * PUBLIC FUNCTIONS
    135           */
    136          
    137          /*********************************************************************
    138           * @fn      afInit
    139           *
    140           * @brief   Initialization function for the AF.
    141           *
    142           * @param   none
    143           *
    144           * @return  none
    145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    146          void afInit( void )
   \                     afInit:
    147          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    148            // Start with no endpoint defined
    149            epList = NULL;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    150          }
   \   00000B                REQUIRE ?Subroutine25
   \   00000B                ; // Fall through to label ?Subroutine25

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    151          
    152          /*********************************************************************
    153           * @fn      afRegisterExtended
    154           *
    155           * @brief   Register an Application's EndPoint description.
    156           *
    157           * @param   epDesc - pointer to the Application's endpoint descriptor.
    158           * @param   descFn - pointer to descriptor callback function
    159           *
    160           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    161           *
    162           * @return  Pointer to epList_t on success, NULL otherwise.
    163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    164          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
   \                     afRegisterExtended:
    165          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    166            epList_t *ep;
    167            epList_t *epSearch;
    168          
    169            ep = osal_mem_alloc( sizeof ( epList_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A07         MOV     R2,#0x7
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??osal_mem_alloc?relay
    170            if ( ep )
   \   000014   EA           MOV     A,R2
   \   000015   7001         JNZ     ??afRegisterExtended_0
   \   000017   EB           MOV     A,R3
   \                     ??afRegisterExtended_0:
   \   000018   6055         JZ      ??afRegisterExtended_1
    171            {
    172              // Fill in the new list entry
    173              ep->epDesc = epDesc;
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   EE           MOV     A,R6
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   EF           MOV     A,R7
   \   000022   F0           MOVX    @DPTR,A
    174          
    175              // Default to allow Match Descriptor.
    176              ep->flags = eEP_AllowMatch;
   \   000023   7401         MOV     A,#0x1
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ?Subroutine0 & 0xFFFF
    177              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_0:
   \   00002E   E5..         MOV     A,?V0 + 0
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   E5..         MOV     A,?V0 + 1
   \   000034   12....       LCALL   ?Subroutine0 & 0xFFFF
    178              ep->nextDesc = NULL;
   \                     ??CrossCallReturnLabel_1:
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   F0           MOVX    @DPTR,A
    179          
    180              // Does a list exist?
    181              if ( epList == NULL )
   \   00003D   90....       MOV     DPTR,#epList
   \   000040   E0           MOVX    A,@DPTR
   \   000041   7002         JNZ     ??afRegisterExtended_2
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \                     ??afRegisterExtended_2:
   \   000045   90....       MOV     DPTR,#epList
   \   000048   6020         JZ      ??afRegisterExtended_3
    182                epList = ep;  // Make this the first entry
    183              else
    184              {
    185                // Look for the end of the list
    186                epSearch = epList;
   \   00004A   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    187                while( epSearch->nextDesc != NULL )
    188                  epSearch = epSearch->nextDesc;
   \                     ??CrossCallReturnLabel_45:
   \   00004D   E8           MOV     A,R0
   \   00004E   2405         ADD     A,#0x5
   \   000050   F8           MOV     R0,A
   \   000051   E9           MOV     A,R1
   \   000052   3400         ADDC    A,#0x0
   \   000054   F9           MOV     R1,A
   \   000055   E8           MOV     A,R0
   \   000056   FC           MOV     R4,A
   \   000057   E9           MOV     A,R1
   \   000058   FD           MOV     R5,A
   \   000059   8C82         MOV     DPL,R4
   \   00005B   8D83         MOV     DPH,R5
   \   00005D   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000060   E8           MOV     A,R0
   \   000061   7001         JNZ     ??afRegisterExtended_4
   \   000063   E9           MOV     A,R1
   \                     ??afRegisterExtended_4:
   \   000064   70E7         JNZ     ??CrossCallReturnLabel_45
    189          
    190                // Add new entry to end of list
    191                epSearch->nextDesc = ep;
   \   000066   8C82         MOV     DPL,R4
   \   000068   8D83         MOV     DPH,R5
   \                     ??afRegisterExtended_3:
   \   00006A   EA           MOV     A,R2
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   EB           MOV     A,R3
   \   00006E   F0           MOVX    @DPTR,A
    192              }
    193            }
    194          
    195            return ep;
   \                     ??afRegisterExtended_1:
   \   00006F                REQUIRE ?Subroutine26
   \   00006F                ; // Fall through to label ?Subroutine26
    196          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    197          
    198          /*********************************************************************
    199           * @fn      afRegister
    200           *
    201           * @brief   Register an Application's EndPoint description.
    202           *
    203           * @param   epDesc - pointer to the Application's endpoint descriptor.
    204           *
    205           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    206           *
    207           * @return  afStatus_SUCCESS - Registered
    208           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    209           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    212          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    213            epList_t *ep;
    214            
    215            // Look for duplicate endpoint
    216            if ( afFindEndPointDescList( epDesc->endPoint ) )
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   ??afFindEndPointDescList?relay
   \   000012   EA           MOV     A,R2
   \   000013   7001         JNZ     ??afRegister_0
   \   000015   EB           MOV     A,R3
   \                     ??afRegister_0:
   \   000016   6004         JZ      ??afRegister_1
    217              return ( afStatus_INVALID_PARAMETER );
   \   000018   7902         MOV     R1,#0x2
   \   00001A   8017         SJMP    ??afRegister_2
    218            
    219            ep = afRegisterExtended( epDesc, NULL );
    220          
    221            return ((ep == NULL) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_1:
   \   00001C                ; Setup parameters for call to function afRegisterExtended
   \   00001C   7C00         MOV     R4,#0x0
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   ??afRegisterExtended?relay
   \   000027   EA           MOV     A,R2
   \   000028   7001         JNZ     ??afRegister_3
   \   00002A   EB           MOV     A,R3
   \                     ??afRegister_3:
   \   00002B   7004         JNZ     ??afRegister_4
   \   00002D   7910         MOV     R1,#0x10
   \   00002F   8002         SJMP    ??afRegister_2
   \                     ??afRegister_4:
   \   000031   7900         MOV     R1,#0x0
   \                     ??afRegister_2:
   \   000033   02....       LJMP    ?Subroutine27 & 0xFFFF
    222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    223          
    224          
    225          /*********************************************************************
    226           * @fn          afDataConfirm
    227           *
    228           * @brief       This function will generate the Data Confirm back to
    229           *              the application.
    230           *
    231           * @param       endPoint - confirm end point
    232           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    233           * @param       status - status of APSDE_DATA_REQUEST
    234           *
    235           * @return      none
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    238          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8A..         MOV     ?V0 + 1,R2
   \   000009   8B..         MOV     ?V0 + 2,R3
    239            endPointDesc_t *epDesc;
    240            afDataConfirm_t *msgPtr;
    241          
    242            // Find the endpoint description
    243            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL   ??afFindEndPointDesc?relay
   \   00000E   8A..         MOV     ?V0 + 4,R2
   \   000010   8B..         MOV     ?V0 + 5,R3
   \   000012   AE..         MOV     R6,?V0 + 4
   \   000014   AF..         MOV     R7,?V0 + 5
    244            if ( epDesc == NULL )
   \   000016   EE           MOV     A,R6
   \   000017   7001         JNZ     ??afDataConfirm_0
   \   000019   EF           MOV     A,R7
   \                     ??afDataConfirm_0:
   \   00001A   602D         JZ      ??CrossCallReturnLabel_11
    245              return;
    246          
    247            // Determine the incoming command type
    248            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   00001C                ; Setup parameters for call to function osal_msg_allocate
   \   00001C   7A04         MOV     R2,#0x4
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   12....       LCALL   ??osal_msg_allocate?relay
    249            if ( msgPtr )
   \   000023   EA           MOV     A,R2
   \   000024   7001         JNZ     ??afDataConfirm_1
   \   000026   EB           MOV     A,R3
   \                     ??afDataConfirm_1:
   \   000027   6020         JZ      ??CrossCallReturnLabel_11
    250            {
    251              // Build the Data Confirm message
    252              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000029   74FD         MOV     A,#-0x3
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   F0           MOVX    @DPTR,A
    253              msgPtr->hdr.status = status;
   \   000030   A3           INC     DPTR
   \   000031   E5..         MOV     A,?V0 + 2
   \   000033   F0           MOVX    @DPTR,A
    254              msgPtr->endpoint = endPoint;
   \   000034   8A82         MOV     DPL,R2
   \   000036   8B83         MOV     DPH,R3
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E5..         MOV     A,?V0 + 0
   \   00003C   12....       LCALL   ?Subroutine0 & 0xFFFF
    255              msgPtr->transID = transID;
   \                     ??CrossCallReturnLabel_2:
   \   00003F   E5..         MOV     A,?V0 + 1
   \   000041   F0           MOVX    @DPTR,A
    256          
    257          #if defined ( MT_AF_CB_FUNC )
    258              /* If MT has subscribed for this callback, don't send as a message. */
    259              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    260              {
    261                /* Send callback if it's subscribed */
    262                MT_AfDataConfirm ((void *)msgPtr);
    263                /* Release the memory. */
    264                osal_msg_deallocate( (void *)msgPtr );
    265              }
    266              else
    267          #endif
    268              {
    269                /* send message through task message */
    270                osal_msg_send( *(epDesc->task_id), (byte *)msgPtr );
   \   000042                ; Setup parameters for call to function osal_msg_send
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   12....       LCALL   ?Subroutine5 & 0xFFFF
    271              }
    272            }
   \                     ??CrossCallReturnLabel_11:
   \   000049   7F06         MOV     R7,#0x6
   \   00004B   02....       LJMP    ?BANKED_LEAVE_XDATA
    273          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??osal_msg_send?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    274          
    275          /*********************************************************************
    276           * @fn          afIncomingData
    277           *
    278           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    279           *
    280           * @param       aff  - pointer to APS frame format
    281           * @param       SrcAddress  - Source address
    282           * @param       sig - incoming message's link quality
    283           * @param       SecurityUse - Security enable/disable
    284           *
    285           * @return      none
    286           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    288                               NLDE_Signal_t *sig, byte SecurityUse, uint32 timestamp )
    289          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   8A..         MOV     ?V0 + 8,R2
   \   00001E   8B..         MOV     ?V0 + 9,R3
   \   000020   741B         MOV     A,#0x1b
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 10,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 11,A
   \   00002C   741F         MOV     A,#0x1f
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   78..         MOV     R0,#?V0 + 4
   \   000033   12....       LCALL   ?L_MOV_X
    290            endPointDesc_t *epDesc = NULL;
    291            epList_t *pList = epList;
   \   000036   90....       MOV     DPTR,#epList
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F5..         MOV     ?V0 + 0,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F5..         MOV     ?V0 + 1,A
    292          #if !defined ( APS_NO_GROUPS )    
    293            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \   000040   75..FE       MOV     ?V0 + 2,#-0x2
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   E0           MOVX    A,@DPTR
   \   000048   540C         ANL     A,#0xc
   \   00004A   640C         XRL     A,#0xc
   \   00004C   701A         JNZ     ??afIncomingData_0
    294          #endif  
    295          
    296            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    297            {
    298          #if !defined ( APS_NO_GROUPS )    
    299              // Find the first endpoint for this group
    300              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   00004E                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   00004E   79FE         MOV     R1,#-0x2
   \   000050   12....       LCALL   ?Subroutine3 & 0xFFFF
    301              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \                     ??CrossCallReturnLabel_5:
   \   000053   7003         JNZ     $+5
   \   000055   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    302                return;   // No endpoint found
    303          
    304              epDesc = afFindEndPointDesc( grpEp );
   \   000058                ; Setup parameters for call to function afFindEndPointDesc
   \   000058   12....       LCALL   ?Subroutine18 & 0xFFFF
    305              if ( epDesc == NULL )
   \                     ??CrossCallReturnLabel_33:
   \   00005B   7001         JNZ     ??afIncomingData_2
   \   00005D   EF           MOV     A,R7
   \                     ??afIncomingData_2:
   \   00005E   7003         JNZ     $+5
   \   000060   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    306                return;   // Endpoint descriptor not found
    307          
    308              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_3:
   \   000063                ; Setup parameters for call to function afFindEndPointDescList
   \   000063   12....       LCALL   ?Subroutine13 & 0xFFFF
    309          #else
    310              return; // Not supported
    311          #endif    
    312            }
   \                     ??CrossCallReturnLabel_27:
   \   000066   8038         SJMP    ??afIncomingData_4
    313            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F9           MOV     R1,A
   \   00006C   74FF         MOV     A,#-0x1
   \   00006E   69           XRL     A,R1
   \   00006F   700D         JNZ     ??afIncomingData_5
    314            {
    315              // Set the list
    316              if ( pList != NULL )
   \   000071   E5..         MOV     A,?V0 + 0
   \   000073   7002         JNZ     ??afIncomingData_6
   \   000075   E5..         MOV     A,?V0 + 1
   \                     ??afIncomingData_6:
   \   000077   7003         JNZ     $+5
   \   000079   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    317              {
    318                epDesc = pList->epDesc;
   \   00007C   8017         SJMP    ??afIncomingData_7
    319              }
    320            }
    321            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_5:
   \   00007E                ; Setup parameters for call to function afFindEndPointDesc
   \   00007E   12....       LCALL   ??afFindEndPointDesc?relay
   \   000081   8A..         MOV     ?V0 + 12,R2
   \   000083   8B..         MOV     ?V0 + 13,R3
   \   000085   A8..         MOV     R0,?V0 + 12
   \   000087   A9..         MOV     R1,?V0 + 13
   \   000089   E8           MOV     A,R0
   \   00008A   FE           MOV     R6,A
   \   00008B   E9           MOV     A,R1
   \   00008C   FF           MOV     R7,A
   \   00008D   E8           MOV     A,R0
   \   00008E   7001         JNZ     ??afIncomingData_8
   \   000090   E9           MOV     A,R1
   \                     ??afIncomingData_8:
   \   000091   600D         JZ      ??afIncomingData_4
   \   000093   80CE         SJMP    ??afIncomingData_3
    322            {
    323              pList = afFindEndPointDescList( epDesc->endPoint );
    324            }
    325          
    326            while ( epDesc )
    327            {
    328              uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
    329              
    330              if ( pList->pfnDescCB )
    331              {
    332                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    333                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    334                if ( pID )
    335                {
    336                  epProfileID = *pID;
    337                  osal_mem_free( pID );
    338                }
    339              }
    340              else if ( epDesc->simpleDesc )
    341              {
    342                epProfileID = epDesc->simpleDesc->AppProfId;
    343              }
    344          
    345              if ( (aff->ProfileID == epProfileID) ||
    346                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
    347              {
    348                {
    349                  // Save original endpoint
    350                  uint8 endpoint = aff->DstEndPoint;
    351                  
    352                  // overwrite with descriptor's endpoint
    353                  aff->DstEndPoint = epDesc->endPoint;   
    354                  
    355                  afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig, SecurityUse, timestamp );
    356                  
    357                  // Restore with original endpoint
    358                  aff->DstEndPoint = endpoint;
    359                }
    360              }
    361          
    362              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    363              {
    364          #if !defined ( APS_NO_GROUPS )      
    365                // Find the next endpoint for this group
    366                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    367                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    368                  return;   // No endpoint found
    369          
    370                epDesc = afFindEndPointDesc( grpEp );
    371                if ( epDesc == NULL )
    372                  return;   // Endpoint descriptor not found
    373          
    374                pList = afFindEndPointDescList( epDesc->endPoint );
    375          #else
    376                return;
    377          #endif      
    378              }
    379              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    380              {
    381                pList = pList->nextDesc;
    382                if ( pList )
    383                  epDesc = pList->epDesc;
   \                     ??afIncomingData_7:
   \   000095   85..82       MOV     DPL,?V0 + 0
   \   000098   85..83       MOV     DPH,?V0 + 1
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   FE           MOV     R6,A
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FF           MOV     R7,A
   \                     ??afIncomingData_4:
   \   0000A0   EE           MOV     A,R6
   \   0000A1   7001         JNZ     ??afIncomingData_9
   \   0000A3   EF           MOV     A,R7
   \                     ??afIncomingData_9:
   \   0000A4   7003         JNZ     $+5
   \   0000A6   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000A9   8018         SJMP    ??CrossCallReturnLabel_28
   \                     ??afIncomingData_10:
   \   0000AB                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0000AB   A9..         MOV     R1,?V0 + 2
   \   0000AD   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000B0   7003         JNZ     $+5
   \   0000B2   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000B5                ; Setup parameters for call to function afFindEndPointDesc
   \   0000B5   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000B8   7001         JNZ     ??afIncomingData_11
   \   0000BA   EF           MOV     A,R7
   \                     ??afIncomingData_11:
   \   0000BB   7003         JNZ     $+5
   \   0000BD   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000C0                ; Setup parameters for call to function afFindEndPointDescList
   \   0000C0   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000C3   75..FF       MOV     ?V0 + 14,#-0x1
   \   0000C6   75..FF       MOV     ?V0 + 15,#-0x1
   \   0000C9   85..82       MOV     DPL,?V0 + 0
   \   0000CC   85..83       MOV     DPH,?V0 + 1
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000D5   7001         JNZ     ??afIncomingData_12
   \   0000D7   ED           MOV     A,R5
   \                     ??afIncomingData_12:
   \   0000D8   8E82         MOV     DPL,R6
   \   0000DA   8F83         MOV     DPH,R7
   \   0000DC   6018         JZ      ??afIncomingData_13
   \   0000DE                ; Setup parameters for indirect call
   \   0000DE   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000E1   12....       LCALL   ?CALL_IND
   \   0000E4   EA           MOV     A,R2
   \   0000E5   7001         JNZ     ??afIncomingData_14
   \   0000E7   EB           MOV     A,R3
   \                     ??afIncomingData_14:
   \   0000E8   6019         JZ      ??CrossCallReturnLabel_8
   \   0000EA   8A82         MOV     DPL,R2
   \   0000EC   8B83         MOV     DPH,R3
   \   0000EE   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000F1                ; Setup parameters for call to function osal_mem_free
   \   0000F1   12....       LCALL   ??osal_mem_free?relay
   \   0000F4   800D         SJMP    ??CrossCallReturnLabel_8
   \                     ??afIncomingData_13:
   \   0000F6   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000F9   7002         JNZ     ??afIncomingData_15
   \   0000FB   E583         MOV     A,DPH
   \                     ??afIncomingData_15:
   \   0000FD   6004         JZ      ??CrossCallReturnLabel_8
   \   0000FF   A3           INC     DPTR
   \   000100   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000103   85..82       MOV     DPL,?V0 + 8
   \   000106   85..83       MOV     DPH,?V0 + 9
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000114   E0           MOVX    A,@DPTR
   \   000115   FA           MOV     R2,A
   \   000116   E5..         MOV     A,?V0 + 14
   \   000118   68           XRL     A,R0
   \   000119   7003         JNZ     ??afIncomingData_16
   \   00011B   E5..         MOV     A,?V0 + 15
   \   00011D   69           XRL     A,R1
   \                     ??afIncomingData_16:
   \   00011E   600B         JZ      ??afIncomingData_17
   \   000120   EA           MOV     A,R2
   \   000121   7059         JNZ     ??afIncomingData_18
   \   000123   7402         MOV     A,#0x2
   \   000125   68           XRL     A,R0
   \   000126   7001         JNZ     ??afIncomingData_19
   \   000128   E9           MOV     A,R1
   \                     ??afIncomingData_19:
   \   000129   7051         JNZ     ??afIncomingData_18
   \                     ??afIncomingData_17:
   \   00012B   85..82       MOV     DPL,?V0 + 8
   \   00012E   85..83       MOV     DPH,?V0 + 9
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   F5..         MOV     ?V0 + 3,A
   \   000136   EA           MOV     A,R2
   \   000137   85..82       MOV     DPL,?V0 + 8
   \   00013A   85..83       MOV     DPH,?V0 + 9
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   F0           MOVX    @DPTR,A
   \   000140                ; Setup parameters for call to function afBuildMSGIncoming
   \   000140   78..         MOV     R0,#?V0 + 4
   \   000142   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000145   7421         MOV     A,#0x21
   \   000147   12....       LCALL   ?XSTACK_DISP0_8
   \   00014A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00014D   78..         MOV     R0,#?V0 + 10
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000152   7409         MOV     A,#0x9
   \   000154   12....       LCALL   ?XSTACK_DISP0_8
   \   000157   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00015A   740A         MOV     A,#0xa
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   F9           MOV     R1,A
   \   000161   EE           MOV     A,R6
   \   000162   FC           MOV     R4,A
   \   000163   EF           MOV     A,R7
   \   000164   FD           MOV     R5,A
   \   000165   AA..         MOV     R2,?V0 + 8
   \   000167   AB..         MOV     R3,?V0 + 9
   \   000169   12....       LCALL   ??afBuildMSGIncoming?relay
   \   00016C   740A         MOV     A,#0xa
   \   00016E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000171   85..82       MOV     DPL,?V0 + 8
   \   000174   85..83       MOV     DPH,?V0 + 9
   \   000177   A3           INC     DPTR
   \   000178   A3           INC     DPTR
   \   000179   E5..         MOV     A,?V0 + 3
   \   00017B   F0           MOVX    @DPTR,A
   \                     ??afIncomingData_18:
   \   00017C   85..82       MOV     DPL,?V0 + 8
   \   00017F   85..83       MOV     DPH,?V0 + 9
   \   000182   E0           MOVX    A,@DPTR
   \   000183   540C         ANL     A,#0xc
   \   000185   640C         XRL     A,#0xc
   \   000187   7003         JNZ     $+5
   \   000189   02....       LJMP    ??afIncomingData_10 & 0xFFFF
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   64FF         XRL     A,#0xff
   \   000191   701D         JNZ     ??afIncomingData_1
   \   000193   85..82       MOV     DPL,?V0 + 0
   \   000196   85..83       MOV     DPH,?V0 + 1
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   A3           INC     DPTR
   \   00019D   A3           INC     DPTR
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   F5..         MOV     ?V0 + 0,A
   \   0001A1   A3           INC     DPTR
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   F5..         MOV     ?V0 + 1,A
   \   0001A5   E5..         MOV     A,?V0 + 0
   \   0001A7   7002         JNZ     ??afIncomingData_20
   \   0001A9   E5..         MOV     A,?V0 + 1
   \                     ??afIncomingData_20:
   \   0001AB   6003         JZ      $+5
   \   0001AD   02....       LJMP    ??afIncomingData_7 & 0xFFFF
    384                else
    385                  epDesc = NULL;
   \                     ??afIncomingData_1:
   \   0001B0   7403         MOV     A,#0x3
   \   0001B2                REQUIRE ?Subroutine28
   \   0001B2                ; // Fall through to label ?Subroutine28
    386              }
    387              else
    388                epDesc = NULL;
    389            }
    390          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ??afFindEndPointDesc?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   AE..         MOV     R6,?V0 + 0
   \   000009   AF..         MOV     R7,?V0 + 1
   \   00000B   EE           MOV     A,R6
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   12....       LCALL   ??afFindEndPointDescList?relay
   \   000009   8A..         MOV     ?V0 + 0,R2
   \   00000B   8B..         MOV     ?V0 + 1,R3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FB           MOV     R3,A
   \   000009   12....       LCALL   ??aps_FindGroupForEndpoint?relay
   \   00000C   E9           MOV     A,R1
   \   00000D   F5..         MOV     ?V0 + 2,A
   \   00000F   74FE         MOV     A,#-0x2
   \   000011   65..         XRL     A,?V0 + 2
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 14,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 15,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   7902         MOV     R1,#0x2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003   E8           MOV     A,R0
   \   000004   FC           MOV     R4,A
   \   000005   E9           MOV     A,R1
   \   000006   FD           MOV     R5,A
   \   000007   EC           MOV     A,R4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   E582         MOV     A,DPL
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   22           RET
    391          
    392          /*********************************************************************
    393           * @fn          afBuildMSGIncoming
    394           *
    395           * @brief       Build the message for the app
    396           *
    397           * @param
    398           *
    399           * @return      pointer to next in data buffer
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    402                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig, 
    403                           byte SecurityUse, uint32 timestamp )
    404          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   8A..         MOV     ?V0 + 0,R2
   \   000017   8B..         MOV     ?V0 + 1,R3
   \   000019   89..         MOV     ?V0 + 8,R1
   \   00001B   741E         MOV     A,#0x1e
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 3,A
   \   000027   7420         MOV     A,#0x20
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   78..         MOV     R0,#?V0 + 4
   \   00002E   12....       LCALL   ?L_MOV_X
    405            afIncomingMSGPacket_t *MSGpkt;
    406            const byte len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    407            byte *asdu = aff->asdu;
   \   000031   EA           MOV     A,R2
   \   000032   240E         ADD     A,#0xe
   \   000034   F582         MOV     DPL,A
   \   000036   EB           MOV     A,R3
   \   000037   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00003A   12....       LCALL   ?Subroutine4 & 0xFFFF
    408            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \                     ??CrossCallReturnLabel_9:
   \   00003D   EA           MOV     A,R2
   \   00003E   2410         ADD     A,#0x10
   \   000040   F5..         MOV     ?V0 + 10,A
   \   000042   EB           MOV     A,R3
   \   000043   3400         ADDC    A,#0x0
   \   000045   F5..         MOV     ?V0 + 11,A
   \   000047                ; Setup parameters for call to function osal_msg_allocate
   \   000047   85..82       MOV     DPL,?V0 + 10
   \   00004A   F583         MOV     DPH,A
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   2423         ADD     A,#0x23
   \   00004F   FA           MOV     R2,A
   \   000050   7B00         MOV     R3,#0x0
   \   000052   12....       LCALL   ??osal_msg_allocate?relay
   \   000055   8A..         MOV     ?V0 + 12,R2
   \   000057   8B..         MOV     ?V0 + 13,R3
   \   000059   AE..         MOV     R6,?V0 + 12
   \   00005B   AF..         MOV     R7,?V0 + 13
    409          
    410            if ( MSGpkt == NULL )
   \   00005D   EE           MOV     A,R6
   \   00005E   7001         JNZ     ??afBuildMSGIncoming_0
   \   000060   EF           MOV     A,R7
   \                     ??afBuildMSGIncoming_0:
   \   000061   7003         JNZ     $+5
   \   000063   02....       LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
    411            {
    412              return;
    413            }
    414          
    415            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000066   741A         MOV     A,#0x1a
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   F0           MOVX    @DPTR,A
    416            MSGpkt->groupId = aff->GroupID;
   \   00006D   85..82       MOV     DPL,?V0 + 0
   \   000070   85..83       MOV     DPH,?V0 + 1
   \   000073   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000076   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    417            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_58:
   \   000079   85..82       MOV     DPL,?V0 + 0
   \   00007C   85..83       MOV     DPH,?V0 + 1
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    418            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_59:
   \   000089                ; Setup parameters for call to function afCopyAddress
   \   000089   741A         MOV     A,#0x1a
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   FC           MOV     R4,A
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   FD           MOV     R5,A
   \   000093   EE           MOV     A,R6
   \   000094   2406         ADD     A,#0x6
   \   000096   FA           MOV     R2,A
   \   000097   EF           MOV     A,R7
   \   000098   3400         ADDC    A,#0x0
   \   00009A   FB           MOV     R3,A
   \   00009B   12....       LCALL   ??afCopyAddress?relay
    419            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   00009E   85..82       MOV     DPL,?V0 + 0
   \   0000A1   85..83       MOV     DPH,?V0 + 1
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   C0E0         PUSH    A
   \   0000AA   EE           MOV     A,R6
   \   0000AB   240F         ADD     A,#0xf
   \   0000AD   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0000B0   D0E0         POP     A
   \   0000B2   F0           MOVX    @DPTR,A
    420            MSGpkt->endPoint = epDesc->endPoint;
   \   0000B3   85..82       MOV     DPL,?XSP + 0
   \   0000B6   85..83       MOV     DPH,?XSP + 1
   \   0000B9   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000BC   C0E0         PUSH    A
   \   0000BE   EE           MOV     A,R6
   \   0000BF   2414         ADD     A,#0x14
   \   0000C1   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000C4   D0E0         POP     A
   \   0000C6   F0           MOVX    @DPTR,A
    421            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000C7   E5..         MOV     A,?V0 + 0
   \   0000C9   240C         ADD     A,#0xc
   \   0000CB   F582         MOV     DPL,A
   \   0000CD   E5..         MOV     A,?V0 + 1
   \   0000CF   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   C0E0         PUSH    A
   \   0000D5   EE           MOV     A,R6
   \   0000D6   2415         ADD     A,#0x15
   \   0000D8   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0000DB   D0E0         POP     A
   \   0000DD   F0           MOVX    @DPTR,A
    422            MSGpkt->LinkQuality = sig->LinkQuality;
   \   0000DE   85..82       MOV     DPL,?V0 + 2
   \   0000E1   85..83       MOV     DPH,?V0 + 3
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   C0E0         PUSH    A
   \   0000E7   EE           MOV     A,R6
   \   0000E8   2416         ADD     A,#0x16
   \   0000EA   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0000ED   D0E0         POP     A
   \   0000EF   12....       LCALL   ?Subroutine20 & 0xFFFF
    423            MSGpkt->correlation = sig->correlation;
   \                     ??CrossCallReturnLabel_37:
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   C0E0         PUSH    A
   \   0000F5   EE           MOV     A,R6
   \   0000F6   2417         ADD     A,#0x17
   \   0000F8   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000FB   D0E0         POP     A
   \   0000FD   12....       LCALL   ?Subroutine2 & 0xFFFF
    424            MSGpkt->rssi = sig->rssi;
   \                     ??CrossCallReturnLabel_3:
   \   000100   E0           MOVX    A,@DPTR
   \   000101   C0E0         PUSH    A
   \   000103   EE           MOV     A,R6
   \   000104   2418         ADD     A,#0x18
   \   000106   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000109   D0E0         POP     A
   \   00010B   F0           MOVX    @DPTR,A
    425            MSGpkt->SecurityUse = SecurityUse;
   \   00010C   EE           MOV     A,R6
   \   00010D   2419         ADD     A,#0x19
   \   00010F   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000112   E5..         MOV     A,?V0 + 8
   \   000114   F0           MOVX    @DPTR,A
    426            MSGpkt->timestamp = timestamp;
   \   000115   EE           MOV     A,R6
   \   000116   241A         ADD     A,#0x1a
   \   000118   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00011B   78..         MOV     R0,#?V0 + 4
   \   00011D   12....       LCALL   ?L_MOV_TO_X
    427            MSGpkt->macDestAddr = aff->macDestAddr;
   \   000120   85..82       MOV     DPL,?V0 + 0
   \   000123   85..83       MOV     DPH,?V0 + 1
   \   000126   A3           INC     DPTR
   \   000127   A3           INC     DPTR
   \   000128   A3           INC     DPTR
   \   000129   A3           INC     DPTR
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000132   EE           MOV     A,R6
   \   000133   2412         ADD     A,#0x12
   \   000135   12....       LCALL   ?Subroutine1 & 0xFFFF
    428            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_65:
   \   000138   741C         MOV     A,#0x1c
   \   00013A   12....       LCALL   ?XSTACK_DISP0_8
   \   00013D   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000140   EE           MOV     A,R6
   \   000141   2410         ADD     A,#0x10
   \   000143   12....       LCALL   ?Subroutine1 & 0xFFFF
    429            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_66:
   \   000146   EE           MOV     A,R6
   \   000147   241E         ADD     A,#0x1e
   \   000149   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00014C   E4           CLR     A
   \   00014D   F0           MOVX    @DPTR,A
    430            MSGpkt->cmd.DataLength = aff->asduLength;
   \   00014E   85..82       MOV     DPL,?V0 + 10
   \   000151   85..83       MOV     DPH,?V0 + 11
   \   000154   E0           MOVX    A,@DPTR
   \   000155   FC           MOV     R4,A
   \   000156   7D00         MOV     R5,#0x0
   \   000158   EE           MOV     A,R6
   \   000159   241F         ADD     A,#0x1f
   \   00015B   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00015E   EC           MOV     A,R4
   \   00015F   F0           MOVX    @DPTR,A
   \   000160   A3           INC     DPTR
   \   000161   E4           CLR     A
   \   000162   F0           MOVX    @DPTR,A
    431          
    432            if ( MSGpkt->cmd.DataLength )
   \   000163   EE           MOV     A,R6
   \   000164   2421         ADD     A,#0x21
   \   000166   F8           MOV     R0,A
   \   000167   EF           MOV     A,R7
   \   000168   3400         ADDC    A,#0x0
   \   00016A   F9           MOV     R1,A
   \   00016B   E8           MOV     A,R0
   \   00016C   FA           MOV     R2,A
   \   00016D   E9           MOV     A,R1
   \   00016E   FB           MOV     R3,A
   \   00016F   EC           MOV     A,R4
   \   000170   7001         JNZ     ??afBuildMSGIncoming_1
   \   000172   E4           CLR     A
   \                     ??afBuildMSGIncoming_1:
   \   000173   602E         JZ      ??afBuildMSGIncoming_2
    433            {
    434              MSGpkt->cmd.Data = (byte *)(MSGpkt + 1);
   \   000175   EE           MOV     A,R6
   \   000176   2423         ADD     A,#0x23
   \   000178   08           INC     R0
   \   000179   08           INC     R0
   \   00017A   EF           MOV     A,R7
   \   00017B   3400         ADDC    A,#0x0
   \   00017D   F9           MOV     R1,A
   \   00017E   8A82         MOV     DPL,R2
   \   000180   8B83         MOV     DPH,R3
   \   000182   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    435              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \                     ??CrossCallReturnLabel_60:
   \   000185                ; Setup parameters for call to function osal_memcpy
   \   000185   85....       MOV     ?V0 + 0,?V0 + 14
   \   000188   85....       MOV     ?V0 + 1,?V0 + 15
   \   00018B   8D..         MOV     ?V0 + 2,R5
   \   00018D   78..         MOV     R0,#?V0 + 0
   \   00018F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000192   8A82         MOV     DPL,R2
   \   000194   8B83         MOV     DPH,R3
   \   000196   12....       LCALL   ??Subroutine32_0 & 0xFFFF
    436            }
   \                     ??CrossCallReturnLabel_67:
   \   000199   12....       LCALL   ??osal_memcpy?relay
   \   00019C   7403         MOV     A,#0x3
   \   00019E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A1   8008         SJMP    ??afBuildMSGIncoming_3
    437            else
    438            {
    439              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_2:
   \   0001A3   8A82         MOV     DPL,R2
   \   0001A5   8B83         MOV     DPH,R3
   \   0001A7   E4           CLR     A
   \   0001A8   F0           MOVX    @DPTR,A
   \   0001A9   A3           INC     DPTR
   \   0001AA   F0           MOVX    @DPTR,A
    440            }
    441          
    442          #if defined ( MT_AF_CB_FUNC )
    443            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    444            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    445            {
    446              MT_AfIncomingMsg( (void *)MSGpkt );
    447              // Release the memory.
    448              osal_msg_deallocate( (void *)MSGpkt );
    449            }
    450            else
    451          #endif
    452            {
    453              // Send message through task message.
    454              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_3:
   \   0001AB                ; Setup parameters for call to function osal_msg_send
   \   0001AB   EE           MOV     A,R6
   \   0001AC   FA           MOV     R2,A
   \   0001AD   EF           MOV     A,R7
   \   0001AE   FB           MOV     R3,A
   \   0001AF   85..82       MOV     DPL,?XSP + 0
   \   0001B2   85..83       MOV     DPH,?XSP + 1
   \   0001B5   12....       LCALL   ?Subroutine7 & 0xFFFF
    455            }
   \                     ??CrossCallReturnLabel_16:
   \   0001B8   12....       LCALL   ?Subroutine5 & 0xFFFF
    456          }
   \                     ??CrossCallReturnLabel_12:
   \   0001BB   7402         MOV     A,#0x2
   \   0001BD   02....       LJMP    ?Subroutine28 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine30_0
   \   000001                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007                REQUIRE ??Subroutine31_0
   \   000007                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine33_0
   \   000003                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
    457          
    458          /*********************************************************************
    459           * @fn      AF_DataRequest
    460           *
    461           * @brief   Common functionality for invoking APSDE_DataReq() for both
    462           *          SendMulti and MSG-Send.
    463           *
    464           * input parameters
    465           *
    466           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    467           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    468           * @param   cID - A valid cluster ID as specified by the Profile.
    469           * @param   len - Number of bytes of data pointed to by next param.
    470           * @param  *buf - A pointer to the data bytes to send.
    471           * @param  *transID - A pointer to a byte which can be modified and which will
    472           *                    be used as the transaction sequence number of the msg.
    473           * @param   options - Valid bit mask of Tx options.
    474           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    475           *
    476           * output parameters
    477           *
    478           * @param  *transID - Incremented by one if the return value is success.
    479           *
    480           * @return  afStatus_t - See previous definition of afStatus_... types.
    481           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    482          uint8 AF_DataRequestDiscoverRoute = TRUE;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    484                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    485                                     uint8 options, uint8 radius )
    486          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V0 + 4,R1
   \   000014   7436         MOV     A,#0x36
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 12,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 13,A
   \   000020   7438         MOV     A,#0x38
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 8,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 9,A
   \   00002C   743A         MOV     A,#0x3a
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000034   743C         MOV     A,#0x3c
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F5..         MOV     ?V0 + 6,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F5..         MOV     ?V0 + 7,A
   \   000040   743E         MOV     A,#0x3e
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F5..         MOV     ?V0 + 5,A
    487            pDescCB pfnDescCB;
    488            ZStatus_t stat;
    489            APSDE_DataReq_t req;
    490            afDataReqMTU_t mtu;
    491          
    492            // Verify source end point
    493            if ( srcEP == NULL )
   \   000048   EE           MOV     A,R6
   \   000049   7001         JNZ     ??AF_DataRequest_0
   \   00004B   EF           MOV     A,R7
   \                     ??AF_DataRequest_0:
   \   00004C   7005         JNZ     ??AF_DataRequest_1
    494            {
    495              return afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_2:
   \   00004E   7902         MOV     R1,#0x2
   \   000050   02....       LJMP    ??AF_DataRequest_3 & 0xFFFF
    496            }
    497          
    498          #if !defined( REFLECTOR )
    499            if ( dstAddr->addrMode == afAddrNotPresent )
    500            {
    501              return afStatus_INVALID_PARAMETER;
    502            }
    503          #endif
    504            
    505            // Check if route is available before sending data 
    506            if ( options & AF_LIMIT_CONCENTRATOR  )
   \                     ??AF_DataRequest_1:
   \   000053   EA           MOV     A,R2
   \   000054   2408         ADD     A,#0x8
   \   000056   F5..         MOV     ?V0 + 0,A
   \   000058   EB           MOV     A,R3
   \   000059   3400         ADDC    A,#0x0
   \   00005B   F5..         MOV     ?V0 + 1,A
   \   00005D   E9           MOV     A,R1
   \   00005E   A2E3         MOV     C,0xE0 /* A   */.3
   \   000060   502E         JNC     ??AF_DataRequest_4
    507            {
    508              if ( dstAddr->addrMode != afAddr16Bit )
   \   000062   85..82       MOV     DPL,?V0 + 0
   \   000065   85..83       MOV     DPH,?V0 + 1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   6402         XRL     A,#0x2
   \   00006B   70E1         JNZ     ??AF_DataRequest_2
    509              {
    510                return ( afStatus_INVALID_PARAMETER );
    511              }
    512               
    513              // First, make sure the destination is not its self, then check for an existing route.
    514              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    515                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \   00006D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00006D   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000070   8A..         MOV     ?V0 + 10,R2
   \   000072   8B..         MOV     ?V0 + 11,R3
   \   000074   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000077   E5..         MOV     A,?V0 + 10
   \   000079   6A           XRL     A,R2
   \   00007A   7003         JNZ     ??AF_DataRequest_5
   \   00007C   E5..         MOV     A,?V0 + 11
   \   00007E   6B           XRL     A,R3
   \                     ??AF_DataRequest_5:
   \   00007F   600F         JZ      ??AF_DataRequest_4
   \   000081                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000081   7C03         MOV     R4,#0x3
   \   000083   7901         MOV     R1,#0x1
   \   000085   12....       LCALL   ??RTG_CheckRtStatus?relay
   \   000088   E9           MOV     A,R1
   \   000089   6005         JZ      ??AF_DataRequest_4
    516              {
    517                // A valid route to a concentrator wasn't found
    518                return ( afStatus_NO_ROUTE );
   \   00008B   79CD         MOV     R1,#-0x33
   \   00008D   02....       LJMP    ??AF_DataRequest_3 & 0xFFFF
    519              }
    520            } 
    521            
    522            // Validate broadcasting
    523            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    524                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_4:
   \   000090   85..82       MOV     DPL,?V0 + 0
   \   000093   85..83       MOV     DPH,?V0 + 1
   \   000096   E0           MOVX    A,@DPTR
   \   000097   FA           MOV     R2,A
   \   000098   7402         MOV     A,#0x2
   \   00009A   6A           XRL     A,R2
   \   00009B   6005         JZ      ??AF_DataRequest_6
   \   00009D   740F         MOV     A,#0xf
   \   00009F   6A           XRL     A,R2
   \   0000A0   7021         JNZ     ??AF_DataRequest_7
    525            {
    526              // Check for valid broadcast values
    527              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_6:
   \   0000A2                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   0000A2   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000A5   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   0000A8   E9           MOV     A,R1
   \   0000A9   600B         JZ      ??AF_DataRequest_8
    528              {
    529                // Force mode to broadcast
    530                dstAddr->addrMode = afAddrBroadcast;
   \   0000AB   740F         MOV     A,#0xf
   \   0000AD   85..82       MOV     DPL,?V0 + 0
   \   0000B0   85..83       MOV     DPH,?V0 + 1
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4   801D         SJMP    ??AF_DataRequest_9
    531              }
    532              else
    533              {
    534                // Address is not a valid broadcast type
    535                if ( dstAddr->addrMode == afAddrBroadcast )
   \                     ??AF_DataRequest_8:
   \   0000B6   85..82       MOV     DPL,?V0 + 0
   \   0000B9   85..83       MOV     DPH,?V0 + 1
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   640F         XRL     A,#0xf
   \   0000BF   7012         JNZ     ??AF_DataRequest_9
   \   0000C1   808B         SJMP    ??AF_DataRequest_2
    536                {
    537                  return afStatus_INVALID_PARAMETER;
    538                }
    539              }
    540            }
    541            else if ( dstAddr->addrMode != afAddr64Bit &&
    542                      dstAddr->addrMode != afAddrGroup &&
    543                      dstAddr->addrMode != afAddrNotPresent )
   \                     ??AF_DataRequest_7:
   \   0000C3   7403         MOV     A,#0x3
   \   0000C5   6A           XRL     A,R2
   \   0000C6   600B         JZ      ??AF_DataRequest_9
   \   0000C8   7401         MOV     A,#0x1
   \   0000CA   6A           XRL     A,R2
   \   0000CB   6006         JZ      ??AF_DataRequest_9
   \   0000CD   EA           MOV     A,R2
   \   0000CE   6003         JZ      $+5
   \   0000D0   02....       LJMP    ??AF_DataRequest_2 & 0xFFFF
    544            {
    545              return afStatus_INVALID_PARAMETER;
    546            }
    547            
    548            // Set destination address
    549            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_9:
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   C0E0         PUSH    A
   \   0000D6   740A         MOV     A,#0xa
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   D0E0         POP     A
   \   0000DD   F0           MOVX    @DPTR,A
    550            if ( dstAddr->addrMode == afAddr64Bit )
   \   0000DE   85..82       MOV     DPL,?V0 + 0
   \   0000E1   85..83       MOV     DPH,?V0 + 1
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   6403         XRL     A,#0x3
   \   0000E7   7012         JNZ     ??AF_DataRequest_10
    551              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   0000E9                ; Setup parameters for call to function sAddrExtCpy
   \   0000E9   AC..         MOV     R4,?V0 + 2
   \   0000EB   AD..         MOV     R5,?V0 + 3
   \   0000ED   7402         MOV     A,#0x2
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   AA82         MOV     R2,DPL
   \   0000F4   AB83         MOV     R3,DPH
   \   0000F6   12....       LCALL   ??sAddrExtCpy?relay
   \   0000F9   8011         SJMP    ??CrossCallReturnLabel_61
    552            else
    553              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_10:
   \   0000FB   85..82       MOV     DPL,?V0 + 2
   \   0000FE   85..83       MOV     DPH,?V0 + 3
   \   000101   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000104   7402         MOV     A,#0x2
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    554            
    555            req.profileID = ZDO_PROFILE_ID;
   \                     ??CrossCallReturnLabel_61:
   \   00010C   7411         MOV     A,#0x11
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   7402         MOV     A,#0x2
   \   000113   F0           MOVX    @DPTR,A
   \   000114   A3           INC     DPTR
   \   000115   E4           CLR     A
   \   000116   F0           MOVX    @DPTR,A
    556          
    557            if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   000117   90....       MOV     DPTR,#epList
   \   00011A   8002         SJMP    ??AF_DataRequest_11
   \                     ??AF_DataRequest_12:
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \                     ??AF_DataRequest_11:
   \   00011E   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000121   E8           MOV     A,R0
   \   000122   7001         JNZ     ??AF_DataRequest_13
   \   000124   E9           MOV     A,R1
   \                     ??AF_DataRequest_13:
   \   000125   6042         JZ      ??AF_DataRequest_14
   \   000127   8882         MOV     DPL,R0
   \   000129   8983         MOV     DPH,R1
   \   00012B   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00012E   EE           MOV     A,R6
   \   00012F   6A           XRL     A,R2
   \   000130   7002         JNZ     ??AF_DataRequest_15
   \   000132   EF           MOV     A,R7
   \   000133   6B           XRL     A,R3
   \                     ??AF_DataRequest_15:
   \   000134   8882         MOV     DPL,R0
   \   000136   8983         MOV     DPH,R1
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   70DF         JNZ     ??AF_DataRequest_12
   \   00013D   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000140   7001         JNZ     ??AF_DataRequest_16
   \   000142   ED           MOV     A,R5
   \                     ??AF_DataRequest_16:
   \   000143   6024         JZ      ??AF_DataRequest_14
    558            {
    559              uint16 *pID = (uint16 *)(pfnDescCB(
    560                                           AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   000145                ; Setup parameters for indirect call
   \   000145   8E82         MOV     DPL,R6
   \   000147   8F83         MOV     DPH,R7
   \   000149   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00014C   12....       LCALL   ?CALL_IND
    561              if ( pID )
   \   00014F   EA           MOV     A,R2
   \   000150   7001         JNZ     ??AF_DataRequest_17
   \   000152   EB           MOV     A,R3
   \                     ??AF_DataRequest_17:
   \   000153   602C         JZ      ??CrossCallReturnLabel_63
    562              {
    563                req.profileID = *pID;
   \   000155   8A82         MOV     DPL,R2
   \   000157   8B83         MOV     DPH,R3
   \   000159   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00015C   7411         MOV     A,#0x11
   \   00015E   12....       LCALL   ?XSTACK_DISP0_8
   \   000161   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    564                osal_mem_free( pID );
   \                     ??CrossCallReturnLabel_62:
   \   000164                ; Setup parameters for call to function osal_mem_free
   \   000164   12....       LCALL   ??osal_mem_free?relay
   \   000167   8018         SJMP    ??CrossCallReturnLabel_63
    565              }
    566            }
    567            else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_14:
   \   000169   8E82         MOV     DPL,R6
   \   00016B   8F83         MOV     DPH,R7
   \   00016D   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000170   7002         JNZ     ??AF_DataRequest_18
   \   000172   E583         MOV     A,DPH
   \                     ??AF_DataRequest_18:
   \   000174   600B         JZ      ??CrossCallReturnLabel_63
    568            {
    569              req.profileID = srcEP->simpleDesc->AppProfId;
   \   000176   12....       LCALL   ?Subroutine12 & 0xFFFF
    570            }
   \                     ??CrossCallReturnLabel_53:
   \   000179   7411         MOV     A,#0x11
   \   00017B   12....       LCALL   ?XSTACK_DISP0_8
   \   00017E   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    571          
    572            req.txOptions = 0;
   \                     ??CrossCallReturnLabel_63:
   \   000181   7417         MOV     A,#0x17
   \   000183   12....       LCALL   ?XSTACK_DISP0_8
   \   000186   E4           CLR     A
   \   000187   F0           MOVX    @DPTR,A
   \   000188   A3           INC     DPTR
   \   000189   F0           MOVX    @DPTR,A
    573          
    574            if ( ( options & AF_ACK_REQUEST              ) &&
    575                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    576                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   00018A   E5..         MOV     A,?V0 + 4
   \   00018C   A2E4         MOV     C,0xE0 /* A   */.4
   \   00018E   501C         JNC     ??AF_DataRequest_19
   \   000190   740A         MOV     A,#0xa
   \   000192   12....       LCALL   ?XSTACK_DISP0_8
   \   000195   E0           MOVX    A,@DPTR
   \   000196   FA           MOV     R2,A
   \   000197   740F         MOV     A,#0xf
   \   000199   6A           XRL     A,R2
   \   00019A   6010         JZ      ??AF_DataRequest_19
   \   00019C   7401         MOV     A,#0x1
   \   00019E   6A           XRL     A,R2
   \   00019F   600B         JZ      ??AF_DataRequest_19
    577            {
    578              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   0001A1   7417         MOV     A,#0x17
   \   0001A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A6   7404         MOV     A,#0x4
   \   0001A8   F0           MOVX    @DPTR,A
   \   0001A9   A3           INC     DPTR
   \   0001AA   E4           CLR     A
   \   0001AB   F0           MOVX    @DPTR,A
    579            }
    580          
    581            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_19:
   \   0001AC   E5..         MOV     A,?V0 + 4
   \   0001AE   A2E7         MOV     C,0xE0 /* A   */.7
   \   0001B0   500C         JNC     ??AF_DataRequest_20
    582            {
    583              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   0001B2   7417         MOV     A,#0x17
   \   0001B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   4410         ORL     A,#0x10
   \   0001BA   F0           MOVX    @DPTR,A
   \   0001BB   A3           INC     DPTR
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   F0           MOVX    @DPTR,A
    584            }
    585          
    586            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_20:
   \   0001BE   E5..         MOV     A,?V0 + 4
   \   0001C0   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001C2   5015         JNC     ??AF_DataRequest_21
    587            {
    588              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   0001C4   7417         MOV     A,#0x17
   \   0001C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   4401         ORL     A,#0x1
   \   0001CC   F0           MOVX    @DPTR,A
   \   0001CD   A3           INC     DPTR
   \   0001CE   E0           MOVX    A,@DPTR
   \   0001CF   F0           MOVX    @DPTR,A
    589              mtu.aps.secure = TRUE;
   \   0001D0   7401         MOV     A,#0x1
   \   0001D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D5   7401         MOV     A,#0x1
   \   0001D7   8006         SJMP    ??AF_DataRequest_22
    590            }
    591            else
    592            {
    593              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_21:
   \   0001D9   7401         MOV     A,#0x1
   \   0001DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DE   E4           CLR     A
   \                     ??AF_DataRequest_22:
   \   0001DF   F0           MOVX    @DPTR,A
    594            }
    595          
    596            mtu.kvp = FALSE;
   \   0001E0   E4           CLR     A
   \   0001E1   85..82       MOV     DPL,?XSP + 0
   \   0001E4   85..83       MOV     DPH,?XSP + 1
   \   0001E7   F0           MOVX    @DPTR,A
    597          
    598            req.transID       = *transID;
   \   0001E8   85..82       MOV     DPL,?V0 + 6
   \   0001EB   85..83       MOV     DPH,?V0 + 7
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   C0E0         PUSH    A
   \   0001F1   7419         MOV     A,#0x19
   \   0001F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F6   D0E0         POP     A
   \   0001F8   F0           MOVX    @DPTR,A
    599            req.srcEP         = srcEP->endPoint;
   \   0001F9   8E82         MOV     DPL,R6
   \   0001FB   8F83         MOV     DPH,R7
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   C0E0         PUSH    A
   \   000200   740B         MOV     A,#0xb
   \   000202   12....       LCALL   ?XSTACK_DISP0_8
   \   000205   D0E0         POP     A
   \   000207   12....       LCALL   ?Subroutine2 & 0xFFFF
    600            req.dstEP         = dstAddr->endPoint;
   \                     ??CrossCallReturnLabel_4:
   \   00020A   A3           INC     DPTR
   \   00020B   A3           INC     DPTR
   \   00020C   A3           INC     DPTR
   \   00020D   A3           INC     DPTR
   \   00020E   A3           INC     DPTR
   \   00020F   A3           INC     DPTR
   \   000210   A3           INC     DPTR
   \   000211   E0           MOVX    A,@DPTR
   \   000212   C0E0         PUSH    A
   \   000214   740C         MOV     A,#0xc
   \   000216   12....       LCALL   ?XSTACK_DISP0_8
   \   000219   D0E0         POP     A
   \   00021B   F0           MOVX    @DPTR,A
    601            req.clusterID     = cID;
   \   00021C   740F         MOV     A,#0xf
   \   00021E   12....       LCALL   ?XSTACK_DISP0_8
   \   000221   E5..         MOV     A,?V0 + 12
   \   000223   F0           MOVX    @DPTR,A
   \   000224   A3           INC     DPTR
   \   000225   E5..         MOV     A,?V0 + 13
   \   000227   F0           MOVX    @DPTR,A
    602            req.asduLen       = len;
   \   000228   7413         MOV     A,#0x13
   \   00022A   12....       LCALL   ?XSTACK_DISP0_8
   \   00022D   E5..         MOV     A,?V0 + 8
   \   00022F   F0           MOVX    @DPTR,A
   \   000230   A3           INC     DPTR
   \   000231   E5..         MOV     A,?V0 + 9
   \   000233   F0           MOVX    @DPTR,A
    603            req.asdu          = buf;
   \   000234   7415         MOV     A,#0x15
   \   000236   12....       LCALL   ?XSTACK_DISP0_8
   \   000239   E5..         MOV     A,?V0 + 14
   \   00023B   F0           MOVX    @DPTR,A
   \   00023C   A3           INC     DPTR
   \   00023D   E5..         MOV     A,?V0 + 15
   \   00023F   F0           MOVX    @DPTR,A
    604            req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
   \   000240   90....       MOV     DPTR,#AF_DataRequestDiscoverRoute
   \   000243   E0           MOVX    A,@DPTR
   \   000244   C0E0         PUSH    A
   \   000246   741A         MOV     A,#0x1a
   \   000248   12....       LCALL   ?XSTACK_DISP0_8
   \   00024B   D0E0         POP     A
   \   00024D   F0           MOVX    @DPTR,A
    605            req.radiusCounter = radius;
   \   00024E   741B         MOV     A,#0x1b
   \   000250   12....       LCALL   ?XSTACK_DISP0_8
   \   000253   E5..         MOV     A,?V0 + 5
   \   000255   F0           MOVX    @DPTR,A
    606          #if defined ( INTER_PAN )
    607            req.dstPanId      = dstAddr->panId;
    608          
    609            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    610            {
    611              if ( len > INTERP_DataReqMTU() )
    612              {
    613                stat = afStatus_INVALID_PARAMETER;
    614              }
    615              else
    616              {
    617                stat = INTERP_DataReq( &req );
    618              }
    619            }
    620            else
    621          #endif // INTER_PAN
    622            {
    623              if (len > afDataReqMTU( &mtu ) )
   \   000256                ; Setup parameters for call to function afDataReqMTU
   \   000256   85..82       MOV     DPL,?XSP + 0
   \   000259   85..83       MOV     DPH,?XSP + 1
   \   00025C   AA82         MOV     R2,DPL
   \   00025E   AB83         MOV     R3,DPH
   \   000260   12....       LCALL   ??afDataReqMTU?relay
   \   000263   E9           MOV     A,R1
   \   000264   C3           CLR     C
   \   000265   95..         SUBB    A,?V0 + 8
   \   000267   E4           CLR     A
   \   000268   95..         SUBB    A,?V0 + 9
   \   00026A   5023         JNC     ??AF_DataRequest_23
    624              {
    625                if (apsfSendFragmented)
   \   00026C   90....       MOV     DPTR,#apsfSendFragmented
   \   00026F   E0           MOVX    A,@DPTR
   \   000270   7002         JNZ     ??AF_DataRequest_24
   \   000272   A3           INC     DPTR
   \   000273   E0           MOVX    A,@DPTR
   \                     ??AF_DataRequest_24:
   \   000274   6014         JZ      ??AF_DataRequest_25
    626                {
    627                  stat = (*apsfSendFragmented)( &req );
   \   000276                ; Setup parameters for indirect call
   \   000276   7402         MOV     A,#0x2
   \   000278   12....       LCALL   ?XSTACK_DISP0_8
   \   00027B   AA82         MOV     R2,DPL
   \   00027D   AB83         MOV     R3,DPH
   \   00027F   90....       MOV     DPTR,#apsfSendFragmented
   \   000282   12....       LCALL   ?Subroutine7 & 0xFFFF
    628                }
   \                     ??CrossCallReturnLabel_17:
   \   000285   12....       LCALL   ?CALL_IND
   \   000288   8011         SJMP    ??AF_DataRequest_26
    629                else
    630                {
    631                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_25:
   \   00028A   75..02       MOV     ?V0 + 0,#0x2
   \   00028D   800F         SJMP    ??AF_DataRequest_27
    632                }
    633              }
    634              else
    635              {
    636                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_23:
   \   00028F                ; Setup parameters for call to function APSDE_DataReq
   \   00028F   7402         MOV     A,#0x2
   \   000291   12....       LCALL   ?XSTACK_DISP0_8
   \   000294   AA82         MOV     R2,DPL
   \   000296   AB83         MOV     R3,DPH
   \   000298   12....       LCALL   ??APSDE_DataReq?relay
   \                     ??AF_DataRequest_26:
   \   00029B   E9           MOV     A,R1
   \   00029C   F5..         MOV     ?V0 + 0,A
    637              }
    638            }
    639          
    640            /*
    641             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    642             * get added to the NWK databufs. So it will not go OTA and it will not get
    643             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    644             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    645             * message with the first in line TransSeqNumber, even on a multi message.
    646             * Also note that a reflected msg will not have its confirmation generated
    647             * here.
    648             */
    649            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    650                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_27:
   \   00029E   740A         MOV     A,#0xa
   \   0002A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A3   E0           MOVX    A,@DPTR
   \   0002A4   6402         XRL     A,#0x2
   \   0002A6   702C         JNZ     ??AF_DataRequest_28
   \   0002A8                ; Setup parameters for call to function NLME_GetShortAddr
   \   0002A8   12....       LCALL   ??NLME_GetShortAddr?relay
   \   0002AB   8A..         MOV     ?V0 + 2,R2
   \   0002AD   8B..         MOV     ?V0 + 3,R3
   \   0002AF   A8..         MOV     R0,?V0 + 2
   \   0002B1   A9..         MOV     R1,?V0 + 3
   \   0002B3   7402         MOV     A,#0x2
   \   0002B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B8   E0           MOVX    A,@DPTR
   \   0002B9   68           XRL     A,R0
   \   0002BA   7003         JNZ     ??AF_DataRequest_29
   \   0002BC   A3           INC     DPTR
   \   0002BD   E0           MOVX    A,@DPTR
   \   0002BE   69           XRL     A,R1
   \                     ??AF_DataRequest_29:
   \   0002BF   7013         JNZ     ??AF_DataRequest_28
    651            {
    652              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   0002C1                ; Setup parameters for call to function afDataConfirm
   \   0002C1   AB..         MOV     R3,?V0 + 0
   \   0002C3   85..82       MOV     DPL,?V0 + 6
   \   0002C6   85..83       MOV     DPH,?V0 + 7
   \   0002C9   E0           MOVX    A,@DPTR
   \   0002CA   FA           MOV     R2,A
   \   0002CB   8E82         MOV     DPL,R6
   \   0002CD   8F83         MOV     DPH,R7
   \   0002CF   E0           MOVX    A,@DPTR
   \   0002D0   F9           MOV     R1,A
   \   0002D1   12....       LCALL   ??afDataConfirm?relay
    653            }
    654          
    655            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_28:
   \   0002D4   E5..         MOV     A,?V0 + 0
   \   0002D6   7009         JNZ     ??AF_DataRequest_30
    656            {
    657              (*transID)++;
   \   0002D8   85..82       MOV     DPL,?V0 + 6
   \   0002DB   85..83       MOV     DPH,?V0 + 7
   \   0002DE   E0           MOVX    A,@DPTR
   \   0002DF   04           INC     A
   \   0002E0   F0           MOVX    @DPTR,A
    658            }
    659          
    660            return (afStatus_t)stat;
   \                     ??AF_DataRequest_30:
   \   0002E1   A9..         MOV     R1,?V0 + 0
   \                     ??AF_DataRequest_3:
   \   0002E3   741E         MOV     A,#0x1e
   \   0002E5   02....       LJMP    ?Subroutine28 & 0xFFFF
    661          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine32_0
   \   000006                ; // Fall through to label ??Subroutine32_0
    662          
    663          #if defined ( ZIGBEE_SOURCE_ROUTING )
    664          /*********************************************************************
    665           * @fn      AF_DataRequestSrcRtg
    666           *
    667           * @brief   Common functionality for invoking APSDE_DataReq() for both
    668           *          SendMulti and MSG-Send.
    669           *
    670           * input parameters
    671           *
    672           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    673           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    674           * @param   cID - A valid cluster ID as specified by the Profile.
    675           * @param   len - Number of bytes of data pointed to by next param.
    676           * @param  *buf - A pointer to the data bytes to send.
    677           * @param  *transID - A pointer to a byte which can be modified and which will
    678           *                    be used as the transaction sequence number of the msg.
    679           * @param   options - Valid bit mask of Tx options.
    680           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    681           * @param   relayCnt - Number of devices in the relay list
    682           * @param   pRelayList - Pointer to the relay list
    683           *
    684           * output parameters
    685           *
    686           * @param  *transID - Incremented by one if the return value is success.
    687           *
    688           * @return  afStatus_t - See previous definition of afStatus_... types.
    689           */
    690          
    691          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
    692                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    693                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    694          {
    695            uint8 status;
    696            
    697            /* Add the source route to the source routing table */
    698            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt, 
    699                                                   pRelayList );
    700          
    701            if( status == RTG_SUCCESS)
    702            {
    703              /* Call AF_DataRequest to send the data */
    704              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
    705            }
    706            else if( status == RTG_INVALID_PATH )
    707            {
    708              /* The source route relay count is exceeding the network limit */
    709              status = afStatus_INVALID_PARAMETER;
    710            }
    711            else
    712            {
    713              /* The guaranteed adding entry fails due to memory failure */
    714              status = afStatus_MEM_FAIL;
    715            }
    716            return status;
    717          }
    718          
    719          #endif
    720          
    721          /*********************************************************************
    722           * @fn      afFindEndPointDescList
    723           *
    724           * @brief   Find the endpoint description entry from the endpoint
    725           *          number.
    726           *
    727           * @param   EndPoint - Application Endpoint to look for
    728           *
    729           * @return  the address to the endpoint/interface description entry
    730           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    731          static epList_t *afFindEndPointDescList( byte EndPoint )
   \                     afFindEndPointDescList:
    732          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    733            epList_t *epSearch;
    734          
    735            // Start at the beginning
    736            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   8009         SJMP    ??afFindEndPointDescList_0
    737          
    738            // Look through the list until the end
    739            while ( epSearch )
    740            {
    741              // Is there a match?
    742              if ( epSearch->epDesc->endPoint == EndPoint )
    743              {
    744                return ( epSearch );
    745              }
    746              else
    747                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \                     ??afFindEndPointDescList_0:
   \   000012   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000015   EA           MOV     A,R2
   \   000016   7001         JNZ     ??afFindEndPointDescList_2
   \   000018   EB           MOV     A,R3
   \                     ??afFindEndPointDescList_2:
   \   000019   600C         JZ      ??afFindEndPointDescList_3
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000022   69           XRL     A,R1
   \   000023   70E4         JNZ     ??afFindEndPointDescList_1
   \   000025   8004         SJMP    ??afFindEndPointDescList_4
    748            }
    749          
    750            return ( (epList_t *)NULL );
   \                     ??afFindEndPointDescList_3:
   \   000027   7A00         MOV     R2,#0x0
   \   000029   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDescList_4:
   \   00002B   02....       LJMP    ?Subroutine25 & 0xFFFF
    751          }
    752          
    753          /*********************************************************************
    754           * @fn      afFindEndPointDesc
    755           *
    756           * @brief   Find the endpoint description entry from the endpoint
    757           *          number.
    758           *
    759           * @param   EndPoint - Application Endpoint to look for
    760           *
    761           * @return  the address to the endpoint/interface description entry
    762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    763          endPointDesc_t *afFindEndPointDesc( byte EndPoint )
   \                     afFindEndPointDesc:
    764          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    765            epList_t *epSearch;
    766          
    767            // Look for the endpoint
    768            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   ?Subroutine19 & 0xFFFF
    769          
    770            if ( epSearch )
   \                     ??CrossCallReturnLabel_35:
   \   000008   7002         JNZ     ??afFindEndPointDesc_0
   \   00000A   E583         MOV     A,DPH
   \                     ??afFindEndPointDesc_0:
   \   00000C   6005         JZ      ??afFindEndPointDesc_1
    771              return ( epSearch->epDesc );
   \   00000E   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000011   8004         SJMP    ??afFindEndPointDesc_2
    772            else
    773              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_1:
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDesc_2:
   \   000017   02....       LJMP    ?Subroutine27 & 0xFFFF
    774          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ??afFindEndPointDescList?relay
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E582         MOV     A,DPL
   \   000009   22           RET
    775          
    776          /*********************************************************************
    777           * @fn      afFindSimpleDesc
    778           *
    779           * @brief   Find the Simple Descriptor from the endpoint number.
    780           *
    781           * @param   EP - Application Endpoint to look for.
    782           *
    783           * @return  Non-zero to indicate that the descriptor memory must be freed.
    784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    785          byte afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, byte EP )
   \                     afFindSimpleDesc:
    786          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
    787            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL   ??afFindEndPointDescList?relay
   \   00000E   8A..         MOV     ?V0 + 2,R2
   \   000010   8B..         MOV     ?V0 + 3,R3
   \   000012   AC..         MOV     R4,?V0 + 2
   \   000014   AD..         MOV     R5,?V0 + 3
    788            byte rtrn = FALSE;
   \   000016   7900         MOV     R1,#0x0
    789          
    790            if ( epItem )
   \   000018   EC           MOV     A,R4
   \   000019   7001         JNZ     ??afFindSimpleDesc_0
   \   00001B   ED           MOV     A,R5
   \                     ??afFindSimpleDesc_0:
   \   00001C   6039         JZ      ??afFindSimpleDesc_1
    791            {
    792              if ( epItem->pfnDescCB )
   \   00001E   8C82         MOV     DPL,R4
   \   000020   8D83         MOV     DPH,R5
   \   000022   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000025   E582         MOV     A,DPL
   \   000027   7002         JNZ     ??afFindSimpleDesc_2
   \   000029   E583         MOV     A,DPH
   \                     ??afFindSimpleDesc_2:
   \   00002B   6013         JZ      ??afFindSimpleDesc_3
    793              {
    794                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   00002D                ; Setup parameters for indirect call
   \   00002D   AA..         MOV     R2,?V0 + 0
   \   00002F   09           INC     R1
   \   000030   12....       LCALL   ?CALL_IND
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   EA           MOV     A,R2
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   EB           MOV     A,R3
   \   00003B   F0           MOVX    @DPTR,A
    795                rtrn = TRUE;
   \   00003C   7901         MOV     R1,#0x1
   \   00003E   801F         SJMP    ??afFindSimpleDesc_4
    796              }
    797              else
    798              {
    799                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_3:
   \   000040   8C82         MOV     DPL,R4
   \   000042   8D83         MOV     DPH,R5
   \   000044   12....       LCALL   ?Subroutine7 & 0xFFFF
    800              }
    801            }
   \                     ??CrossCallReturnLabel_18:
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   EA           MOV     A,R2
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   EB           MOV     A,R3
   \   000055   8007         SJMP    ??afFindSimpleDesc_5
    802            else
    803            {
    804              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_1:
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   E4           CLR     A
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \                     ??afFindSimpleDesc_5:
   \   00005E   F0           MOVX    @DPTR,A
    805            }
    806          
    807            return rtrn;
   \                     ??afFindSimpleDesc_4:
   \   00005F   02....       LJMP    ?Subroutine26 & 0xFFFF
    808          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   22           RET
    809          
    810          /*********************************************************************
    811           * @fn      afGetDescCB
    812           *
    813           * @brief   Get the Descriptor callback function.
    814           *
    815           * @param   epDesc - pointer to the endpoint descriptor
    816           *
    817           * @return  function pointer or NULL
    818           */
    819          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    820          {
    821            epList_t *epSearch;
    822          
    823            // Start at the beginning
    824            epSearch = epList;
    825          
    826            // Look through the list until the end
    827            while ( epSearch )
    828            {
    829              // Is there a match?
    830              if ( epSearch->epDesc == epDesc )
    831              {
    832                return ( epSearch->pfnDescCB );
    833              }
    834              else
    835                epSearch = epSearch->nextDesc;  // Next entry
    836            }
    837          
    838            return ( (pDescCB)NULL );
    839          }
    840          
    841          /*********************************************************************
    842           * @fn      afDataReqMTU
    843           *
    844           * @brief   Get the Data Request MTU(Max Transport Unit).
    845           *
    846           * @param   fields - afDataReqMTU_t
    847           *
    848           * @return  uint8(MTU)
    849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    850          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    851          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    852            uint8 len;
    853            uint8 hdr;
    854          
    855            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6401         XRL     A,#0x1
   \   00000C   7004         JNZ     ??afDataReqMTU_0
    856            {
    857              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV     R6,#0x8
   \   000010   8002         SJMP    ??afDataReqMTU_1
    858            }
    859            else
    860            {
    861              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV     R6,#0x0
    862            }
    863          
    864            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC     DPTR
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   ??APSDE_DataReqMTU?relay
   \   00001C   E9           MOV     A,R1
   \   00001D   C3           CLR     C
   \   00001E   9E           SUBB    A,R6
   \   00001F   F9           MOV     R1,A
    865          
    866            return len;
   \   000020                REQUIRE ?Subroutine29
   \   000020                ; // Fall through to label ?Subroutine29
    867          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    868          
    869          /*********************************************************************
    870           * @fn      afGetMatch
    871           *
    872           * @brief   Set the allow response flag.
    873           *
    874           * @param   ep - Application Endpoint to look for
    875           * @param   action - true - allow response, false - no response
    876           *
    877           * @return  TRUE allow responses, FALSE no response
    878           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    879          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    880          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    881            epList_t *epSearch;
    882          
    883            // Look for the endpoint
    884            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   ?Subroutine19 & 0xFFFF
    885          
    886            if ( epSearch )
   \                     ??CrossCallReturnLabel_36:
   \   000008   7002         JNZ     ??afGetMatch_0
   \   00000A   E583         MOV     A,DPH
   \                     ??afGetMatch_0:
   \   00000C   600B         JZ      ??afGetMatch_1
    887            {
    888              if ( epSearch->flags & eEP_AllowMatch )
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   A2E0         MOV     C,0xE0 /* A   */.0
   \   000013   5004         JNC     ??afGetMatch_1
    889                return ( TRUE );
   \   000015   7901         MOV     R1,#0x1
   \   000017   8002         SJMP    ??afGetMatch_2
    890              else
    891                return ( FALSE );
   \                     ??afGetMatch_1:
   \   000019   7900         MOV     R1,#0x0
    892            }
   \                     ??afGetMatch_2:
   \   00001B                REQUIRE ?Subroutine27
   \   00001B                ; // Fall through to label ?Subroutine27
    893            else
    894              return ( FALSE );
    895          }
    896          
    897          /*********************************************************************
    898           * @fn      afSetMatch
    899           *
    900           * @brief   Set the allow response flag.
    901           *
    902           * @param   ep - Application Endpoint to look for
    903           * @param   action - true - allow response, false - no response
    904           *
    905           * @return  TRUE if success, FALSE if endpoint not found
    906           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    907          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
    908          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    909            epList_t *epSearch;
    910          
    911            // Look for the endpoint
    912            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL   ??afFindEndPointDescList?relay
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   A8..         MOV     R0,?V0 + 0
   \   000010   A9..         MOV     R1,?V0 + 1
    913          
    914            if ( epSearch )
   \   000012   E8           MOV     A,R0
   \   000013   7001         JNZ     ??afSetMatch_0
   \   000015   E9           MOV     A,R1
   \                     ??afSetMatch_0:
   \   000016   6019         JZ      ??afSetMatch_1
    915            {
    916              if ( action )
   \   000018   E8           MOV     A,R0
   \   000019   2402         ADD     A,#0x2
   \   00001B   F582         MOV     DPL,A
   \   00001D   E9           MOV     A,R1
   \   00001E   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000021   EE           MOV     A,R6
   \   000022   6005         JZ      ??afSetMatch_2
    917              {
    918                epSearch->flags |= eEP_AllowMatch;
   \   000024   E0           MOVX    A,@DPTR
   \   000025   D2E0         SETB    0xE0 /* A   */.0
   \   000027   8003         SJMP    ??afSetMatch_3
    919              }
    920              else
    921              {
    922                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_2:
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C2E0         CLR     0xE0 /* A   */.0
   \                     ??afSetMatch_3:
   \   00002C   F0           MOVX    @DPTR,A
    923              }
    924              return ( TRUE );
   \   00002D   7901         MOV     R1,#0x1
   \   00002F   8002         SJMP    ??afSetMatch_4
    925            }
    926            else
    927              return ( FALSE );
   \                     ??afSetMatch_1:
   \   000031   7900         MOV     R1,#0x0
   \                     ??afSetMatch_4:
   \   000033   80..         SJMP    ?Subroutine27
    928          }
    929          
    930          /*********************************************************************
    931           * @fn      afNumEndPoints
    932           *
    933           * @brief   Returns the number of endpoints defined (including 0)
    934           *
    935           * @param   none
    936           *
    937           * @return  number of endpoints
    938           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    939          byte afNumEndPoints( void )
   \                     afNumEndPoints:
    940          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    941            epList_t *epSearch;
    942            byte endpoints;
    943          
    944            // Start at the beginning
    945            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00000A   8882         MOV     DPL,R0
   \   00000C   8983         MOV     DPH,R1
    946            endpoints = 0;
   \   00000E   7900         MOV     R1,#0x0
   \   000010   8006         SJMP    ??CrossCallReturnLabel_30
    947          
    948            while ( epSearch )
    949            {
    950              endpoints++;
   \                     ??afNumEndPoints_0:
   \   000012   09           INC     R1
    951              epSearch = epSearch->nextDesc;
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   12....       LCALL   ?Subroutine14 & 0xFFFF
    952            }
   \                     ??CrossCallReturnLabel_30:
   \   000018   E582         MOV     A,DPL
   \   00001A   7002         JNZ     ??afNumEndPoints_1
   \   00001C   E583         MOV     A,DPH
   \                     ??afNumEndPoints_1:
   \   00001E   70F2         JNZ     ??afNumEndPoints_0
    953          
    954            return ( endpoints );
   \   000020   02....       LJMP    ?Subroutine25 & 0xFFFF
    955          }
    956          
    957          /*********************************************************************
    958           * @fn      afEndPoints
    959           *
    960           * @brief   Fills in the passed in buffer with the endpoint (numbers).
    961           *          Use afNumEndPoints to find out how big a buffer to supply.
    962           *
    963           * @param   epBuf - pointer to mem used
    964           *
    965           * @return  void
    966           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    967          void afEndPoints( byte *epBuf, byte skipZDO )
   \                     afEndPoints:
    968          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    969            epList_t *epSearch;
    970            byte endPoint;
    971          
    972            // Start at the beginning
    973            epSearch = epList;
   \   000005   90....       MOV     DPTR,#epList
   \   000008   8022         SJMP    ??afEndPoints_0
    974          
    975            while ( epSearch )
    976            {
    977              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000011   FE           MOV     R6,A
    978          
    979              if ( !skipZDO || endPoint != 0 )
   \   000012   E9           MOV     A,R1
   \   000013   6003         JZ      ??afEndPoints_2
   \   000015   EE           MOV     A,R6
   \   000016   600B         JZ      ??afEndPoints_3
    980                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   000018   EE           MOV     A,R6
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
    981          
    982              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \                     ??afEndPoints_0:
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FC           MOV     R4,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FD           MOV     R5,A
    983            }
   \   000031   EC           MOV     A,R4
   \   000032   7001         JNZ     ??afEndPoints_4
   \   000034   ED           MOV     A,R5
   \                     ??afEndPoints_4:
   \   000035   70D3         JNZ     ??afEndPoints_1
    984          }
   \   000037   02....       LJMP    ?Subroutine29 & 0xFFFF
    985          
    986          /*********************************************************************
    987           * @fn      afCopyAddress
    988           *
    989           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
    990           *          from the zAddrType_t parameter. 
    991           *
    992           * @param   epBuf - pointer to mem used
    993           *
    994           * @return  void
    995           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    996          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
    997          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    998            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000009   EC           MOV     A,R4
   \   00000A   2408         ADD     A,#0x8
   \   00000C   F8           MOV     R0,A
   \   00000D   ED           MOV     A,R5
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F9           MOV     R1,A
   \   000011   8882         MOV     DPL,R0
   \   000013   8983         MOV     DPH,R1
   \   000015   E0           MOVX    A,@DPTR
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   F0           MOVX    @DPTR,A
    999            if ( zAddr->addrMode == Addr64Bit )
   \   000023   8882         MOV     DPL,R0
   \   000025   8983         MOV     DPH,R1
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6403         XRL     A,#0x3
   \   00002A   7005         JNZ     ??afCopyAddress_0
   1000            {
   1001              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   00002C                ; Setup parameters for call to function sAddrExtCpy
   \   00002C   12....       LCALL   ??sAddrExtCpy?relay
   \   00002F   800A         SJMP    ??CrossCallReturnLabel_64
   1002            }
   1003            else
   1004            {
   1005              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   000031   8C82         MOV     DPL,R4
   \   000033   8D83         MOV     DPH,R5
   \   000035   12....       LCALL   ?Subroutine11 & 0xFFFF
   1006            }
   \                     ??CrossCallReturnLabel_26:
   \   000038   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   1007          
   1008            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1009            afAddr->panId = 0;
   \                     ??CrossCallReturnLabel_64:
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E4           CLR     A
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   F0           MOVX    @DPTR,A
   1010          }
   \   00004D   02....       LJMP    ?Subroutine29 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegisterExtended?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegister?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afIncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afBuildMSGIncoming?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AF_DataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindEndPointDescList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindEndPointDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindSimpleDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataReqMTU?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afGetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afSetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afNumEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afCopyAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress
   1011          
   1012          /*********************************************************************
   1013          *********************************************************************/
   1014          

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     AF_DataRequest                    1      0     63
       -> NLME_GetShortAddr            0      0    108
       -> RTG_CheckRtStatus            0      0    108
       -> NLME_IsAddressBroadcast      0      0    108
       -> sAddrExtCpy                  0      0    108
       -> osal_mem_free                0      0    108
       -> afDataReqMTU                 0      0    108
       -> APSDE_DataReq                0      0    108
       -> NLME_GetShortAddr            0      0    108
       -> afDataConfirm                0      0    108
     afBuildMSGIncoming                1      0     66
       -> osal_msg_allocate            0      0     52
       -> afCopyAddress                0      0     52
       -> osal_memcpy                  0      0     58
       -> osal_msg_send                0      0     52
     afCopyAddress                     1      0     35
       -> sAddrExtCpy                  0      0     18
     afDataConfirm                     1      0     68
       -> afFindEndPointDesc           0      0     28
       -> osal_msg_allocate            0      0     28
       -> osal_msg_send                0      0     28
     afDataReqMTU                      0      0     63
       -> APSDE_DataReqMTU             0      0     18
     afEndPoints                       1      0      9
     afFindEndPointDesc                0      0     37
       -> afFindEndPointDescList       0      0     20
     afFindEndPointDescList            2      0     27
     afFindSimpleDesc                  0      0     12
       -> afFindEndPointDescList       0      0     24
     afGetMatch                        0      0     10
       -> afFindEndPointDescList       0      0     20
     afIncomingData                    1      0     45
       -> aps_FindGroupForEndpoint     0      0     54
       -> afFindEndPointDesc           0      0     54
       -> afFindEndPointDescList       0      0     54
       -> afFindEndPointDesc           0      0     54
       -> aps_FindGroupForEndpoint     0      0     54
       -> afFindEndPointDesc           0      0     54
       -> afFindEndPointDescList       0      0     54
       -> osal_mem_free                0      0     54
       -> afBuildMSGIncoming           0      0     74
     afInit                            2      0      0
     afNumEndPoints                    2      0      0
     afRegister                        0      0     10
       -> afFindEndPointDescList       0      0     20
       -> afRegisterExtended           0      0     20
     afRegisterExtended                1      0     22
       -> osal_mem_alloc               0      0     24
     afSetMatch                        0      0     10
       -> afFindEndPointDescList       0      0     20


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     epList                                            2
     afInit                                           11
     ?Subroutine25                                     7
     afRegisterExtended                              111
     ?Subroutine26                                     5
     ?Subroutine0                                      9
     ??Subroutine30_0                                  4
     ?Subroutine23                                     6
     afRegister                                       54
     ?Subroutine27                                     5
     afDataConfirm                                    78
     ?Subroutine5                                      9
     ?Subroutine24                                     9
     ?Subroutine22                                     5
     afIncomingData                                  434
     ?Subroutine28                                     8
     ?Subroutine18                                    13
     ?Subroutine13                                    14
     ?Subroutine3                                     20
     ?Subroutine4                                      8
     ?Subroutine16                                     9
     ?Subroutine10                                     9
     ?Subroutine8                                     13
     ?Subroutine11                                     4
     ?Subroutine21                                     8
     afBuildMSGIncoming                              448
     ?Subroutine9                                     10
     ?Subroutine12                                     1
     ?Subroutine7                                      4
     ?Subroutine2                                      5
     ?Subroutine20                                     9
     ?Subroutine1                                      7
     ??Subroutine31_0                                  6
     ??Subroutine32_0                                  6
     ?Subroutine6                                      4
     ?Subroutine17                                     3
     ??Subroutine33_0                                  5
     AF_DataRequestDiscoverRoute                       1
     AF_DataRequest                                  744
     ?Subroutine15                                     6
     afFindEndPointDescList                           46
     afFindEndPointDesc                               26
     ?Subroutine19                                    10
     afFindSimpleDesc                                 98
     ?Subroutine14                                    13
     afDataReqMTU                                     32
     ?Subroutine29                                     5
     afGetMatch                                       27
     afSetMatch                                       53
     afNumEndPoints                                   35
     afEndPoints                                      58
     afCopyAddress                                    80
     ?<Initializer for AF_DataRequestDiscoverRoute>    1
     ??afInit?relay                                    6
     ??afRegisterExtended?relay                        6
     ??afRegister?relay                                6
     ??afDataConfirm?relay                             6
     ??afIncomingData?relay                            6
     ??afBuildMSGIncoming?relay                        6
     ??AF_DataRequest?relay                            6
     ??afFindEndPointDescList?relay                    6
     ??afFindEndPointDesc?relay                        6
     ??afFindSimpleDesc?relay                          6
     ??afDataReqMTU?relay                              6
     ??afGetMatch?relay                                6
     ??afSetMatch?relay                                6
     ??afNumEndPoints?relay                            6
     ??afEndPoints?relay                               6
     ??afCopyAddress?relay                             6

 
 2 594 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
 2 691 bytes of CODE  memory
     3 bytes of XDATA memory

Errors: none
Warnings: none
