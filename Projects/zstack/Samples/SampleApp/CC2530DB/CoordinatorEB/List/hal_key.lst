###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                16/Sep/2011  10:53:02 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k¶¨Ê±¸´Î»¼ì²â\Components\hal\target\CC2530EB\hal_k #
#                          ey.c                                               #
#    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"   #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"  #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Documents and           #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Com #
#                          ponents\hal\target\CC2530EB\hal_key.c" -D          #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D           #
#                          BUILD_ALL_DEVICES -D xLCD_SUPPORTED=DEBUG -D       #
#                          SOFT_SATRT -D ZDO_COORDINATOR -D NV_INIT -D        #
#                          RTR_NWK -lC "C:\Documents and                      #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\Coordinato #
#                          rEB\List\" -lA "C:\Documents and                   #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\Coordinato #
#                          rEB\List\" --diag_suppress Pe001,Pa010 -o          #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\CoordinatorEB\Obj\" -e                     #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\" -I       #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\SOURCE\" -I "C:\Documents and           #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Z #
#                          MAIN\TI2530DB\" -I "C:\Documents and               #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MT\" -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\INCLUDE\" -I "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I       #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\"  #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"   #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"  #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"   #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"   #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"    #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I     #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDA #
#                          TA\" -I "C:\Documents and                          #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\INCLUDE\" -I "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I            #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\sr #
#                          f04\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"  #
#                          -I D:\IAR\8051\INC\ -I D:\IAR\8051\INC\CLIB\ -Ohz  #
#    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\CoordinatorEB\List\hal_key.lst              #
#    Object file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\CoordinatorEB\Obj\hal_key.r51               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Components\hal\target\CC2530EB\hal_key.c
      1          /**************************************************************************************************
      2            Filename:       hal_key.c
      3            Revised:        $Date: 2010-07-22 09:47:19 -0700 (Thu, 22 Jul 2010) $
      4            Revision:       $Revision: 23100 $
      5          
      6            Description:    This file contains the interface to the HAL KEY Service.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          /*********************************************************************
     40           NOTE: If polling is used, the hal_driver task schedules the KeyRead()
     41                 to occur every 100ms.  This should be long enough to naturally
     42                 debounce the keys.  The KeyRead() function remembers the key
     43                 state of the previous poll and will only return a non-zero
     44                 value if the key state changes.
     45          
     46           NOTE: If interrupts are used, the KeyRead() function is scheduled
     47                 25ms after the interrupt occurs by the ISR.  This delay is used
     48                 for key debouncing.  The ISR disables any further Key interrupt
     49                 until KeyRead() is executed.  KeyRead() will re-enable Key
     50                 interrupts after executing.  Unlike polling, when interrupts
     51                 are enabled, the previous key state is not remembered.  This
     52                 means that KeyRead() will return the current state of the keys
     53                 (not a change in state of the keys).
     54          
     55           NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
     56                 the ISR.  Therefore, the joystick movements will only be detected
     57                 during a pushbutton interrupt caused by S1 or the center joystick
     58                 pushbutton.
     59          
     60           NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
     61                 high state to a low state.  This transition is typically clean.  The
     62                 duration of the low state is around 200ms.  When the signal returns
     63                 to the high state, there is a high likelihood of signal bounce, which
     64                 causes a unwanted interrupts.  Normally, we would set the interrupt
     65                 edge to falling edge to generate an interrupt when S1 is pushed, but
     66                 because of the signal bounce, it is better to set the edge to rising
     67                 edge to generate an interrupt when S1 is released.  The debounce logic
     68                 can then filter out the signal bounce.  The result is that we typically
     69                 get only 1 interrupt per button push.  This mechanism is not totally
     70                 foolproof because occasionally, signal bound occurs during the falling
     71                 edge as well.  A similar mechanism is used to handle the joystick
     72                 pushbutton on the DB.  For the EB, we do not have independent control
     73                 of the interrupt edge for the S1 and center joystick pushbutton.  As
     74                 a result, only one or the other pushbuttons work reasonably well with
     75                 interrupts.  The default is the make the S1 switch on the EB work more
     76                 reliably.
     77          
     78          *********************************************************************/
     79          
     80          /**************************************************************************************************
     81           *                                            INCLUDES
     82           **************************************************************************************************/
     83          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x89
   \   unsigned char volatile __sfr P0IFG
   \                     P0IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8b
   \   unsigned char volatile __sfr P2IFG
   \                     P2IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xac
   \   unsigned char volatile __sfr P2IEN
   \                     P2IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     84          #include "hal_defs.h"
     85          #include "hal_types.h"
     86          #include "hal_board.h"
     87          #include "hal_drivers.h"
     88          #include "hal_adc.h"
     89          #include "hal_key.h"
     90          #include "osal.h"
     91          
     92          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
     93          
     94          /**************************************************************************************************
     95           *                                              MACROS
     96           **************************************************************************************************/
     97          
     98          /**************************************************************************************************
     99           *                                            CONSTANTS
    100           **************************************************************************************************/
    101          #define HAL_KEY_RISING_EDGE   0
    102          #define HAL_KEY_FALLING_EDGE  1
    103          
    104          #define HAL_KEY_DEBOUNCE_VALUE  25
    105          #define HAL_KEY_POLLING_VALUE   100
    106          
    107          /* CPU port interrupt */
    108          #define HAL_KEY_CPU_PORT_0_IF P0IF
    109          #define HAL_KEY_CPU_PORT_2_IF P2IF
    110          
    111          /* SW_7 is at P0.7 */
    112          #define HAL_KEY_SW_6_PORT   P0
    113          #define HAL_KEY_SW_6_BIT    BV(7)
    114          #define HAL_KEY_SW_6_SEL    P0SEL
    115          #define HAL_KEY_SW_6_DIR    P0DIR
    116          
    117          /* SW_6 is at P0.6 */
    118          #define HAL_KEY_SW_7_PORT   P0
    119          #define HAL_KEY_SW_7_BIT    BV(6)
    120          #define HAL_KEY_SW_7_SEL    P0SEL
    121          #define HAL_KEY_SW_7_DIR    P0DIR
    122          
    123          
    124          
    125          /* edge interrupt */
    126          #define HAL_KEY_SW_6_EDGEBIT  BV(0)
    127          #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
    128          
    129          
    130          /* SW_6 interrupts */
    131          #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
    132          #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    133          #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
    134          #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
    135          #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
    136          
    137          /* SW_7 interrupts */
    138          #define HAL_KEY_SW_7_IEN      IEN1  /* CPU interrupt mask register */
    139          #define HAL_KEY_SW_7_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    140          #define HAL_KEY_SW_7_ICTL     P0IEN /* Port Interrupt Control register */
    141          #define HAL_KEY_SW_7_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
    142          #define HAL_KEY_SW_7_PXIFG    P0IFG /* Interrupt flag at source */
    143          
    144          
    145          /* Joy stick move at P2.0 */
    146          #define HAL_KEY_JOY_MOVE_PORT   P2
    147          #define HAL_KEY_JOY_MOVE_BIT    BV(0)
    148          #define HAL_KEY_JOY_MOVE_SEL    P2SEL
    149          #define HAL_KEY_JOY_MOVE_DIR    P2DIR
    150          
    151          /* edge interrupt */
    152          #define HAL_KEY_JOY_MOVE_EDGEBIT  BV(3)
    153          #define HAL_KEY_JOY_MOVE_EDGE     HAL_KEY_FALLING_EDGE
    154          
    155          /* Joy move interrupts */
    156          #define HAL_KEY_JOY_MOVE_IEN      IEN2  /* CPU interrupt mask register */
    157          #define HAL_KEY_JOY_MOVE_IENBIT   BV(1) /* Mask bit for all of Port_2 */
    158          #define HAL_KEY_JOY_MOVE_ICTL     P2IEN /* Port Interrupt Control register */
    159          #define HAL_KEY_JOY_MOVE_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
    160          #define HAL_KEY_JOY_MOVE_PXIFG    P2IFG /* Interrupt flag at source */
    161          
    162          #define HAL_KEY_JOY_CHN   HAL_ADC_CHANNEL_6
    163          
    164          
    165          /**************************************************************************************************
    166           *                                            TYPEDEFS
    167           **************************************************************************************************/
    168          
    169          
    170          /**************************************************************************************************
    171           *                                        GLOBAL VARIABLES
    172           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
   \                     halKeySavedKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          static halKeyCBack_t pHalKeyProcessFunction;
   \                     pHalKeyProcessFunction:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          static uint8 HalKeyConfigured;
   \                     HalKeyConfigured:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
   \                     Hal_KeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    177          
    178          /**************************************************************************************************
    179           *                                        FUNCTIONS - Local
    180           **************************************************************************************************/
    181          void halProcessKeyInterrupt(void);
    182          uint8 halGetJoyKeyInput(void);
    183          
    184          
    185          
    186          /**************************************************************************************************
    187           *                                        FUNCTIONS - API
    188           **************************************************************************************************/
    189          
    190          
    191          /**************************************************************************************************
    192           * @fn      HalKeyInit
    193           *
    194           * @brief   Initilize Key Service
    195           *
    196           * @param   none
    197           *
    198           * @return  None
    199           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    200          void HalKeyInit( void )
   \                     HalKeyInit:
    201          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    202            /* Initialize previous key to 0 */
    203            halKeySavedKeys = 0;
   \   000004   E4           CLR     A
   \   000005   90....       MOV     DPTR,#halKeySavedKeys
   \   000008   F0           MOVX    @DPTR,A
    204          
    205            HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
   \   000009   53F37F       ANL     0xf3,#0x7f
    206            HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
   \   00000C   53FD7F       ANL     0xfd,#0x7f
    207          
    208            HAL_KEY_SW_7_SEL &= ~(HAL_KEY_SW_7_BIT);    /* Set pin function to GPIO */
   \   00000F   53F3BF       ANL     0xf3,#0xbf
    209            HAL_KEY_SW_7_DIR &= ~(HAL_KEY_SW_7_BIT);    /* Set pin direction to Input */
   \   000012   53FDBF       ANL     0xfd,#0xbf
    210            
    211            
    212            HAL_KEY_JOY_MOVE_SEL &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin function to GPIO */
   \   000015   53F5FE       ANL     0xf5,#0xfe
    213            HAL_KEY_JOY_MOVE_DIR &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin direction to Input */
   \   000018   53FFFE       ANL     0xff,#0xfe
    214          
    215          
    216            /* Initialize callback function */
    217            pHalKeyProcessFunction  = NULL;
   \   00001B   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   F0           MOVX    @DPTR,A
    218          
    219            /* Start with key is not configured */
    220            HalKeyConfigured = FALSE;
   \   000021   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000024                REQUIRE P0SEL
   \   000024                REQUIRE P2SEL
   \   000024                REQUIRE P0DIR
   \   000024                REQUIRE P2DIR
    221          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   90....       MOV     DPTR,#HalKeyConfigured
   \   000003   F0           MOVX    @DPTR,A
   \   000004                REQUIRE ??Subroutine2_0
   \   000004                ; // Fall through to label ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    222          
    223          
    224          /**************************************************************************************************
    225           * @fn      HalKeyConfig
    226           *
    227           * @brief   Configure the Key serivce
    228           *
    229           * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
    230           *          cback - pointer to the CallBack function
    231           *
    232           * @return  None
    233           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    234          void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
   \                     HalKeyConfig:
    235          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    236            /* Enable/Disable Interrupt or */
    237            Hal_KeyIntEnable = interruptEnable;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000008   F0           MOVX    @DPTR,A
    238          
    239            /* Register the callback fucntion */
    240            pHalKeyProcessFunction = cback;
   \   000009   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00000C   EA           MOV     A,R2
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   EB           MOV     A,R3
   \   000010   F0           MOVX    @DPTR,A
    241          
    242            /* Determine if interrupt is enable or not */
    243            if (Hal_KeyIntEnable)
   \   000011   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6033         JZ      ??HalKeyConfig_0
    244            {
    245              /* Rising/Falling edge configuratinn */
    246          
    247              PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
   \   000017   538CFE       ANL     0x8c,#0xfe
    248              /* For falling edge, the bit must be set. */
    249            #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
    250              PICTL |= HAL_KEY_SW_6_EDGEBIT;
   \   00001A   438C01       ORL     0x8c,#0x1
    251            #endif
    252          
    253          
    254              /* Interrupt configuration:
    255               * - Enable interrupt generation at the port
    256               * - Enable CPU interrupt
    257               * - Clear any pending interrupt
    258               */
    259              HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
   \   00001D   43AB02       ORL     0xab,#0x2
    260              HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
   \   000020   D2BD         SETB    0xb8.5
    261              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
                                          ^
Warning[Pe069]: integer conversion resulted in truncation
   \   000022   75897F       MOV     0x89,#0x7f
    262          
    263          
    264          
    265              /* Rising/Falling edge configuratinn */
    266          
    267              HAL_KEY_JOY_MOVE_ICTL &= ~(HAL_KEY_JOY_MOVE_EDGEBIT);    /* Clear the edge bit */
   \   000025   53ACF7       ANL     0xac,#0xf7
    268              /* For falling edge, the bit must be set. */
    269            #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_FALLING_EDGE)
    270              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_EDGEBIT;
   \   000028   43AC08       ORL     0xac,#0x8
    271            #endif
    272          
    273          
    274              /* Interrupt configuration:
    275               * - Enable interrupt generation at the port
    276               * - Enable CPU interrupt
    277               * - Clear any pending interrupt
    278               */
    279              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_ICTLBIT;
   \   00002B   43AC01       ORL     0xac,#0x1
    280              HAL_KEY_JOY_MOVE_IEN |= HAL_KEY_JOY_MOVE_IENBIT;
   \   00002E   439A02       ORL     0x9a,#0x2
    281              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT);
   \   000031   758BFE       MOV     0x8b,#-0x2
    282          
    283          
    284              /* Do this only after the hal_key is configured - to work with sleep stuff */
    285              if (HalKeyConfigured == TRUE)
   \   000034   90....       MOV     DPTR,#HalKeyConfigured
   \   000037   E0           MOVX    A,@DPTR
   \   000038   6401         XRL     A,#0x1
   \   00003A   7028         JNZ     ??HalKeyConfig_1
    286              {
    287                osal_stop_timerEx( Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
   \   00003C                ; Setup parameters for call to function osal_stop_timerEx
   \   00003C   7A01         MOV     R2,#0x1
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   90....       MOV     DPTR,#Hal_TaskID
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F9           MOV     R1,A
   \   000045   12....       LCALL   ??osal_stop_timerEx?relay
   \   000048   801A         SJMP    ??HalKeyConfig_1
    288              }
    289            }
    290            else    /* Interrupts NOT enabled */
    291            {
    292              HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt */
   \                     ??HalKeyConfig_0:
   \   00004A   53ABFD       ANL     0xab,#0xfd
    293              HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
   \   00004D   C2BD         CLR     0xb8.5
    294          
    295              
    296              HAL_KEY_SW_7_ICTL &= ~(HAL_KEY_SW_7_ICTLBIT); /* don't generate interrupt */
   \   00004F   53ABFD       ANL     0xab,#0xfd
    297              HAL_KEY_SW_7_IEN &= ~(HAL_KEY_SW_7_IENBIT);   /* Clear interrupt enable bit */
   \   000052   C2BD         CLR     0xb8.5
    298          
    299              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_POLLING_VALUE);    /* Kick off polling */
   \   000054                ; Setup parameters for call to function osal_start_timerEx
   \   000054   7C64         MOV     R4,#0x64
   \   000056   7D00         MOV     R5,#0x0
   \   000058   7A01         MOV     R2,#0x1
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   90....       MOV     DPTR,#Hal_TaskID
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   12....       LCALL   ??osal_start_timerEx?relay
    300            }
    301          
    302            /* Key now is configured */
    303            HalKeyConfigured = TRUE;
   \                     ??HalKeyConfig_1:
   \   000064   7401         MOV     A,#0x1
   \   000066   80..         SJMP    ?Subroutine0
   \   000068                REQUIRE P0IFG
   \   000068                REQUIRE P2IFG
   \   000068                REQUIRE PICTL
   \   000068                REQUIRE _A_IEN1
   \   000068                REQUIRE IEN2
   \   000068                REQUIRE P0IEN
   \   000068                REQUIRE P2IEN
    304          }
    305          
    306          
    307          /**************************************************************************************************
    308           * @fn      HalKeyRead
    309           *
    310           * @brief   Read the current value of a key
    311           *
    312           * @param   None
    313           *
    314           * @return  keys - current keys status
    315           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    316          uint8 HalKeyRead ( void )
   \                     HalKeyRead:
    317          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    318            uint8 keys = 0;
   \   000000   7900         MOV     R1,#0x0
    319             if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active low */
   \   000002   E5A0         MOV     A,0xa0
    320            {
    321              //keys |= halGetJoyKeyInput();
    322            }
    323          
    324           if (HAL_PUSH_BUTTON1())
   \   000004   A287         MOV     C,0x80.7
   \   000006   4002         JC      ??HalKeyRead_0
    325            {	
    326              keys |= HAL_KEY_SW_7;
   \   000008   7940         MOV     R1,#0x40
    327            }
    328            
    329            if (HAL_PUSH_BUTTON6())
   \                     ??HalKeyRead_0:
   \   00000A   A286         MOV     C,0x80.6
   \   00000C   4004         JC      ??HalKeyRead_1
    330            {
    331              keys |= HAL_KEY_SW_6;
   \   00000E   E9           MOV     A,R1
   \   00000F   D2E5         SETB    0xE0 /* A   */.5
   \   000011   F9           MOV     R1,A
    332            }
    333          
    334          
    335          
    336          
    337            return keys;
   \                     ??HalKeyRead_1:
   \   000012   02....       LJMP    ?BRET
   \   000015                REQUIRE _A_P0
   \   000015                REQUIRE _A_P2
    338          }
    339          
    340          
    341          /**************************************************************************************************
    342           * @fn      HalKeyPoll
    343           *
    344           * @brief   Called by hal_driver to poll the keys
    345           *
    346           * @param   None
    347           *
    348           * @return  None
    349           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    350          void HalKeyPoll (void)
   \                     HalKeyPoll:
    351          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    352            uint8 keys = 0;
   \   000004   7900         MOV     R1,#0x0
    353          
    354            if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active HIGH */
   \   000006   E5A0         MOV     A,0xa0
    355            {
    356             // keys = halGetJoyKeyInput();
    357            }
    358          
    359            if (HAL_PUSH_BUTTON1())
   \   000008   A287         MOV     C,0x80.7
   \   00000A   4002         JC      ??HalKeyPoll_0
    360            {
    361              keys |= HAL_KEY_SW_7;
   \   00000C   7940         MOV     R1,#0x40
    362            }
    363            
    364            if (HAL_PUSH_BUTTON6())
   \                     ??HalKeyPoll_0:
   \   00000E   A286         MOV     C,0x80.6
   \   000010   4004         JC      ??HalKeyPoll_1
    365            {
    366              keys |= HAL_KEY_SW_6;
   \   000012   E9           MOV     A,R1
   \   000013   D2E5         SETB    0xE0 /* A   */.5
   \   000015   F9           MOV     R1,A
    367            }
    368            /* If interrupts are not enabled, previous key status and current key status
    369             * are compared to find out if a key has changed status.
    370             */
    371            if (!Hal_KeyIntEnable)
   \                     ??HalKeyPoll_1:
   \   000016   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   7009         JNZ     ??HalKeyPoll_2
    372            {
    373              if (keys == halKeySavedKeys)
   \   00001C   90....       MOV     DPTR,#halKeySavedKeys
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   69           XRL     A,R1
   \   000021   601F         JZ      ??HalKeyPoll_3
    374              {
    375                /* Exit - since no keys have changed */
    376                return;
    377              }
    378              /* Store the current keys for comparation next time */
    379              halKeySavedKeys = keys;
   \   000023   E9           MOV     A,R1
   \   000024   F0           MOVX    @DPTR,A
    380            }
    381            else
    382            {
    383              /* Key interrupt handled here */
    384            }
    385            /* Invoke Callback if new keys were depressed */
    386            if (keys && (pHalKeyProcessFunction))
   \                     ??HalKeyPoll_2:
   \   000025   E9           MOV     A,R1
   \   000026   601A         JZ      ??HalKeyPoll_3
   \   000028   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   7002         JNZ     ??HalKeyPoll_4
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \                     ??HalKeyPoll_4:
   \   000030   6010         JZ      ??HalKeyPoll_3
    387            {
    388              (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
   \   000032                ; Setup parameters for indirect call
   \   000032   7A00         MOV     R2,#0x0
   \   000034   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F583         MOV     DPH,A
   \   00003D   8882         MOV     DPL,R0
   \   00003F   12....       LCALL   ?CALL_IND
    389            }
   \                     ??HalKeyPoll_3:
   \   000042   80..         SJMP    ??Subroutine2_0
   \   000044                REQUIRE _A_P0
   \   000044                REQUIRE _A_P2
    390          }
    391          
    392          /**************************************************************************************************
    393           * @fn      halGetJoyKeyInput
    394           *
    395           * @brief   Map the ADC value to its corresponding key.
    396           *
    397           * @param   None
    398           *
    399           * @return  keys - current joy key status
    400           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          uint8 halGetJoyKeyInput(void)
   \                     halGetJoyKeyInput:
    402          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    403            /* The joystick control is encoded as an analog voltage.
    404             * Read the JOY_LEVEL analog value and map it to joy movement.
    405             */
    406            uint8 adc;
    407            uint8 ksave0 = 0;
   \   000005   7E00         MOV     R6,#0x0
    408            uint8 ksave1;
    409          
    410            /* Keep on reading the ADC until two consecutive key decisions are the same. */
    411            do
    412            {
    413              ksave1 = ksave0;    /* save previouse key reading */
   \                     ??halGetJoyKeyInput_0:
   \   000007   EE           MOV     A,R6
   \   000008   FF           MOV     R7,A
    414          
    415              adc = HalAdcRead (HAL_KEY_JOY_CHN, HAL_ADC_RESOLUTION_8);
   \   000009                ; Setup parameters for call to function HalAdcRead
   \   000009   7A01         MOV     R2,#0x1
   \   00000B   7906         MOV     R1,#0x6
   \   00000D   12....       LCALL   ??HalAdcRead?relay
   \   000010   EA           MOV     A,R2
    416          
    417              if ((adc >= 2) && (adc <= 38))
   \   000011   C3           CLR     C
   \   000012   9402         SUBB    A,#0x2
   \   000014   400B         JC      ??halGetJoyKeyInput_1
   \   000016   EA           MOV     A,R2
   \   000017   C3           CLR     C
   \   000018   9427         SUBB    A,#0x27
   \   00001A   5005         JNC     ??halGetJoyKeyInput_1
    418              {
    419                 ksave0 |= HAL_KEY_UP;
   \   00001C   EE           MOV     A,R6
   \   00001D   D2E0         SETB    0xE0 /* A   */.0
   \   00001F   802F         SJMP    ??halGetJoyKeyInput_2
    420              }
    421              else if ((adc >= 74) && (adc <= 88))
   \                     ??halGetJoyKeyInput_1:
   \   000021   EA           MOV     A,R2
   \   000022   C3           CLR     C
   \   000023   944A         SUBB    A,#0x4a
   \   000025   EA           MOV     A,R2
   \   000026   400A         JC      ??halGetJoyKeyInput_3
   \   000028   C3           CLR     C
   \   000029   9459         SUBB    A,#0x59
   \   00002B   501A         JNC     ??halGetJoyKeyInput_4
    422              {
    423                ksave0 |= HAL_KEY_RIGHT;
   \   00002D   EE           MOV     A,R6
   \   00002E   D2E1         SETB    0xE0 /* A   */.1
   \   000030   801E         SJMP    ??halGetJoyKeyInput_2
    424              }
    425              else if ((adc >= 60) && (adc <= 73))
   \                     ??halGetJoyKeyInput_3:
   \   000032   C3           CLR     C
   \   000033   943C         SUBB    A,#0x3c
   \   000035   4005         JC      ??halGetJoyKeyInput_5
    426              {
    427                ksave0 |= HAL_KEY_LEFT;
   \   000037   EE           MOV     A,R6
   \   000038   D2E3         SETB    0xE0 /* A   */.3
   \   00003A   8014         SJMP    ??halGetJoyKeyInput_2
    428              }
    429              else if ((adc >= 39) && (adc <= 59))
   \                     ??halGetJoyKeyInput_5:
   \   00003C   EA           MOV     A,R2
   \   00003D   C3           CLR     C
   \   00003E   9427         SUBB    A,#0x27
   \   000040   400F         JC      ??halGetJoyKeyInput_6
    430              {
    431                ksave0 |= HAL_KEY_DOWN;
   \   000042   EE           MOV     A,R6
   \   000043   D2E4         SETB    0xE0 /* A   */.4
   \   000045   8009         SJMP    ??halGetJoyKeyInput_2
    432              }
   \                     ??halGetJoyKeyInput_4:
   \   000047   EA           MOV     A,R2
   \   000048   C3           CLR     C
   \   000049   9465         SUBB    A,#0x65
   \   00004B   5004         JNC     ??halGetJoyKeyInput_6
    433              else if ((adc >= 89) && (adc <= 100))
    434              {
    435                ksave0 |= HAL_KEY_CENTER;
   \   00004D   EE           MOV     A,R6
   \   00004E   D2E2         SETB    0xE0 /* A   */.2
   \                     ??halGetJoyKeyInput_2:
   \   000050   FE           MOV     R6,A
    436              }
    437            } while (ksave0 != ksave1);
   \                     ??halGetJoyKeyInput_6:
   \   000051   EF           MOV     A,R7
   \   000052   6E           XRL     A,R6
   \   000053   70B2         JNZ     ??halGetJoyKeyInput_0
    438          
    439            return ksave0;
   \   000055   EE           MOV     A,R6
   \   000056   F9           MOV     R1,A
   \   000057   7F01         MOV     R7,#0x1
   \   000059   02....       LJMP    ?BANKED_LEAVE_XDATA
    440          }
    441          
    442          
    443          
    444          
    445          
    446          /**************************************************************************************************
    447           * @fn      halProcessKeyInterrupt
    448           *
    449           * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
    450           *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
    451           *
    452           * @param
    453           *
    454           * @return
    455           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    456          void halProcessKeyInterrupt (void)
   \                     halProcessKeyInterrupt:
    457          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    458            bool valid=FALSE;
   \   000004   7A00         MOV     R2,#0x0
    459          
    460            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
   \   000006   E589         MOV     A,0x89
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   5004         JNC     ??halProcessKeyInterrupt_0
    461            {
    462              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
                                          ^
Warning[Pe069]: integer conversion resulted in truncation
   \   00000C   75897F       MOV     0x89,#0x7f
    463              valid = TRUE;
   \   00000F   0A           INC     R2
    464            }
    465          
    466            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)  /* Interrupt Flag has been set */
   \                     ??halProcessKeyInterrupt_0:
   \   000010   E58B         MOV     A,0x8b
   \   000012   A2E0         MOV     C,0xE0 /* A   */.0
   \   000014   5005         JNC     ??halProcessKeyInterrupt_1
    467            {
    468              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT); /* Clear Interrupt Flag */
   \   000016   758BFE       MOV     0x8b,#-0x2
    469              valid = TRUE;
   \   000019   8003         SJMP    ??halProcessKeyInterrupt_2
    470            }
    471          
    472            if (valid)
   \                     ??halProcessKeyInterrupt_1:
   \   00001B   EA           MOV     A,R2
   \   00001C   6010         JZ      ??halProcessKeyInterrupt_3
    473            {
    474              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
   \                     ??halProcessKeyInterrupt_2:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7C19         MOV     R4,#0x19
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#Hal_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    475            }
    476          }
   \                     ??halProcessKeyInterrupt_3:
   \   00002E   02....       LJMP    ??Subroutine2_0 & 0xFFFF
   \   000031                REQUIRE P0IFG
   \   000031                REQUIRE P2IFG
    477          
    478          /**************************************************************************************************
    479           * @fn      HalKeyEnterSleep
    480           *
    481           * @brief  - Get called to enter sleep mode
    482           *
    483           * @param
    484           *
    485           * @return
    486           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    487          void HalKeyEnterSleep ( void )
   \                     HalKeyEnterSleep:
    488          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    489          }
   \   000000   02....       LJMP    ?BRET
    490          
    491          /**************************************************************************************************
    492           * @fn      HalKeyExitSleep
    493           *
    494           * @brief   - Get called when sleep is over
    495           *
    496           * @param
    497           *
    498           * @return  - return saved keys
    499           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          uint8 HalKeyExitSleep ( void )
   \                     HalKeyExitSleep:
    501          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    502            /* Wake up and read keys */
    503            return ( HalKeyRead () );
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay
   \   000007   02....       LJMP    ??Subroutine2_0 & 0xFFFF
    504          }
    505          
    506          /***************************************************************************************************
    507           *                                    INTERRUPT SERVICE ROUTINE
    508           ***************************************************************************************************/
    509          
    510          /**************************************************************************************************
    511           * @fn      halKeyPort0Isr
    512           *
    513           * @brief   Port0 ISR
    514           *
    515           * @param
    516           *
    517           * @return
    518           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    519          HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
   \                     halKeyPort0Isr:
    520          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 15
   \   000007                ; Auto size: 0
    521            HAL_ENTER_ISR();
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   92E0         MOV     0xE0 /* A   */.0,C
   \   00000C   FE           MOV     R6,A
   \   00000D   D2AF         SETB    0xa8.7
    522          
    523            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
   \   00000F   E589         MOV     A,0x89
   \   000011   A2E7         MOV     C,0xE0 /* A   */.7
   \   000013   5003         JNC     ??halKeyPort0Isr_0
    524            {
    525              halProcessKeyInterrupt();
   \   000015                ; Setup parameters for call to function halProcessKeyInterrupt
   \   000015   12....       LCALL   ??halProcessKeyInterrupt?relay
    526            }
    527          
    528            /*
    529              Clear the CPU interrupt flag for Port_0
    530              PxIFG has to be cleared before PxIF
    531            */
    532            HAL_KEY_SW_6_PXIFG = 0;
   \                     ??halKeyPort0Isr_0:
   \   000018   758900       MOV     0x89,#0x0
    533            HAL_KEY_CPU_PORT_0_IF = 0;
   \   00001B   C2C5         CLR     0xc0.5
    534            
    535            CLEAR_SLEEP_MODE();
    536            HAL_EXIT_ISR();
   \   00001D                REQUIRE ?Subroutine1
   \   00001D                REQUIRE P0IFG
   \   00001D                REQUIRE _A_IRCON
   \   00001D                REQUIRE _A_IEN0
   \   00001D                ; // Fall through to label ?Subroutine1
    537          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EE           MOV     A,R6
   \   000001   A2E0         MOV     C,0xE0 /* A   */.0
   \   000003   92AF         MOV     0xa8.7,C
   \   000005   7F01         MOV     R7,#0x1
   \   000007   02....       LJMP    ?INTERRUPT_LEAVE_XSP
    538          
    539          
    540          /**************************************************************************************************
    541           * @fn      halKeyPort2Isr
    542           *
    543           * @brief   Port2 ISR
    544           *
    545           * @param
    546           *
    547           * @return
    548           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    549          HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
   \                     halKeyPort2Isr:
    550          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 15
   \   000007                ; Auto size: 0
    551            HAL_ENTER_ISR();
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   92E0         MOV     0xE0 /* A   */.0,C
   \   00000C   FE           MOV     R6,A
   \   00000D   D2AF         SETB    0xa8.7
    552            
    553            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
   \   00000F   E58B         MOV     A,0x8b
   \   000011   A2E0         MOV     C,0xE0 /* A   */.0
   \   000013   5003         JNC     ??halKeyPort2Isr_0
    554            {
    555              halProcessKeyInterrupt();
   \   000015                ; Setup parameters for call to function halProcessKeyInterrupt
   \   000015   12....       LCALL   ??halProcessKeyInterrupt?relay
    556            }
    557          
    558            /*
    559              Clear the CPU interrupt flag for Port_2
    560              PxIFG has to be cleared before PxIF
    561              Notes: P2_1 and P2_2 are debug lines.
    562            */
    563            HAL_KEY_JOY_MOVE_PXIFG = 0;
   \                     ??halKeyPort2Isr_0:
   \   000018   758B00       MOV     0x8b,#0x0
    564            HAL_KEY_CPU_PORT_2_IF = 0;
   \   00001B   C2E8         CLR     0xe8.0
    565          
    566            CLEAR_SLEEP_MODE();
    567            HAL_EXIT_ISR();
   \   00001D   80..         SJMP    ?Subroutine1
   \   00001F                REQUIRE P2IFG
   \   00001F                REQUIRE _A_IEN0
   \   00001F                REQUIRE _A_IRCON2
    568          }

   \                                 In  segment INTVEC, offset 0x33, root
   \                     `??halKeyPort2Isr??INTVEC 51`:
   \   000033   02....       LJMP       (halKeyPort2Isr)

   \                                 In  segment INTVEC, offset 0x6b, root
   \                     `??halKeyPort0Isr??INTVEC 107`:
   \   00006B   02....       LJMP       (halKeyPort0Isr)

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyConfig?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyPoll?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halGetJoyKeyInput?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halGetJoyKeyInput

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halProcessKeyInterrupt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halProcessKeyInterrupt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyEnterSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyEnterSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyExitSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyExitSleep
    569          
    570          #else
    571          
    572          
    573          void HalKeyInit(void){}
    574          void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
    575          uint8 HalKeyRead(void){ return 0;}
    576          void HalKeyPoll(void){}
    577          
    578          #endif /* HAL_KEY */
    579          
    580          
    581          
    582          
    583          
    584          /**************************************************************************************************
    585          **************************************************************************************************/
    586          
    587          
    588          

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     HalKeyConfig                    2      0      0
       -> osal_stop_timerEx          4      0      0
       -> osal_start_timerEx         4      0      0
     HalKeyEnterSleep                0      0      0
     HalKeyExitSleep                 2      0      0
       -> HalKeyRead                 4      0      0
     HalKeyInit                      2      0      0
     HalKeyPoll                      2      0      0
     HalKeyRead                      0      0      0
     halGetJoyKeyInput               0      0      9
       -> HalAdcRead                 0      0     18
     halKeyPort0Isr                 15      0      0
       -> halProcessKeyInterrupt    30      0      0
     halKeyPort2Isr                 15      0      0
       -> halProcessKeyInterrupt    30      0      0
     halProcessKeyInterrupt          2      0      0
       -> osal_start_timerEx         4      0      0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _A_P0                             1
     P0IFG                             1
     P2IFG                             1
     PICTL                             1
     IEN2                              1
     _A_P2                             1
     _A_IEN0                           1
     P0IEN                             1
     P2IEN                             1
     _A_IEN1                           1
     _A_IRCON                          1
     _A_IRCON2                         1
     P0SEL                             1
     P2SEL                             1
     P0DIR                             1
     P2DIR                             1
     halKeySavedKeys                   1
     pHalKeyProcessFunction            2
     HalKeyConfigured                  1
     Hal_KeyIntEnable                  1
     HalKeyInit                       36
     ?Subroutine0                      4
     ??Subroutine2_0                   7
     HalKeyConfig                    104
     HalKeyRead                       21
     HalKeyPoll                       68
     halGetJoyKeyInput                92
     halProcessKeyInterrupt           49
     HalKeyEnterSleep                  3
     HalKeyExitSleep                  10
     halKeyPort0Isr                   29
     ?Subroutine1                     10
     halKeyPort2Isr                   31
     ??halKeyPort2Isr??INTVEC 51       3
     ??halKeyPort0Isr??INTVEC 107      3
     ??HalKeyInit?relay                6
     ??HalKeyConfig?relay              6
     ??HalKeyRead?relay                6
     ??HalKeyPoll?relay                6
     ??halGetJoyKeyInput?relay         6
     ??halProcessKeyInterrupt?relay    6
     ??HalKeyEnterSleep?relay          6
     ??HalKeyExitSleep?relay           6

 
 394 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   6 bytes in segment INTVEC
  70 bytes in segment NEAR_CODE
  16 bytes in segment SFR_AN
   5 bytes in segment XDATA_Z
 
 512 bytes of CODE  memory (+  6 bytes shared)
   0 bytes of DATA  memory (+ 16 bytes shared)
   5 bytes of XDATA memory

Errors: none
Warnings: 2
