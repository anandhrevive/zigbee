///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               16/Sep/2011  10:52:38 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZSta /
//                          ck¶¨Ê±¸´Î»¼ì²â\Components\stack\zdo\ZDApp.c       /
//    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg /
//                          " (-DCPU32MHZ -DROOT=__near_func                  /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cf /
//                          g" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Documents and          /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Co /
//                          mponents\stack\zdo\ZDApp.c" -D ZTOOL_P1 -D        /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D             /
//                          BUILD_ALL_DEVICES -D xLCD_SUPPORTED=DEBUG -D      /
//                          SOFT_SATRT -D ZDO_COORDINATOR -D NV_INIT -D       /
//                          RTR_NWK -lC "C:\Documents and                     /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\Coordina /
//                          torEB\List\" -lA "C:\Documents and                /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\Coordina /
//                          torEB\List\" --diag_suppress Pe001,Pa010 -o       /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\CoordinatorEB\Obj\" -e                  /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "C:\Documents and         /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\" -I     /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\SOURCE\" -I "C:\Documents and        /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \ZMAIN\TI2530DB\" -I "C:\Documents and            /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\MT\" -I "C:\Documents and       /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\HAL\INCLUDE\" -I "C:\Documents  /
//                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì² /
//                          â\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I    /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSO /
//                          C\" -I "C:\Documents and                          /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\OSAL\INCLUDE\" -I               /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"    /
//                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ /
//                          " -I "C:\Documents and Settings\Administrator\×ÀÃ /
//                          æ\ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Samp /
//                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE /
//                          C\" -I "C:\Documents and                          /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\SAPI\" -I "C:\Documents   /
//                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì² /
//                          â\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\STACK\SYS\" -I              /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"   /
//                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\" /
//                           -I "C:\Documents and Settings\Administrator\×ÀÃæ /
//                          \ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"    /
//                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\S /
//                          ADDR\" -I "C:\Documents and                       /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\SERVICES\SDATA\" -I             /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\" /
//                           -I "C:\Documents and Settings\Administrator\×ÀÃæ /
//                          \ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_ /
//                          LEVEL\" -I "C:\Documents and                      /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I        /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL /
//                          \srf04\SINGLE_CHIP\" -I D:\IAR\8051\INC\ -I       /
//                          D:\IAR\8051\INC\CLIB\ -Ohz                        /
//    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\ZSta /
//                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\CoordinatorEB\List\ZDApp.s51             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZDApp

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??ZDAppCheckForHoldKey?relay
        EXTERN ??ZDAppDetermineDeviceType?relay
        EXTERN ??ZDApp_AnnounceNewAddress?relay
        EXTERN ??ZDApp_DeviceAuthEvt?relay
        EXTERN ??ZDApp_InitUserDesc?relay
        EXTERN ??ZDApp_LeaveCtrlInit?relay
        EXTERN ??ZDApp_LeaveCtrlSet?relay
        EXTERN ??ZDApp_LeaveCtrlStartup?relay
        EXTERN ??ZDApp_LeaveReset?relay
        EXTERN ??ZDApp_LeaveUpdate?relay
        EXTERN ??ZDApp_NetworkInit?relay
        EXTERN ??ZDApp_NetworkStartEvt?relay
        EXTERN ??ZDApp_NodeProfileSync?relay
        EXTERN ??ZDApp_ProcessMsgCBs?relay
        EXTERN ??ZDApp_ProcessNetworkJoin?relay
        EXTERN ??ZDApp_ProcessOSALMsg?relay
        EXTERN ??ZDApp_RegisterCBs?relay
        EXTERN ??ZDApp_ResetTimerCancel?relay
        EXTERN ??ZDApp_ResetTimerStart?relay
        EXTERN ??ZDApp_SaveNwkKey?relay
        EXTERN ??ZDApp_SendMsg?relay
        EXTERN ??ZDOInitDevice?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_EQ_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??AddrMgrWriteNVRequest?relay
        FUNCTION ??AddrMgrWriteNVRequest?relay,0203H
        PUBLIC ??ZDAppCheckForHoldKey?relay
        FUNCTION ??ZDAppCheckForHoldKey?relay,0203H
        PUBLIC ??ZDAppDetermineDeviceType?relay
        FUNCTION ??ZDAppDetermineDeviceType?relay,0203H
        PUBLIC ??ZDApp_AnnounceNewAddress?relay
        FUNCTION ??ZDApp_AnnounceNewAddress?relay,0203H
        PUBLIC ??ZDApp_ChangeMatchDescRespPermission?relay
        FUNCTION ??ZDApp_ChangeMatchDescRespPermission?relay,0203H
        PUBLIC ??ZDApp_CoordStartPANIDConflictCB?relay
        FUNCTION ??ZDApp_CoordStartPANIDConflictCB?relay,0203H
        PUBLIC ??ZDApp_DeviceAuthEvt?relay
        FUNCTION ??ZDApp_DeviceAuthEvt?relay,0203H
        PUBLIC ??ZDApp_InMsgCB?relay
        FUNCTION ??ZDApp_InMsgCB?relay,0203H
        PUBLIC ??ZDApp_Init?relay
        FUNCTION ??ZDApp_Init?relay,0203H
        PUBLIC ??ZDApp_InitUserDesc?relay
        FUNCTION ??ZDApp_InitUserDesc?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlBypass?relay
        FUNCTION ??ZDApp_LeaveCtrlBypass?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlInit?relay
        FUNCTION ??ZDApp_LeaveCtrlInit?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlSet?relay
        FUNCTION ??ZDApp_LeaveCtrlSet?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlStartup?relay
        FUNCTION ??ZDApp_LeaveCtrlStartup?relay,0203H
        PUBLIC ??ZDApp_LeaveReset?relay
        FUNCTION ??ZDApp_LeaveReset?relay,0203H
        PUBLIC ??ZDApp_LeaveUpdate?relay
        FUNCTION ??ZDApp_LeaveUpdate?relay,0203H
        PUBLIC ??ZDApp_NVUpdate?relay
        FUNCTION ??ZDApp_NVUpdate?relay,0203H
        PUBLIC ??ZDApp_NetworkInit?relay
        FUNCTION ??ZDApp_NetworkInit?relay,0203H
        PUBLIC ??ZDApp_NetworkStartEvt?relay
        FUNCTION ??ZDApp_NetworkStartEvt?relay,0203H
        PUBLIC ??ZDApp_NodeProfileSync?relay
        FUNCTION ??ZDApp_NodeProfileSync?relay,0203H
        PUBLIC ??ZDApp_NwkStateUpdateCB?relay
        FUNCTION ??ZDApp_NwkStateUpdateCB?relay,0203H
        PUBLIC ??ZDApp_ProcessMsgCBs?relay
        FUNCTION ??ZDApp_ProcessMsgCBs?relay,0203H
        PUBLIC ??ZDApp_ProcessNetworkJoin?relay
        FUNCTION ??ZDApp_ProcessNetworkJoin?relay,0203H
        PUBLIC ??ZDApp_ProcessOSALMsg?relay
        FUNCTION ??ZDApp_ProcessOSALMsg?relay,0203H
        PUBLIC ??ZDApp_ProcessSecEvent?relay
        FUNCTION ??ZDApp_ProcessSecEvent?relay,0203H
        PUBLIC ??ZDApp_ProcessSecMsg?relay
        FUNCTION ??ZDApp_ProcessSecMsg?relay,0203H
        PUBLIC ??ZDApp_ReadNetworkRestoreState?relay
        FUNCTION ??ZDApp_ReadNetworkRestoreState?relay,0203H
        PUBLIC ??ZDApp_RegisterCBs?relay
        FUNCTION ??ZDApp_RegisterCBs?relay,0203H
        PUBLIC ??ZDApp_ResetNwkKey?relay
        FUNCTION ??ZDApp_ResetNwkKey?relay,0203H
        PUBLIC ??ZDApp_ResetTimerCancel?relay
        FUNCTION ??ZDApp_ResetTimerCancel?relay,0203H
        PUBLIC ??ZDApp_ResetTimerStart?relay
        FUNCTION ??ZDApp_ResetTimerStart?relay,0203H
        PUBLIC ??ZDApp_RestoreNetworkState?relay
        FUNCTION ??ZDApp_RestoreNetworkState?relay,0203H
        PUBLIC ??ZDApp_RestoreNwkKey?relay
        FUNCTION ??ZDApp_RestoreNwkKey?relay,0203H
        PUBLIC ??ZDApp_SaveNetworkStateEvt?relay
        FUNCTION ??ZDApp_SaveNetworkStateEvt?relay,0203H
        PUBLIC ??ZDApp_SaveNwkKey?relay
        FUNCTION ??ZDApp_SaveNwkKey?relay,0203H
        PUBLIC ??ZDApp_SecInit?relay
        FUNCTION ??ZDApp_SecInit?relay,0203H
        PUBLIC ??ZDApp_SendEventMsg?relay
        FUNCTION ??ZDApp_SendEventMsg?relay,0203H
        PUBLIC ??ZDApp_SendMsg?relay
        FUNCTION ??ZDApp_SendMsg?relay,0203H
        PUBLIC ??ZDApp_StartJoiningCycle?relay
        FUNCTION ??ZDApp_StartJoiningCycle?relay,0203H
        PUBLIC ??ZDApp_StopJoiningCycle?relay
        FUNCTION ??ZDApp_StopJoiningCycle?relay,0203H
        PUBLIC ??ZDApp_event_loop?relay
        FUNCTION ??ZDApp_event_loop?relay,0203H
        PUBLIC ??ZDOInitDevice?relay
        FUNCTION ??ZDOInitDevice?relay,0203H
        PUBLIC ??ZDO_AddrChangeIndicationCB?relay
        FUNCTION ??ZDO_AddrChangeIndicationCB?relay,0203H
        PUBLIC ??ZDO_ConcentratorIndicationCB?relay
        FUNCTION ??ZDO_ConcentratorIndicationCB?relay,0203H
        PUBLIC ??ZDO_JoinConfirmCB?relay
        FUNCTION ??ZDO_JoinConfirmCB?relay,0203H
        PUBLIC ??ZDO_JoinIndicationCB?relay
        FUNCTION ??ZDO_JoinIndicationCB?relay,0203H
        PUBLIC ??ZDO_LeaveCnf?relay
        FUNCTION ??ZDO_LeaveCnf?relay,0203H
        PUBLIC ??ZDO_LeaveInd?relay
        FUNCTION ??ZDO_LeaveInd?relay,0203H
        PUBLIC ??ZDO_ManytoOneFailureIndicationCB?relay
        FUNCTION ??ZDO_ManytoOneFailureIndicationCB?relay,0203H
        PUBLIC ??ZDO_NetworkDiscoveryConfirmCB?relay
        FUNCTION ??ZDO_NetworkDiscoveryConfirmCB?relay,0203H
        PUBLIC ??ZDO_NetworkFormationConfirmCB?relay
        FUNCTION ??ZDO_NetworkFormationConfirmCB?relay,0203H
        PUBLIC ??ZDO_PollConfirmCB?relay
        FUNCTION ??ZDO_PollConfirmCB?relay,0203H
        PUBLIC ??ZDO_RegisterForZdoCB?relay
        FUNCTION ??ZDO_RegisterForZdoCB?relay,0203H
        PUBLIC ??ZDO_SrcRtgIndCB?relay
        FUNCTION ??ZDO_SrcRtgIndCB?relay,0203H
        PUBLIC ??ZDO_StartRouterConfirmCB?relay
        FUNCTION ??ZDO_StartRouterConfirmCB?relay,0203H
        PUBLIC ??ZDO_SyncIndicationCB?relay
        FUNCTION ??ZDO_SyncIndicationCB?relay,0203H
        PUBLIC ??ZDO_UpdateDeviceIndication?relay
        FUNCTION ??ZDO_UpdateDeviceIndication?relay,0203H
        PUBLIC AddrMgrWriteNVRequest
        FUNCTION AddrMgrWriteNVRequest,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC BeCoor
        PUBLIC ZDAppCheckForHoldKey
        FUNCTION ZDAppCheckForHoldKey,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppDetermineDeviceType
        FUNCTION ZDAppDetermineDeviceType,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppNwkAddr
        PUBLIC ZDAppTaskID
        PUBLIC ZDApp_AnnounceNewAddress
        FUNCTION ZDApp_AnnounceNewAddress,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDApp_AutoFindMode_epDesc
        PUBLIC ZDApp_ChangeMatchDescRespPermission
        FUNCTION ZDApp_ChangeMatchDescRespPermission,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_CoordStartPANIDConflictCB
        FUNCTION ZDApp_CoordStartPANIDConflictCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_DeviceAuthEvt
        FUNCTION ZDApp_DeviceAuthEvt,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_Init
        FUNCTION ZDApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_InitUserDesc
        FUNCTION ZDApp_InitUserDesc,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_LeaveCtrl
        PUBLIC ZDApp_LeaveCtrlBypass
        FUNCTION ZDApp_LeaveCtrlBypass,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveCtrlInit
        FUNCTION ZDApp_LeaveCtrlInit,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlSet
        FUNCTION ZDApp_LeaveCtrlSet,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlStartup
        FUNCTION ZDApp_LeaveCtrlStartup,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveUpdate
        FUNCTION ZDApp_LeaveUpdate,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_NetworkInit
        FUNCTION ZDApp_NetworkInit,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NetworkStartEvt
        FUNCTION ZDApp_NetworkStartEvt,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NodeProfileSync
        FUNCTION ZDApp_NodeProfileSync,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDApp_NwkStateUpdateCB
        FUNCTION ZDApp_NwkStateUpdateCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ProcessMsgCBs
        FUNCTION ZDApp_ProcessMsgCBs,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 54, STACK
        PUBLIC ZDApp_ProcessNetworkJoin
        FUNCTION ZDApp_ProcessNetworkJoin,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_ProcessOSALMsg
        FUNCTION ZDApp_ProcessOSALMsg,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDApp_ProcessSecEvent
        FUNCTION ZDApp_ProcessSecEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_ProcessSecMsg
        FUNCTION ZDApp_ProcessSecMsg,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ReadNetworkRestoreState
        FUNCTION ZDApp_ReadNetworkRestoreState,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RegisterCBs
        FUNCTION ZDApp_RegisterCBs,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetNwkKey
        FUNCTION ZDApp_ResetNwkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDApp_ResetTimerCancel
        FUNCTION ZDApp_ResetTimerCancel,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_RestoreNetworkState
        FUNCTION ZDApp_RestoreNetworkState,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC ZDApp_SaveNetworkStateEvt
        FUNCTION ZDApp_SaveNetworkStateEvt,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_SaveNwkKey
        FUNCTION ZDApp_SaveNwkKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 37, STACK
        PUBLIC ZDApp_SavedPollRate
        PUBLIC ZDApp_SecInit
        FUNCTION ZDApp_SecInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_SendEventMsg
        FUNCTION ZDApp_SendEventMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_SendMsg
        FUNCTION ZDApp_SendMsg,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDApp_StartJoiningCycle
        FUNCTION ZDApp_StartJoiningCycle,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StopJoiningCycle
        FUNCTION ZDApp_StopJoiningCycle,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_epDesc
        PUBLIC ZDApp_event_loop
        FUNCTION ZDApp_event_loop,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDOInitDevice
        FUNCTION ZDOInitDevice,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_AddrChangeIndicationCB
        FUNCTION ZDO_AddrChangeIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_ConcentratorIndicationCB
        FUNCTION ZDO_ConcentratorIndicationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC ZDO_JoinConfirmCB
        FUNCTION ZDO_JoinConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_JoinIndicationCB
        FUNCTION ZDO_JoinIndicationCB,0203H
        ARGFRAME XSTACK, 1, STACK
        PUBLIC ZDO_LeaveCnf
        FUNCTION ZDO_LeaveCnf,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDO_LeaveInd
        FUNCTION ZDO_LeaveInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDO_ManytoOneFailureIndicationCB
        FUNCTION ZDO_ManytoOneFailureIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_NetworkDiscoveryConfirmCB
        FUNCTION ZDO_NetworkDiscoveryConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC ZDO_NetworkFormationConfirmCB
        FUNCTION ZDO_NetworkFormationConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_PollConfirmCB
        FUNCTION ZDO_PollConfirmCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_SrcRtgIndCB
        FUNCTION ZDO_SrcRtgIndCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC ZDO_StartRouterConfirmCB
        FUNCTION ZDO_StartRouterConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_SyncIndicationCB
        FUNCTION ZDO_SyncIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_UpdateDeviceIndication
        FUNCTION ZDO_UpdateDeviceIndication,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_UseExtendedPANID
        PUBWEAK _A_P1
        PUBWEAK __Constant_0
        PUBWEAK __Constant_1
        PUBWEAK __Constant_3e8
        PUBLIC _tmpRejoinState
        PUBLIC continueJoining
        PUBLIC devStartMode
        PUBLIC devState
        PUBLIC nwkFrameCounterChanges
        PUBLIC nwkStatus
        PUBLIC retryCnt
        PUBLIC zdappMgmtNwkDiscReqInProgress
        PUBLIC zdappMgmtNwkDiscRspAddr
        PUBLIC zdappMgmtNwkDiscRspTransSeq
        PUBLIC zdappMgmtNwkDiscStartIndex
        PUBLIC zdappMgmtSavedNwkState
        PUBLIC zdoCBFunc
        PUBLIC zdoDiscCounter
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
ZDO_Init            SYMBOL "ZDO_Init"
afRegister          SYMBOL "afRegister"
HalLedBlink         SYMBOL "HalLedBlink"
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
ZDO_StartDevice     SYMBOL "ZDO_StartDevice"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_pwrmgr_device  SYMBOL "osal_pwrmgr_device"
osal_set_event      SYMBOL "osal_set_event"
ZDO_UpdateNwkStatus SYMBOL "ZDO_UpdateNwkStatus"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
ZDSecMgrNewDeviceEvent SYMBOL "ZDSecMgrNewDeviceEvent"
ZDSecMgrSaveTCLinkKey SYMBOL "ZDSecMgrSaveTCLinkKey"
zgInitItems         SYMBOL "zgInitItems"
ZDConfig_InitDescriptors SYMBOL "ZDConfig_InitDescriptors"
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
osal_rand           SYMBOL "osal_rand"
NLME_SetBroadcastFilter SYMBOL "NLME_SetBroadcastFilter"
zgReadStartupOptions SYMBOL "zgReadStartupOptions"
nwk_ExtPANIDValid   SYMBOL "nwk_ExtPANIDValid"
NLME_GetEnergyThreshold SYMBOL "NLME_GetEnergyThreshold"
NLME_SetEnergyThreshold SYMBOL "NLME_SetEnergyThreshold"
NLME_StartRouterRequest SYMBOL "NLME_StartRouterRequest"
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
NLME_InitNV         SYMBOL "NLME_InitNV"
NLME_RestoreFromNV  SYMBOL "NLME_RestoreFromNV"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
osal_memset         SYMBOL "osal_memset"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_read        SYMBOL "osal_nv_read"
HalKeyRead          SYMBOL "HalKeyRead"
ZDP_IncomingData    SYMBOL "ZDP_IncomingData"
NLME_JoinRequest    SYMBOL "NLME_JoinRequest"
ZMacSetReq          SYMBOL "ZMacSetReq"
NLME_ReJoinRequest  SYMBOL "NLME_ReJoinRequest"
NLME_SetQueuedPollRate SYMBOL "NLME_SetQueuedPollRate"
NLME_SetResponseRate SYMBOL "NLME_SetResponseRate"
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
ZDO_UpdateAddrManager SYMBOL "ZDO_UpdateAddrManager"
osal_mem_free       SYMBOL "osal_mem_free"
ZDO_ParseBindUnbindReq SYMBOL "ZDO_ParseBindUnbindReq"
ZDO_ProcessBindUnbindReq SYMBOL "ZDO_ProcessBindUnbindReq"
ZDMatchSendState    SYMBOL "ZDMatchSendState"
ZDO_ParseEndDeviceBindReq SYMBOL "ZDO_ParseEndDeviceBindReq"
ZDO_MatchEndDeviceBind SYMBOL "ZDO_MatchEndDeviceBind"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
ZDSecMgrTransportKeyInd SYMBOL "ZDSecMgrTransportKeyInd"
ZDSecMgrUpdateDeviceInd SYMBOL "ZDSecMgrUpdateDeviceInd"
ZDSecMgrSwitchKeyInd SYMBOL "ZDSecMgrSwitchKeyInd"
nwkNeighborInitTable SYMBOL "nwkNeighborInitTable"
NLME_NwkDiscTerm    SYMBOL "NLME_NwkDiscTerm"
SSP_ReadNwkActiveKey SYMBOL "SSP_ReadNwkActiveKey"
osal_nv_write       SYMBOL "osal_nv_write"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
NLME_RemoveChild    SYMBOL "NLME_RemoveChild"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_memcpy         SYMBOL "osal_memcpy"
osal_msg_send       SYMBOL "osal_msg_send"
sAddrExtCmp         SYMBOL "sAddrExtCmp"
HalLedSet           SYMBOL "HalLedSet"
NLME_LeaveRsp       SYMBOL "NLME_LeaveRsp"
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
RTG_MTORouteReq     SYMBOL "RTG_MTORouteReq"
ZDP_GenericRsp      SYMBOL "ZDP_GenericRsp"
afSetMatch          SYMBOL "afSetMatch"
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
nwk_getNetworkDesc  SYMBOL "nwk_getNetworkDesc"
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
??HalKeyRead?relay  SYMBOL "?relay", HalKeyRead
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??NLME_GetCoordShortAddr?relay SYMBOL "?relay", NLME_GetCoordShortAddr
??NLME_GetEnergyThreshold?relay SYMBOL "?relay", NLME_GetEnergyThreshold
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??NLME_InitNV?relay SYMBOL "?relay", NLME_InitNV
??NLME_JoinRequest?relay SYMBOL "?relay", NLME_JoinRequest
??NLME_LeaveRsp?relay SYMBOL "?relay", NLME_LeaveRsp
??NLME_NwkDiscTerm?relay SYMBOL "?relay", NLME_NwkDiscTerm
??NLME_ReJoinRequest?relay SYMBOL "?relay", NLME_ReJoinRequest
??NLME_RemoveChild?relay SYMBOL "?relay", NLME_RemoveChild
??NLME_RestoreFromNV?relay SYMBOL "?relay", NLME_RestoreFromNV
??NLME_SetBroadcastFilter?relay SYMBOL "?relay", NLME_SetBroadcastFilter
??NLME_SetEnergyThreshold?relay SYMBOL "?relay", NLME_SetEnergyThreshold
??NLME_SetPollRate?relay SYMBOL "?relay", NLME_SetPollRate
??NLME_SetQueuedPollRate?relay SYMBOL "?relay", NLME_SetQueuedPollRate
??NLME_SetResponseRate?relay SYMBOL "?relay", NLME_SetResponseRate
??NLME_StartRouterRequest?relay SYMBOL "?relay", NLME_StartRouterRequest
??RTG_MTORouteReq?relay SYMBOL "?relay", RTG_MTORouteReq
??SSP_ReadNwkActiveKey?relay SYMBOL "?relay", SSP_ReadNwkActiveKey
??ZDConfig_InitDescriptors?relay SYMBOL "?relay", ZDConfig_InitDescriptors
??ZDMatchSendState?relay SYMBOL "?relay", ZDMatchSendState
??ZDO_Init?relay    SYMBOL "?relay", ZDO_Init
??ZDO_MatchEndDeviceBind?relay SYMBOL "?relay", ZDO_MatchEndDeviceBind
??ZDO_ParseAddrRsp?relay SYMBOL "?relay", ZDO_ParseAddrRsp
??ZDO_ParseBindUnbindReq?relay SYMBOL "?relay", ZDO_ParseBindUnbindReq
??ZDO_ParseEndDeviceBindReq?relay SYMBOL "?relay", ZDO_ParseEndDeviceBindReq
??ZDO_ProcessBindUnbindReq?relay SYMBOL "?relay", ZDO_ProcessBindUnbindReq
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDO_StartDevice?relay SYMBOL "?relay", ZDO_StartDevice
??ZDO_UpdateAddrManager?relay SYMBOL "?relay", ZDO_UpdateAddrManager
??ZDO_UpdateNwkStatus?relay SYMBOL "?relay", ZDO_UpdateNwkStatus
??ZDP_DeviceAnnce?relay SYMBOL "?relay", ZDP_DeviceAnnce
??ZDP_GenericRsp?relay SYMBOL "?relay", ZDP_GenericRsp
??ZDP_IncomingData?relay SYMBOL "?relay", ZDP_IncomingData
??ZDSecMgrInit?relay SYMBOL "?relay", ZDSecMgrInit
??ZDSecMgrNewDeviceEvent?relay SYMBOL "?relay", ZDSecMgrNewDeviceEvent
??ZDSecMgrSaveTCLinkKey?relay SYMBOL "?relay", ZDSecMgrSaveTCLinkKey
??ZDSecMgrSwitchKeyInd?relay SYMBOL "?relay", ZDSecMgrSwitchKeyInd
??ZDSecMgrTransportKeyInd?relay SYMBOL "?relay", ZDSecMgrTransportKeyInd
??ZDSecMgrUpdateDeviceInd?relay SYMBOL "?relay", ZDSecMgrUpdateDeviceInd
??ZMacSetReq?relay  SYMBOL "?relay", ZMacSetReq
??afRegister?relay  SYMBOL "?relay", afRegister
??afSetMatch?relay  SYMBOL "?relay", afSetMatch
??nwkNeighborInitTable?relay SYMBOL "?relay", nwkNeighborInitTable
??nwk_ExtPANIDValid?relay SYMBOL "?relay", nwk_ExtPANIDValid
??nwk_getNetworkDesc?relay SYMBOL "?relay", nwk_getNetworkDesc
??osal_get_timeoutEx?relay SYMBOL "?relay", osal_get_timeoutEx
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_pwrmgr_device?relay SYMBOL "?relay", osal_pwrmgr_device
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??sAddrExtCmp?relay SYMBOL "?relay", sAddrExtCmp
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
??zgInitItems?relay SYMBOL "?relay", zgInitItems
??zgReadStartupOptions?relay SYMBOL "?relay", zgReadStartupOptions
??zgWriteStartupOptions?relay SYMBOL "?relay", zgWriteStartupOptions
AddrMgrWriteNVRequest SYMBOL "AddrMgrWriteNVRequest"
??AddrMgrWriteNVRequest?relay SYMBOL "?relay", AddrMgrWriteNVRequest
ZDAppCheckForHoldKey SYMBOL "ZDAppCheckForHoldKey"
??ZDAppCheckForHoldKey?relay SYMBOL "?relay", ZDAppCheckForHoldKey
ZDAppDetermineDeviceType SYMBOL "ZDAppDetermineDeviceType"
??ZDAppDetermineDeviceType?relay SYMBOL "?relay", ZDAppDetermineDeviceType
ZDApp_AnnounceNewAddress SYMBOL "ZDApp_AnnounceNewAddress"
??ZDApp_AnnounceNewAddress?relay SYMBOL "?relay", ZDApp_AnnounceNewAddress
ZDApp_ChangeMatchDescRespPermission SYMBOL "ZDApp_ChangeMatchDescRespPermission"
??ZDApp_ChangeMatchDescRespPermission?relay SYMBOL "?relay", ZDApp_ChangeMatchDescRespPermission
ZDApp_CoordStartPANIDConflictCB SYMBOL "ZDApp_CoordStartPANIDConflictCB"
??ZDApp_CoordStartPANIDConflictCB?relay SYMBOL "?relay", ZDApp_CoordStartPANIDConflictCB
ZDApp_DeviceAuthEvt SYMBOL "ZDApp_DeviceAuthEvt"
??ZDApp_DeviceAuthEvt?relay SYMBOL "?relay", ZDApp_DeviceAuthEvt
ZDApp_InMsgCB       SYMBOL "ZDApp_InMsgCB"
??ZDApp_InMsgCB?relay SYMBOL "?relay", ZDApp_InMsgCB
ZDApp_Init          SYMBOL "ZDApp_Init"
??ZDApp_Init?relay  SYMBOL "?relay", ZDApp_Init
ZDApp_InitUserDesc  SYMBOL "ZDApp_InitUserDesc"
??ZDApp_InitUserDesc?relay SYMBOL "?relay", ZDApp_InitUserDesc
ZDApp_LeaveCtrlBypass SYMBOL "ZDApp_LeaveCtrlBypass"
??ZDApp_LeaveCtrlBypass?relay SYMBOL "?relay", ZDApp_LeaveCtrlBypass
ZDApp_LeaveCtrlInit SYMBOL "ZDApp_LeaveCtrlInit"
??ZDApp_LeaveCtrlInit?relay SYMBOL "?relay", ZDApp_LeaveCtrlInit
ZDApp_LeaveCtrlSet  SYMBOL "ZDApp_LeaveCtrlSet"
??ZDApp_LeaveCtrlSet?relay SYMBOL "?relay", ZDApp_LeaveCtrlSet
ZDApp_LeaveCtrlStartup SYMBOL "ZDApp_LeaveCtrlStartup"
??ZDApp_LeaveCtrlStartup?relay SYMBOL "?relay", ZDApp_LeaveCtrlStartup
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
??ZDApp_LeaveReset?relay SYMBOL "?relay", ZDApp_LeaveReset
ZDApp_LeaveUpdate   SYMBOL "ZDApp_LeaveUpdate"
??ZDApp_LeaveUpdate?relay SYMBOL "?relay", ZDApp_LeaveUpdate
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
??ZDApp_NVUpdate?relay SYMBOL "?relay", ZDApp_NVUpdate
ZDApp_NetworkInit   SYMBOL "ZDApp_NetworkInit"
??ZDApp_NetworkInit?relay SYMBOL "?relay", ZDApp_NetworkInit
ZDApp_NetworkStartEvt SYMBOL "ZDApp_NetworkStartEvt"
??ZDApp_NetworkStartEvt?relay SYMBOL "?relay", ZDApp_NetworkStartEvt
ZDApp_NodeProfileSync SYMBOL "ZDApp_NodeProfileSync"
??ZDApp_NodeProfileSync?relay SYMBOL "?relay", ZDApp_NodeProfileSync
ZDApp_NwkStateUpdateCB SYMBOL "ZDApp_NwkStateUpdateCB"
??ZDApp_NwkStateUpdateCB?relay SYMBOL "?relay", ZDApp_NwkStateUpdateCB
ZDApp_ProcessMsgCBs SYMBOL "ZDApp_ProcessMsgCBs"
??ZDApp_ProcessMsgCBs?relay SYMBOL "?relay", ZDApp_ProcessMsgCBs
ZDApp_ProcessNetworkJoin SYMBOL "ZDApp_ProcessNetworkJoin"
??ZDApp_ProcessNetworkJoin?relay SYMBOL "?relay", ZDApp_ProcessNetworkJoin
ZDApp_ProcessOSALMsg SYMBOL "ZDApp_ProcessOSALMsg"
??ZDApp_ProcessOSALMsg?relay SYMBOL "?relay", ZDApp_ProcessOSALMsg
ZDApp_ProcessSecEvent SYMBOL "ZDApp_ProcessSecEvent"
??ZDApp_ProcessSecEvent?relay SYMBOL "?relay", ZDApp_ProcessSecEvent
ZDApp_ProcessSecMsg SYMBOL "ZDApp_ProcessSecMsg"
??ZDApp_ProcessSecMsg?relay SYMBOL "?relay", ZDApp_ProcessSecMsg
ZDApp_ReadNetworkRestoreState SYMBOL "ZDApp_ReadNetworkRestoreState"
??ZDApp_ReadNetworkRestoreState?relay SYMBOL "?relay", ZDApp_ReadNetworkRestoreState
ZDApp_RegisterCBs   SYMBOL "ZDApp_RegisterCBs"
??ZDApp_RegisterCBs?relay SYMBOL "?relay", ZDApp_RegisterCBs
ZDApp_ResetNwkKey   SYMBOL "ZDApp_ResetNwkKey"
??ZDApp_ResetNwkKey?relay SYMBOL "?relay", ZDApp_ResetNwkKey
ZDApp_ResetTimerCancel SYMBOL "ZDApp_ResetTimerCancel"
??ZDApp_ResetTimerCancel?relay SYMBOL "?relay", ZDApp_ResetTimerCancel
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
??ZDApp_ResetTimerStart?relay SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNetworkState SYMBOL "ZDApp_RestoreNetworkState"
??ZDApp_RestoreNetworkState?relay SYMBOL "?relay", ZDApp_RestoreNetworkState
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
??ZDApp_RestoreNwkKey?relay SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_SaveNetworkStateEvt SYMBOL "ZDApp_SaveNetworkStateEvt"
??ZDApp_SaveNetworkStateEvt?relay SYMBOL "?relay", ZDApp_SaveNetworkStateEvt
ZDApp_SaveNwkKey    SYMBOL "ZDApp_SaveNwkKey"
??ZDApp_SaveNwkKey?relay SYMBOL "?relay", ZDApp_SaveNwkKey
ZDApp_SecInit       SYMBOL "ZDApp_SecInit"
??ZDApp_SecInit?relay SYMBOL "?relay", ZDApp_SecInit
ZDApp_SendEventMsg  SYMBOL "ZDApp_SendEventMsg"
??ZDApp_SendEventMsg?relay SYMBOL "?relay", ZDApp_SendEventMsg
ZDApp_SendMsg       SYMBOL "ZDApp_SendMsg"
??ZDApp_SendMsg?relay SYMBOL "?relay", ZDApp_SendMsg
ZDApp_StartJoiningCycle SYMBOL "ZDApp_StartJoiningCycle"
??ZDApp_StartJoiningCycle?relay SYMBOL "?relay", ZDApp_StartJoiningCycle
ZDApp_StopJoiningCycle SYMBOL "ZDApp_StopJoiningCycle"
??ZDApp_StopJoiningCycle?relay SYMBOL "?relay", ZDApp_StopJoiningCycle
ZDApp_event_loop    SYMBOL "ZDApp_event_loop"
??ZDApp_event_loop?relay SYMBOL "?relay", ZDApp_event_loop
ZDOInitDevice       SYMBOL "ZDOInitDevice"
??ZDOInitDevice?relay SYMBOL "?relay", ZDOInitDevice
ZDO_AddrChangeIndicationCB SYMBOL "ZDO_AddrChangeIndicationCB"
??ZDO_AddrChangeIndicationCB?relay SYMBOL "?relay", ZDO_AddrChangeIndicationCB
ZDO_ConcentratorIndicationCB SYMBOL "ZDO_ConcentratorIndicationCB"
??ZDO_ConcentratorIndicationCB?relay SYMBOL "?relay", ZDO_ConcentratorIndicationCB
ZDO_JoinConfirmCB   SYMBOL "ZDO_JoinConfirmCB"
??ZDO_JoinConfirmCB?relay SYMBOL "?relay", ZDO_JoinConfirmCB
ZDO_JoinIndicationCB SYMBOL "ZDO_JoinIndicationCB"
??ZDO_JoinIndicationCB?relay SYMBOL "?relay", ZDO_JoinIndicationCB
ZDO_LeaveCnf        SYMBOL "ZDO_LeaveCnf"
??ZDO_LeaveCnf?relay SYMBOL "?relay", ZDO_LeaveCnf
ZDO_LeaveInd        SYMBOL "ZDO_LeaveInd"
??ZDO_LeaveInd?relay SYMBOL "?relay", ZDO_LeaveInd
ZDO_ManytoOneFailureIndicationCB SYMBOL "ZDO_ManytoOneFailureIndicationCB"
??ZDO_ManytoOneFailureIndicationCB?relay SYMBOL "?relay", ZDO_ManytoOneFailureIndicationCB
ZDO_NetworkDiscoveryConfirmCB SYMBOL "ZDO_NetworkDiscoveryConfirmCB"
??ZDO_NetworkDiscoveryConfirmCB?relay SYMBOL "?relay", ZDO_NetworkDiscoveryConfirmCB
ZDO_NetworkFormationConfirmCB SYMBOL "ZDO_NetworkFormationConfirmCB"
??ZDO_NetworkFormationConfirmCB?relay SYMBOL "?relay", ZDO_NetworkFormationConfirmCB
ZDO_PollConfirmCB   SYMBOL "ZDO_PollConfirmCB"
??ZDO_PollConfirmCB?relay SYMBOL "?relay", ZDO_PollConfirmCB
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
??ZDO_RegisterForZdoCB?relay SYMBOL "?relay", ZDO_RegisterForZdoCB
ZDO_SrcRtgIndCB     SYMBOL "ZDO_SrcRtgIndCB"
??ZDO_SrcRtgIndCB?relay SYMBOL "?relay", ZDO_SrcRtgIndCB
ZDO_StartRouterConfirmCB SYMBOL "ZDO_StartRouterConfirmCB"
??ZDO_StartRouterConfirmCB?relay SYMBOL "?relay", ZDO_StartRouterConfirmCB
ZDO_SyncIndicationCB SYMBOL "ZDO_SyncIndicationCB"
??ZDO_SyncIndicationCB?relay SYMBOL "?relay", ZDO_SyncIndicationCB
ZDO_UpdateDeviceIndication SYMBOL "ZDO_UpdateDeviceIndication"
??ZDO_UpdateDeviceIndication?relay SYMBOL "?relay", ZDO_UpdateDeviceIndication

        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_Init
        FUNCTION ZDO_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrInit
        FUNCTION ZDSecMgrInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_StartDevice
        FUNCTION ZDO_StartDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_pwrmgr_device
        FUNCTION osal_pwrmgr_device,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateNwkStatus
        FUNCTION ZDO_UpdateNwkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrNewDeviceEvent
        FUNCTION ZDSecMgrNewDeviceEvent,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSaveTCLinkKey
        FUNCTION ZDSecMgrSaveTCLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgInitItems
        FUNCTION zgInitItems,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDConfig_InitDescriptors
        FUNCTION ZDConfig_InitDescriptors,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetBroadcastFilter
        FUNCTION NLME_SetBroadcastFilter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgReadStartupOptions
        FUNCTION zgReadStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_ExtPANIDValid
        FUNCTION nwk_ExtPANIDValid,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetEnergyThreshold
        FUNCTION NLME_GetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetEnergyThreshold
        FUNCTION NLME_SetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_StartRouterRequest
        FUNCTION NLME_StartRouterRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_InitNV
        FUNCTION NLME_InitNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RestoreFromNV
        FUNCTION NLME_RestoreFromNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalKeyRead
        FUNCTION HalKeyRead,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_JoinRequest
        FUNCTION NLME_JoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReJoinRequest
        FUNCTION NLME_ReJoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetQueuedPollRate
        FUNCTION NLME_SetQueuedPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetResponseRate
        FUNCTION NLME_SetResponseRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateAddrManager
        FUNCTION ZDO_UpdateAddrManager,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseBindUnbindReq
        FUNCTION ZDO_ParseBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ProcessBindUnbindReq
        FUNCTION ZDO_ProcessBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDMatchSendState
        FUNCTION ZDMatchSendState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEndDeviceBindReq
        FUNCTION ZDO_ParseEndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_MatchEndDeviceBind
        FUNCTION ZDO_MatchEndDeviceBind,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrTransportKeyInd
        FUNCTION ZDSecMgrTransportKeyInd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrUpdateDeviceInd
        FUNCTION ZDSecMgrUpdateDeviceInd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSwitchKeyInd
        FUNCTION ZDSecMgrSwitchKeyInd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborInitTable
        FUNCTION nwkNeighborInitTable,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NwkDiscTerm
        FUNCTION NLME_NwkDiscTerm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_ReadNwkActiveKey
        FUNCTION SSP_ReadNwkActiveKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RemoveChild
        FUNCTION NLME_RemoveChild,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveRsp
        FUNCTION NLME_LeaveRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_MTORouteReq
        FUNCTION RTG_MTORouteReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afSetMatch
        FUNCTION afSetMatch,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_getNetworkDesc
        FUNCTION nwk_getNetworkDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalKeyRead?relay
        FUNCTION ??HalKeyRead?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??NLME_GetCoordShortAddr?relay
        FUNCTION ??NLME_GetCoordShortAddr?relay,00H
        EXTERN ??NLME_GetEnergyThreshold?relay
        FUNCTION ??NLME_GetEnergyThreshold?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??NLME_InitNV?relay
        FUNCTION ??NLME_InitNV?relay,00H
        EXTERN ??NLME_JoinRequest?relay
        FUNCTION ??NLME_JoinRequest?relay,00H
        EXTERN ??NLME_LeaveRsp?relay
        FUNCTION ??NLME_LeaveRsp?relay,00H
        EXTERN ??NLME_NwkDiscTerm?relay
        FUNCTION ??NLME_NwkDiscTerm?relay,00H
        EXTERN ??NLME_ReJoinRequest?relay
        FUNCTION ??NLME_ReJoinRequest?relay,00H
        EXTERN ??NLME_RemoveChild?relay
        FUNCTION ??NLME_RemoveChild?relay,00H
        EXTERN ??NLME_RestoreFromNV?relay
        FUNCTION ??NLME_RestoreFromNV?relay,00H
        EXTERN ??NLME_SetBroadcastFilter?relay
        FUNCTION ??NLME_SetBroadcastFilter?relay,00H
        EXTERN ??NLME_SetEnergyThreshold?relay
        FUNCTION ??NLME_SetEnergyThreshold?relay,00H
        EXTERN ??NLME_SetPollRate?relay
        FUNCTION ??NLME_SetPollRate?relay,00H
        EXTERN ??NLME_SetQueuedPollRate?relay
        FUNCTION ??NLME_SetQueuedPollRate?relay,00H
        EXTERN ??NLME_SetResponseRate?relay
        FUNCTION ??NLME_SetResponseRate?relay,00H
        EXTERN ??NLME_StartRouterRequest?relay
        FUNCTION ??NLME_StartRouterRequest?relay,00H
        EXTERN ??RTG_MTORouteReq?relay
        FUNCTION ??RTG_MTORouteReq?relay,00H
        EXTERN ??SSP_ReadNwkActiveKey?relay
        FUNCTION ??SSP_ReadNwkActiveKey?relay,00H
        EXTERN ??ZDConfig_InitDescriptors?relay
        FUNCTION ??ZDConfig_InitDescriptors?relay,00H
        EXTERN ??ZDMatchSendState?relay
        FUNCTION ??ZDMatchSendState?relay,00H
        EXTERN ??ZDO_Init?relay
        FUNCTION ??ZDO_Init?relay,00H
        EXTERN ??ZDO_MatchEndDeviceBind?relay
        FUNCTION ??ZDO_MatchEndDeviceBind?relay,00H
        EXTERN ??ZDO_ParseAddrRsp?relay
        FUNCTION ??ZDO_ParseAddrRsp?relay,00H
        EXTERN ??ZDO_ParseBindUnbindReq?relay
        FUNCTION ??ZDO_ParseBindUnbindReq?relay,00H
        EXTERN ??ZDO_ParseEndDeviceBindReq?relay
        FUNCTION ??ZDO_ParseEndDeviceBindReq?relay,00H
        EXTERN ??ZDO_ProcessBindUnbindReq?relay
        FUNCTION ??ZDO_ProcessBindUnbindReq?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDO_StartDevice?relay
        FUNCTION ??ZDO_StartDevice?relay,00H
        EXTERN ??ZDO_UpdateAddrManager?relay
        FUNCTION ??ZDO_UpdateAddrManager?relay,00H
        EXTERN ??ZDO_UpdateNwkStatus?relay
        FUNCTION ??ZDO_UpdateNwkStatus?relay,00H
        EXTERN ??ZDP_DeviceAnnce?relay
        FUNCTION ??ZDP_DeviceAnnce?relay,00H
        EXTERN ??ZDP_GenericRsp?relay
        FUNCTION ??ZDP_GenericRsp?relay,00H
        EXTERN ??ZDP_IncomingData?relay
        FUNCTION ??ZDP_IncomingData?relay,00H
        EXTERN ??ZDSecMgrInit?relay
        FUNCTION ??ZDSecMgrInit?relay,00H
        EXTERN ??ZDSecMgrNewDeviceEvent?relay
        FUNCTION ??ZDSecMgrNewDeviceEvent?relay,00H
        EXTERN ??ZDSecMgrSaveTCLinkKey?relay
        FUNCTION ??ZDSecMgrSaveTCLinkKey?relay,00H
        EXTERN ??ZDSecMgrSwitchKeyInd?relay
        FUNCTION ??ZDSecMgrSwitchKeyInd?relay,00H
        EXTERN ??ZDSecMgrTransportKeyInd?relay
        FUNCTION ??ZDSecMgrTransportKeyInd?relay,00H
        EXTERN ??ZDSecMgrUpdateDeviceInd?relay
        FUNCTION ??ZDSecMgrUpdateDeviceInd?relay,00H
        EXTERN ??ZMacSetReq?relay
        FUNCTION ??ZMacSetReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??afSetMatch?relay
        FUNCTION ??afSetMatch?relay,00H
        EXTERN ??nwkNeighborInitTable?relay
        FUNCTION ??nwkNeighborInitTable?relay,00H
        EXTERN ??nwk_ExtPANIDValid?relay
        FUNCTION ??nwk_ExtPANIDValid?relay,00H
        EXTERN ??nwk_getNetworkDesc?relay
        FUNCTION ??nwk_getNetworkDesc?relay,00H
        EXTERN ??osal_get_timeoutEx?relay
        FUNCTION ??osal_get_timeoutEx?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_pwrmgr_device?relay
        FUNCTION ??osal_pwrmgr_device?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??sAddrExtCmp?relay
        FUNCTION ??sAddrExtCmp?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN ??zgInitItems?relay
        FUNCTION ??zgInitItems?relay,00H
        EXTERN ??zgReadStartupOptions?relay
        FUNCTION ??zgReadStartupOptions?relay,00H
        EXTERN ??zgWriteStartupOptions?relay
        FUNCTION ??zgWriteStartupOptions?relay,00H
        EXTERN AIB_apsUseExtendedPANID
        EXTERN AIB_apsUseInsecureJoin
        EXTERN NWK_TaskID
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN _NIB
        EXTERN matchED
        EXTERN nwkFrameCounter
        EXTERN pZDNwkMgr_ProcessDataConfirm
        EXTERN zgConcentratorEnable
        EXTERN zgConfigPANID
        EXTERN zgDefaultStartingScanDuration
        EXTERN zgDeviceLogicalType
        EXTERN zgStackProfile

// C:\Documents and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Components\stack\zdo\ZDApp.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDApp.c
//    3   Revised:        $Date: 2010-08-20 15:30:00 -0700 (Fri, 20 Aug 2010) $
//    4   Revision:       $Revision: 23463 $
//    5 
//    6   Description:    This file contains the interface to the Zigbee Device Application. This is the
//    7                   Application part that the user can change. This also contains the Task functions.
//    8 
//    9 
//   10   Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44 
//   45 #include "ZComDef.h"
//   46 #include "ZMac.h"
//   47 #include "OSAL.h"
//   48 #include "OSAL_Tasks.h"
//   49 #include "OSAL_PwrMgr.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "AF.h"
//   52 #include "APSMEDE.h"
//   53 #include "NLMEDE.h"
//   54 #include "AddrMgr.h"
//   55 #include "ZDProfile.h"
//   56 #include "ZDObject.h"
//   57 #include "ZDConfig.h"
//   58 #include "ZDSecMgr.h"
//   59 #include "ZDApp.h"
//   60 #include "DebugTrace.h"
//   61 #include "nwk_util.h"
//   62 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1
//   63 #include "ZGlobals.h"
//   64 #include "ZDNwkMgr.h"
//   65 #include "rtg.h"
//   66 
//   67 #include "ssp.h"
//   68 
//   69 /* HAL */
//   70 #include "hal_led.h"
//   71 #include "hal_lcd.h"
//   72 #include "hal_key.h"
//   73 
//   74 #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
//   75   #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
//   76 #endif
//   77 
//   78 /*********************************************************************
//   79  * CONSTANTS
//   80  */
//   81 
//   82 #if !defined( NWK_START_DELAY )
//   83   #define NWK_START_DELAY             100   // in milliseconds
//   84 #endif
//   85 
//   86 #if !defined( EXTENDED_JOINING_RANDOM_MASK )
//   87   #define EXTENDED_JOINING_RANDOM_MASK 0x007F
//   88 #endif
//   89 
//   90 #if !defined( BEACON_REQUEST_DELAY )
//   91   #define BEACON_REQUEST_DELAY        100   // in milliseconds
//   92 #endif
//   93 
//   94 #if !defined( BEACON_REQ_DELAY_MASK )
//   95   #define BEACON_REQ_DELAY_MASK       0x007F
//   96 #endif
//   97 
//   98 #define MAX_RESUME_RETRY            3
//   99 
//  100 #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
//  101 
//  102 // Beacon Order Settings (see NLMEDE.h)
//  103 #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
//  104 #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
//  105 
//  106 #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
//  107   // The number of times the frame counter can change before
//  108   // saving to NV
//  109   #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
//  110 #endif
//  111 
//  112 // Leave control bits
//  113 #define ZDAPP_LEAVE_CTRL_INIT 0
//  114 #define ZDAPP_LEAVE_CTRL_SET  1
//  115 #define ZDAPP_LEAVE_CTRL_RA   2
//  116 
//  117 // Address Manager Stub Implementation
//  118 #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
//  119 
//  120 
//  121 #if !defined ZDO_NV_SAVE_RFDs
//  122 #define ZDO_NV_SAVE_RFDs  TRUE
//  123 #endif
//  124 
//  125 // Delay time before updating NWK NV data to force fewer writes during high activity.
//  126 #if ZDO_NV_SAVE_RFDs
//  127 #define ZDAPP_UPDATE_NWK_NV_TIME 700
//  128 #else
//  129 #define ZDAPP_UPDATE_NWK_NV_TIME 65000
//  130 #endif
//  131 
//  132 /*********************************************************************
//  133  * GLOBAL VARIABLES
//  134  */
//  135 
//  136 #if defined( LCD_SUPPORTED )
//  137   uint8 MatchRsps = 0;
//  138 #endif
//  139 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  140 uint8 zdoDiscCounter = 1;
zdoDiscCounter:
        DS 1
        REQUIRE `?<Initializer for zdoDiscCounter>`
        REQUIRE __INIT_XDATA_I
//  141 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  142 zAddrType_t ZDAppNwkAddr;
ZDAppNwkAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  143 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  144 uint8 zdappMgmtNwkDiscRspTransSeq;
zdappMgmtNwkDiscRspTransSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  145 uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
zdappMgmtNwkDiscReqInProgress:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  146 zAddrType_t zdappMgmtNwkDiscRspAddr;
zdappMgmtNwkDiscRspAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  147 uint8 zdappMgmtNwkDiscStartIndex;
zdappMgmtNwkDiscStartIndex:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  148 uint8 zdappMgmtSavedNwkState;
zdappMgmtSavedNwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  149 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  150 uint16 nwkFrameCounterChanges = 0;
nwkFrameCounterChanges:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  151 uint8 continueJoining = TRUE;
continueJoining:
        DS 1
        REQUIRE `?<Initializer for continueJoining>`
        REQUIRE __INIT_XDATA_I
//  152 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  153 uint8  _tmpRejoinState;
_tmpRejoinState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  154 
//  155 // The extended PanID used in ZDO layer for rejoin.

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  156 uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
ZDO_UseExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  157 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  158 pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
zdoCBFunc:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  159 
//  160 /*********************************************************************
//  161  * EXTERNAL VARIABLES
//  162  */
//  163 
//  164 /*********************************************************************
//  165  * EXTERNAL FUNCTIONS
//  166  */
//  167 
//  168 /*********************************************************************
//  169  * LOCAL FUNCTIONS
//  170  */
//  171 
//  172 void ZDApp_NetworkStartEvt( void );
//  173 void ZDApp_DeviceAuthEvt( void );
//  174 void ZDApp_SaveNetworkStateEvt( void );
//  175 
//  176 uint8 ZDApp_ReadNetworkRestoreState( void );
//  177 uint8 ZDApp_RestoreNetworkState( void );
//  178 void ZDAppDetermineDeviceType( void );
//  179 void ZDApp_InitUserDesc( void );
//  180 void ZDAppCheckForHoldKey( void );
//  181 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
//  182 void ZDApp_ProcessNetworkJoin( void );
//  183 void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
//  184 void ZDApp_SaveNwkKey( void );
//  185 uint8 ZDApp_RestoreNwkKey( void );
//  186 
//  187 void ZDApp_SecInit( uint8 state );
//  188 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
//  189 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
//  190 
//  191 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
//  192 
//  193 void ZDApp_ResetTimerStart( uint16 delay );
//  194 void ZDApp_ResetTimerCancel( void );
//  195 void ZDApp_LeaveCtrlInit( void );
//  196 void ZDApp_LeaveCtrlSet( uint8 ra );
//  197 uint8 ZDApp_LeaveCtrlBypass( void );
//  198 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
//  199 void ZDApp_LeaveReset( uint8 ra );
//  200 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
//  201                         uint8 removeChildren );
//  202 void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm );
//  203 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
//  204 void ZDApp_RegisterCBs( void );
//  205 extern uint8 readCoordinatorJumper( void );
//  206 
//  207 /*********************************************************************
//  208  * LOCAL VARIABLES
//  209  */
//  210 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  211 uint8 ZDAppTaskID;
ZDAppTaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  212 uint8 nwkStatus;
nwkStatus:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  213 endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
ZDApp_AutoFindMode_epDesc:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  214 uint8 ZDApp_LeaveCtrl;
ZDApp_LeaveCtrl:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  215 
//  216 #if defined( HOLD_AUTO_START )
//  217   devStates_t devState = DEV_HOLD;
//  218 #else

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  219   devStates_t devState = DEV_INIT;
devState:
        DS 1
        REQUIRE `?<Initializer for devState>`
        REQUIRE __INIT_XDATA_I
//  220 #endif
//  221 
//  222 #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  223   devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
devStartMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  224   //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
//  225                         // to parent. Set to make the device do an Orphan scan.
//  226 #else
//  227   // Set the default to coodinator
//  228   devStartModes_t devStartMode = MODE_HARD;
//  229 #endif
//  230 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  231 uint8 retryCnt;
retryCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  232 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  233 endPointDesc_t ZDApp_epDesc =
ZDApp_epDesc:
        DS 6
        REQUIRE `?<Initializer for ZDApp_epDesc>`
        REQUIRE __INIT_XDATA_I
//  234 {
//  235   ZDO_EP,
//  236   &ZDAppTaskID,
//  237   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
//  238   (afNetworkLatencyReq_t)0            // No Network Latency req
//  239 };
//  240 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  241 uint16 ZDApp_SavedPollRate = POLL_RATE;
ZDApp_SavedPollRate:
        DS 2
        REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
        REQUIRE __INIT_XDATA_I
//  242 
//  243 /*********************************************************************
//  244  * @fn      ZDApp_Init
//  245  *
//  246  * @brief   ZDApp Initialization function.
//  247  *
//  248  * @param   task_id - ZDApp Task ID
//  249  *
//  250  * @return  None
//  251  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  252 void ZDApp_Init( uint8 task_id )
ZDApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZDApp_Init
//  253 {
        FUNCALL ZDApp_Init, NLME_GetExtAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDAppCheckForHoldKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDO_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, afRegister
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_InitUserDesc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDOInitDevice
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_RegisterCBs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  254   // Save the task ID
//  255   ZDAppTaskID = task_id;
        MOV     A,R1
        MOV     DPTR,#ZDAppTaskID
        MOVX    @DPTR,A
//  256 
//  257    zgDeviceLogicalType =ZG_DEVICETYPE_ROUTER;
        MOV     A,#0x1
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    @DPTR,A
//  258   // Initialize the ZDO global device short address storage
//  259   ZDAppNwkAddr.addrMode = Addr16Bit;
        MOV     A,#0x2
        MOV     DPTR,#(ZDAppNwkAddr + 8)
        MOVX    @DPTR,A
//  260   ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
        MOV     DPTR,#ZDAppNwkAddr
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  261   (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
//  262 
//  263   // Check for manual "Hold Auto Start"
//  264   ZDAppCheckForHoldKey();
        ; Setup parameters for call to function ZDAppCheckForHoldKey
        LCALL   ??ZDAppCheckForHoldKey?relay
//  265 
//  266   // Initialize ZDO items and setup the device - type of device to create.
//  267   ZDO_Init();
        ; Setup parameters for call to function ZDO_Init
        LCALL   ??ZDO_Init?relay
//  268 
//  269   // Register the endpoint description with the AF
//  270   // This task doesn't have a Simple description, but we still need
//  271   // to register the endpoint.
//  272   afRegister( (endPointDesc_t *)&ZDApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#(ZDApp_epDesc & 0xff)
        MOV     R3,#((ZDApp_epDesc >> 8) & 0xff)
        LCALL   ??afRegister?relay
//  273 
//  274 #if defined( ZDO_USERDESC_RESPONSE )
//  275   ZDApp_InitUserDesc();
        ; Setup parameters for call to function ZDApp_InitUserDesc
        LCALL   ??ZDApp_InitUserDesc?relay
//  276 #endif // ZDO_USERDESC_RESPONSE
//  277 
//  278   // Start the device?
//  279   if ( devState != DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JZ      ??ZDApp_Init_0
//  280   {
//  281     ZDOInitDevice( 0 );
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??ZDOInitDevice?relay
        SJMP    ??ZDApp_Init_1
//  282   }
//  283   else
//  284   {
//  285     // Blink LED to indicate HOLD_START
//  286     HalLedBlink ( HAL_LED_4, 0, 50, 500 );
??ZDApp_Init_0:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedBlink?relay
//  287   }
//  288 
//  289   ZDApp_RegisterCBs();
??ZDApp_Init_1:
        ; Setup parameters for call to function ZDApp_RegisterCBs
        LCALL   ??ZDApp_RegisterCBs?relay
//  290 } /* ZDApp_Init() */
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  291 
//  292 /*********************************************************************
//  293  * @fn          ZDApp_SecInit
//  294  *
//  295  * @brief       ZDApp initialize security.
//  296  *
//  297  * @param       state - device initialization state
//  298  *
//  299  * @return      none
//  300  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  301 void ZDApp_SecInit( uint8 state )
ZDApp_SecInit:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function ZDApp_SecInit
//  302 {
        FUNCALL ZDApp_SecInit, ZDSecMgrInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  303   uint8 zgPreConfigKey[SEC_KEY_LEN];
//  304 
//  305   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  306   {
//  307     // Set the Trust Center bit
//  308     ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
//  309   }
//  310 
//  311   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
//  312   {
//  313     ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_SECURITY_CAPABLE;
//  314   }
//  315 
//  316   // Initialize ZigBee Device Security Manager
//  317   ZDSecMgrInit(state);
        ; Setup parameters for call to function ZDSecMgrInit
        LCALL   ??ZDSecMgrInit?relay
//  318 
//  319   if ( ZG_SECURE_ENABLED )
//  320   {
//  321     if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  322     {
//  323       nwkFrameCounter = 0;
//  324 
//  325       if( _NIB.nwkKeyLoaded == FALSE )
//  326       {
//  327         if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
//  328              ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
//  329         {
//  330             ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
//  331             SSP_UpdateNwkKey( zgPreConfigKey, 0);
//  332             SSP_SwitchNwkKey( 0 );
//  333 
//  334             // clear local copy of key
//  335             osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
//  336         }
//  337       }
//  338     }
//  339   }
//  340 }
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock1
//  341 
//  342 /*********************************************************************
//  343  * @fn      ZDApp_event_loop()
//  344  *
//  345  * @brief   Main event loop for Zigbee device objects task. This function
//  346  *          should be called at periodic intervals.
//  347  *
//  348  * @param   task_id - Task ID
//  349  * @param   events  - Bitmap of events
//  350  *
//  351  * @return  none
//  352  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  353 UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
ZDApp_event_loop:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ZDApp_event_loop
//  354 {
        FUNCALL ZDApp_event_loop, ZDO_StartDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessOSALMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_NetworkStartEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_pwrmgr_device
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_UpdateNwkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  355   uint8 *msg_ptr;
//  356 
//  357   if ( events & SYS_EVENT_MSG )
        MOV     A,#-0x80
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??ZDApp_event_loop_0
        MOV     A,R1
??ZDApp_event_loop_0:
        JNZ     ??ZDApp_event_loop_1
//  358   {
//  359     while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
//  360     {
//  361       ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
//  362 
//  363       // Release the memory
//  364       osal_msg_deallocate( msg_ptr );
//  365     }
//  366 
//  367     // Return unprocessed events
//  368     return (events ^ SYS_EVENT_MSG);
//  369   }
//  370 
//  371   if ( events & ZDO_NETWORK_INIT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDApp_event_loop_2
//  372   {
//  373     // Initialize apps and start the network
//  374     devState = DEV_INIT;
        MOV     A,#0x1
        MOV     DPTR,#devState
        MOVX    @DPTR,A
//  375 
//  376     ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
//  377                      DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
        ; Setup parameters for call to function ZDO_StartDevice
        MOV     R4,#0xf
        MOV     R3,#0xf
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R1,A
        LCALL   ??ZDO_StartDevice?relay
//  378 
//  379     // Return unprocessed events
//  380     return (events ^ ZDO_NETWORK_INIT);
        MOV     A,#0x1
??ZDApp_event_loop_3:
        XRL     A,R6
        MOV     R2,A
        MOV     A,R7
??ZDApp_event_loop_4:
        MOV     R3,A
        LJMP    ??ZDApp_event_loop_5 & 0xFFFF
//  381   }
??ZDApp_event_loop_6:
        ; Setup parameters for call to function ZDApp_ProcessOSALMsg
        LCALL   ??ZDApp_ProcessOSALMsg?relay
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
??ZDApp_event_loop_1:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        JNZ     ??ZDApp_event_loop_7
        MOV     A,R3
??ZDApp_event_loop_7:
        JNZ     ??ZDApp_event_loop_6
        MOV     A,R6
        MOV     R2,A
        MOV     A,#-0x80
??ZDApp_event_loop_8:
        XRL     A,R7
        SJMP    ??ZDApp_event_loop_4
//  382 
//  383   if ( ZSTACK_ROUTER_BUILD )
??ZDApp_event_loop_2:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDApp_event_loop_9
        XRL     A,#0x1
        JNZ     ??ZDApp_event_loop_10
//  384   {
//  385     if ( events & ZDO_NETWORK_START )
??ZDApp_event_loop_9:
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??ZDApp_event_loop_11
//  386     {
//  387       ZDApp_NetworkStartEvt();
        ; Setup parameters for call to function ZDApp_NetworkStartEvt
        LCALL   ??ZDApp_NetworkStartEvt?relay
//  388 
//  389       // Return unprocessed events
//  390       return (events ^ ZDO_NETWORK_START);
        MOV     A,#0x2
??ZDApp_event_loop_12:
        SJMP    ??ZDApp_event_loop_3
//  391     }
//  392 
//  393     if ( events & ZDO_ROUTER_START )
??ZDApp_event_loop_11:
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??ZDApp_event_loop_10
//  394     {
//  395       if ( nwkStatus == ZSuccess )
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_event_loop_13
//  396       {
//  397         if ( devState == DEV_END_DEVICE )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??ZDApp_event_loop_14
//  398           devState = DEV_ROUTER;
        MOV     A,#0x7
        MOVX    @DPTR,A
//  399 
//  400         osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_event_loop_14:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV     R1,#0x0
        LCALL   ??osal_pwrmgr_device?relay
//  401       }
//  402       else
//  403       {
//  404         // remain as end device!!
//  405       }
//  406       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??ZDApp_event_loop_13:
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine4 & 0xFFFF
//  407 
//  408       // Return unprocessed events
//  409       return (events ^ ZDO_ROUTER_START);
??CrossCallReturnLabel_34:
        MOV     A,#0x20
        SJMP    ??ZDApp_event_loop_3
//  410     }
//  411   }
//  412 
//  413   if ( events & ZDO_STATE_CHANGE_EVT )
??ZDApp_event_loop_10:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??ZDApp_event_loop_15
//  414   {
//  415     ZDO_UpdateNwkStatus( devState );
        ; Setup parameters for call to function ZDO_UpdateNwkStatus
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_UpdateNwkStatus?relay
//  416 
//  417     // At start up, do one MTO route discovery if the device is a concentrator
//  418     if ( zgConcentratorEnable == TRUE )
        MOV     DPTR,#zgConcentratorEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_60
//  419     {
//  420       // Start next event
//  421       osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x8
        MOV     DPTR,#NWK_TaskID
        LCALL   ??Subroutine30_0 & 0xFFFF
//  422     }
//  423 
//  424     // Return unprocessed events
//  425     return (events ^ ZDO_STATE_CHANGE_EVT);
??CrossCallReturnLabel_60:
        MOV     A,#0x10
        SJMP    ??ZDApp_event_loop_12
//  426   }
//  427 
//  428   if ( events & ZDO_COMMAND_CNF )
??ZDApp_event_loop_15:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??ZDApp_event_loop_16
//  429   {
//  430     // User defined logic
//  431 
//  432     // Return unprocessed events
//  433     return (events ^ ZDO_COMMAND_CNF);
        MOV     A,#0x8
        XRL     A,R6
        MOV     R2,A
        SJMP    ??ZDApp_event_loop_5
//  434   }
//  435 
//  436   if ( events & ZDO_NWK_UPDATE_NV )
??ZDApp_event_loop_16:
        MOV     A,#0x2
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??ZDApp_event_loop_17
        MOV     A,R1
??ZDApp_event_loop_17:
        JZ      ??ZDApp_event_loop_18
//  437   {
//  438     ZDApp_SaveNetworkStateEvt();
//  439 
//  440     // Return unprocessed events
//  441     return (events ^ ZDO_NWK_UPDATE_NV);
        MOV     A,#0x2
        SJMP    ??ZDApp_event_loop_8
//  442   }
//  443 
//  444   if ( events & ZDO_DEVICE_RESET )
??ZDApp_event_loop_18:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??ZDApp_event_loop_19
//  445   {
//  446     // The device has been in the UNAUTH state, so reset
//  447     // Note: there will be no return from this call
//  448     SystemResetSoft();
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  449   }
//  450 
//  451   if ( ZG_SECURE_ENABLED )
//  452   {
//  453     return ( ZDApp_ProcessSecEvent( task_id, events ) );
//  454   }
//  455   else
//  456   {
//  457     // Discard or make more handlers
//  458     return 0;
??ZDApp_event_loop_19:
        MOV     R2,#0x0
        MOV     R3,#0x0
//  459   }
??ZDApp_event_loop_5:
        LJMP    ??Subroutine35_0 & 0xFFFF
        CFI EndBlock cfiBlock2
//  460 }
//  461 
//  462 /*********************************************************************
//  463  * @fn      ZDApp_ProcessSecEvent()
//  464  *
//  465  * @brief   Process incoming security events.
//  466  *
//  467  * @param   task_id - Task ID
//  468  * @param   events  - Bitmap of events
//  469  *
//  470  * @return  none
//  471  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  472 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
ZDApp_ProcessSecEvent:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function ZDApp_ProcessSecEvent
//  473 {
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrNewDeviceEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_DeviceAuthEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrSaveTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  474   (void)task_id;  // Intentionally unreferenced parameter
//  475 
//  476   if ( ZSTACK_ROUTER_BUILD )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessSecEvent_0
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessSecEvent_1
//  477   {
//  478     if ( events & ZDO_NEW_DEVICE )
??ZDApp_ProcessSecEvent_0:
        MOV     A,R6
        ANL     A,#0x40
        JZ      ??ZDApp_ProcessSecEvent_1
//  479     {
//  480       // process the new device event
//  481       if ( ZDSecMgrNewDeviceEvent() == TRUE )
        ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
        LCALL   ??ZDSecMgrNewDeviceEvent?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_57
//  482       {
//  483         osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x40
        LCALL   ?Subroutine9 & 0xFFFF
//  484       }
//  485 
//  486       // Return unprocessed events
//  487       return (events ^ ZDO_NEW_DEVICE);
??CrossCallReturnLabel_57:
        MOV     A,#0x40
??ZDApp_ProcessSecEvent_2:
        XRL     A,R6
        MOV     R2,A
        MOV     A,R7
??ZDApp_ProcessSecEvent_3:
        MOV     R3,A
        SJMP    ??ZDApp_ProcessSecEvent_4
//  488     }
//  489   }
//  490 
//  491   if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
//  492       || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
//  493   {
//  494     if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  495     {
//  496       if ( events & ZDO_SECMGR_EVENT )
//  497       {
//  498         ZDSecMgrEvent();
//  499 
//  500         // Return unprocessed events
//  501         return (events ^ ZDO_SECMGR_EVENT);
//  502       }
//  503     }
//  504   }
//  505 
//  506   if ( events & ZDO_DEVICE_AUTH )
??ZDApp_ProcessSecEvent_1:
        MOV     A,R6
        ANL     A,#0x80
        JZ      ??ZDApp_ProcessSecEvent_5
//  507   {
//  508     ZDApp_DeviceAuthEvt();
        ; Setup parameters for call to function ZDApp_DeviceAuthEvt
        LCALL   ??ZDApp_DeviceAuthEvt?relay
//  509 
//  510     // Return unprocessed events
//  511     return (events ^ ZDO_DEVICE_AUTH);
        MOV     A,#-0x80
        SJMP    ??ZDApp_ProcessSecEvent_2
//  512   }
//  513 
//  514   if ( events & ZDO_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_5:
        MOV     A,#0x4
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??ZDApp_ProcessSecEvent_6
        MOV     A,R1
??ZDApp_ProcessSecEvent_6:
        JZ      ??ZDApp_ProcessSecEvent_7
//  515   {
//  516     if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
        MOV     DPTR,#nwkFrameCounterChanges
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     A,#0x1
        ADD     A,R0
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        MOV     DPTR,#nwkFrameCounterChanges
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_68:
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x17
        MOV     A,R1
        SUBB    A,#0x3
        JC      ??ZDApp_ProcessSecEvent_8
//  517     {
//  518       ZDApp_SaveNwkKey();
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL   ??ZDApp_SaveNwkKey?relay
//  519     }
//  520 
//  521     // Return unprocessed events
//  522     return (events ^ ZDO_FRAMECOUNTER_CHANGE);
??ZDApp_ProcessSecEvent_8:
        MOV     A,R6
        MOV     R2,A
        MOV     A,#0x4
??ZDApp_ProcessSecEvent_9:
        XRL     A,R7
        MOV     R3,A
        SJMP    ??ZDApp_ProcessSecEvent_4
//  523   }
//  524 
//  525   if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_7:
        MOV     A,#0x10
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??ZDApp_ProcessSecEvent_10
        MOV     A,R1
??ZDApp_ProcessSecEvent_10:
        JZ      ??ZDApp_ProcessSecEvent_11
//  526   {
//  527 #if defined (NV_RESTORE)
//  528     ZDSecMgrSaveApsLinkKey();
//  529 #endif // (NV_RESTORE)
//  530     
//  531     // Return unprocessed events
//  532     return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
        MOV     A,#0x10
        XRL     A,R7
        SJMP    ??ZDApp_ProcessSecEvent_3
//  533   }
//  534 
//  535   if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_11:
        MOV     A,#0x8
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??ZDApp_ProcessSecEvent_12
        MOV     A,R1
??ZDApp_ProcessSecEvent_12:
        JZ      ??ZDApp_ProcessSecEvent_13
//  536   {
//  537     ZDSecMgrSaveTCLinkKey();
        ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
        LCALL   ??ZDSecMgrSaveTCLinkKey?relay
//  538     
//  539     // Return unprocessed events
//  540     return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
        MOV     A,R6
        MOV     R2,A
        MOV     A,#0x8
        SJMP    ??ZDApp_ProcessSecEvent_9
//  541   }
//  542   
//  543   // Discard or make more handlers
//  544   return 0;
??ZDApp_ProcessSecEvent_13:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock3
??ZDApp_ProcessSecEvent_4:
        REQUIRE ?Subroutine23
        ; // Fall through to label ?Subroutine23
//  545 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  546 
//  547 /*********************************************************************
//  548  * Application Functions
//  549  */
//  550 
//  551 /*********************************************************************
//  552  * @fn      ZDOInitDevice
//  553  *
//  554  * @brief   Start the device in the network.  This function will read
//  555  *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
//  556  *   restore the network state of the device.
//  557  *
//  558  * @param   startDelay - timeDelay to start device (in milliseconds).
//  559  *      There is a jitter added to this delay:
//  560  *              ((NWK_START_DELAY + startDelay)
//  561  *              + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
//  562  *
//  563  * NOTE:    If the application would like to force a "new" join, the
//  564  *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  565  *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
//  566  *          this function. "new" join means to not restore the network
//  567  *          state of the device. Use zgWriteStartupOptions() to set these
//  568  *          options.
//  569  *
//  570  * @return
//  571  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  572  *          restored.
//  573  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
//  574  *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
//  575  *          it could mean that there was no network state to restore.
//  576  *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
//  577  *          with the rejoin option set to TRUE.  So, the device was not
//  578  *          started in the network (one time only).  The next time this
//  579  *          function is called it will start.
//  580  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  581 uint8 ZDOInitDevice( uint16 startDelay )
ZDOInitDevice:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function ZDOInitDevice
//  582 {
        FUNCALL ZDOInitDevice, zgInitItems
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDConfig_InitDescriptors
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlStartup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDAppDetermineDeviceType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDSecMgrInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ?Subroutine2 & 0xFFFF
//  583   uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  584   uint16 extendedDelay = 0;
//  585 
//  586   if ( devState == DEV_HOLD )
??CrossCallReturnLabel_72:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDOInitDevice_0
//  587   {
//  588     // Initialize the RAM items table, in case an NV item has been updated.
//  589     zgInitItems( FALSE );
        ; Setup parameters for call to function zgInitItems
        MOV     R1,#0x0
        LCALL   ??zgInitItems?relay
//  590   }
//  591 
//  592   ZDConfig_InitDescriptors();
??ZDOInitDevice_0:
        ; Setup parameters for call to function ZDConfig_InitDescriptors
        LCALL   ??ZDConfig_InitDescriptors?relay
//  593   //devtag.071807.todo - fix this temporary solution
//  594   _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     DPTR,#(_NIB + 14)
        MOVX    @DPTR,A
//  595 
//  596   devState = DEV_INIT;    // Remove the Hold state
        MOV     A,#0x1
        MOV     DPTR,#devState
        MOVX    @DPTR,A
//  597 
//  598   // Initialize leave control logic
//  599   ZDApp_LeaveCtrlInit();
        ; Setup parameters for call to function ZDApp_LeaveCtrlInit
        LCALL   ??ZDApp_LeaveCtrlInit?relay
//  600 
//  601   // Check leave control reset settings
//  602   ZDApp_LeaveCtrlStartup( &devState, &startDelay );
        ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#(devState & 0xff)
        MOV     R3,#((devState >> 8) & 0xff)
        LCALL   ??ZDApp_LeaveCtrlStartup?relay
//  603 
//  604   // Leave may make the hold state come back
//  605   if ( devState == DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDOInitDevice_1
//  606   {
//  607     // Set the NV startup option to force a "new" join.
//  608     zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   ??zgWriteStartupOptions?relay
//  609 
//  610     // Notify the applications
//  611     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine4 & 0xFFFF
//  612 
//  613     return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
??CrossCallReturnLabel_35:
        MOV     R1,#0x2
        SJMP    ??ZDOInitDevice_2
//  614   }
//  615 
//  616 #if defined ( NV_RESTORE )
//  617   // Get Keypad directly to see if a reset nv is needed.
//  618   // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
//  619   // while booting to skip past NV Restore.
//  620   if ( HalKeyRead() == SW_BYPASS_NV )
//  621     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  622   else
//  623   {
//  624     // Determine if NV should be restored
//  625     networkStateNV = ZDApp_ReadNetworkRestoreState();
//  626   }
//  627 
//  628   if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  629   {
//  630     networkStateNV = ZDApp_RestoreNetworkState();
//  631   }
//  632   else
//  633   {
//  634     // Wipe out the network state in NV
//  635     NLME_InitNV();
//  636     NLME_SetDefaultNV();
//  637     // clear NWK key values
//  638     ZDSecMgrClearNVKeyValues();
//  639   }
//  640 #endif
//  641 
//  642   if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
//  643   {
//  644     ZDAppDetermineDeviceType();
??ZDOInitDevice_1:
        ; Setup parameters for call to function ZDAppDetermineDeviceType
        LCALL   ??ZDAppDetermineDeviceType?relay
//  645 
//  646     // Only delay if joining network - not restoring network state
//  647     extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
//  648               + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     ?V0 + 0,R2
        MOV     R0,?V0 + 0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x7f
        ANL     A,R0
        MOV     R0,A
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x64
        ADD     A,R0
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
//  649   }
//  650 
//  651   // Initialize the security for type of device
//  652   ZDApp_SecInit( networkStateNV );
        ; Setup parameters for call to function ZDSecMgrInit
        MOV     R1,#0x1
        LCALL   ??ZDSecMgrInit?relay
//  653 
//  654   // Trigger the network start
//  655   ZDApp_NetworkInit( extendedDelay );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDApp_NetworkInit?relay
//  656 
//  657   // set broadcast address mask to support broadcast filtering
//  658   NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??NLME_SetBroadcastFilter?relay
//  659 
//  660   return ( networkStateNV );
        MOV     R1,#0x1
??ZDOInitDevice_2:
        LJMP    ?Subroutine22 & 0xFFFF
        CFI EndBlock cfiBlock5
//  661 }
//  662 
//  663 /*********************************************************************
//  664  * @fn      ZDApp_ReadNetworkRestoreState
//  665  *
//  666  * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
//  667  *          or not to restore the network state.
//  668  *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  669  *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
//  670  *
//  671  * @param   none
//  672  *
//  673  * @return  ZDO_INITDEV_NEW_NETWORK_STATE
//  674  *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
//  675  *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
//  676  *          ZCD_NV_STARTUP_OPTION
//  677  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  678 uint8 ZDApp_ReadNetworkRestoreState( void )
ZDApp_ReadNetworkRestoreState:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ZDApp_ReadNetworkRestoreState
//  679 {
        FUNCALL ZDApp_ReadNetworkRestoreState, zgReadStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  680   uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
        MOV     R6,#0x0
//  681 
//  682   // Look for the New Network State option.
//  683   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        LCALL   ??zgReadStartupOptions?relay
        MOV     A,R1
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_ReadNetworkRestoreState_0
//  684   {
//  685     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
        INC     R6
//  686   }
//  687 
//  688   return ( networkStateNV );
??ZDApp_ReadNetworkRestoreState_0:
        MOV     A,R6
        MOV     R1,A
        LJMP    ?Subroutine23 & 0xFFFF
        CFI EndBlock cfiBlock6
//  689 }
//  690 
//  691 /*********************************************************************
//  692  * @fn      ZDAppDetermineDeviceType()
//  693  *
//  694  * @brief   Determines the type of device to start.
//  695  *
//  696  *          Looks at zgDeviceLogicalType and determines what type of
//  697  *          device to start.  The types are:
//  698  *            ZG_DEVICETYPE_COORDINATOR
//  699  *            ZG_DEVICETYPE_ROUTER
//  700  *            ZG_DEVICETYPE_ENDDEVICE
//  701  *
//  702  * @param   none
//  703  *
//  704  * @return  none
//  705  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  706 void ZDAppDetermineDeviceType( void )
ZDAppDetermineDeviceType:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function ZDAppDetermineDeviceType
//  707 {
        FUNCALL ZDAppDetermineDeviceType, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  708   if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JNZ     ??ZDAppDetermineDeviceType_0
//  709   {
//  710     devStartMode = MODE_HARD;     // Start as a coordinator
        MOV     A,#0x2
        MOV     DPTR,#devStartMode
        MOVX    @DPTR,A
//  711     ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        SJMP    ??ZDAppDetermineDeviceType_1
//  712   }
//  713   else
//  714   {
//  715     if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
??ZDAppDetermineDeviceType_0:
        XRL     A,#0x1
        JNZ     ??ZDAppDetermineDeviceType_2
//  716       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        ORL     A,#0x1
        SJMP    ??ZDAppDetermineDeviceType_3
//  717     else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
??ZDAppDetermineDeviceType_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDAppDetermineDeviceType_4
//  718       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        ORL     A,#0x2
??ZDAppDetermineDeviceType_3:
        MOVX    @DPTR,A
//  719 
//  720     // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
//  721     // The device shall do rejoin the network. Otherwise, do normal join
//  722     if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
??ZDAppDetermineDeviceType_4:
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#(AIB_apsUseExtendedPANID & 0xff)
        MOV     R3,#((AIB_apsUseExtendedPANID >> 8) & 0xff)
        LCALL   ??nwk_ExtPANIDValid?relay
        MOV     A,R1
        JNZ     ??ZDAppDetermineDeviceType_5
//  723     {
//  724       devStartMode = MODE_JOIN;     // Assume joining
        CLR     A
        SJMP    ??ZDAppDetermineDeviceType_6
//  725     }
//  726     else
//  727     {
//  728       devStartMode = MODE_REJOIN;
??ZDAppDetermineDeviceType_5:
        MOV     A,#0x3
??ZDAppDetermineDeviceType_6:
        MOV     DPTR,#devStartMode
??ZDAppDetermineDeviceType_1:
        MOVX    @DPTR,A
//  729     }
//  730   }
//  731 }
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock7
//  732 
//  733 /*********************************************************************
//  734  * @fn      ZDApp_NetworkStartEvt()
//  735  *
//  736  * @brief   Process the Network Start Event
//  737  *
//  738  * @param   none
//  739  *
//  740  * @return  none
//  741  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  742 void ZDApp_NetworkStartEvt( void )
ZDApp_NetworkStartEvt:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function ZDApp_NetworkStartEvt
//  743 {
        FUNCALL ZDApp_NetworkStartEvt, osal_pwrmgr_device
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_SetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  744   if ( nwkStatus == ZSuccess )
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_NetworkStartEvt_0
//  745   {
//  746     // Successfully started a ZigBee network
//  747     if ( devState == DEV_COORD_STARTING )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x8
        JNZ     ??ZDApp_NetworkStartEvt_1
//  748     {
//  749       devState = DEV_ZB_COORD;
        MOV     A,#0x9
        MOVX    @DPTR,A
//  750     }
//  751 
//  752     osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_NetworkStartEvt_1:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV     R1,#0x0
        LCALL   ??osal_pwrmgr_device?relay
//  753     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        SJMP    ??ZDApp_NetworkStartEvt_2
//  754   }
//  755   else
//  756   {
//  757     // Try again with a higher energy threshold !!
//  758     if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
??ZDApp_NetworkStartEvt_0:
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL   ??NLME_GetEnergyThreshold?relay
        MOV     A,R1
        MOV     R0,A
        MOV     A,#0x10
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        SUBB    A,#-0x1
        MOV     A,R1
        SUBB    A,#0x0
        CLR     C
        XRL     A,PSW
        RLC     A
        JNC     ??ZDApp_NetworkStartEvt_3
//  759     {
//  760       NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
        ; Setup parameters for call to function NLME_SetEnergyThreshold
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL   ??NLME_GetEnergyThreshold?relay
        MOV     A,R1
        ADD     A,#0x10
        MOV     R1,A
        LCALL   ??NLME_SetEnergyThreshold?relay
//  761       osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        SJMP    ??ZDApp_NetworkStartEvt_4
//  762     }
//  763     else
//  764     {
//  765       // Failed to start network. Enter a dormant state (until user intervenes)
//  766       devState = DEV_INIT;
??ZDApp_NetworkStartEvt_3:
        MOV     A,#0x1
        MOV     DPTR,#devState
        MOVX    @DPTR,A
//  767       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
??ZDApp_NetworkStartEvt_2:
        MOV     R2,#0x10
        CFI EndBlock cfiBlock8
//  768     }
//  769   }
??ZDApp_NetworkStartEvt_4:
        REQUIRE ?Subroutine26
        ; // Fall through to label ?Subroutine26
//  770 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_38:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock9
//  771 
//  772 /*********************************************************************
//  773  * @fn      ZDApp_DeviceAuthEvt()
//  774  *
//  775  * @brief   Process the Device Authentic Event
//  776  *
//  777  * @param   none
//  778  *
//  779  * @return  none
//  780  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  781 void ZDApp_DeviceAuthEvt( void )
ZDApp_DeviceAuthEvt:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function ZDApp_DeviceAuthEvt
//  782 {
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_ResetTimerCancel
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_StartRouterRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_SetPollRate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  783   // received authentication from trust center
//  784   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDApp_DeviceAuthEvt_0
//  785   {
//  786     // Stop the reset timer so it doesn't reset
//  787     ZDApp_ResetTimerCancel();
        ; Setup parameters for call to function ZDApp_ResetTimerCancel
        LCALL   ??ZDApp_ResetTimerCancel?relay
//  788 
//  789     devState = DEV_END_DEVICE;
        LCALL   ?Subroutine0 & 0xFFFF
//  790     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
//  791 
//  792     // Set the Power Manager Device
//  793 #if defined ( POWER_SAVING )
//  794     osal_pwrmgr_device( PWRMGR_BATTERY );
//  795 #endif
//  796 
//  797     if ( ZSTACK_ROUTER_BUILD )
??CrossCallReturnLabel_41:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDApp_DeviceAuthEvt_1
        XRL     A,#0x1
        JNZ     ??ZDApp_DeviceAuthEvt_2
//  798     {
//  799       if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??ZDApp_DeviceAuthEvt_1:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_12:
        JZ      ??ZDApp_DeviceAuthEvt_2
//  800       {
//  801         // NOTE: first two parameters are not used, see NLMEDE.h for details
//  802         NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??NLME_StartRouterRequest?relay
//  803       }
//  804     }
//  805 
//  806     // Notify to save info into NV
//  807     ZDApp_NVUpdate();
//  808 
//  809     // Save off the security
//  810     ZDApp_SaveNwkKey();
??ZDApp_DeviceAuthEvt_2:
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL   ??ZDApp_SaveNwkKey?relay
//  811 
//  812     ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
//  813 
//  814     if ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JC      ??ZDApp_DeviceAuthEvt_0
//  815     {
//  816       NLME_SetPollRate( ZDApp_SavedPollRate );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#ZDApp_SavedPollRate
        LCALL   ?Subroutine7 & 0xFFFF
//  817     }
//  818   }
??CrossCallReturnLabel_7:
        LCALL   ??NLME_SetPollRate?relay
//  819   else
//  820   {
//  821     ZDApp_NVUpdate();
//  822   }
//  823 }
??ZDApp_DeviceAuthEvt_0:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock10
//  824 
//  825 /*********************************************************************
//  826  * @fn      ZDApp_SaveNetworkStateEvt()
//  827  *
//  828  * @brief   Process the Save the Network State Event
//  829  *
//  830  * @param   none
//  831  *
//  832  * @return  none
//  833  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  834 void ZDApp_SaveNetworkStateEvt( void )
ZDApp_SaveNetworkStateEvt:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function ZDApp_SaveNetworkStateEvt
//  835 {
        ; Saved register size: 0
        ; Auto size: 0
//  836 #if defined ( NV_RESTORE )
//  837  #if defined ( NV_TURN_OFF_RADIO )
//  838   // Turn off the radio's receiver during an NV update
//  839   uint8 RxOnIdle;
//  840   uint8 x = false;
//  841   ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
//  842   ZMacSetReq( ZMacRxOnIdle, &x );
//  843  #endif
//  844 
//  845   // Update the Network State in NV
//  846   NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
//  847                  NWK_NV_DEVICELIST_ENABLE |
//  848                  NWK_NV_BINDING_ENABLE    |
//  849                  NWK_NV_ADDRMGR_ENABLE );
//  850 
//  851   // Reset the NV startup option to resume from NV by
//  852   // clearing the "New" join option.
//  853   zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
//  854 
//  855  #if defined ( NV_TURN_OFF_RADIO )
//  856   ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
//  857  #endif
//  858 #endif  // NV_RESTORE
//  859 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock11
//  860 
//  861 /*********************************************************************
//  862  * @fn      ZDApp_RestoreNetworkState()
//  863  *
//  864  * @brief   This function will restore the network state of the
//  865  *          device if the network state is stored in NV.
//  866  *
//  867  * @param   none
//  868  *
//  869  * @return
//  870  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  871  *          restored.
//  872  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
//  873  *          This could mean that zgStartupOption said to not restore, or
//  874  *          it could mean that there was no network state to restore.
//  875  *
//  876  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  877 uint8 ZDApp_RestoreNetworkState( void )
ZDApp_RestoreNetworkState:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function ZDApp_RestoreNetworkState
//  878 {
        FUNCALL ZDApp_RestoreNetworkState, NLME_InitNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, NLME_RestoreFromNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  879   uint8 nvStat;
//  880 
//  881   // Initialize NWK NV items
//  882   nvStat = NLME_InitNV();
        ; Setup parameters for call to function NLME_InitNV
        LCALL   ??NLME_InitNV?relay
        MOV     A,R1
        MOV     R6,A
//  883 
//  884   if ( nvStat != NV_OPER_FAILED )
        MOV     A,#0xa
        XRL     A,R6
        JZ      ??ZDApp_RestoreNetworkState_0
//  885   {
//  886     if ( NLME_RestoreFromNV() )
        ; Setup parameters for call to function NLME_RestoreFromNV
        LCALL   ??NLME_RestoreFromNV?relay
        MOV     A,R1
        JZ      ??ZDApp_RestoreNetworkState_0
//  887     {
//  888       // Are we a coordinator
//  889       ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     DPTR,#ZDAppNwkAddr
        LCALL   ??Subroutine36_0 & 0xFFFF
//  890       if ( ZDAppNwkAddr.addr.shortAddr == 0 )
??CrossCallReturnLabel_69:
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        JNZ     ??ZDApp_RestoreNetworkState_1
        INC     DPTR
        MOVX    A,@DPTR
??ZDApp_RestoreNetworkState_1:
        JNZ     ??ZDApp_RestoreNetworkState_2
//  891         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
//  892       devStartMode = MODE_RESUME;
??ZDApp_RestoreNetworkState_2:
        MOV     A,#0x1
        MOV     DPTR,#devStartMode
        LCALL   ?Subroutine1 & 0xFFFF
//  893       osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
//  894     }
//  895     else
//  896       nvStat = NV_ITEM_UNINIT;
//  897 
//  898     if ( ZG_SECURE_ENABLED )
//  899     {
//  900       nwkFrameCounterChanges = 0;
//  901 
//  902       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  903       {
//  904         ZDApp_RestoreNwkKey();
//  905       }
//  906     }
//  907 
//  908     // The default for RxOnWhenIdle is true for Routers and false for end devices
//  909     // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
//  910     // other than default.
//  911   }
//  912 
//  913   if ( nvStat == ZSUCCESS )
??CrossCallReturnLabel_0:
        MOV     A,R6
        JNZ     ??ZDApp_RestoreNetworkState_0
//  914     return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
        MOV     R1,#0x0
        SJMP    ??ZDApp_RestoreNetworkState_3
//  915   else
//  916     return ( ZDO_INITDEV_NEW_NETWORK_STATE );
??ZDApp_RestoreNetworkState_0:
        MOV     R1,#0x1
??ZDApp_RestoreNetworkState_3:
        LJMP    ?Subroutine23 & 0xFFFF
        CFI EndBlock cfiBlock12
//  917 }
//  918 
//  919 /*********************************************************************
//  920  * @fn      ZDApp_InitUserDesc()
//  921  *
//  922  * @brief   Initialize the User Descriptor, the descriptor is read from NV
//  923  *          when needed.  If you want to initialize the User descriptor to
//  924  *          something other than all zero, do it here.
//  925  *
//  926  * @param   none
//  927  *
//  928  * @return  none
//  929  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  930 void ZDApp_InitUserDesc( void )
ZDApp_InitUserDesc:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function ZDApp_InitUserDesc
//  931 {
        FUNCALL ZDApp_InitUserDesc, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  932   UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
//  933 
//  934   // Initialize the User Descriptor, the descriptor is read from NV
//  935   // when needed.  If you want to initialize the User descriptor to something
//  936   // other than all zero, do it here.
//  937   osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        LCALL   ?Subroutine15 & 0xFFFF
//  938   if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
//  939          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
??CrossCallReturnLabel_27:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_InitUserDesc_0
//  940   {
//  941     if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
//  942          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x11
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_InitUserDesc_0
//  943     {
//  944       if ( ZDO_DefaultUserDescriptor.len != 0 )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??ZDApp_InitUserDesc_0
//  945       {
//  946         ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.4
        MOVX    @DPTR,A
//  947       }
//  948     }
//  949   }
//  950 }
??ZDApp_InitUserDesc_0:
        MOV     A,#0x11
        LJMP    ??Subroutine34_0 & 0xFFFF
        CFI EndBlock cfiBlock13
//  951 
//  952 /*********************************************************************
//  953  * @fn      ZDAppCheckForHoldKey()
//  954  *
//  955  * @brief   Check for key to set the device into Hold Auto Start
//  956  *
//  957  * @param   none
//  958  *
//  959  * @return  none
//  960  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  961 void ZDAppCheckForHoldKey( void )
ZDAppCheckForHoldKey:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function ZDAppCheckForHoldKey
//  962 {
        FUNCALL ZDAppCheckForHoldKey, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  963 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  964   // Get Keypad directly to see if a HOLD_START is needed.
//  965   // Hold down the SW_BYPASS_START key (see OnBoard.h)
//  966   // while booting to avoid starting up the device.
//  967   if ( HalKeyRead () == SW_BYPASS_START)
        ; Setup parameters for call to function HalKeyRead
        LCALL   ??HalKeyRead?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDAppCheckForHoldKey_0
//  968   {
//  969     // Change the device state to HOLD on start up
//  970     devState = DEV_HOLD;
        CLR     A
        MOV     DPTR,#devState
        MOVX    @DPTR,A
//  971   }
//  972 #endif // HAL_KEY
//  973 }
??ZDAppCheckForHoldKey_0:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock14
//  974 
//  975 /*********************************************************************
//  976  * @fn      ZDApp_ProcessOSALMsg()
//  977  *
//  978  * @brief   Process the incoming task message.
//  979  *
//  980  * @param   msgPtr - message to process
//  981  *
//  982  * @return  none
//  983  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  984 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessOSALMsg:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function ZDApp_ProcessOSALMsg
//  985 {
        FUNCALL ZDApp_ProcessOSALMsg, ZDP_IncomingData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessMsgCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NodeProfileSync
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_JoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_ReJoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessNetworkJoin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  986   // Data Confirmation message fields
//  987   uint8 sentEP;       // This should always be 0
//  988   uint8 sentStatus;
//  989   afDataConfirm_t *afDataConfirm;
//  990   uint8 tmp;
//  991 
//  992   switch ( msgPtr->event )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessOSALMsg>_0`:
        DATA
        DB        0
        DB        6
        DB        1
        DW        ??ZDApp_ProcessOSALMsg_0
        DB        2
        DW        ??ZDApp_ProcessOSALMsg_1
        DB        3
        DW        ??ZDApp_ProcessOSALMsg_2
        DB        26
        DW        ??ZDApp_ProcessOSALMsg_3
        DB        211
        DW        ??ZDApp_ProcessOSALMsg_4
        DB        253
        DW        ??ZDApp_ProcessOSALMsg_5
        DW        ??ZDApp_ProcessOSALMsg_6
        CODE
//  993   {
//  994     // Incoming ZDO Message
//  995     case AF_INCOMING_MSG_CMD:
//  996       ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
??ZDApp_ProcessOSALMsg_3:
        ; Setup parameters for call to function ZDP_IncomingData
        LCALL   ??ZDP_IncomingData?relay
        LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
//  997       break;
//  998 
//  999     case ZDO_CB_MSG:
// 1000       ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
??ZDApp_ProcessOSALMsg_4:
        ; Setup parameters for call to function ZDApp_ProcessMsgCBs
        LCALL   ??ZDApp_ProcessMsgCBs?relay
        LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
// 1001       break;
// 1002 
// 1003     case AF_DATA_CONFIRM_CMD:
// 1004       // This message is received as a confirmation of a data packet sent.
// 1005       // The status is of ZStatus_t type [defined in NLMEDE.h]
// 1006       // The message fields are defined in AF.h
// 1007       afDataConfirm = (afDataConfirm_t *)msgPtr;
// 1008       sentEP = afDataConfirm->endpoint;
// 1009       sentStatus = afDataConfirm->hdr.status;
// 1010 
// 1011       // Action taken when confirmation is received.
// 1012 #if defined ( ZIGBEE_FREQ_AGILITY )
// 1013       if ( pZDNwkMgr_ProcessDataConfirm )
??ZDApp_ProcessOSALMsg_5:
        MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessOSALMsg_7
        INC     DPTR
        MOVX    A,@DPTR
??ZDApp_ProcessOSALMsg_7:
        JNZ     $+5
        LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
// 1014         pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
        ; Setup parameters for indirect call
        MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?CALL_IND
        LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
// 1015 #endif
// 1016       (void)sentEP;
// 1017       (void)sentStatus;
// 1018       break;
// 1019 
// 1020     case ZDO_NWK_DISC_CNF:
// 1021       if (devState != DEV_NWK_DISC)
??ZDApp_ProcessOSALMsg_0:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
// 1022         break;
// 1023 
// 1024       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessOSALMsg_8
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
// 1025       {
// 1026         if ( (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status == ZDO_SUCCESS) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
??ZDApp_ProcessOSALMsg_8:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
        MOV     DPTR,#zdoDiscCounter
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3
        JNC     $+5
        LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
// 1027         {
// 1028           if ( devStartMode == MODE_JOIN )
        MOV     A,R6
        ADD     A,#0x4
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_29:
        ADD     A,#0x3
        DEC     R0
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        MOV     A,R6
        ADD     A,#0x2
        DEC     R0
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 4,R0
        MOV     ?V0 + 5,R1
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessOSALMsg_10
// 1029           {
// 1030             devState = DEV_NWK_JOINING;
        MOV     A,#0x3
        MOV     DPTR,#devState
        MOVX    @DPTR,A
// 1031 
// 1032             ZDApp_NodeProfileSync((ZDO_NetworkDiscoveryCfm_t *)msgPtr);
        ; Setup parameters for call to function ZDApp_NodeProfileSync
        LCALL   ??ZDApp_NodeProfileSync?relay
// 1033 
// 1034             if ( NLME_JoinRequest( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->extendedPANID,
// 1035                  BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB ),
// 1036                  ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel,
// 1037                  ZDO_Config_Node_Descriptor.CapabilityFlags ) != ZSuccess )
        ; Setup parameters for call to function NLME_JoinRequest
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??NLME_JoinRequest?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        SJMP    ??ZDApp_ProcessOSALMsg_11
// 1038             {
// 1039               ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1040                   + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
// 1041             }
// 1042           }
// 1043           else if ( devStartMode == MODE_REJOIN )
??ZDApp_ProcessOSALMsg_10:
        XRL     A,#0x3
        JNZ     ??CrossCallReturnLabel_23
// 1044           {
// 1045             devState = DEV_NWK_REJOIN;
        MOV     A,#0x4
        MOV     DPTR,#devState
        MOVX    @DPTR,A
// 1046 
// 1047             // Before trying to do rejoin, check if the device has a valid short address
// 1048             // If not, generate a random short address for itself
// 1049             if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
        MOV     DPTR,#(_NIB + 20)
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessOSALMsg_12
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDApp_ProcessOSALMsg_12:
        JNZ     ??ZDApp_ProcessOSALMsg_13
// 1050             {
// 1051               _NIB.nwkDevAddress = osal_rand();
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     DPTR,#(_NIB + 20)
        LCALL   ??Subroutine36_0 & 0xFFFF
// 1052               ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
??CrossCallReturnLabel_70:
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#((_NIB + 20) & 0xff)
        MOV     R3,#(((_NIB + 20) >> 8) & 0xff)
        MOV     R1,#0x53
        LCALL   ??ZMacSetReq?relay
// 1053             }
// 1054 
// 1055             if ( ZG_SECURE_ENABLED )
// 1056             {
// 1057               ZDApp_RestoreNwkKey();
// 1058             }
// 1059 
// 1060             // Check if the device has a valid PanID, if not, set it to the discovered Pan
// 1061             if ( _NIB.nwkPanId == INVALID_PAN_ID )
??ZDApp_ProcessOSALMsg_13:
        MOV     DPTR,#(_NIB + 33)
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessOSALMsg_14
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDApp_ProcessOSALMsg_14:
        JNZ     ??ZDApp_ProcessOSALMsg_15
// 1062             {
// 1063               _NIB.nwkPanId = BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB );
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     DPTR,#(_NIB + 33)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1064               ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#((_NIB + 33) & 0xff)
        MOV     R3,#(((_NIB + 33) >> 8) & 0xff)
        MOV     R1,#0x50
        LCALL   ??ZMacSetReq?relay
// 1065             }
// 1066 
// 1067             tmp = true;
??ZDApp_ProcessOSALMsg_15:
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1068             ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x52
        LCALL   ??ZMacSetReq?relay
// 1069             if ( NLME_ReJoinRequest( ZDO_UseExtendedPANID, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel) != ZSuccess )
        ; Setup parameters for call to function NLME_ReJoinRequest
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
        MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
        LCALL   ??NLME_ReJoinRequest?relay
??ZDApp_ProcessOSALMsg_11:
        MOV     A,R1
        JZ      ??CrossCallReturnLabel_23
// 1070             {
// 1071               ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1072                   + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
        LCALL   ?Subroutine13 & 0xFFFF
// 1073             }
// 1074           }
// 1075 
// 1076           if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
??CrossCallReturnLabel_23:
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??ZDApp_ProcessOSALMsg_6
// 1077           {
// 1078             // The receiver is on, turn network layer polling off.
// 1079             NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        LCALL   ?Subroutine14 & 0xFFFF
// 1080             NLME_SetQueuedPollRate( 0 );
// 1081             NLME_SetResponseRate( 0 );
// 1082           }
// 1083           else
// 1084           {
// 1085             if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
// 1086             {
// 1087               ZDApp_SavedPollRate = zgPollRate;
// 1088               NLME_SetPollRate( zgRejoinPollRate );
// 1089             }
// 1090           }
// 1091         }
??CrossCallReturnLabel_25:
        SJMP    ??ZDApp_ProcessOSALMsg_6
// 1092         else
// 1093         {
// 1094           if ( continueJoining )
??ZDApp_ProcessOSALMsg_9:
        MOV     DPTR,#continueJoining
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessOSALMsg_6
// 1095           {
// 1096     #if defined ( MANAGED_SCAN )
// 1097             ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
// 1098     #else
// 1099             zdoDiscCounter++;
        MOV     DPTR,#zdoDiscCounter
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1100             ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
// 1101                   + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     ?V0 + 0,R2
        MOV     A,#-0x1
        ANL     A,?V0 + 0
        MOV     R0,A
        MOV     A,#0x64
        ADD     A,R0
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        SJMP    ??ZDApp_ProcessOSALMsg_16
// 1102     #endif
// 1103           }
// 1104         }
// 1105       }
// 1106       break;
// 1107 
// 1108     case ZDO_NWK_JOIN_IND:
// 1109       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessOSALMsg_1:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessOSALMsg_17
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessOSALMsg_6
// 1110       {
// 1111         ZDApp_ProcessNetworkJoin();
??ZDApp_ProcessOSALMsg_17:
        ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
        LCALL   ??ZDApp_ProcessNetworkJoin?relay
        SJMP    ??ZDApp_ProcessOSALMsg_6
// 1112       }
// 1113       break;
// 1114 
// 1115     case ZDO_NWK_JOIN_REQ:
// 1116       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessOSALMsg_2:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessOSALMsg_18
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessOSALMsg_6
// 1117       {
// 1118         retryCnt = 0;
??ZDApp_ProcessOSALMsg_18:
        CLR     A
        MOV     DPTR,#retryCnt
        MOVX    @DPTR,A
// 1119         devStartMode = MODE_RESUME;
        MOV     A,#0x1
        MOV     DPTR,#devStartMode
        MOVX    @DPTR,A
// 1120         _tmpRejoinState = true;
        MOV     DPTR,#_tmpRejoinState
        LCALL   ?Subroutine1 & 0xFFFF
// 1121         osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
// 1122         zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
??CrossCallReturnLabel_1:
        MOV     A,#0x2
        MOV     DPTR,#zgDefaultStartingScanDuration
        MOVX    @DPTR,A
// 1123         ZDApp_NetworkInit( 0 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDApp_ProcessOSALMsg_16:
        LCALL   ??ZDApp_NetworkInit?relay
// 1124       }
// 1125       break;
// 1126 
// 1127     default:
// 1128       if ( ZG_SECURE_ENABLED )
// 1129         ZDApp_ProcessSecMsg( msgPtr );
// 1130       break;
// 1131   }
// 1132 
// 1133 }
??ZDApp_ProcessOSALMsg_6:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function sAddrExtCpy
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#((_NIB + 53) & 0xff)
        MOV     R5,#(((_NIB + 53) >> 8) & 0xff)
        MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
        MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
        LCALL   ??sAddrExtCpy?relay
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
// 1134 
// 1135 /*********************************************************************
// 1136  * @fn      ZDApp_ProcessMsgCBs()
// 1137  *
// 1138  * @brief   Process response messages
// 1139  *
// 1140  * @param   none
// 1141  *
// 1142  * @return  none
// 1143  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1144 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
ZDApp_ProcessMsgCBs:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function ZDApp_ProcessMsgCBs
// 1145 {
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_UpdateAddrManager
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ProcessBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDMatchSendState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseEndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_MatchEndDeviceBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 44
        MOV     A,#-0x2c
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 54)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1146   switch ( inMsg->clusterID )
        MOV     A,R6
        ADD     A,#0xc
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
        DATA
        DW        3
        DW        33
        DW        34
        DW        ??ZDApp_ProcessMsgCBs_0
        DW        32768
        DW        32769
        DW        ??ZDApp_ProcessMsgCBs_1
        DW        32801
        DW        32802
        DW        ??ZDApp_ProcessMsgCBs_2
        DW        1
        DW        32
        DW        ??ZDApp_ProcessMsgCBs_3
        DW        ??ZDApp_ProcessMsgCBs_4
        CODE
// 1147   {
// 1148 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1149     case NWK_addr_rsp:
// 1150     case IEEE_addr_rsp:
// 1151       {
// 1152         ZDO_NwkIEEEAddrResp_t *pAddrRsp;
// 1153         pAddrRsp = ZDO_ParseAddrRsp( inMsg );
??ZDApp_ProcessMsgCBs_1:
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        LCALL   ??ZDO_ParseAddrRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
// 1154         if ( pAddrRsp )
        MOV     A,R6
        JNZ     ??ZDApp_ProcessMsgCBs_5
        MOV     A,R7
??ZDApp_ProcessMsgCBs_5:
        JNZ     $+5
        LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
// 1155         {
// 1156           if ( pAddrRsp->status == ZSuccess )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessMsgCBs_6
// 1157           {
// 1158             ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
        ; Setup parameters for call to function ZDO_UpdateAddrManager
        MOV     A,R6
        ADD     A,#0x3
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        INC     DPTR
        LCALL   ?Subroutine7 & 0xFFFF
// 1159           }
??CrossCallReturnLabel_8:
        LCALL   ??ZDO_UpdateAddrManager?relay
// 1160           osal_mem_free( pAddrRsp );
??ZDApp_ProcessMsgCBs_6:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        LJMP    ??ZDApp_ProcessMsgCBs_7 & 0xFFFF
// 1161         }
// 1162       }
// 1163       break;
// 1164 #endif
// 1165 
// 1166 #if defined ( REFLECTOR )
// 1167     case Bind_req:
// 1168     case Unbind_req:
// 1169       {
// 1170         ZDO_BindUnbindReq_t bindReq;
// 1171         ZDO_ParseBindUnbindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_0:
        ; Setup parameters for call to function ZDO_ParseBindUnbindReq
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDO_ParseBindUnbindReq?relay
// 1172         ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
        ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDO_ProcessBindUnbindReq?relay
        LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
// 1173       }
// 1174       break;
// 1175 #endif
// 1176 
// 1177 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 1178     case Bind_rsp:
// 1179     case Unbind_rsp:
// 1180       if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
??ZDApp_ProcessMsgCBs_2:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessMsgCBs_4
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessMsgCBs_8
        INC     DPTR
        MOVX    A,@DPTR
??ZDApp_ProcessMsgCBs_8:
        JZ      ??ZDApp_ProcessMsgCBs_4
// 1181       {
// 1182         ZDMatchSendState(
// 1183              (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
// 1184              ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
        MOV     A,#0x21
        XRL     A,?V0 + 0
        JNZ     ??ZDApp_ProcessMsgCBs_9
        MOV     A,#-0x80
        XRL     A,?V0 + 1
??ZDApp_ProcessMsgCBs_9:
        JNZ     ??ZDApp_ProcessMsgCBs_10
        MOV     R1,#0x3
        SJMP    ??ZDApp_ProcessMsgCBs_11
??ZDApp_ProcessMsgCBs_10:
        MOV     R1,#0x2
??ZDApp_ProcessMsgCBs_11:
        ; Setup parameters for call to function ZDMatchSendState
        LCALL   ?Subroutine16 & 0xFFFF
// 1185       }
??CrossCallReturnLabel_66:
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ??ZDMatchSendState?relay
        SJMP    ??ZDApp_ProcessMsgCBs_4
// 1186       break;
// 1187 
// 1188     case End_Device_Bind_req:
// 1189       if (ZG_DEVICE_COORDINATOR_TYPE)
??ZDApp_ProcessMsgCBs_3:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessMsgCBs_4
// 1190       {
// 1191         ZDEndDeviceBind_t bindReq;
// 1192         ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
        ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDO_ParseEndDeviceBindReq?relay
// 1193         ZDO_MatchEndDeviceBind( &bindReq );
        ; Setup parameters for call to function ZDO_MatchEndDeviceBind
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDO_MatchEndDeviceBind?relay
// 1194 
// 1195         // Freeing the cluster lists - if allocated.
// 1196         if ( bindReq.numInClusters )
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessMsgCBs_12
// 1197           osal_mem_free( bindReq.inClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ??osal_mem_free?relay
// 1198         if ( bindReq.numOutClusters )
??ZDApp_ProcessMsgCBs_12:
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessMsgCBs_4
// 1199           osal_mem_free( bindReq.outClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
??ZDApp_ProcessMsgCBs_7:
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
// 1200       }
// 1201       break;
// 1202 #endif
// 1203   }
// 1204 }
??ZDApp_ProcessMsgCBs_4:
        MOV     A,#0x2c
        LJMP    ??Subroutine34_0 & 0xFFFF
        CFI EndBlock cfiBlock19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond22) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond22) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond22) CFA_SP SP+-5
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 5)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23
// 1205 
// 1206 /*********************************************************************
// 1207  * @fn      ZDApp_RegisterCBs()
// 1208  *
// 1209  * @brief   Process response messages
// 1210  *
// 1211  * @param   none
// 1212  *
// 1213  * @return  none
// 1214  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1215 void ZDApp_RegisterCBs( void )
ZDApp_RegisterCBs:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function ZDApp_RegisterCBs
// 1216 {
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1217 #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1218   ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x1
        LCALL   ?Subroutine5 & 0xFFFF
// 1219 #endif
// 1220 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
// 1221   ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
??CrossCallReturnLabel_46:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x0
        LCALL   ?Subroutine5 & 0xFFFF
// 1222 #endif
// 1223 #if ZG_BUILD_COORDINATOR_TYPE
// 1224   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
??CrossCallReturnLabel_47:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x21
        LCALL   ?Subroutine5 & 0xFFFF
// 1225   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
??CrossCallReturnLabel_48:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x22
        LCALL   ?Subroutine5 & 0xFFFF
// 1226   ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
??CrossCallReturnLabel_49:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#0x0
        LCALL   ??Subroutine28_0 & 0xFFFF
// 1227 #endif
// 1228 #if defined ( REFLECTOR )
// 1229   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
??CrossCallReturnLabel_50:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x21
        MOV     R3,#0x0
        LCALL   ??Subroutine28_0 & 0xFFFF
// 1230   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
??CrossCallReturnLabel_51:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x22
        MOV     R3,#0x0
        LCALL   ??Subroutine28_0 & 0xFFFF
// 1231 #endif
// 1232 }
??CrossCallReturnLabel_52:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond26) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond26) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond26) CFA_SP SP+-5
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond27) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond27) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond27) CFA_SP SP+-5
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond28) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond28) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond28) CFA_SP SP+-5
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        MOV     R3,#-0x80
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond31) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond31) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond31) CFA_SP SP+-5
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond32) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond32) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond32) CFA_SP SP+-5
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond33) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond33) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond33) CFA_SP SP+-5
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond34) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond34) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond34) CFA_SP SP+-5
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond35) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond35) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond35) CFA_SP SP+-5
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond36) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond36) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond36) CFA_SP SP+-5
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
        RET
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37
// 1233 
// 1234 /*********************************************************************
// 1235  * @fn      ZDApp_ProcessSecMsg()
// 1236  *
// 1237  * @brief   Process the incoming security message.
// 1238  *
// 1239  * @param   msgPtr - message to process
// 1240  *
// 1241  * @return  none
// 1242  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1243 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessSecMsg:
        CFI Block cfiBlock38 Using cfiCommon0
        CFI Function ZDApp_ProcessSecMsg
// 1244 {
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrTransportKeyInd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrUpdateDeviceInd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrSwitchKeyInd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1245   switch ( msgPtr->event )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessSecMsg>_0`:
        DATA
        DB        0
        DB        3
        DB        6
        DW        ??ZDApp_ProcessSecMsg_0
        DB        7
        DW        ??ZDApp_ProcessSecMsg_1
        DB        10
        DW        ??ZDApp_ProcessSecMsg_2
        DW        ??ZDApp_ProcessSecMsg_3
        CODE
// 1246   {
// 1247     case ZDO_ESTABLISH_KEY_CFM:
// 1248       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1249       {
// 1250         ZDSecMgrEstablishKeyCfm( (ZDO_EstablishKeyCfm_t*)msgPtr );
// 1251       }
// 1252       break;
// 1253 
// 1254     case ZDO_ESTABLISH_KEY_IND:
// 1255       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1256       {
// 1257         if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1258         {
// 1259           ZDSecMgrEstablishKeyInd( (ZDO_EstablishKeyInd_t*)msgPtr );
// 1260         }
// 1261       }
// 1262       break;
// 1263 
// 1264     case ZDO_TRANSPORT_KEY_IND:
// 1265       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessSecMsg_0:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessSecMsg_4
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessSecMsg_3
// 1266       {
// 1267         ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_4:
        ; Setup parameters for call to function ZDSecMgrTransportKeyInd
        LCALL   ??ZDSecMgrTransportKeyInd?relay
        SJMP    ??ZDApp_ProcessSecMsg_3
// 1268       }
// 1269       break;
// 1270 
// 1271     case ZDO_UPDATE_DEVICE_IND:
// 1272       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
??ZDApp_ProcessSecMsg_1:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessSecMsg_3
// 1273       {
// 1274         ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
        ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
        LCALL   ??ZDSecMgrUpdateDeviceInd?relay
        SJMP    ??ZDApp_ProcessSecMsg_3
// 1275       }
// 1276       break;
// 1277 
// 1278     case ZDO_REMOVE_DEVICE_IND:
// 1279       if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
// 1280       {
// 1281         ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
// 1282       }
// 1283       break;
// 1284 
// 1285     case ZDO_REQUEST_KEY_IND:
// 1286       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1287       {
// 1288         if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1289         {
// 1290           ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
// 1291         }
// 1292       }
// 1293       break;
// 1294 
// 1295     case ZDO_SWITCH_KEY_IND:
// 1296       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessSecMsg_2:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessSecMsg_5
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessSecMsg_3
// 1297       {
// 1298         ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_5:
        ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
        LCALL   ??ZDSecMgrSwitchKeyInd?relay
// 1299       }
// 1300       break;
// 1301 
// 1302     case ZDO_AUTHENTICATE_IND:
// 1303       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1304       {
// 1305         ZDSecMgrAuthenticateInd( (ZDO_AuthenticateInd_t*)msgPtr );
// 1306       }
// 1307       break;
// 1308 
// 1309     case ZDO_AUTHENTICATE_CFM:
// 1310       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1311       {
// 1312         ZDSecMgrAuthenticateCfm( (ZDO_AuthenticateCfm_t*)msgPtr );
// 1313       }
// 1314       break;
// 1315 
// 1316     default:
// 1317       // Unsupported messages
// 1318       break;
// 1319   }
// 1320 }
??ZDApp_ProcessSecMsg_3:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock38
// 1321 
// 1322 /*********************************************************************
// 1323  * @fn      ZDApp_ProcessNetworkJoin()
// 1324  *
// 1325  * @brief
// 1326  *
// 1327  *   Save off the Network key information.
// 1328  *
// 1329  * @param   none
// 1330  *
// 1331  * @return  none
// 1332  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1333 void ZDApp_ProcessNetworkJoin( void )
ZDApp_ProcessNetworkJoin:
        CFI Block cfiBlock39 Using cfiCommon0
        CFI Function ZDApp_ProcessNetworkJoin
// 1334 {
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_StartRouterRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_StartRouterRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 1335   if ( (devState == DEV_NWK_JOINING) ||
// 1336       ((devState == DEV_NWK_ORPHAN)  &&
// 1337        (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??ZDApp_ProcessNetworkJoin_0
        MOVX    A,@DPTR
        XRL     A,#0xa
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
// 1338   {
// 1339     // Result of a Join attempt by this device.
// 1340     if ( nwkStatus == ZSuccess )
??ZDApp_ProcessNetworkJoin_0:
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_3
// 1341     {
// 1342       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine4 & 0xFFFF
// 1343 
// 1344 #if defined ( POWER_SAVING )
// 1345       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1346 #endif
// 1347 
// 1348       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
// 1349       {
// 1350         // wait for auth from trust center!!
// 1351         devState = DEV_END_DEVICE_UNAUTH;
// 1352 
// 1353         // Start the reset timer for MAX UNAUTH time
// 1354         ZDApp_ResetTimerStart( 10000 );//MAX_DEVICE_UNAUTH_TIMEOUT );
// 1355       }
// 1356       else
// 1357       {
// 1358         if ( ZSTACK_ROUTER_BUILD )
??CrossCallReturnLabel_36:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessNetworkJoin_4
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_5
// 1359         {
// 1360           if ( devState == DEV_NWK_ORPHAN
// 1361             && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??ZDApp_ProcessNetworkJoin_4:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0xa
        JNZ     ??ZDApp_ProcessNetworkJoin_5
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_13:
        JZ      ??ZDApp_ProcessNetworkJoin_6
// 1362           {
// 1363             // Change NIB state to router for restore
// 1364             _NIB.nwkState = NWK_ROUTER;
        MOV     A,#0x8
        MOV     DPTR,#(_NIB + 35)
        MOVX    @DPTR,A
        SJMP    ??ZDApp_ProcessNetworkJoin_6
// 1365           }
// 1366         }
// 1367 
// 1368         if ( devState == DEV_NWK_JOINING )
??ZDApp_ProcessNetworkJoin_5:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??ZDApp_ProcessNetworkJoin_6
// 1369         {
// 1370           ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
// 1371         }
// 1372 
// 1373         devState = DEV_END_DEVICE;
??ZDApp_ProcessNetworkJoin_6:
        MOV     A,#0x6
        MOV     DPTR,#devState
        MOVX    @DPTR,A
// 1374         if ( ZSTACK_ROUTER_BUILD )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessNetworkJoin_7
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_24 & 0xFFFF
// 1375         {
// 1376           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1377           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??ZDApp_ProcessNetworkJoin_7:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_14:
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_24 & 0xFFFF
// 1378           {
// 1379             NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??NLME_StartRouterRequest?relay
        LJMP    ??CrossCallReturnLabel_24 & 0xFFFF
// 1380           }
// 1381         }
// 1382       }
// 1383     }
// 1384     else
// 1385     {
// 1386       if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
??ZDApp_ProcessNetworkJoin_3:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_8
        MOV     DPTR,#retryCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x3
        JC      ??ZDApp_ProcessNetworkJoin_8
// 1387       {
// 1388         if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_17:
        JNZ     ??ZDApp_ProcessNetworkJoin_9
        MOV     A,#-0x1
        XRL     A,R1
??ZDApp_ProcessNetworkJoin_9:
        JZ      ??ZDApp_ProcessNetworkJoin_10
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??ZDApp_ProcessNetworkJoin_11
        MOV     A,#-0x1
        XRL     A,R1
??ZDApp_ProcessNetworkJoin_11:
        JNZ     ??ZDApp_ProcessNetworkJoin_12
// 1389           devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_10:
        CLR     A
        MOV     DPTR,#devStartMode
        SJMP    ??ZDApp_ProcessNetworkJoin_13
// 1390         else
// 1391         {
// 1392           devStartMode = MODE_REJOIN;
??ZDApp_ProcessNetworkJoin_12:
        MOV     A,#0x3
        MOV     DPTR,#devStartMode
        MOVX    @DPTR,A
// 1393           _tmpRejoinState = true;
        MOV     A,#0x1
        MOV     DPTR,#_tmpRejoinState
??ZDApp_ProcessNetworkJoin_13:
        MOVX    @DPTR,A
// 1394         }
// 1395       }
// 1396 
// 1397       if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
// 1398            (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
??ZDApp_ProcessNetworkJoin_8:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#-0x2
        XRL     A,?V0 + 0
        JNZ     ??ZDApp_ProcessNetworkJoin_14
        MOV     A,#-0x1
        XRL     A,?V0 + 1
??ZDApp_ProcessNetworkJoin_14:
        JNZ     ??ZDApp_ProcessNetworkJoin_15
        MOV     DPTR,#(_NIB + 20)
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessNetworkJoin_16
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDApp_ProcessNetworkJoin_16:
        JZ      ??ZDApp_ProcessNetworkJoin_17
// 1399       {
// 1400         uint16 addr = INVALID_NODE_ADDR;
??ZDApp_ProcessNetworkJoin_15:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1401         // Invalidate nwk addr so end device does not use in its data reqs.
// 1402         _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV     DPTR,#(_NIB + 20)
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1403         ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
        ; Setup parameters for call to function ZMacSetReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x53
        LCALL   ??ZMacSetReq?relay
// 1404       }
// 1405 
// 1406       // Clear the neighbor Table and network discovery tables.
// 1407       nwkNeighborInitTable();
??ZDApp_ProcessNetworkJoin_17:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   ??nwkNeighborInitTable?relay
// 1408       NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL   ??NLME_NwkDiscTerm?relay
// 1409 
// 1410       zdoDiscCounter = 1;
        MOV     A,#0x1
        MOV     DPTR,#zdoDiscCounter
        MOVX    @DPTR,A
// 1411 
// 1412 //      ZDApp_NetworkInit( (uint16)
// 1413 //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
// 1414 //                          (NWK_START_DELAY * 5)) );
// 1415       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1416            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
        SJMP    ??ZDApp_ProcessNetworkJoin_18
// 1417     }
// 1418   }
// 1419   else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
??ZDApp_ProcessNetworkJoin_1:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??CrossCallReturnLabel_24
// 1420   {
// 1421     // results of an orphaning attempt by this device
// 1422     if (nwkStatus == ZSuccess)
??ZDApp_ProcessNetworkJoin_2:
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_19
// 1423     {
// 1424       if ( ZG_SECURE_ENABLED )
// 1425       {
// 1426         ZDApp_RestoreNwkKey();
// 1427       }
// 1428 
// 1429       devState = DEV_END_DEVICE;
        LCALL   ?Subroutine0 & 0xFFFF
// 1430       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
// 1431       // setup Power Manager Device
// 1432 #if defined ( POWER_SAVING )
// 1433       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1434 #endif
// 1435 
// 1436       if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
??CrossCallReturnLabel_42:
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??CrossCallReturnLabel_26
// 1437       {
// 1438         // The receiver is on, turn network layer polling off.
// 1439         NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        LCALL   ?Subroutine14 & 0xFFFF
// 1440         NLME_SetQueuedPollRate( 0 );
// 1441         NLME_SetResponseRate( 0 );
// 1442       }
// 1443 
// 1444       if ( ZSTACK_ROUTER_BUILD )
??CrossCallReturnLabel_26:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessNetworkJoin_20
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_21
// 1445       {
// 1446         // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1447         if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??ZDApp_ProcessNetworkJoin_20:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        JZ      ??ZDApp_ProcessNetworkJoin_21
// 1448         {
// 1449           NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??NLME_StartRouterRequest?relay
// 1450         }
// 1451       }
// 1452 
// 1453       ZDApp_AnnounceNewAddress();
??ZDApp_ProcessNetworkJoin_21:
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
        SJMP    ??CrossCallReturnLabel_24
// 1454     }
// 1455     else
// 1456     {
// 1457       if ( devStartMode == MODE_RESUME )
??ZDApp_ProcessNetworkJoin_19:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_22
// 1458       {
// 1459         if ( ++retryCnt <= MAX_RESUME_RETRY )
        MOV     DPTR,#retryCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x4
        JNC     ??ZDApp_ProcessNetworkJoin_23
// 1460         {
// 1461           if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_18:
        JNZ     ??ZDApp_ProcessNetworkJoin_24
        MOV     A,#-0x1
        XRL     A,R1
??ZDApp_ProcessNetworkJoin_24:
        JZ      ??ZDApp_ProcessNetworkJoin_25
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??ZDApp_ProcessNetworkJoin_26
        MOV     A,#-0x1
        XRL     A,R1
??ZDApp_ProcessNetworkJoin_26:
        JNZ     ??ZDApp_ProcessNetworkJoin_27
// 1462             devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_25:
        CLR     A
        MOV     DPTR,#devStartMode
??ZDApp_ProcessNetworkJoin_28:
        MOVX    @DPTR,A
        SJMP    ??ZDApp_ProcessNetworkJoin_22
// 1463           else
// 1464           {
// 1465             devStartMode = MODE_REJOIN;
??ZDApp_ProcessNetworkJoin_27:
        MOV     A,#0x3
        MOV     DPTR,#devStartMode
        MOVX    @DPTR,A
// 1466             _tmpRejoinState = true;
        MOV     A,#0x1
        MOV     DPTR,#_tmpRejoinState
        SJMP    ??ZDApp_ProcessNetworkJoin_28
// 1467           }
// 1468         }
// 1469         // Do a normal join to the network after certain times of rejoin retries
// 1470         else if( AIB_apsUseInsecureJoin == true )
??ZDApp_ProcessNetworkJoin_23:
        MOV     DPTR,#AIB_apsUseInsecureJoin
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessNetworkJoin_25
// 1471         {
// 1472           devStartMode = MODE_JOIN;
// 1473         }
// 1474       }
// 1475 
// 1476       // Clear the neighbor Table and network discovery tables.
// 1477       nwkNeighborInitTable();
??ZDApp_ProcessNetworkJoin_22:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   ??nwkNeighborInitTable?relay
// 1478       NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL   ??NLME_NwkDiscTerm?relay
// 1479 
// 1480       // setup a retry for later...
// 1481       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1482            + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
// 1483     }
// 1484   }
??ZDApp_ProcessNetworkJoin_18:
        LCALL   ?Subroutine13 & 0xFFFF
// 1485 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
// 1486   else
// 1487   {
// 1488     // Assume from address conflict
// 1489     if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
// 1490     {
// 1491       // Notify the network
// 1492       ZDApp_AnnounceNewAddress();
// 1493 
// 1494       // Notify apps
// 1495       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
// 1496     }
// 1497   }
// 1498 #endif
// 1499 }
??CrossCallReturnLabel_24:
        LJMP    ?Subroutine22 & 0xFFFF
        CFI EndBlock cfiBlock39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_SetPollRate?relay
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_SetQueuedPollRate?relay
        ; Setup parameters for call to function NLME_SetResponseRate
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_SetResponseRate?relay
        RET
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        LCALL   ??osal_rand?relay
        MOV     ?V0 + 0,R2
        MOV     A,#0x7f
        ANL     A,?V0 + 0
        MOV     R0,A
        MOV     A,#0x64
        ADD     A,R0
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??ZDApp_NetworkInit?relay
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker48 Using cfiCommon1
        CFI (cfiPicker48) NoFunction
        CFI (cfiPicker48) Picker
        MOV     DPTR,#(_NIB + 33)
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#-0x1
        XRL     A,R0
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiPicker48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond49 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x2
        RET
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOV     A,#0x6
        MOV     DPTR,#devState
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_set_event
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57
        REQUIRE ?Subroutine24
        ; // Fall through to label ?Subroutine24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond58 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond63) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond63) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond63) CFA_SP SP+-5
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond64) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond64) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond64) CFA_SP SP+-5
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond66) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond66) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond66) CFA_SP SP+-5
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond67) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond67) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond67) CFA_SP SP+-5
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond68) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond68) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond68) CFA_SP SP+-5
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        RET
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69
// 1500 
// 1501 /*********************************************************************
// 1502  * @fn      ZDApp_SaveNwkKey()
// 1503  *
// 1504  * @brief   Save off the Network key information.
// 1505  *
// 1506  * @param   none
// 1507  *
// 1508  * @return  none
// 1509  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1510 void ZDApp_SaveNwkKey( void )
ZDApp_SaveNwkKey:
        CFI Block cfiBlock70 Using cfiCommon0
        CFI Function ZDApp_SaveNwkKey
// 1511 {
        FUNCALL ZDApp_SaveNwkKey, SSP_ReadNwkActiveKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
// 1512   nwkActiveKeyItems keyItems;
// 1513 
// 1514   SSP_ReadNwkActiveKey( &keyItems );
        ; Setup parameters for call to function SSP_ReadNwkActiveKey
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SSP_ReadNwkActiveKey?relay
// 1515   keyItems.frameCounter++;
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
// 1516 
// 1517   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1518                 (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
// 1519 
// 1520   nwkFrameCounterChanges = 0;
        MOV     DPTR,#nwkFrameCounterChanges
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1521 
// 1522   // Clear copy in RAM before return.
// 1523   osal_memset( &keyItems, 0x00, sizeof(keyItems) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,A
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        CFI EndBlock cfiBlock70
// 1524 
// 1525 }
        REQUIRE ?Subroutine25
        ; // Fall through to label ?Subroutine25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiBlock71 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x15
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker79 Using cfiCommon1
        CFI (cfiPicker79) NoFunction
        CFI (cfiPicker79) Picker
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiPicker79
// 1526 
// 1527 /*********************************************************************
// 1528  * @fn      ZDApp_ResetNwkKey()
// 1529  *
// 1530  * @brief   Reset the Network key information in NV.
// 1531  *
// 1532  * @param   none
// 1533  *
// 1534  * @return  none
// 1535  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1536 void ZDApp_ResetNwkKey( void )
ZDApp_ResetNwkKey:
        CFI Block cfiBlock80 Using cfiCommon0
        CFI Function ZDApp_ResetNwkKey
// 1537 {
        FUNCALL ZDApp_ResetNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
// 1538   nwkActiveKeyItems keyItems;
// 1539 
// 1540   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        LCALL   ?Subroutine15 & 0xFFFF
// 1541   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1542                 (void *)&keyItems );
??CrossCallReturnLabel_28:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
// 1543 }
        MOV     A,#0x15
        LJMP    ??Subroutine34_0 & 0xFFFF
        CFI EndBlock cfiBlock80

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond81 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker83 Using cfiCommon1
        CFI (cfiPicker83) NoFunction
        CFI (cfiPicker83) Picker
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiPicker83
// 1544 
// 1545 /*********************************************************************
// 1546  * @fn      ZDApp_RestoreNwkKey()
// 1547  *
// 1548  * @brief
// 1549  *
// 1550  *   Save off the Network key information.
// 1551  *
// 1552  * @param   none
// 1553  *
// 1554  * @return  true if restored from NV, false if not
// 1555  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1556 uint8 ZDApp_RestoreNwkKey( void )
ZDApp_RestoreNwkKey:
        CFI Block cfiBlock84 Using cfiCommon0
        CFI Function ZDApp_RestoreNwkKey
// 1557 {
        FUNCALL ZDApp_RestoreNwkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
// 1558   nwkActiveKeyItems keyItems;
// 1559   uint8 ret = false;
        MOV     R6,#0x0
// 1560 
// 1561   if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
// 1562       == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,R6
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
        JNZ     ??ZDApp_RestoreNwkKey_0
// 1563   {
// 1564     if ( keyItems.frameCounter > 0 )
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JZ      ??ZDApp_RestoreNwkKey_1
// 1565     {
// 1566       // Restore the key information
// 1567       keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
// 1568       nwkFrameCounter = keyItems.frameCounter;
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#nwkFrameCounter
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
// 1569       ret = true;
        INC     R6
// 1570     }
// 1571 
// 1572     // Force a save for the first frame counter increment
// 1573     nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES + 1;
??ZDApp_RestoreNwkKey_1:
        MOV     DPTR,#nwkFrameCounterChanges
        MOV     A,#-0x17
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1574   }
// 1575   // Clear copy in RAM before return.
// 1576   osal_memset( &keyItems, 0x00, sizeof(keyItems) );
??ZDApp_RestoreNwkKey_0:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 1577 
// 1578   return ( ret );
        MOV     A,R6
        MOV     R1,A
        LJMP    ?Subroutine25 & 0xFFFF
        CFI EndBlock cfiBlock84
// 1579 }
// 1580 
// 1581 /*********************************************************************
// 1582  * @fn      ZDApp_ResetTimerStart
// 1583  *
// 1584  * @brief   Start the reset timer.
// 1585  *
// 1586  * @param   delay - delay time(ms) before reset
// 1587  *
// 1588  * @return  none
// 1589  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1590 void ZDApp_ResetTimerStart( uint16 delay )
ZDApp_ResetTimerStart:
        CFI Block cfiBlock85 Using cfiCommon0
        CFI Function ZDApp_ResetTimerStart
// 1591 {
        FUNCALL ZDApp_ResetTimerStart, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1592   // Start the rest timer
// 1593   osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#0x4
        LCALL   ?Subroutine9 & 0xFFFF
// 1594 }
??CrossCallReturnLabel_58:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock85

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond86 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond87) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond87) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond87) CFA_SP SP+-5
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond88) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond88) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond88) CFA_SP SP+-5
        CFI Block cfiPicker89 Using cfiCommon1
        CFI (cfiPicker89) NoFunction
        CFI (cfiPicker89) Picker
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiPicker89
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine30_0:
        CFI Block cfiCond90 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond92) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond92) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond92) CFA_SP SP+-5
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond93) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond93) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond93) CFA_SP SP+-5
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94
// 1595 
// 1596 /*********************************************************************
// 1597  * @fn      ZDApp_ResetTimerCancel
// 1598  *
// 1599  * @brief   Cancel the reset timer.
// 1600  *
// 1601  * @param   none
// 1602  *
// 1603  * @return  none
// 1604  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1605 void ZDApp_ResetTimerCancel( void )
ZDApp_ResetTimerCancel:
        CFI Block cfiBlock95 Using cfiCommon0
        CFI Function ZDApp_ResetTimerCancel
// 1606 {
        FUNCALL ZDApp_ResetTimerCancel, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1607   // Cancel the reset timer
// 1608   osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
// 1609 }
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock95
// 1610 
// 1611 /*********************************************************************
// 1612  * @fn      ZDApp_LeaveCtrlInit
// 1613  *
// 1614  * @brief   Initialize the leave control logic.
// 1615  *
// 1616  * @param   none
// 1617  *
// 1618  * @return  none
// 1619  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1620 void ZDApp_LeaveCtrlInit( void )
ZDApp_LeaveCtrlInit:
        CFI Block cfiBlock96 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlInit
// 1621 {
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1622   uint8 status;
// 1623 
// 1624 
// 1625   // Initialize control state
// 1626   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        LCALL   ?Subroutine3 & 0xFFFF
// 1627 
// 1628   status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
// 1629                               sizeof(ZDApp_LeaveCtrl),
// 1630                               &ZDApp_LeaveCtrl );
// 1631 
// 1632   if ( status == ZSUCCESS )
??CrossCallReturnLabel_2:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        JNZ     ??ZDApp_LeaveCtrlInit_0
// 1633   {
// 1634     // Read saved control
// 1635     osal_nv_read( ZCD_NV_LEAVE_CTRL,
// 1636                   0,
// 1637                   sizeof( uint8 ),
// 1638                   &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1639   }
// 1640 }
??ZDApp_LeaveCtrlInit_0:
        LJMP    ??Subroutine35_0 & 0xFFFF
        CFI EndBlock cfiBlock96
// 1641 
// 1642 /*********************************************************************
// 1643  * @fn      ZDApp_LeaveCtrlSet
// 1644  *
// 1645  * @brief   Set the leave control logic.
// 1646  *
// 1647  * @param   ra - reassociate flag
// 1648  *
// 1649  * @return  none
// 1650  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1651 void ZDApp_LeaveCtrlSet( uint8 ra )
ZDApp_LeaveCtrlSet:
        CFI Block cfiBlock97 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlSet
// 1652 {
        FUNCALL ZDApp_LeaveCtrlSet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1653   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
        MOV     A,#0x1
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    @DPTR,A
// 1654 
// 1655   if ( ra == TRUE )
        XRL     A,R1
        JNZ     ??ZDApp_LeaveCtrlSet_0
// 1656   {
// 1657     ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1658   }
// 1659 
// 1660   // Write the leave control
// 1661   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1662                  0,
// 1663                  sizeof( uint8 ),
// 1664                  &ZDApp_LeaveCtrl);
??ZDApp_LeaveCtrlSet_0:
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
        MOV     ?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_55:
        LJMP    ??Subroutine34_0 & 0xFFFF
        CFI EndBlock cfiBlock97
// 1665 }
// 1666 
// 1667 /*********************************************************************
// 1668  * @fn      ZDApp_LeaveCtrlBypass
// 1669  *
// 1670  * @brief   Check if NV restore should be skipped during a leave reset.
// 1671  *
// 1672  * @param   none
// 1673  *
// 1674  * @return  uint8 - (TRUE bypass:FALSE do not bypass)
// 1675  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1676 uint8 ZDApp_LeaveCtrlBypass( void )
ZDApp_LeaveCtrlBypass:
        CFI Block cfiBlock98 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlBypass
// 1677 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1678   uint8 bypass;
// 1679 
// 1680   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
// 1681   {
// 1682     bypass = TRUE;
// 1683   }
// 1684   else
// 1685   {
// 1686     bypass = FALSE;
// 1687   }
// 1688 
// 1689   return bypass;
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R1,A
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock98
// 1690 }
// 1691 
// 1692 /*********************************************************************
// 1693  * @fn      ZDApp_LeaveCtrlStartup
// 1694  *
// 1695  * @brief   Check for startup conditions during a leave reset.
// 1696  *
// 1697  * @param   state      - devState_t determined by leave control logic
// 1698  * @param   startDelay - startup delay
// 1699  *
// 1700  * @return  none
// 1701  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1702 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
ZDApp_LeaveCtrlStartup:
        CFI Block cfiBlock99 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlStartup
// 1703 {
        FUNCALL ZDApp_LeaveCtrlStartup, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1704   *startDelay = 0;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1705 
// 1706   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDApp_LeaveCtrlStartup_0
// 1707   {
// 1708     if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_LeaveCtrlStartup_1
// 1709     {
// 1710       *startDelay = 5000;
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#-0x78
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x13
        SJMP    ??ZDApp_LeaveCtrlStartup_2
// 1711     }
// 1712     else
// 1713     {
// 1714       *state = DEV_HOLD;
??ZDApp_LeaveCtrlStartup_1:
        CLR     A
        MOV     DPL,R2
        MOV     DPH,R3
??ZDApp_LeaveCtrlStartup_2:
        MOVX    @DPTR,A
// 1715     }
// 1716 
// 1717     // Set leave control to initialized state
// 1718     ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        LCALL   ?Subroutine3 & 0xFFFF
// 1719 
// 1720     // Write initialized control
// 1721     osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1722                   0,
// 1723                   sizeof( uint8 ),
// 1724                   &ZDApp_LeaveCtrl);
// 1725   }
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1726 }
??ZDApp_LeaveCtrlStartup_0:
        LJMP    ??Subroutine35_0 & 0xFFFF
        CFI EndBlock cfiBlock99

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond100 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker102 Using cfiCommon1
        CFI (cfiPicker102) NoFunction
        CFI (cfiPicker102) Picker
        CLR     A
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
        MOV     ?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiPicker102
// 1727 
// 1728 /*********************************************************************
// 1729  * @fn      ZDApp_LeaveReset
// 1730  *
// 1731  * @brief   Setup a device reset due to a leave indication/confirm.
// 1732  *
// 1733  * @param   ra - reassociate flag
// 1734  *
// 1735  * @return  none
// 1736  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1737 void ZDApp_LeaveReset( uint8 ra )
ZDApp_LeaveReset:
        CFI Block cfiBlock103 Using cfiCommon0
        CFI Function ZDApp_LeaveReset
// 1738 {
        FUNCALL ZDApp_LeaveReset, ZDApp_LeaveCtrlSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1739   ZDApp_LeaveCtrlSet( ra );
        ; Setup parameters for call to function ZDApp_LeaveCtrlSet
        LCALL   ??ZDApp_LeaveCtrlSet?relay
// 1740 
// 1741   ZDApp_ResetTimerStart( 5000 );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   ??ZDApp_ResetTimerStart?relay
// 1742 }
        SJMP    ??Subroutine31_0
        CFI EndBlock cfiBlock103
// 1743 
// 1744 /*********************************************************************
// 1745  * @fn      ZDApp_LeaveUpdate
// 1746  *
// 1747  * @brief   Update local device data related to leaving device.
// 1748  *
// 1749  * @param   nwkAddr        - NWK address of leaving device
// 1750  * @param   extAddr        - EXT address of leaving device
// 1751  * @param   removeChildren - remove children of leaving device
// 1752  *
// 1753  * @return  none
// 1754  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1755 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
ZDApp_LeaveUpdate:
        CFI Block cfiBlock104 Using cfiCommon0
        CFI Function ZDApp_LeaveUpdate
// 1756                         uint8 removeChildren )
// 1757 {
        FUNCALL ZDApp_LeaveUpdate, NLME_RemoveChild
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
// 1758   /*
// 1759   AddrMgrEntry_t entry;
// 1760   */
// 1761   (void)nwkAddr;  // Intentionally unreferenced parameter
// 1762 
// 1763   // Remove if child
// 1764   if ( ZSTACK_ROUTER_BUILD )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDApp_LeaveUpdate_0
        XRL     A,#0x1
        JNZ     ??ZDApp_LeaveUpdate_1
// 1765   {
// 1766     NLME_RemoveChild( extAddr, removeChildren );
??ZDApp_LeaveUpdate_0:
        ; Setup parameters for call to function NLME_RemoveChild
        LCALL   ??NLME_RemoveChild?relay
// 1767   }
// 1768 
// 1769   /*
// 1770   // Set NWK address to invalid
// 1771   entry.user    = ADDRMGR_USER_DEFAULT;
// 1772   entry.nwkAddr = INVALID_NODE_ADDR;
// 1773   AddrMgrExtAddrSet( entry.extAddr, extAddr );
// 1774   AddrMgrEntryUpdate( &entry );
// 1775 
// 1776   // Check
// 1777   if ( removeChildren == TRUE )
// 1778   {
// 1779     // Set index to INVALID_NODE_ADDR to start search
// 1780     entry.index = INVALID_NODE_ADDR;
// 1781 
// 1782     // Get first entry
// 1783     AddrMgrEntryGetNext( &entry );
// 1784 
// 1785     // Remove all descendents
// 1786     while ( entry.index != INVALID_NODE_ADDR )
// 1787     {
// 1788       // Check NWK address allocation algorithm
// 1789       if ( RTG_ANCESTOR( entry.nwkAddr, thisAddr ) != 0 )
// 1790       {
// 1791         // Set NWK address to invalid
// 1792         entry.nwkAddr = INVALID_NODE_ADDR;
// 1793         AddrMgrEntryUpdate( &entry );
// 1794       }
// 1795 
// 1796       // Get next entry
// 1797       AddrMgrEntryGetNext( &entry );
// 1798     }
// 1799   }
// 1800   */
// 1801 }
??ZDApp_LeaveUpdate_1:
        SJMP    ??Subroutine31_0
        CFI EndBlock cfiBlock104
// 1802 
// 1803 /*********************************************************************
// 1804  * CALLBACK FUNCTIONS
// 1805  */
// 1806 
// 1807 
// 1808 /*********************************************************************
// 1809  * @fn      ZDApp_SendEventMsg()
// 1810  *
// 1811  * @brief
// 1812  *
// 1813  *   Sends a Network Join message
// 1814  *
// 1815  * @param  cmd - command ID
// 1816  * @param  len - length (in bytes) of the buf field
// 1817  * @param  buf - buffer for the rest of the message.
// 1818  *
// 1819  * @return  none
// 1820  */
// 1821 void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
// 1822 {
// 1823   ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
// 1824 }
// 1825 
// 1826 /*********************************************************************
// 1827  * @fn      ZDApp_SendMsg()
// 1828  *
// 1829  * @brief   Sends a OSAL message
// 1830  *
// 1831  * @param  taskID - Where to send the message
// 1832  * @param  cmd - command ID
// 1833  * @param  len - length (in bytes) of the buf field
// 1834  * @param  buf - buffer for the rest of the message.
// 1835  *
// 1836  * @return  none
// 1837  */
// 1838 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
// 1839 {
// 1840   osal_event_hdr_t *msgPtr;
// 1841 
// 1842   // Send the address to the task
// 1843   msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
// 1844   if ( msgPtr )
// 1845   {
// 1846     if ( (len > 0) && (buf != NULL) )
// 1847       osal_memcpy( msgPtr, buf, len );
// 1848 
// 1849     msgPtr->event = cmd;
// 1850     osal_msg_send( taskID, (uint8 *)msgPtr );
// 1851   }
// 1852 }
// 1853 
// 1854 /*********************************************************************
// 1855  * Call Back Functions from NWK  - API
// 1856  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1857 int BeCoor;
BeCoor:
        DS 2
        REQUIRE __INIT_XDATA_Z
// 1858 /*********************************************************************
// 1859  * @fn          ZDO_NetworkDiscoveryConfirmCB
// 1860  *
// 1861  * @brief       This function returns a choice of PAN to join.
// 1862  *
// 1863  * @param       ResultCount - Number of routers discovered
// 1864  * @param               NetworkList - Pointer to list of network descriptors
// 1865  *
// 1866  * @return      ZStatus_t
// 1867  */
// 1868 #define STACK_PROFILE_MAX 2
// 1869 ZStatus_t ZDO_NetworkDiscoveryConfirmCB( uint8 ResultCount,
// 1870                                          networkDesc_t *NetworkList )
// 1871 {
// 1872   networkDesc_t *pNwkDesc = NetworkList;
// 1873   ZDO_NetworkDiscoveryCfm_t msg;
// 1874   uint8 i = ResultCount;
// 1875   uint8 stackProfile;
// 1876   uint8 stackProfilePro;
// 1877   uint8 selected;
// 1878 
// 1879 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 1880   if ( zdappMgmtNwkDiscReqInProgress )
// 1881   {
// 1882     zdappMgmtNwkDiscReqInProgress = false;
// 1883     ZDO_FinishProcessingMgmtNwkDiscReq( ResultCount, NetworkList );
// 1884     return ( ZSuccess );
// 1885   }
// 1886 #endif
// 1887 
// 1888   // process discovery results
// 1889   stackProfilePro = FALSE;
// 1890   selected = FALSE;
// 1891 
// 1892   for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
// 1893   {
// 1894     pNwkDesc = NetworkList;
// 1895     for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
// 1896     {
// 1897       if ( zgConfigPANID != 0xFFFF )
// 1898       {
// 1899         // PAN Id is preconfigured. check if it matches
// 1900         if ( pNwkDesc->panId != zgConfigPANID )
// 1901           continue;
// 1902       }
// 1903 
// 1904 
// 1905       if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID) == true )
// 1906       {
// 1907         // If the extended Pan ID is commissioned to a non zero value
// 1908         // Only join the Pan that has match EPID
// 1909         if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
// 1910           continue;
// 1911 
// 1912       }
// 1913 
// 1914 
// 1915         // check that network is allowing joining
// 1916         if ( ZSTACK_ROUTER_BUILD )
// 1917         {
// 1918           if ( stackProfilePro == FALSE )
// 1919           {
// 1920             if ( !pNwkDesc->routerCapacity )
// 1921             {
// 1922               continue;
// 1923             }
// 1924           }
// 1925           else
// 1926           {
// 1927             if ( !pNwkDesc->deviceCapacity )
// 1928             {
// 1929               continue;
// 1930             }
// 1931           }
// 1932         }
// 1933         else if ( ZSTACK_END_DEVICE_BUILD )
// 1934         {
// 1935           if ( !pNwkDesc->deviceCapacity )
// 1936           {
// 1937             continue;
// 1938           }
// 1939         }
// 1940 
// 1941         // check version of zigbee protocol
// 1942         if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
// 1943           continue;
// 1944 
// 1945         // check version of stack profile
// 1946         if ( pNwkDesc->stackProfile != zgStackProfile  )
// 1947         {
// 1948           if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
// 1949               || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
// 1950             stackProfilePro = TRUE;
// 1951 
// 1952           if ( stackProfile == 0 )
// 1953           {
// 1954             continue;
// 1955           }
// 1956         }
// 1957 
// 1958       // check if beacon order is the right value..
// 1959       //  if ( pNwkDesc->beaconOrder < ZDO_CONFIG_MAX_BO )
// 1960       //    continue;
// 1961 
// 1962       // choose this pan for joining
// 1963       break;
// 1964     }
// 1965     if (i < ResultCount)
// 1966     {
// 1967      selected = TRUE;
// 1968       break;
// 1969     }
// 1970 
// 1971     // break if selected or stack profile pro wasn't found
// 1972     if ( (selected == TRUE) || (stackProfilePro == FALSE) )
// 1973     {
// 1974       break;
// 1975     }
// 1976   }
// 1977 
// 1978   if ( i == ResultCount )
// 1979   {
// 1980     HAL_TOGGLE_LED1();//¸Ä±äLED1µÄ×´Ì¬
// 1981     msg.hdr.status = ZDO_FAIL;   // couldn't find appropriate PAN to join !
// 1982     BeCoor++;
// 1983     if(BeCoor>5)
// 1984     {
// 1985       ZDO_Config_Node_Descriptor.LogicalType=NODETYPE_COORDINATOR;
// 1986       devStartMode=MODE_HARD;
// 1987       //devState = DEV_COORD_STARTING;
// 1988       osal_set_event(ZDAppTaskID, ZDO_NETWORK_INIT);
// 1989     }
// 1990   }
// 1991   else
// 1992   {
// 1993     msg.hdr.status = ZDO_SUCCESS;
// 1994     msg.panIdLSB = LO_UINT16( pNwkDesc->panId );
// 1995     msg.panIdMSB = HI_UINT16( pNwkDesc->panId );
// 1996     msg.logicalChannel = pNwkDesc->logicalChannel;
// 1997     msg.version = pNwkDesc->version;
// 1998     osal_cpyExtAddr( msg.extendedPANID, pNwkDesc->extendedPANID );
// 1999   }
// 2000 
// 2001   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(ZDO_NetworkDiscoveryCfm_t), (uint8 *)&msg );
// 2002 
// 2003   return (ZSuccess);
// 2004 }  // ZDO_NetworkDiscoveryConfirmCB
// 2005 
// 2006 /*********************************************************************
// 2007  * @fn          ZDO_NetworkFormationConfirmCB
// 2008  *
// 2009  * @brief       This function reports the results of the request to
// 2010  *              initialize a coordinator in a network.
// 2011  *
// 2012  * @param       Status - Result of NLME_NetworkFormationRequest()
// 2013  *
// 2014  * @return      none
// 2015  */
// 2016 void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
// 2017 {
// 2018   nwkStatus = (byte)Status;
// 2019 
// 2020   if ( Status == ZSUCCESS )
// 2021   {
// 2022     // LED on shows Coordinator started
// 2023     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
// 2024 
// 2025     // LED off forgets HOLD_AUTO_START
// 2026     HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
// 2027 
// 2028 #if defined ( ZBIT )
// 2029     SIM_SetColor(0xd0ffd0);
// 2030 #endif
// 2031 
// 2032     if ( devState == DEV_HOLD )
// 2033     {
// 2034       // Began with HOLD_AUTO_START
// 2035       devState = DEV_COORD_STARTING;
// 2036     }
// 2037   }
// 2038 #if defined(BLINK_LEDS)
// 2039   else
// 2040   {
// 2041     HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
// 2042   }
// 2043 #endif
// 2044 
// 2045   osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
// 2046 }
// 2047 
// 2048 /*********************************************************************
// 2049  * @fn          ZDO_StartRouterConfirmCB
// 2050  *
// 2051  * @brief       This function reports the results of the request to
// 2052  *              start functioning as a router in a network.
// 2053  *
// 2054  * @param       Status - Result of NLME_StartRouterRequest()
// 2055  *
// 2056  * @return      none
// 2057  */
// 2058 void ZDO_StartRouterConfirmCB( ZStatus_t Status )
// 2059 {
// 2060   nwkStatus = (byte)Status;
// 2061 
// 2062   if ( Status == ZSUCCESS )
// 2063   {
// 2064     // LED on shows Router started
// 2065     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
// 2066     // LED off forgets HOLD_AUTO_START
// 2067     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
// 2068     if ( devState == DEV_HOLD )
// 2069     {
// 2070       // Began with HOLD_AUTO_START
// 2071       devState = DEV_END_DEVICE;
// 2072     }
// 2073   }
// 2074 #if defined(BLINK_LEDS)
// 2075   else
// 2076   {
// 2077     HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
// 2078   }
// 2079 #endif
// 2080 
// 2081   osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
// 2082 }
// 2083 
// 2084 /*********************************************************************
// 2085  * @fn          ZDO_JoinConfirmCB
// 2086  *
// 2087  * @brief       This function allows the next hight layer to be notified
// 2088  *              of the results of its request to join itself or another
// 2089  *              device to a network.
// 2090  *
// 2091  * @param       Status - Result of NLME_JoinRequest()
// 2092  *
// 2093  * @return      none
// 2094  */
// 2095 void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
// 2096 {
// 2097   (void)PanId;  // remove if this parameter is used.
// 2098 
// 2099   nwkStatus = (byte)Status;
// 2100 
// 2101   if ( Status == ZSUCCESS )
// 2102   {
// 2103     // LED on shows device joined
// 2104     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
// 2105     // LED off forgets HOLD_AUTO_START
// 2106     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
// 2107     if ( (devState == DEV_HOLD) )
// 2108     {
// 2109       // Began with HOLD_AUTO_START
// 2110       devState = DEV_NWK_JOINING;
// 2111     }
// 2112 
// 2113     if ( !ZG_SECURE_ENABLED )
// 2114     {
// 2115       // Notify to save info into NV
// 2116       ZDApp_NVUpdate();
// 2117     }
// 2118   }
// 2119   else
// 2120   {
// 2121 #if defined(BLINK_LEDS)
// 2122     HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
// 2123 #endif
// 2124   }
// 2125 
// 2126   // Notify ZDApp
// 2127   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
// 2128 }
// 2129 
// 2130 /*********************************************************************
// 2131  * @fn          ZDO_AddrChangeIndicationCB
// 2132  *
// 2133  * @brief       This function notifies the application that this
// 2134  *              device's address has changed.  Could happen in
// 2135  *              a network with stochastic addressing (PRO).
// 2136  *
// 2137  * @param       newAddr - the new address
// 2138  *
// 2139  * @return      none
// 2140  */
// 2141 void ZDO_AddrChangeIndicationCB( uint16 newAddr )
// 2142 {
// 2143   (void)newAddr;  // remove if this parameter is used
// 2144 
// 2145   // Notify to save info into NV
// 2146   ZDApp_NVUpdate();
// 2147 
// 2148   // Notify the applications
// 2149   osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
// 2150 
// 2151   // Send out a device announce
// 2152   ZDApp_AnnounceNewAddress();
// 2153 }
// 2154 
// 2155 /*********************************************************************
// 2156  * @fn          ZDO_JoinIndicationCB
// 2157  *
// 2158  * @brief       This function allows the next higher layer of a
// 2159  *              coordinator to be notified of a remote join request.
// 2160  *
// 2161  * @param       ShortAddress - 16-bit address
// 2162  * @param       ExtendedAddress - IEEE (64-bit) address
// 2163  * @param       CapabilityFlags - Association Capability Flags
// 2164  * @param       type - of joining -
// 2165  *                          NWK_ASSOC_JOIN
// 2166  *                          NWK_ASSOC_REJOIN_UNSECURE
// 2167  *                          NWK_ASSOC_REJOIN_SECURE
// 2168  *
// 2169  * @return      ZStatus_t
// 2170  */
// 2171 ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
// 2172                                 uint8 CapabilityFlags, uint8 type)
// 2173 {
// 2174   (void)ShortAddress;
// 2175   (void)ExtendedAddress;
// 2176 #if ZDO_NV_SAVE_RFDs
// 2177   (void)CapabilityFlags;
// 2178 
// 2179 #else  // if !ZDO_NV_SAVE_RFDs
// 2180   if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
// 2181 #endif
// 2182   {
// 2183     ZDApp_NVUpdate();  // Notify to save info into NV.
// 2184   }
// 2185 
// 2186   if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
// 2187   {
// 2188     if (type == NWK_ASSOC_JOIN || type == NWK_ASSOC_REJOIN_UNSECURE)
// 2189     {
// 2190       osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
// 2191     }
// 2192   }
// 2193 
// 2194   return ZSuccess;
// 2195 }
// 2196 
// 2197 /*********************************************************************
// 2198  * @fn          ZDO_ConcentratorIndicationCB
// 2199  *
// 2200  * @brief       This function allows the next higher layer of a
// 2201  *              device to be notified of existence of the concentrator.
// 2202  *
// 2203  * @param       nwkAddr - 16-bit NWK address of the concentrator
// 2204  * @param       extAddr - pointer to extended Address
// 2205  *                        NULL if not available
// 2206  * @param       pktCost - PktCost from RREQ
// 2207  *
// 2208  * @return      void
// 2209  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiBlock105 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 5)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock105
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
        CFI Block cfiBlock106 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock106

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDApp_SendEventMsg:
        CFI Block cfiBlock107 Using cfiCommon0
        CFI Function ZDApp_SendEventMsg
        FUNCALL ZDApp_SendEventMsg, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     A,R2
        MOV     R3,A
        MOV     A,R1
        MOV     R2,A
        CFI EndBlock cfiBlock107
        REQUIRE ?Subroutine27
        ; // Fall through to label ?Subroutine27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiBlock108 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_43:
        SJMP    ??Subroutine31_0
        CFI EndBlock cfiBlock108

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDApp_SendMsg:
        CFI Block cfiBlock109 Using cfiCommon0
        CFI Function ZDApp_SendMsg
        FUNCALL ZDApp_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 7,R1
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 4,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPL,R3
        MOV     ?V0 + 0,DPL
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,?V0 + 0
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     R6,?V0 + 10
        MOV     R7,?V0 + 11
        MOV     A,R6
        JNZ     ??ZDApp_SendMsg_0
        MOV     A,R7
??ZDApp_SendMsg_0:
        JZ      ??ZDApp_SendMsg_1
        MOV     A,?V0 + 4
        JZ      ??ZDApp_SendMsg_2
        MOV     A,?V0 + 2
        JNZ     ??ZDApp_SendMsg_3
        MOV     A,?V0 + 3
??ZDApp_SendMsg_3:
        JZ      ??ZDApp_SendMsg_2
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,?V0 + 2
        MOV     ?V0 + 5,?V0 + 3
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,?V0 + 0
        MOV     R5,#0x0
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
??ZDApp_SendMsg_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0 + 8
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 7
        LCALL   ??osal_msg_send?relay
??ZDApp_SendMsg_1:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock109

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDO_NetworkDiscoveryConfirmCB:
        CFI Block cfiBlock110 Using cfiCommon0
        CFI Function ZDO_NetworkDiscoveryConfirmCB
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 14
        MOV     A,#-0xe
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 7,R1
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 8,#0x0
        MOV     ?V0 + 6,#0x0
??ZDO_NetworkDiscoveryConfirmCB_0:
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
        MOV     ?V0 + 9,#0x0
        SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
??ZDO_NetworkDiscoveryConfirmCB_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
??ZDO_NetworkDiscoveryConfirmCB_4:
        MOV     ?V0 + 8,#0x1
??ZDO_NetworkDiscoveryConfirmCB_3:
        MOV     A,?V0 + 6
        JZ      $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_5 & 0xFFFF
??ZDO_NetworkDiscoveryConfirmCB_6:
        INC     ?V0 + 9
        MOV     A,R6
        ADD     A,#0x16
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
??ZDO_NetworkDiscoveryConfirmCB_1:
        MOV     A,R6
        ADD     A,#0x7
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     A,R6
        ADD     A,#0xd
        MOV     ?V0 + 2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     A,?V0 + 9
        CLR     C
        SUBB    A,?V0 + 7
        JC      $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_7 & 0xFFFF
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_8
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDO_NetworkDiscoveryConfirmCB_8:
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_9
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_NetworkDiscoveryConfirmCB_10:
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_6
??ZDO_NetworkDiscoveryConfirmCB_9:
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
        MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
        LCALL   ??nwk_ExtPANIDValid?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_11
        ; Setup parameters for call to function sAddrExtCmp
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
        MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
        LCALL   ??sAddrExtCmp?relay
        MOV     A,R1
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_6
??ZDO_NetworkDiscoveryConfirmCB_11:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_12
        XRL     A,#0x1
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_13
??ZDO_NetworkDiscoveryConfirmCB_12:
        MOV     A,?V0 + 8
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_14
        MOV     DPL,R6
        MOV     DPH,R7
??ZDO_NetworkDiscoveryConfirmCB_15:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_16
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_6 & 0xFFFF
??ZDO_NetworkDiscoveryConfirmCB_14:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        SJMP    ??ZDO_NetworkDiscoveryConfirmCB_15
??ZDO_NetworkDiscoveryConfirmCB_13:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_14
??ZDO_NetworkDiscoveryConfirmCB_16:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#(_NIB + 17)
        MOVX    A,@DPTR
        XRL     A,R2
        JZ      $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_6 & 0xFFFF
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#zgStackProfile
        MOVX    A,@DPTR
        XRL     A,R2
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_5
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_2 & 0xFFFF
        MOV     A,#0x2
        XRL     A,R2
        JZ      $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_3 & 0xFFFF
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_4 & 0xFFFF
??ZDO_NetworkDiscoveryConfirmCB_7:
        MOV     A,?V0 + 8
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_17
        INC     ?V0 + 6
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,#0x2
        JNC     $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_0 & 0xFFFF
??ZDO_NetworkDiscoveryConfirmCB_17:
        MOV     A,?V0 + 7
        XRL     A,?V0 + 9
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_5
        MOV     C,0x90.1
        JNC     ??ZDO_NetworkDiscoveryConfirmCB_18
        CLR     0x90.1
        SJMP    ??ZDO_NetworkDiscoveryConfirmCB_19
??ZDO_NetworkDiscoveryConfirmCB_18:
        SETB    0x90.1
??ZDO_NetworkDiscoveryConfirmCB_19:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#BeCoor
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        MOV     DPTR,#BeCoor
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x6
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??ZDO_NetworkDiscoveryConfirmCB_20
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
        MOV     A,#0x2
        MOV     DPTR,#devStartMode
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_39:
        SJMP    ??ZDO_NetworkDiscoveryConfirmCB_20
??ZDO_NetworkDiscoveryConfirmCB_5:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sAddrExtCpy?relay
??ZDO_NetworkDiscoveryConfirmCB_20:
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0xe
        MOV     R2,#0x1
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     R1,#0x0
        MOV     A,#0xe
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock110
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond111 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker113 Using cfiCommon1
        CFI (cfiPicker113) NoFunction
        CFI (cfiPicker113) Picker
        MOV     A,R6
        ADD     A,#0xf
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiPicker113
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
        CFI Block cfiCond114 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        MOV     DPL,A
        MOV     A,R7
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
        CFI Block cfiCond121 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker128 Using cfiCommon1
        CFI (cfiPicker128) NoFunction
        CFI (cfiPicker128) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiPicker128

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDO_NetworkFormationConfirmCB:
        CFI Block cfiBlock129 Using cfiCommon0
        CFI Function ZDO_NetworkFormationConfirmCB
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
        JNZ     ??ZDO_NetworkFormationConfirmCB_0
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_31:
        JNZ     ??ZDO_NetworkFormationConfirmCB_1
        MOV     A,#0x8
        MOVX    @DPTR,A
        SJMP    ??ZDO_NetworkFormationConfirmCB_1
??ZDO_NetworkFormationConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
??ZDO_NetworkFormationConfirmCB_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        LJMP    ?Subroutine26 & 0xFFFF
        CFI EndBlock cfiBlock129

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDO_StartRouterConfirmCB:
        CFI Block cfiBlock130 Using cfiCommon0
        CFI Function ZDO_StartRouterConfirmCB
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
        JNZ     ??ZDO_StartRouterConfirmCB_0
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_32:
        JNZ     ??ZDO_StartRouterConfirmCB_1
        MOV     A,#0x6
        MOVX    @DPTR,A
        SJMP    ??ZDO_StartRouterConfirmCB_1
??ZDO_StartRouterConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
??ZDO_StartRouterConfirmCB_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x20
        LJMP    ?Subroutine26 & 0xFFFF
        CFI EndBlock cfiBlock130

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond131 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond132) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond132) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond132) CFA_SP SP+-5
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond133) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond133) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond133) CFA_SP SP+-5
        CFI Block cfiPicker134 Using cfiCommon1
        CFI (cfiPicker134) NoFunction
        CFI (cfiPicker134) Picker
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function HalLedSet
        ; Setup parameters for call to function HalLedSet
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiPicker134

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDO_JoinConfirmCB:
        CFI Block cfiBlock135 Using cfiCommon0
        CFI Function ZDO_JoinConfirmCB
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
        JNZ     ??ZDO_JoinConfirmCB_0
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_33:
        JNZ     ??ZDO_JoinConfirmCB_1
        MOV     A,#0x3
        MOVX    @DPTR,A
        SJMP    ??ZDO_JoinConfirmCB_1
??ZDO_JoinConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
??ZDO_JoinConfirmCB_1:
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R3,#0x2
        MOV     R2,#0x2
        LJMP    ?Subroutine27 & 0xFFFF
        CFI EndBlock cfiBlock135

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond136 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond138) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond138) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond138) CFA_SP SP+-5
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond139) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond139) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond139) CFA_SP SP+-5
        CFI Block cfiPicker140 Using cfiCommon1
        CFI (cfiPicker140) NoFunction
        CFI (cfiPicker140) Picker
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDApp_SendMsg?relay
        RET
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDO_AddrChangeIndicationCB:
        CFI Block cfiBlock141 Using cfiCommon0
        CFI Function ZDO_AddrChangeIndicationCB
        FUNCALL ZDO_AddrChangeIndicationCB, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_37:
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock141

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDO_JoinIndicationCB:
        ; Saved register size: 0
        ; Auto size: 0
        REQUIRE ?Subroutine21
        ; // Fall through to label ?Subroutine21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiBlock142 Using cfiCommon0
        CFI NoFunction
        MOV     R1,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock142

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2210 void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
ZDO_ConcentratorIndicationCB:
        CFI Block cfiBlock143 Using cfiCommon0
        CFI Function ZDO_ConcentratorIndicationCB
// 2211 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 5)
// 2212   zdoConcentratorInd_t conInd;
// 2213 
// 2214   conInd.nwkAddr = nwkAddr;
        LCALL   ?Subroutine2 & 0xFFFF
// 2215   conInd.extAddr = extAddr;
??CrossCallReturnLabel_73:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 2216   conInd.pktCost = pktCost;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 2217 
// 2218   if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
        MOV     DPTR,#(zdoCBFunc + 2)
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     A,R0
        JNZ     ??ZDO_ConcentratorIndicationCB_0
        MOV     A,R1
??ZDO_ConcentratorIndicationCB_0:
        JZ      ??ZDO_ConcentratorIndicationCB_1
// 2219 {
// 2220     zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?CALL_IND
// 2221   }
// 2222 }
??ZDO_ConcentratorIndicationCB_1:
        LJMP    ?Subroutine20 & 0xFFFF
        CFI EndBlock cfiBlock143

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond144 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond146) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond146) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond146) CFA_SP SP+-5
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 5)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker148 Using cfiCommon1
        CFI (cfiPicker148) NoFunction
        CFI (cfiPicker148) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiPicker148
// 2223 
// 2224 /*********************************************************************
// 2225  * @fn          ZDO_LeaveCnf
// 2226  *
// 2227  * @brief       This function allows the next higher layer to be
// 2228  *              notified of the results of its request for this or
// 2229  *              a child device to leave the network.
// 2230  *
// 2231  * @param       cnf - NLME_LeaveCnf_t
// 2232  *
// 2233  * @return      none
// 2234  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2235 void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
ZDO_LeaveCnf:
        CFI Block cfiBlock149 Using cfiCommon0
        CFI Function ZDO_LeaveCnf
// 2236 {
        FUNCALL ZDO_LeaveCnf, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 2237   // Check for this device
// 2238   if ( osal_ExtAddrEqual( cnf->extAddr,
// 2239                           NLME_GetExtAddr() ) == TRUE )
        MOV     A,R2
        ADD     A,#0x2
        MOV     R6,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R7,A
        ; Setup parameters for call to function sAddrExtCmp
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??sAddrExtCmp?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveCnf_0
// 2240   {
// 2241     // Prepare to leave with reset
// 2242     ZDApp_LeaveReset( cnf->rejoin );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     A,?V0 + 0
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine33_0 & 0xFFFF
// 2243   }
??CrossCallReturnLabel_61:
        MOV     R1,A
        LCALL   ??ZDApp_LeaveReset?relay
        SJMP    ??ZDO_LeaveCnf_1
// 2244   else if ( ZSTACK_ROUTER_BUILD )
??ZDO_LeaveCnf_0:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDO_LeaveCnf_2
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveCnf_1
// 2245   {
// 2246     // Remove device address(optionally descendents) from data
// 2247     ZDApp_LeaveUpdate( cnf->dstAddr,
// 2248                        cnf->extAddr,
// 2249                        cnf->removeChildren );
??ZDO_LeaveCnf_2:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine7 & 0xFFFF
// 2250   }
??CrossCallReturnLabel_10:
        LCALL   ??ZDApp_LeaveUpdate?relay
// 2251 }
??ZDO_LeaveCnf_1:
        LJMP    ??Subroutine35_0 & 0xFFFF
        CFI EndBlock cfiBlock149

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond150 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond152 Using cfiCommon0
        CFI (cfiCond152) NoFunction
        CFI (cfiCond152) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond152) CFA_SP SP+0
        CFI (cfiCond152) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker155 Using cfiCommon1
        CFI (cfiPicker155) NoFunction
        CFI (cfiPicker155) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiPicker155
// 2252 
// 2253 /*********************************************************************
// 2254  * @fn          ZDO_LeaveInd
// 2255  *
// 2256  * @brief       This function allows the next higher layer of a
// 2257  *              device to be notified of a remote leave request or
// 2258  *              indication.
// 2259  *
// 2260  * @param       ind - NLME_LeaveInd_t
// 2261  *
// 2262  * @return      none
// 2263  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2264 void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
ZDO_LeaveInd:
        CFI Block cfiBlock156 Using cfiCommon0
        CFI Function ZDO_LeaveInd
// 2265 {
        FUNCALL ZDO_LeaveInd, NLME_LeaveRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2266   uint8 leave;
// 2267 
// 2268 
// 2269   // Parent is requesting the leave - NWK layer filters out illegal
// 2270   // requests
// 2271   if ( ind->request == TRUE )
        MOV     A,R6
        ADD     A,#0xc
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_30:
        ADD     A,#0xb
        DEC     R0
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveInd_0
// 2272   {
// 2273     // Notify network of leave
// 2274     if ( ZSTACK_ROUTER_BUILD )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDO_LeaveInd_1
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveInd_2
// 2275     {
// 2276       NLME_LeaveRsp_t rsp;
// 2277       rsp.rejoin         = ind->rejoin;
??ZDO_LeaveInd_1:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2278       rsp.removeChildren = ind->removeChildren;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 2279       NLME_LeaveRsp( &rsp );
        ; Setup parameters for call to function NLME_LeaveRsp
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??NLME_LeaveRsp?relay
// 2280     }
// 2281 
// 2282     // Prepare to leave with reset
// 2283     ZDApp_LeaveReset( ind->rejoin );
??ZDO_LeaveInd_2:
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDApp_LeaveReset?relay
        SJMP    ??ZDO_LeaveInd_3
// 2284   }
// 2285   else
// 2286   {
// 2287     leave = FALSE;
// 2288 
// 2289     // Check if this device needs to leave as a child or descendent
// 2290     if ( ind->srcAddr == NLME_GetCoordShortAddr() )
??ZDO_LeaveInd_0:
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   ??NLME_GetCoordShortAddr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     A,?V0 + 4
        XRL     A,R2
        JNZ     ??ZDO_LeaveInd_4
        MOV     A,?V0 + 5
        XRL     A,R3
??ZDO_LeaveInd_4:
        JNZ     ??ZDO_LeaveInd_5
// 2291     {
// 2292       if ( ( ind->removeChildren == TRUE               ) ||
// 2293            ( ZDO_Config_Node_Descriptor.LogicalType ==
// 2294              NODETYPE_DEVICE                           )    )
        MOV     A,#0x1
        XRL     A,R1
        JZ      ??ZDO_LeaveInd_2
        LCALL   ?Subroutine8 & 0xFFFF
// 2295       {
// 2296         leave = TRUE;
// 2297       }
// 2298     }
??CrossCallReturnLabel_16:
        JZ      ??ZDO_LeaveInd_2
// 2299     else if ( ind->removeChildren == TRUE )
// 2300     {
// 2301       // Check NWK address allocation algorithm
// 2302       //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
// 2303     }
// 2304 
// 2305     if ( leave == TRUE )
// 2306     {
// 2307       // Prepare to leave with reset
// 2308       ZDApp_LeaveReset( ind->rejoin );
// 2309     }
// 2310     else
// 2311     {
// 2312       // Remove device address(optionally descendents) from data
// 2313       ZDApp_LeaveUpdate( ind->srcAddr,
// 2314                          ind->extAddr,
// 2315                          ind->removeChildren );
??ZDO_LeaveInd_5:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        MOV     A,R6
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        LCALL   ??ZDApp_LeaveUpdate?relay
// 2316     }
// 2317   }
// 2318 }
??ZDO_LeaveInd_3:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock156

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond157 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker159 Using cfiCommon1
        CFI (cfiPicker159) NoFunction
        CFI (cfiPicker159) Picker
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     A,R6
        RET
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiPicker159
// 2319 
// 2320 /*********************************************************************
// 2321  * @fn          ZDO_SyncIndicationCB
// 2322  *
// 2323  * @brief       This function allows the next higher layer of a
// 2324  *              coordinator to be notified of a loss of synchronization
// 2325  *                          with the parent/child device.
// 2326  *
// 2327  * @param       type: 0 - child; 1 - parent
// 2328  *
// 2329  *
// 2330  * @return      none
// 2331  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2332 void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
ZDO_SyncIndicationCB:
        CFI Block cfiBlock160 Using cfiCommon0
        CFI Function ZDO_SyncIndicationCB
// 2333 {
        FUNCALL ZDO_SyncIndicationCB, nwkNeighborInitTable
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SyncIndicationCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2334   (void)shortAddr;  // Remove this line if this parameter is used.
// 2335 
// 2336   if ( ZSTACK_END_DEVICE_BUILD
// 2337     || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??ZDO_SyncIndicationCB_0
        MOVX    A,@DPTR
        JZ      ??ZDO_SyncIndicationCB_1
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_45
??ZDO_SyncIndicationCB_1:
        MOV     DPTR,#(_NIB + 14)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JC      ??CrossCallReturnLabel_45
// 2338   {
// 2339     if ( type == 1 )
??ZDO_SyncIndicationCB_0:
        MOV     A,#0x1
        XRL     A,R1
        JNZ     ??CrossCallReturnLabel_45
// 2340     {
// 2341       // We lost contact with our parent.  Clear the neighbor Table.
// 2342       nwkNeighborInitTable();
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   ??nwkNeighborInitTable?relay
// 2343 
// 2344       // Start the rejoin process.
// 2345       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R3,#0x2
        MOV     R2,#0x3
        LCALL   ?Subroutine10 & 0xFFFF
// 2346     }
// 2347   }
// 2348 }
??CrossCallReturnLabel_45:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock160
// 2349 
// 2350 /*********************************************************************
// 2351  * @fn          ZDO_ManytoOneFailureIndicationCB
// 2352  *
// 2353  * @brief       This function allows the next higher layer of a
// 2354  *              concentrator to be notified of a many-to-one route
// 2355  *              failure.
// 2356  *
// 2357  * @param       none
// 2358  *
// 2359  *
// 2360  * @return      none
// 2361  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2362 void ZDO_ManytoOneFailureIndicationCB()
ZDO_ManytoOneFailureIndicationCB:
        CFI Block cfiBlock161 Using cfiCommon0
        CFI Function ZDO_ManytoOneFailureIndicationCB
// 2363 {
        FUNCALL ZDO_ManytoOneFailureIndicationCB, RTG_MTORouteReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2364   // By default, the concentrator automatically redo many-to-one route
// 2365   // discovery to update all many-to-one routes in the network
// 2366   // If you want anything processing other than the default,
// 2367   // please replace the following code.
// 2368 
// 2369   RTG_MTORouteReq();
        ; Setup parameters for call to function RTG_MTORouteReq
        LCALL   ??RTG_MTORouteReq?relay
// 2370 }
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock161
// 2371 
// 2372 /*********************************************************************
// 2373  * @fn          ZDO_PollConfirmCB
// 2374  *
// 2375  * @brief       This function allows the next higher layer to be
// 2376  *              notified of a Poll Confirm.
// 2377  *
// 2378  * @param       none
// 2379  *
// 2380  * @return      none
// 2381  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2382 void ZDO_PollConfirmCB( uint8 status )
ZDO_PollConfirmCB:
        CFI Block cfiBlock162 Using cfiCommon0
        CFI Function ZDO_PollConfirmCB
// 2383 {
        ; Saved register size: 0
        ; Auto size: 0
// 2384   (void)status;  // Remove this line if this parameter is used.
// 2385   return;
        LJMP    ?BRET
        CFI EndBlock cfiBlock162
// 2386 }
// 2387 
// 2388 /******************************************************************************
// 2389  * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
// 2390  *
// 2391  * @brief       Stub routine implemented by NHLE. NHLE should call
// 2392  *              <AddrMgrWriteNV> when appropriate.
// 2393  *
// 2394  * @param       none
// 2395  *
// 2396  * @return      none
// 2397  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2398 void ZDApp_NwkWriteNVRequest( void )
AddrMgrWriteNVRequest:
        CFI Block cfiBlock163 Using cfiCommon0
        CFI Function AddrMgrWriteNVRequest
// 2399 {
        ; Saved register size: 0
        ; Auto size: 0
// 2400 #if defined ( NV_RESTORE )
// 2401   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
// 2402   {
// 2403     // Trigger to save info into NV
// 2404     ZDApp_NVUpdate();
// 2405   }
// 2406 #endif
// 2407 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock163
// 2408 
// 2409 /*********************************************************************
// 2410  * Call Back Functions from Security  - API
// 2411  */
// 2412 
// 2413  /*********************************************************************
// 2414  * @fn          ZDO_UpdateDeviceIndication
// 2415  *
// 2416  * @brief       This function notifies the "Trust Center" of a
// 2417  *              network when a device joins or leaves the network.
// 2418  *
// 2419  * @param       extAddr - pointer to 64 bit address of new device
// 2420  * @param       status  - 0 if a new device joined securely
// 2421  *                      - 1 if a new device joined un-securely
// 2422  *                      - 2 if a device left the network
// 2423  *
// 2424  * @return      true if newly joined device should be allowed to
// 2425  *                                              remain on network
// 2426  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2427 ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
ZDO_UpdateDeviceIndication:
        CFI Block cfiBlock164 Using cfiCommon0
        CFI Function ZDO_UpdateDeviceIndication
// 2428 {
        ; Saved register size: 0
        ; Auto size: 0
// 2429   // can implement a network access policy based on the
// 2430   // IEEE address of newly joining devices...
// 2431   (void)extAddr;
// 2432   (void)status;
// 2433 
// 2434   return ZSuccess;
        LJMP    ?Subroutine21 & 0xFFFF
        CFI EndBlock cfiBlock164
// 2435 }
// 2436 
// 2437 /*********************************************************************
// 2438  * @fn          ZDApp_InMsgCB
// 2439  *
// 2440  * @brief       This function is called to pass up any message that is
// 2441  *              not yet supported.  This allows for the developer to
// 2442  *              support features themselves..
// 2443  *
// 2444  * @return      none
// 2445  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2446 void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
ZDApp_InMsgCB:
        CFI Block cfiBlock165 Using cfiCommon0
        CFI Function ZDApp_InMsgCB
// 2447 {
        FUNCALL ZDApp_InMsgCB, ZDP_GenericRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2448   if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     A,#-0x80
        ANL     A,R1
        MOV     R3,A
        CLR     A
        JNZ     ??ZDApp_InMsgCB_0
        MOV     A,R3
??ZDApp_InMsgCB_0:
        JNZ     ??ZDApp_InMsgCB_1
// 2449   {
// 2450     // Handle the response message
// 2451   }
// 2452   else
// 2453   {
// 2454     // Handle the request message by sending a generic "not supported".
// 2455     // Device Announce doesn't have a response.
// 2456     if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
        MOV     A,R6
        ADD     A,#0xb
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_64:
        JNZ     ??ZDApp_InMsgCB_1
        MOV     A,#0x13
        XRL     A,R0
        JNZ     ??ZDApp_InMsgCB_2
        MOV     A,R1
??ZDApp_InMsgCB_2:
        JZ      ??ZDApp_InMsgCB_1
// 2457     {
// 2458       ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
// 2459                       (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV     A,R0
        MOV     ?V0 + 0,A
        MOV     A,#-0x80
        ORL     A,R1
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        ADD     A,#0xe
        LCALL   ??Subroutine32_0 & 0xFFFF
// 2460     }
// 2461   }
??CrossCallReturnLabel_65:
        MOV     R5,A
        MOV     R4,#-0x7c
        MOV     A,R6
        ADD     A,#0x2
        INC     R2
        INC     R2
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV     R1,A
        LCALL   ??ZDP_GenericRsp?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 2462 }
??ZDApp_InMsgCB_1:
        LJMP    ??Subroutine35_0 & 0xFFFF
        CFI EndBlock cfiBlock165
// 2463 
// 2464 
// 2465 /*********************************************************************
// 2466  * @fn      ZDApp_ChangeMatchDescRespPermission()
// 2467  *
// 2468  * @brief   Changes the Match Descriptor Response permission.
// 2469  *
// 2470  * @param   endpoint - endpoint to allow responses
// 2471  * @param   action - true to allow responses, false to not
// 2472  *
// 2473  * @return  none
// 2474  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2475 void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
ZDApp_ChangeMatchDescRespPermission:
        CFI Block cfiBlock166 Using cfiCommon0
        CFI Function ZDApp_ChangeMatchDescRespPermission
// 2476 {
        FUNCALL ZDApp_ChangeMatchDescRespPermission, afSetMatch
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2477   // Store the action
// 2478   afSetMatch( endpoint, action );
        ; Setup parameters for call to function afSetMatch
        LCALL   ??afSetMatch?relay
// 2479 }
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock166
// 2480 
// 2481 /*********************************************************************
// 2482  * @fn      ZDApp_NetworkInit()
// 2483  *
// 2484  * @brief   Used to start the network joining process
// 2485  *
// 2486  * @param   delay - mSec delay to wait before starting
// 2487  *
// 2488  * @return  none
// 2489  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2490 void ZDApp_NetworkInit( uint16 delay )
ZDApp_NetworkInit:
        CFI Block cfiBlock167 Using cfiCommon0
        CFI Function ZDApp_NetworkInit
// 2491 {
        FUNCALL ZDApp_NetworkInit, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkInit, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2492   if ( delay )
        MOV     A,R2
        JNZ     ??ZDApp_NetworkInit_0
        MOV     A,R3
??ZDApp_NetworkInit_0:
        JZ      ??ZDApp_NetworkInit_1
// 2493   {
// 2494     // Wait awhile before starting the device
// 2495     osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#0x1
        LCALL   ?Subroutine9 & 0xFFFF
// 2496   }
??CrossCallReturnLabel_59:
        SJMP    ??CrossCallReturnLabel_40
// 2497   else
// 2498   {
// 2499     osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
??ZDApp_NetworkInit_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        LCALL   ?Subroutine24 & 0xFFFF
// 2500   }
// 2501 }
??CrossCallReturnLabel_40:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock167

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond168 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond169) CFA_SP SP+0
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+0
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond171) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond171) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond171) CFA_SP SP+-5
        CFI Block cfiPicker172 Using cfiCommon1
        CFI (cfiPicker172) NoFunction
        CFI (cfiPicker172) Picker
        MOV     R2,#0x10
        LJMP    ?Subroutine24 & 0xFFFF
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiPicker172
// 2502 
// 2503 /*********************************************************************
// 2504  * @fn      ZDApp_NwkStateUpdateCB()
// 2505  *
// 2506  * @brief   This function notifies that this device's network
// 2507  *          state info has been changed.
// 2508  *
// 2509  * @param   none
// 2510  *
// 2511  * @return  none
// 2512  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2513 void ZDApp_NwkStateUpdateCB( void )
ZDApp_NwkStateUpdateCB:
        CFI Block cfiBlock173 Using cfiCommon0
        CFI Function ZDApp_NwkStateUpdateCB
// 2514 {
        FUNCALL ZDApp_NwkStateUpdateCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2515   // Notify to save info into NV
// 2516   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x0
        MOV     R3,#0x2
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_get_timeoutEx?relay
// 2517   {
// 2518     // Trigger to save info into NV
// 2519     ZDApp_NVUpdate();
// 2520   }
// 2521 }
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock173
// 2522 
// 2523 /*********************************************************************
// 2524  * @fn      ZDApp_NodeProfileSync()
// 2525  *
// 2526  * @brief   Sync node with stack profile.
// 2527  *
// 2528  * @param   cfm - ZDO_NetworkDiscoveryCfm_t
// 2529  *
// 2530  * @return  none
// 2531  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2532 void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm )
ZDApp_NodeProfileSync:
        CFI Block cfiBlock174 Using cfiCommon0
        CFI Function ZDApp_NodeProfileSync
// 2533 {
        FUNCALL ZDApp_NodeProfileSync, nwk_getNetworkDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NodeProfileSync, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2534   networkDesc_t* desc;
// 2535   uint16         panID;
// 2536 
// 2537   if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_NodeProfileSync_0
// 2538   {
// 2539     panID = BUILD_UINT16( cfm->panIdLSB, cfm->panIdMSB );
// 2540 
// 2541     desc = nwk_getNetworkDesc( cfm->extendedPANID, panID, cfm->logicalChannel );
        ; Setup parameters for call to function nwk_getNetworkDesc
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R2
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??nwk_getNetworkDesc?relay
        MOV     DPL,R2
        MOV     DPH,R3
// 2542 
// 2543     if (desc != NULL)
        MOV     A,DPL
        JNZ     ??ZDApp_NodeProfileSync_1
        MOV     A,DPH
??ZDApp_NodeProfileSync_1:
        JZ      ??ZDApp_NodeProfileSync_0
// 2544     {
// 2545       if ( desc->stackProfile != zgStackProfile )
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#zgStackProfile
        MOVX    A,@DPTR
        XRL     A,R2
        JZ      ??ZDApp_NodeProfileSync_0
// 2546       {
// 2547         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        ORL     A,#0x2
        MOVX    @DPTR,A
// 2548         ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
        MOV     A,#0xc
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    @DPTR,A
// 2549         NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV     R1,A
        LCALL   ??NLME_SetBroadcastFilter?relay
// 2550       }
// 2551     }
// 2552   }
// 2553 }
??ZDApp_NodeProfileSync_0:
        SJMP    ??Subroutine35_0
        CFI EndBlock cfiBlock174
// 2554 
// 2555 /*********************************************************************
// 2556  * @fn      ZDApp_StartJoiningCycle()
// 2557  *
// 2558  * @brief   Starts the joining cycle of a device.  This will only
// 2559  *          continue an already started (or stopped) joining cycle.
// 2560  *
// 2561  * @param   none
// 2562  *
// 2563  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 2564  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2565 uint8 ZDApp_StartJoiningCycle( void )
ZDApp_StartJoiningCycle:
        CFI Block cfiBlock175 Using cfiCommon0
        CFI Function ZDApp_StartJoiningCycle
// 2566 {
        FUNCALL ZDApp_StartJoiningCycle, ZDApp_NetworkInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2567   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_StartJoiningCycle_0
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_StartJoiningCycle_1
// 2568   {
// 2569     continueJoining = TRUE;
??ZDApp_StartJoiningCycle_0:
        MOV     A,#0x1
        MOV     DPTR,#continueJoining
        MOVX    @DPTR,A
// 2570     ZDApp_NetworkInit( 0 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??ZDApp_NetworkInit?relay
// 2571 
// 2572     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??ZDApp_StartJoiningCycle_2
// 2573   }
// 2574   else
// 2575     return ( FALSE );
??ZDApp_StartJoiningCycle_1:
        MOV     R1,#0x0
??ZDApp_StartJoiningCycle_2:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock175
// 2576 }
// 2577 
// 2578 /*********************************************************************
// 2579  * @fn      ZDApp_StopJoiningCycle()
// 2580  *
// 2581  * @brief   Stops the joining or rejoining process of a device.
// 2582  *
// 2583  * @param   none
// 2584  *
// 2585  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 2586  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2587 uint8 ZDApp_StopJoiningCycle( void )
ZDApp_StopJoiningCycle:
        CFI Block cfiBlock176 Using cfiCommon0
        CFI Function ZDApp_StopJoiningCycle
// 2588 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2589   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_StopJoiningCycle_0
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_StopJoiningCycle_1
// 2590   {
// 2591     continueJoining = FALSE;
??ZDApp_StopJoiningCycle_0:
        CLR     A
        MOV     DPTR,#continueJoining
        MOVX    @DPTR,A
// 2592     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??ZDApp_StopJoiningCycle_2
// 2593   }
// 2594   else
// 2595     return ( FALSE );
??ZDApp_StopJoiningCycle_1:
        MOV     R1,#0x0
??ZDApp_StopJoiningCycle_2:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock176
// 2596 }
// 2597 
// 2598 /*********************************************************************
// 2599  * @fn      ZDApp_AnnounceNewAddress()
// 2600  *
// 2601  * @brief   Send Device Announce and hold all transmissions for
// 2602  *          new address timeout.
// 2603  *
// 2604  * @param   none
// 2605  *
// 2606  * @return  none
// 2607  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2608 void ZDApp_AnnounceNewAddress( void )
ZDApp_AnnounceNewAddress:
        CFI Block cfiBlock177 Using cfiCommon0
        CFI Function ZDApp_AnnounceNewAddress
// 2609 {
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2610 #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
// 2611   // Turn off data request hold
// 2612   APSME_HoldDataRequests( 0 );
// 2613 #endif
// 2614 
// 2615   ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
// 2616                      ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R4,A
        MOV     R5,?V0 + 1
        LCALL   ??ZDP_DeviceAnnce?relay
        MOV     A,#0x1
        SJMP    ??Subroutine34_0
        CFI EndBlock cfiBlock177
// 2617 
// 2618 #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
// 2619   // Setup the timeout
// 2620   APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
// 2621 #endif
// 2622 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiBlock178 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        CFI EndBlock cfiBlock178
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
        CFI Block cfiBlock179 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock179
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
        CFI Block cfiBlock180 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock180
// 2623 
// 2624 /*********************************************************************
// 2625  * @fn          ZDApp_NVUpdate
// 2626  *
// 2627  * @brief       Set the NV Update Timer.
// 2628  *
// 2629  * @param       none
// 2630  *
// 2631  * @return      none
// 2632  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2633 void ZDApp_NVUpdate( void )
ZDApp_NVUpdate:
        CFI Block cfiBlock181 Using cfiCommon0
        CFI Function ZDApp_NVUpdate
// 2634 {
        ; Saved register size: 0
        ; Auto size: 0
// 2635 #if defined ( NV_RESTORE )
// 2636   osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
// 2637 #endif
// 2638 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock181
// 2639 
// 2640 /*********************************************************************
// 2641  * @fn      ZDApp_CoordStartPANIDConflictCB()
// 2642  *
// 2643  * @brief   Returns a PAN ID for the network layer to use during
// 2644  *          a coordinator start and there is another network with
// 2645  *          the intended PANID.
// 2646  *
// 2647  * @param   panid - the intended PAN ID
// 2648  *
// 2649  * @return  PANID to try
// 2650  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2651 uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
ZDApp_CoordStartPANIDConflictCB:
        CFI Block cfiBlock182 Using cfiCommon0
        CFI Function ZDApp_CoordStartPANIDConflictCB
// 2652 {
        ; Saved register size: 0
        ; Auto size: 0
// 2653   return ( panid + 1 );
        MOV     A,#0x1
        ADD     A,R2
        INC     R2
        CLR     A
        ADDC    A,R3
        MOV     R3,A
        LJMP    ?BRET
        CFI EndBlock cfiBlock182
// 2654 }
// 2655 
// 2656 /*********************************************************************
// 2657  * @fn          ZDO_SrcRtgIndCB
// 2658  *
// 2659  * @brief       This function notifies the ZDO available src route record received.
// 2660  *
// 2661  * @param       srcAddr - source address of the source route
// 2662  * @param       relayCnt - number of devices in the relay list
// 2663  * @param       relayList - relay list of the source route
// 2664  *
// 2665  * @return      none
// 2666  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2667 void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
ZDO_SrcRtgIndCB:
        CFI Block cfiBlock183 Using cfiCommon0
        CFI Function ZDO_SrcRtgIndCB
// 2668 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 5)
// 2669   zdoSrcRtg_t srcRtg;
// 2670 
// 2671   srcRtg.srcAddr = srcAddr;
        LCALL   ?Subroutine2 & 0xFFFF
// 2672   srcRtg.relayCnt = relayCnt;
??CrossCallReturnLabel_74:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 2673   srcRtg.pRelayList = pRelayList;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 2674 
// 2675   if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc
        MOVX    A,@DPTR
        JNZ     ??ZDO_SrcRtgIndCB_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDO_SrcRtgIndCB_0:
        JZ      ??ZDO_SrcRtgIndCB_1
// 2676   {
// 2677     zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPTR,#zdoCBFunc
        LCALL   ?Subroutine6 & 0xFFFF
// 2678   }
??CrossCallReturnLabel_6:
        LCALL   ?CALL_IND
// 2679 }
??ZDO_SrcRtgIndCB_1:
        LJMP    ?Subroutine20 & 0xFFFF
        CFI EndBlock cfiBlock183
// 2680 
// 2681 
// 2682 /*********************************************************************
// 2683  * @fn          ZDO_RegisterForZdoCB
// 2684  *
// 2685  * @brief       Call this function to register the higher layer (for
// 2686  *              example, the Application layer or MT layer) with ZDO
// 2687  *              callbacks to get notified of some ZDO indication like
// 2688  *              existence of a concentrator or receipt of a source
// 2689  *              route record.
// 2690  *
// 2691  * @param       indID - ZDO Indication ID
// 2692  * @param       pFn   - Callback function pointer
// 2693  *
// 2694  * @return      ZSuccess - successful, ZInvalidParameter if not
// 2695  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2696 ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
ZDO_RegisterForZdoCB:
        CFI Block cfiBlock184 Using cfiCommon0
        CFI Function ZDO_RegisterForZdoCB
// 2697 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2698   // Check the range of the indication ID
// 2699   if ( indID < MAX_ZDO_CB_FUNC )
        MOV     A,R1
        CLR     C
        SUBB    A,#0x2
        JNC     ??ZDO_RegisterForZdoCB_0
// 2700   {
// 2701     zdoCBFunc[indID] = pFn;
        MOV     A,R1
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R0
        ADD     A,#(zdoCBFunc & 0xff)
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#((zdoCBFunc >> 8) & 0xff)
        MOV     DPH,A
        LCALL   ??Subroutine36_0 & 0xFFFF
// 2702     return ZSuccess;
??CrossCallReturnLabel_71:
        MOV     R1,#0x0
        SJMP    ??ZDO_RegisterForZdoCB_1
// 2703   }
// 2704 
// 2705   return ZInvalidParameter;
??ZDO_RegisterForZdoCB_0:
        MOV     R1,#0x2
??ZDO_RegisterForZdoCB_1:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock184
// 2706 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond185 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_72
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond186) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond186) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond186) CFA_SP SP+-5
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 5)
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond187) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond187) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond187) CFA_SP SP+-5
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 5)
        CFI Block cfiPicker188 Using cfiCommon1
        CFI (cfiPicker188) NoFunction
        CFI (cfiPicker188) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiPicker188
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
        CFI Block cfiCond189 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond190) CFA_SP SP+0
        CFI (cfiCond190) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond191 Using cfiCommon0
        CFI (cfiCond191) NoFunction
        CFI (cfiCond191) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond191) CFA_SP SP+0
        CFI (cfiCond191) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond192 Using cfiCommon0
        CFI (cfiCond192) NoFunction
        CFI (cfiCond192) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond192) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond192) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond192) CFA_SP SP+-5
        CFI Block cfiCond193 Using cfiCommon0
        CFI (cfiCond193) NoFunction
        CFI (cfiCond193) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond193) CFA_SP SP+0
        CFI (cfiCond193) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond194) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond194) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond194) CFA_SP SP+-5
        CFI (cfiCond194) CFA_XSP16 add(XSP16, 5)
        CFI Block cfiCond195 Using cfiCommon0
        CFI (cfiCond195) NoFunction
        CFI (cfiCond195) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond195) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond195) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond195) CFA_SP SP+-5
        CFI (cfiCond195) CFA_XSP16 add(XSP16, 5)
        CFI Block cfiPicker196 Using cfiCommon1
        CFI (cfiPicker196) NoFunction
        CFI (cfiPicker196) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190
        CFI EndBlock cfiCond191
        CFI EndBlock cfiCond192
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiCond195
        CFI EndBlock cfiPicker196

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zdoDiscCounter>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for continueJoining>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for devState>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ZDApp_epDesc>`:
        DB 0
        DW ZDAppTaskID, 0H
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ZDApp_SavedPollRate>`:
        DW 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_1:
        DD 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SecInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SecInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_event_loop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessSecEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessSecEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDOInitDevice?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDOInitDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ReadNetworkRestoreState?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ReadNetworkRestoreState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDAppDetermineDeviceType?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDAppDetermineDeviceType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NetworkStartEvt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NetworkStartEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_DeviceAuthEvt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_DeviceAuthEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SaveNetworkStateEvt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SaveNetworkStateEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_RestoreNetworkState?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_RestoreNetworkState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_InitUserDesc?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_InitUserDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDAppCheckForHoldKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDAppCheckForHoldKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessOSALMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessOSALMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessMsgCBs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessMsgCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_RegisterCBs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_RegisterCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessSecMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessSecMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessNetworkJoin?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessNetworkJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SaveNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SaveNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ResetNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ResetNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_RestoreNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_RestoreNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ResetTimerStart?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ResetTimerStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ResetTimerCancel?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ResetTimerCancel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlBypass?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlBypass

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlStartup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlStartup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SendEventMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SendEventMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SendMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_NetworkDiscoveryConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_NetworkDiscoveryConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_NetworkFormationConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_NetworkFormationConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_StartRouterConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_StartRouterConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_JoinConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_JoinConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_AddrChangeIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_AddrChangeIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_JoinIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_JoinIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_ConcentratorIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_ConcentratorIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_LeaveCnf?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_LeaveCnf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_LeaveInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_LeaveInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_SyncIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_SyncIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_ManytoOneFailureIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_ManytoOneFailureIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_PollConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_PollConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AddrMgrWriteNVRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AddrMgrWriteNVRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_UpdateDeviceIndication?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_UpdateDeviceIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_InMsgCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_InMsgCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ChangeMatchDescRespPermission?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ChangeMatchDescRespPermission

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NetworkInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NetworkInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NwkStateUpdateCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NwkStateUpdateCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NodeProfileSync?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NodeProfileSync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_StartJoiningCycle?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_StartJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_StopJoiningCycle?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_StopJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_AnnounceNewAddress?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_AnnounceNewAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NVUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NVUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_CoordStartPANIDConflictCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_CoordStartPANIDConflictCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_SrcRtgIndCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_SrcRtgIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_RegisterForZdoCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_RegisterForZdoCB

        END
// 2707 
// 2708 /*********************************************************************
// 2709 *********************************************************************/
// 
// 4 774 bytes in segment BANKED_CODE
//   342 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//    11 bytes in segment XDATA_I
//    11 bytes in segment XDATA_ID
//    12 bytes in segment XDATA_ROM_C
//    46 bytes in segment XDATA_Z
// 
// 5 127 bytes of CODE  memory
//     0 bytes of CONST memory (+ 12 bytes shared)
//     0 bytes of DATA  memory (+  1 byte  shared)
//    57 bytes of XDATA memory
//
//Errors: none
//Warnings: none
