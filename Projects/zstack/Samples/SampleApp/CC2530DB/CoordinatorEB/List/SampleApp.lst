###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                25/Sep/2011  16:01:54 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\Administrator\桌面\ZigBe #
#                          e项目终极版\Projects\zstack\Samples\SampleApp\Sour #
#                          ce\SampleApp.c                                     #
#    Command line       =  -f "C:\Documents and Settings\Administrator\桌面\Z #
#                          igBee项目终极版\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"     #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "C:\Documents and Settings\Administrator\桌面\Z #
#                          igBee项目终极版\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"    #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Documents and           #
#                          Settings\Administrator\桌面\ZigBee项目终极版\Proje #
#                          cts\zstack\Samples\SampleApp\Source\SampleApp.c"   #
#                          -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D           #
#                          MT_ZDO_FUNC -D HAL_UART=TRUE -D SERIAL_APP_PORT=0  #
#                          -D BUILD_ALL_DEVICES -D xLCD_SUPPORTED=DEBUG -D    #
#                          SOFT_SATRT -D ZDO_COORDINATOR -D NV_INIT -D        #
#                          RTR_NWK -lC "C:\Documents and                      #
#                          Settings\Administrator\桌面\ZigBee项目终极版\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\CoordinatorE #
#                          B\List\" -lA "C:\Documents and                     #
#                          Settings\Administrator\桌面\ZigBee项目终极版\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\CoordinatorE #
#                          B\List\" --diag_suppress Pe001,Pa010 -o            #
#                          "C:\Documents and Settings\Administrator\桌面\ZigB #
#                          ee项目终极版\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\CoordinatorEB\Obj\" -e --require_prototypes  #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Documents and Settings\Administrator\桌面\Z #
#                          igBee项目终极版\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\" -I "C:\Documents and                    #
#                          Settings\Administrator\桌面\ZigBee项目终极版\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\"  #
#                          -I "C:\Documents and Settings\Administrator\桌面\Z #
#                          igBee项目终极版\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I              #
#                          "C:\Documents and Settings\Administrator\桌面\ZigB #
#                          ee项目终极版\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\COMPONENTS\MT\" -I            #
#                          "C:\Documents and Settings\Administrator\桌面\ZigB #
#                          ee项目终极版\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I   #
#                          "C:\Documents and Settings\Administrator\桌面\ZigB #
#                          ee项目终极版\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530E #
#                          B\" -I "C:\Documents and                           #
#                          Settings\Administrator\桌面\ZigBee项目终极版\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\OSAL\MCU\CCSOC\" -I "C:\Documents    #
#                          and Settings\Administrator\桌面\ZigBee项目终极版\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\OSAL\INCLUDE\" -I "C:\Documents  #
#                          and Settings\Administrator\桌面\ZigBee项目终极版\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\AF\" -I "C:\Documents and  #
#                          Settings\Administrator\桌面\ZigBee项目终极版\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\STACK\NWK\" -I "C:\Documents and     #
#                          Settings\Administrator\桌面\ZigBee项目终极版\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\STACK\SEC\" -I "C:\Documents and     #
#                          Settings\Administrator\桌面\ZigBee项目终极版\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\STACK\SAPI\" -I "C:\Documents and    #
#                          Settings\Administrator\桌面\ZigBee项目终极版\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\STACK\SYS\" -I "C:\Documents and     #
#                          Settings\Administrator\桌面\ZigBee项目终极版\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\STACK\ZDO\" -I "C:\Documents and     #
#                          Settings\Administrator\桌面\ZigBee项目终极版\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\ZMAC\F8W\" -I "C:\Documents and      #
#                          Settings\Administrator\桌面\ZigBee项目终极版\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\ZMAC\" -I "C:\Documents and          #
#                          Settings\Administrator\桌面\ZigBee项目终极版\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\SERVICES\SADDR\" -I "C:\Documents    #
#                          and Settings\Administrator\桌面\ZigBee项目终极版\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\SERVICES\SDATA\" -I              #
#                          "C:\Documents and Settings\Administrator\桌面\ZigB #
#                          ee项目终极版\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\" -I   #
#                          "C:\Documents and Settings\Administrator\桌面\ZigB #
#                          ee项目终极版\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"   #
#                          -I "C:\Documents and Settings\Administrator\桌面\Z #
#                          igBee项目终极版\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\s #
#                          rf04\" -I "C:\Documents and                        #
#                          Settings\Administrator\桌面\ZigBee项目终极版\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"    #
#                          -I D:\IAR\8051\INC\ -I D:\IAR\8051\INC\CLIB\ -Ohz  #
#    List file          =  C:\Documents and Settings\Administrator\桌面\ZigBe #
#                          e项目终极版\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\CoordinatorEB\List\SampleApp.lst              #
#    Object file        =  C:\Documents and Settings\Administrator\桌面\ZigBe #
#                          e项目终极版\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\CoordinatorEB\Obj\SampleApp.r51               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\桌面\ZigBee项目终极版\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          **************************************************************************************************/
      8          
      9          /*********************************************************************
     10            This application isn't intended to do anything useful, it is
     11            intended to be a simple example of an application's structure.
     12          
     13            This application sends it's messages either as broadcast or
     14            broadcast filtered group messages.  The other (more normal)
     15            message addressing is unicast.  Most of the other sample
     16            applications are written to support the unicast message model.
     17          
     18            Key control:
     19              SW1:  Sends a flash command to all devices in Group 1.
     20              SW2:  Adds/Removes (toggles) this device in and out
     21                    of Group 1.  This will enable and disable the
     22                    reception of the flash command.
     23          *********************************************************************/
     24          
     25          /*********************************************************************
     26           * INCLUDES
     27           */#include "OSAL.h"
     28          #include "ZGlobals.h"
     29          #include "AF.h"
     30          #include "aps_groups.h"
     31          #include "ZDApp.h"
     32          
     33          #include "SampleApp.h"
     34          #include "SampleAppHw.h"
     35          
     36          #include "OnBoard.h"
     37          
     38          /* HAL */
     39          #include "hal_lcd.h"
     40          #include "hal_led.h"
     41          #include "hal_key.h"
     42          #include "OSAL_Nv.h"
     43          #include "ZDObject.h"
     44          #include "ioCC2530.h"   
     45          /*********************************************************************
     46           * MACROS
     47           */
     48          
     49          /*********************************************************************
     50           * CONSTANTS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * GLOBAL VARIABLES
     59           */
     60          
     61          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     62          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   01000200     DW 1, 2
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
     63          {
     64            SAMPLEAPP_PERIODIC_CLUSTERID,
     65            SAMPLEAPP_FLASH_CLUSTERID
     66          };
     67          

   \                                 In  segment XDATA_ROM_C, align 1
     68          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F0100     DW 3848, 1
   \   000005   000A         DB 0, 10
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   0A           DB 10
   \   00000A   ....         DW SampleApp_ClusterList
     69          {
     70            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
     71            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
     72            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     73            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     74            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
     75            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     76            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
     77            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     78            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
     79          };
     80          
     81          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     82          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     83          
     84          
     85          /*********************************************************************
     86           * EXTERNAL VARIABLES
     87           */
     88          
     89          /*********************************************************************
     90           * EXTERNAL FUNCTIONS
     91           */
     92          
     93          /*********************************************************************
     94           * LOCAL VARIABLES
     95           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     97                                    // This variable will be received when
     98                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    100          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          afAddrType_t SampleApp_SPI_SendData_DstAddr;
   \                     SampleApp_SPI_SendData_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          afAddrType_t SampleApp_TestID_DstAddr;
   \                     SampleApp_TestID_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    108          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          uint16 short_test;
   \                     short_test:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    112          
    113          extern uint8* rbuf;  //接收数据指针
    114          extern uint8  rxlen;    //接收数据长度
    115          extern uint8 buflen;
    116          extern devStartModes_t devStartMode;
    117          extern uint8 IDbuf[5];  //ID
    118          extern uint8 pIDbuf[5];
    119          extern void readbuf(void);
    120          /*********************************************************************
    121           * LOCAL FUNCTIONS
    122           */
    123          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    124          void SampleApp_SendPeriodicMessage( void );
    125          void SampleApp_SendFlashMessage( uint16 flashTime );
    126          
    127          void SampleApp_SPI_short(void);
    128          void SampleApp_SPI_mac(void);
    129          void SampleApp_showhex(uint16 sixteenword);
    130          uint8 hextoword2(uint8 t);
    131          uint8 hextoword1(uint8 t);
    132          void SampleApp_SPI_SendData( uint8 *buf, uint8 len );
    133          void SampleApp_UART_EVT(void);
    134          
    135          
    136          //测试节点ID
    137          void CompforTESTID(uint8 *dat);
    138          
    139          void SampleApp_Send_TestID_Message(void);
    140          void CompforFUWEI(uint8 *dat);
    141          
    142          /*********************************************************************
    143           * NETWORK LAYER CALLBACKS
    144           */
    145          
    146          /*********************************************************************
    147           * PUBLIC FUNCTIONS
    148           */
    149          
    150          /*********************************************************************
    151           * @fn      SampleApp_Init
    152           *
    153           * @brief   Initialization function for the Generic App Task.
    154           *          This is called during initialization and should contain
    155           *          any application specific initialization (ie. hardware
    156           *          initialization/setup, table initialization, power up
    157           *          notificaiton ... ).
    158           *
    159           * @param   task_id - the ID assigned by OSAL.  This ID should be
    160           *                    used to send messages and set timers.
    161           *
    162           * @return  none
    163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    164          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    165          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    166            SampleApp_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#SampleApp_TaskID
   \   000008   F0           MOVX    @DPTR,A
    167            SampleApp_NwkState = DEV_INIT;
   \   000009   7401         MOV     A,#0x1
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   F0           MOVX    @DPTR,A
    168            SampleApp_TransID = 0;
   \   00000F   E4           CLR     A
   \   000010   90....       MOV     DPTR,#SampleApp_TransID
   \   000013   F0           MOVX    @DPTR,A
    169          
    170           #if defined ( HOLD_AUTO_START )
    171            
    172            ZDOInitDevice(0);
    173          #endif
    174          
    175          
    176          
    177             // Fill out the endpoint description.
    178            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000014   7414         MOV     A,#0x14
   \   000016   90....       MOV     DPTR,#SampleApp_epDesc
   \   000019   F0           MOVX    @DPTR,A
    179            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00001A   90....       MOV     DPTR,#(SampleApp_epDesc + 1)
   \   00001D   74..         MOV     A,#(SampleApp_TaskID & 0xff)
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   74..         MOV     A,#((SampleApp_TaskID >> 8) & 0xff)
   \   000023   F0           MOVX    @DPTR,A
    180            SampleApp_epDesc.simpleDesc
    181                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000024   90....       MOV     DPTR,#(SampleApp_epDesc + 3)
   \   000027   74..         MOV     A,#(SampleApp_SimpleDesc & 0xff)
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   74..         MOV     A,#((SampleApp_SimpleDesc >> 8) & 0xff)
   \   00002D   F0           MOVX    @DPTR,A
    182            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00002E   E4           CLR     A
   \   00002F   90....       MOV     DPTR,#(SampleApp_epDesc + 5)
   \   000032   F0           MOVX    @DPTR,A
    183          
    184            // Register the endpoint description with the AF
    185            afRegister( &SampleApp_epDesc );
   \   000033                ; Setup parameters for call to function afRegister
   \   000033   7A..         MOV     R2,#(SampleApp_epDesc & 0xff)
   \   000035   7B..         MOV     R3,#((SampleApp_epDesc >> 8) & 0xff)
   \   000037   12....       LCALL   ??afRegister?relay
    186          
    187            // Register for all key events - This app will handle all key events
    188            RegisterForKeys( SampleApp_TaskID );
   \   00003A                ; Setup parameters for call to function RegisterForKeys
   \   00003A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   12....       LCALL   ??RegisterForKeys?relay
    189             
    190            readbuf();//初始化，获取ID值
   \   000042                ; Setup parameters for call to function readbuf
   \   000042   12....       LCALL   ??readbuf?relay
    191            
    192          }
   \   000045                REQUIRE ?Subroutine22
   \   000045                ; // Fall through to label ?Subroutine22

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    193          
    194          /*********************************************************************
    195           * @fn      SampleApp_ProcessEvent
    196           *
    197           * @brief   Generic Application Task event processor.  This function
    198           *          is called to process all events for the task.  Events
    199           *          include timers, messages and any other user defined events.
    200           *
    201           * @param   task_id  - The OSAL assigned task ID.
    202           * @param   events - events to process.  This is a bit map and can
    203           *                   contain more than one event.
    204           *
    205           * @return  none
    206           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    207          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    208          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    209            afIncomingMSGPacket_t *MSGpkt;
    210            (void)task_id;  // Intentionally unreferenced parameter
    211          
    212            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??SampleApp_ProcessEvent_0
   \   000010   E9           MOV     A,R1
   \                     ??SampleApp_ProcessEvent_0:
   \   000011   6065         JZ      ??SampleApp_ProcessEvent_1
    213            {
    214              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000013                ; Setup parameters for call to function osal_msg_receive
   \   000013   802A         SJMP    ??SampleApp_ProcessEvent_2
    215              while ( MSGpkt )
    216              {
    217                switch ( MSGpkt->hdr.event )
    218                { 
    219                   // Received when a messages is received (OTA) for this endpoint
    220                  case AF_INCOMING_MSG_CMD:
    221                    SampleApp_MessageMSGCB( MSGpkt );
    222                    break;
    223                   
    224                  // Received whenever the device changes state in the network
    225                  case ZDO_STATE_CHANGE:
    226                         
    227                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_3:
   \   000015   85..82       MOV     DPL,?V0 + 0
   \   000018   85..83       MOV     DPH,?V0 + 1
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   90....       MOV     DPTR,#SampleApp_NwkState
   \   000020   F0           MOVX    @DPTR,A
    228                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    229                        || (SampleApp_NwkState == DEV_ROUTER)
    230                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000021   6409         XRL     A,#0x9
   \   000023   600A         JZ      ??SampleApp_ProcessEvent_4
   \   000025   E0           MOVX    A,@DPTR
   \   000026   6407         XRL     A,#0x7
   \   000028   6005         JZ      ??SampleApp_ProcessEvent_4
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6406         XRL     A,#0x6
   \   00002D   7009         JNZ     ??CrossCallReturnLabel_58
    231                    {
    232                      
    233                       osal_start_timerEx( SampleApp_TaskID, 
    234                                        SAMPLEAPP_SEND_UART_MSG_EVT,
    235                                        SAMPLEAPP_SEND_UART_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002F                ; Setup parameters for call to function osal_start_timerEx
   \   00002F   7CE8         MOV     R4,#-0x18
   \   000031   7D03         MOV     R5,#0x3
   \   000033   7A10         MOV     R2,#0x10
   \   000035   12....       LCALL   ??Subroutine28_0 & 0xFFFF
    236                    }
    237                    else
    238                    {
    239                      // Device is no longer in the network
    240                    }
    241                    break;
    242          
    243                  default:
    244                    break;
    245                }
    246          
    247                // Release the memory
    248                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??CrossCallReturnLabel_58:
   \   000038                ; Setup parameters for call to function osal_msg_deallocate
   \   000038   AA..         MOV     R2,?V0 + 0
   \   00003A   AB..         MOV     R3,?V0 + 1
   \   00003C   12....       LCALL   ??osal_msg_deallocate?relay
    249          
    250                // Next - if one is available
    251                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003F                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_2:
   \   00003F   90....       MOV     DPTR,#SampleApp_TaskID
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   12....       LCALL   ??osal_msg_receive?relay
   \   000047   8A..         MOV     ?V0 + 0,R2
   \   000049   8B..         MOV     ?V0 + 1,R3
   \   00004B   E5..         MOV     A,?V0 + 0
   \   00004D   7002         JNZ     ??SampleApp_ProcessEvent_5
   \   00004F   E5..         MOV     A,?V0 + 1
   \                     ??SampleApp_ProcessEvent_5:
   \   000051   601D         JZ      ??SampleApp_ProcessEvent_6
   \   000053   85..82       MOV     DPL,?V0 + 0
   \   000056   85..83       MOV     DPH,?V0 + 1
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for SampleApp_ProcessEvent>_0`:
   \   00005D   00           DB        0
   \   00005E   02           DB        2
   \   00005F   1A           DB        26
   \   000060   ....         DW        ??SampleApp_ProcessEvent_7
   \   000062   D1           DB        209
   \   000063   ....         DW        ??SampleApp_ProcessEvent_3
   \   000065   ....         DW        ??CrossCallReturnLabel_58
   \                     ??SampleApp_ProcessEvent_7:
   \   000067                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000067   AA..         MOV     R2,?V0 + 0
   \   000069   AB..         MOV     R3,?V0 + 1
   \   00006B   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00006E   80C8         SJMP    ??CrossCallReturnLabel_58
    252              }
    253          
    254              // return unprocessed events
    255              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_6:
   \   000070   EE           MOV     A,R6
   \   000071   FA           MOV     R2,A
   \   000072   7480         MOV     A,#-0x80
   \   000074   6F           XRL     A,R7
   \                     ??SampleApp_ProcessEvent_8:
   \   000075   FB           MOV     R3,A
   \   000076   8048         SJMP    ??SampleApp_ProcessEvent_9
    256            }
    257          
    258            // Send a message out - This event is generated by a timer
    259            //  (setup in SampleApp_Init()).
    260            if ( events & UART_RX_CB_EVT)//发送接收所需串口函数
   \                     ??SampleApp_ProcessEvent_1:
   \   000078   EE           MOV     A,R6
   \   000079   5402         ANL     A,#0x2
   \   00007B   600A         JZ      ??SampleApp_ProcessEvent_10
    261            {
    262          
    263              SampleApp_UART_EVT();
   \   00007D                ; Setup parameters for call to function SampleApp_UART_EVT
   \   00007D   12....       LCALL   ??SampleApp_UART_EVT?relay
    264              return (events ^ UART_RX_CB_EVT);
   \   000080   7402         MOV     A,#0x2
   \                     ??SampleApp_ProcessEvent_11:
   \   000082   6E           XRL     A,R6
   \   000083   FA           MOV     R2,A
   \   000084   EF           MOV     A,R7
   \   000085   80EE         SJMP    ??SampleApp_ProcessEvent_8
    265            }
    266            
    267            if(events&SAMPLEAPP_SEND_UART_MSG_EVT)//回显所需串口函数
   \                     ??SampleApp_ProcessEvent_10:
   \   000087   EE           MOV     A,R6
   \   000088   5410         ANL     A,#0x10
   \   00008A   600A         JZ      ??SampleApp_ProcessEvent_12
    268            {
    269                SampleApp_SPI_short();
   \   00008C                ; Setup parameters for call to function SampleApp_SPI_short
   \   00008C   12....       LCALL   ??SampleApp_SPI_short?relay
    270                SampleApp_SPI_mac();
   \   00008F                ; Setup parameters for call to function SampleApp_SPI_mac
   \   00008F   12....       LCALL   ??SampleApp_SPI_mac?relay
    271                   
    272               return (events ^ SAMPLEAPP_SEND_UART_MSG_EVT);
   \   000092   7410         MOV     A,#0x10
   \   000094   80EC         SJMP    ??SampleApp_ProcessEvent_11
    273            }
    274            
    275             if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_12:
   \   000096   EE           MOV     A,R6
   \   000097   A2E0         MOV     C,0xE0 /* A   */.0
   \   000099   500A         JNC     ??SampleApp_ProcessEvent_13
    276            {
    277              // Send the periodic message
    278              SampleApp_SendPeriodicMessage();
   \   00009B                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00009B   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    279          
    280              // Setup to send message again in normal period (+ a little jitter)
    281              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    282                  60000 );
   \   00009E                ; Setup parameters for call to function osal_start_timerEx
   \   00009E   12....       LCALL   ?Subroutine17 & 0xFFFF
    283          
    284              // return unprocessed events
    285              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \                     ??CrossCallReturnLabel_56:
   \   0000A1   7401         MOV     A,#0x1
   \   0000A3   80DD         SJMP    ??SampleApp_ProcessEvent_11
    286            }
    287             
    288              if(events & SAMLPEAPP_TESTID_MSG_EVT)
   \                     ??SampleApp_ProcessEvent_13:
   \   0000A5   5420         ANL     A,#0x20
   \   0000A7   6007         JZ      ??SampleApp_ProcessEvent_14
    289            {
    290               //处理测试节点请求ID事件
    291               SampleApp_Send_TestID_Message();
   \   0000A9                ; Setup parameters for call to function SampleApp_Send_TestID_Message
   \   0000A9   12....       LCALL   ??SampleApp_Send_TestID_Message?relay
    292               return (events ^ SAMLPEAPP_TESTID_MSG_EVT);
   \   0000AC   7420         MOV     A,#0x20
   \   0000AE   80D2         SJMP    ??SampleApp_ProcessEvent_11
    293            } 
    294            
    295            if(events & SAMLPEAPP_TESTBATTERY_MSG_EVT)
   \                     ??SampleApp_ProcessEvent_14:
   \   0000B0   EE           MOV     A,R6
   \   0000B1   5440         ANL     A,#0x40
   \   0000B3   6007         JZ      ??SampleApp_ProcessEvent_15
    296            {
    297               SystemResetSoft();
   \   0000B5                ; Setup parameters for call to function Onboard_soft_reset
   \   0000B5   12....       LCALL   Onboard_soft_reset & 0xFFFF
    298               return (events ^ SAMLPEAPP_TESTBATTERY_MSG_EVT);
   \   0000B8   7440         MOV     A,#0x40
   \   0000BA   80C6         SJMP    ??SampleApp_ProcessEvent_11
    299            } 
    300            return 0;
   \                     ??SampleApp_ProcessEvent_15:
   \   0000BC   7A00         MOV     R2,#0x0
   \   0000BE   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000C0   7F04         MOV     R7,#0x4
   \   0000C2   02....       LJMP    ?BANKED_LEAVE_XDATA
    301          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   7C60         MOV     R4,#0x60
   \   000002   7DEA         MOV     R5,#-0x16
   \   000004   7A01         MOV     R2,#0x1
   \   000006                REQUIRE ??Subroutine28_0
   \   000006                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#SampleApp_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET
    302          
    303          /*********************************************************************
    304           * LOCAL FUNCTIONS
    305           */
    306          
    307          /*********************************************************************
    308           * @fn      SampleApp_MessageMSGCB
    309           *
    310           * @brief   Data message processor callback.  This function processes
    311           *          any incoming data - probably from other devices.  So, based
    312           *          on cluster ID, perform the intended action.
    313           *
    314           * @param   none
    315           *
    316           * @return  none
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    319          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    320            uint8 *pointer1;  
    321            uint8 shortadd[5];
                         ^
Warning[Pe177]: variable "shortadd" was declared but never referenced
    322            uint8 checktest;
                         ^
Warning[Pe177]: variable "checktest" was declared but never referenced
    323            uint8 u16NewPaind;
    324            switch ( pkt->clusterId )
   \   00000A   EA           MOV     A,R2
   \   00000B   2421         ADD     A,#0x21
   \   00000D   F8           MOV     R0,A
   \   00000E   EB           MOV     A,R3
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   FE           MOV     R6,A
   \   000014   E9           MOV     A,R1
   \   000015   FF           MOV     R7,A
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6003         JZ      $+5
   \   000025   02....       LJMP    ??CrossCallReturnLabel_59 & 0xFFFF
   \   000028   E5..         MOV     A,?V0 + 0
   \   00002A   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00002D   01           DB        1
   \   00002E   01           DB        1
   \   00002F   02           DB        2
   \   000030   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000032   03           DB        3
   \   000033   07           DB        7
   \   000034   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000036   08           DB        8
   \   000037   ....         DW        ??SampleApp_MessageMSGCB_2
   \   000039   09           DB        9
   \   00003A   ....         DW        ??SampleApp_MessageMSGCB_3
   \   00003C   ....         DW        ??CrossCallReturnLabel_59
    325            {
    326              case SAMPLEAPP_PERIODIC_CLUSTERID:   //这个是周期信息用于测试，主要是设备ID
    327                     
    328               
    329               case SAMPLEAPP_FLASH_CLUSTERID:      
    330                //shortadd1[0]='\n';       
    331                
    332              if ( osal_nv_item_init( ZCD_NV_IDSET,1,&u16NewPaind ) == ZSUCCESS )  
   \                     ??SampleApp_MessageMSGCB_0:
   \   00003E                ; Setup parameters for call to function osal_nv_item_init
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   8582..       MOV     ?V0 + 0,DPL
   \   000047   8583..       MOV     ?V0 + 1,DPH
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7C01         MOV     R4,#0x1
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7A87         MOV     R2,#-0x79
   \   000055   7B04         MOV     R3,#0x4
   \   000057   12....       LCALL   ??osal_nv_item_init?relay
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005F   E9           MOV     A,R1
   \   000060   7020         JNZ     ??SampleApp_MessageMSGCB_4
    333                {
    334                   osal_nv_read(ZCD_NV_IDSET,0,1,&u16NewPaind);
   \   000062                ; Setup parameters for call to function osal_nv_read
   \   000062   78..         MOV     R0,#?V0 + 0
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   75..01       MOV     ?V0 + 0,#0x1
   \   00006A   75..00       MOV     ?V0 + 1,#0x0
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   7C00         MOV     R4,#0x0
   \   000074   7D00         MOV     R5,#0x0
   \   000076   7A87         MOV     R2,#-0x79
   \   000078   7B04         MOV     R3,#0x4
   \   00007A   12....       LCALL   ??osal_nv_read?relay
   \   00007D   7404         MOV     A,#0x4
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
    335                }  
    336                if(u16NewPaind==1)//带ID
   \                     ??SampleApp_MessageMSGCB_4:
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F8           MOV     R0,A
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   85..82       MOV     DPL,?XSP + 0
   \   00008E   85..83       MOV     DPH,?XSP + 1
   \   000091   E0           MOVX    A,@DPTR
   \   000092   6401         XRL     A,#0x1
   \   000094   8882         MOV     DPL,R0
   \   000096   8983         MOV     DPH,R1
   \   000098   7010         JNZ     ??SampleApp_MessageMSGCB_5
    337                {
    338                  pointer1=&pkt->cmd.Data[1];  //接收数据指针,指向数据
    339                  HalUARTWrite(0,pointer1,pkt->cmd.Data[0]);//cmd.Data[0]是数据的大小
   \   00009A                ; Setup parameters for call to function HalUARTWrite
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FC           MOV     R4,A
   \   00009C   7D00         MOV     R5,#0x0
   \   00009E   A3           INC     DPTR
   \   00009F   AA82         MOV     R2,DPL
   \   0000A1   AB83         MOV     R3,DPH
   \                     ??SampleApp_MessageMSGCB_6:
   \   0000A3   7900         MOV     R1,#0x0
   \   0000A5   12....       LCALL   ??HalUARTWrite?relay
   \   0000A8   8032         SJMP    ??CrossCallReturnLabel_59
    340                 
    341                }
    342                else
    343                {
    344                  pointer1=&pkt->cmd.Data[9];  //接收数据指针,指向数据
    345                  HalUARTWrite(SERIAL_APP_PORT,pointer1,pkt->cmd.Data[0]-8);//cmd.Data[0]是数据的大小
   \                     ??SampleApp_MessageMSGCB_5:
   \   0000AA                ; Setup parameters for call to function HalUARTWrite
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   FA           MOV     R2,A
   \   0000AC   74F8         MOV     A,#-0x8
   \   0000AE   2A           ADD     A,R2
   \   0000AF   FC           MOV     R4,A
   \   0000B0   74FF         MOV     A,#-0x1
   \   0000B2   3400         ADDC    A,#0x0
   \   0000B4   FD           MOV     R5,A
   \   0000B5   E8           MOV     A,R0
   \   0000B6   2409         ADD     A,#0x9
   \   0000B8   FA           MOV     R2,A
   \   0000B9   E9           MOV     A,R1
   \   0000BA   3400         ADDC    A,#0x0
   \                     ??SampleApp_MessageMSGCB_7:
   \   0000BC   FB           MOV     R3,A
   \   0000BD   80E4         SJMP    ??SampleApp_MessageMSGCB_6
    346                 
    347                }
    348                break;
    349                  
    350                case SAMPLEAPP_TEST_ID_CLUSTERID:
    351                   osal_start_timerEx( SampleApp_TaskID, SAMLPEAPP_TESTID_MSG_EVT,
    352                  ((osal_rand() & 0x00FF)) );        
   \                     ??SampleApp_MessageMSGCB_1:
   \   0000BF                ; Setup parameters for call to function osal_rand
   \   0000BF   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000C2   7A20         MOV     R2,#0x20
   \   0000C4   8013         SJMP    ??SampleApp_MessageMSGCB_8
    353                break;
    354                
    355               case SAMPLEAPP_TEST_ID_BACK_CLUSTERID://回显ID，不带换行符等任何其他的东西
    356                 
    357                 HalUARTWrite(0,&pkt->cmd.Data[0],39);
   \                     ??SampleApp_MessageMSGCB_2:
   \   0000C6                ; Setup parameters for call to function HalUARTWrite
   \   0000C6   7C27         MOV     R4,#0x27
   \   0000C8   7D00         MOV     R5,#0x0
   \   0000CA   8E82         MOV     DPL,R6
   \   0000CC   8F83         MOV     DPH,R7
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   FA           MOV     R2,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   80E8         SJMP    ??SampleApp_MessageMSGCB_7
    358               break;
    359               
    360               //接收到测试节点的BATTERT请求
    361              case SAMPLEAPP_TEST_BATTERY_CLUSTERID:
    362                  osal_start_timerEx( SampleApp_TaskID, SAMLPEAPP_TESTBATTERY_MSG_EVT,
    363                  ((osal_rand() & 0x00FF)) );   
   \                     ??SampleApp_MessageMSGCB_3:
   \   0000D4                ; Setup parameters for call to function osal_rand
   \   0000D4   12....       LCALL   ?Subroutine15 & 0xFFFF
    364              break;
    365              
    366               
    367            }
   \                     ??CrossCallReturnLabel_26:
   \   0000D7   7A40         MOV     R2,#0x40
   \                     ??SampleApp_MessageMSGCB_8:
   \   0000D9   12....       LCALL   ??Subroutine28_0 & 0xFFFF
    368          }
   \                     ??CrossCallReturnLabel_59:
   \   0000DC   7401         MOV     A,#0x1
   \   0000DE                REQUIRE ?Subroutine24
   \   0000DE                ; // Fall through to label ?Subroutine24

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ??osal_rand?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   A8..         MOV     R0,?V0 + 0
   \   000007                ; Setup parameters for call to function osal_start_timerEx
   \   000007                ; Setup parameters for call to function osal_start_timerEx
   \   000007   74FF         MOV     A,#-0x1
   \   000009   58           ANL     A,R0
   \   00000A   FC           MOV     R4,A
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   22           RET
    369          
    370          /*********************************************************************
    371           * @fn      SampleApp_SendPeriodicMessage  发送数据函数
    372           *
    373           * @brief   Send the periodic message.
    374                      发送周期信息给协调器，协调器可以知道那个设备加入网络，那个设备离开网络
    375           *
    376           * @param   none
    377           *
    378           * @return  none
    379           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    380          void SampleApp_SendPeriodicMessage( void )//周期函数这里用作TEST
   \                     SampleApp_SendPeriodicMessage:
    381          {  uint8 testid[6]={116,101,115,116,105,100};//testid
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#((`?<Constant {116, 101, 115, 116, 105, 100}>` >> 8) & 0xff)
   \   000017   7582..       MOV     DPL,#(`?<Constant {116, 101, 115, 116, 105, 100}>` & 0xff)
   \   00001A   7406         MOV     A,#0x6
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    382            if ( devStartMode == MODE_HARD )//如果启动的时候是协调器，则用广播
   \   00001F   90....       MOV     DPTR,#devStartMode
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6402         XRL     A,#0x2
   \   000025   7004         JNZ     ??SampleApp_SendPeriodicMessage_0
    383            {
    384              SampleApp_SPI_SendData_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000027   12....       LCALL   ?Subroutine0 & 0xFFFF
    385              SampleApp_SPI_SendData_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    386             SampleApp_SPI_SendData_DstAddr.addr.shortAddr = 0xFFFF;  
    387            }
   \                     ??CrossCallReturnLabel_0:
   \   00002A   F0           MOVX    @DPTR,A
    388            else//其它设备类型则用单播
    389            {
    390              
    391            }
    392            
    393            if ( AF_DataRequest   ( &SampleApp_SPI_SendData_DstAddr,
    394                                    (endPointDesc_t *)&SampleApp_epDesc,
    395                                    SAMPLEAPP_TEST_ID_CLUSTERID,
    396                                    6, 
    397                                    &testid[0],
    398                                    &SampleApp_TransID, 
    399                                    0, 
    400                                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   00002B                ; Setup parameters for call to function AF_DataRequest
   \   00002B   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000033   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000036   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7403         MOV     A,#0x3
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   8582..       MOV     ?V0 + 0,DPL
   \   000046   8583..       MOV     ?V0 + 1,DPH
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   75..06       MOV     ?V0 + 0,#0x6
   \   000051   75..00       MOV     ?V0 + 1,#0x0
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   75..07       MOV     ?V0 + 0,#0x7
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
    401               {
    402              
    403               }
    404               else
    405               {    
    406               }
    407          }
   \   000067   7406         MOV     A,#0x6
   \   000069   02....       LJMP    ?Subroutine24 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7900         MOV     R1,#0x0
   \   000002   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   000004   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   000006   7A..         MOV     R2,#(SampleApp_SPI_SendData_DstAddr & 0xff)
   \   000008   7B..         MOV     R3,#((SampleApp_SPI_SendData_DstAddr >> 8) & 0xff)
   \   00000A                REQUIRE ??Subroutine29_0
   \   00000A                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   740F         MOV     A,#0xf
   \   000002   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000005   74FF         MOV     A,#-0x1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   90....       MOV     DPTR,#(SampleApp_SPI_SendData_DstAddr + 8)
   \   000003   F0           MOVX    @DPTR,A
   \   000004   7414         MOV     A,#0x14
   \   000006   90....       MOV     DPTR,#(SampleApp_SPI_SendData_DstAddr + 9)
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   90....       MOV     DPTR,#SampleApp_SPI_SendData_DstAddr
   \   00000D   22           RET
    408          
    409          
    410          /*********************************************************************
    411           * @fn      SampleApp_SendFlashMessage
    412           *
    413           * @brief   Send the flash message to group 1.
    414           *
    415           * @param   flashTime - in milliseconds
    416           *
    417           * @return  none
    418           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    419          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    420          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    421            uint8 buffer[3];
    422            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    423            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    424            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   12....       LCALL   ?Subroutine11 & 0xFFFF
    425          
    426            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    427                                 SAMPLEAPP_FLASH_CLUSTERID,
    428                                 3,
    429                                 buffer,
    430                                 &SampleApp_TransID,
    431                                 AF_DISCV_ROUTE,
    432                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_18:
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002E   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000031   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7403         MOV     A,#0x3
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   8582..       MOV     ?V0 + 0,DPL
   \   000041   8583..       MOV     ?V0 + 1,DPH
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   75..03       MOV     ?V0 + 0,#0x3
   \   00004C   75..00       MOV     ?V0 + 1,#0x0
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   75..02       MOV     ?V0 + 0,#0x2
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   7920         MOV     R1,#0x20
   \   00005E   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   000060   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   000062   7A..         MOV     R2,#(SampleApp_Flash_DstAddr & 0xff)
   \   000064   7B..         MOV     R3,#((SampleApp_Flash_DstAddr >> 8) & 0xff)
   \   000066   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
    433            {
    434            }
    435            else
    436            {
    437              // Error occurred in request to send.
    438            }
    439          }
   \   00006C   7403         MOV     A,#0x3
   \   00006E   02....       LJMP    ?Subroutine24 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001   75..1E       MOV     ?V0 + 0,#0x1e
   \   000004   78..         MOV     R0,#?V0 + 0
   \   000006   22           RET
    440          
    441          /*********************************************************************
    442          *********************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    443          uint8 rbuf_Free_Flag;
   \                     rbuf_Free_Flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    444          void SampleApp_UART_EVT(void)
   \                     SampleApp_UART_EVT:
    445          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    446              rbuf_Free_Flag=0;
   \   000004   E4           CLR     A
   \   000005   90....       MOV     DPTR,#rbuf_Free_Flag
   \   000008   F0           MOVX    @DPTR,A
    447                 
    448              if(rbuf_Free_Flag==0)
    449              {
    450                SampleApp_SPI_SendData( rbuf, buflen); 
   \   000009                ; Setup parameters for call to function SampleApp_SPI_SendData
   \   000009   90....       MOV     DPTR,#buflen
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   90....       MOV     DPTR,#rbuf
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FA           MOV     R2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   ??SampleApp_SPI_SendData?relay
    451              }
    452              if(rbuf_Free_Flag==0)
   \   000019   90....       MOV     DPTR,#rbuf_Free_Flag
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   700B         JNZ     ??SampleApp_UART_EVT_0
    453              {
    454               CompforFUWEI(rbuf);
   \   00001F                ; Setup parameters for call to function CompforFUWEI
   \   00001F   90....       MOV     DPTR,#rbuf
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   ??CompforFUWEI?relay
    455          
    456              } 
    457                 
    458          }
   \                     ??SampleApp_UART_EVT_0:
   \   00002A   02....       LJMP    ?Subroutine22 & 0xFFFF
    459          /*********************************************************************
    460           * @fn      SampleApp_SPI
    461           *
    462           * @brief   Get shortaddr and sent to UART
    463                      这个函数主要是设备启动时显示自己的短地址
    464           *
    465           * @param   none
    466           *
    467           * @return  none
    468           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    469          void SampleApp_SPI_short(void)
   \                     SampleApp_SPI_short:
    470          { uint16 short_ddr;
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 21
   \   000004   74EB         MOV     A,#-0x15
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    471            uint8 str_1[ ]="My short Address is:";
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   AC82         MOV     R4,DPL
   \   000011   AD83         MOV     R5,DPH
   \   000013   7583..       MOV     DPH,#((`?<Constant "My short Address is:">` >> 8) & 0xff)
   \   000016   7582..       MOV     DPL,#(`?<Constant "My short Address is:">` & 0xff)
   \   000019   7415         MOV     A,#0x15
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    472            HalUARTWrite(SERIAL_APP_PORT,&str_1[0],20);
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C14         MOV     R4,#0x14
   \   000020   FD           MOV     R5,A
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   AA82         MOV     R2,DPL
   \   000029   AB83         MOV     R3,DPH
   \   00002B   F9           MOV     R1,A
   \   00002C   12....       LCALL   ??HalUARTWrite?relay
    473            short_ddr=NLME_GetShortAddr();
    474            SampleApp_showhex(short_ddr);
   \   00002F                ; Setup parameters for call to function SampleApp_showhex
   \   00002F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00002F   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000032   12....       LCALL   ??SampleApp_showhex?relay
    475          }
   \   000035   7415         MOV     A,#0x15
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003A   02....       LJMP    ?Subroutine22 & 0xFFFF
    476          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          void SampleApp_SPI_mac(void)
   \                     SampleApp_SPI_mac:
    478          { uint8 macaddr[19];
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV     A,#-0x26
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    479            uint8 *pointer2;
    480            
    481            uint8 str_1[ ]="My MAC Address is:";
   \   00000A   7413         MOV     A,#0x13
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   AC82         MOV     R4,DPL
   \   000011   AD83         MOV     R5,DPH
   \   000013   7583..       MOV     DPH,#((`?<Constant "My MAC Address is:">` >> 8) & 0xff)
   \   000016   7582..       MOV     DPL,#(`?<Constant "My MAC Address is:">` & 0xff)
   \   000019   7413         MOV     A,#0x13
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    482            HalUARTWrite(SERIAL_APP_PORT,&str_1[0],18);
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C12         MOV     R4,#0x12
   \   000020   FD           MOV     R5,A
   \   000021   7413         MOV     A,#0x13
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   AA82         MOV     R2,DPL
   \   000028   AB83         MOV     R3,DPH
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   12....       LCALL   ??HalUARTWrite?relay
    483            macaddr[0]=48;
   \   00002F   7430         MOV     A,#0x30
   \   000031   85..82       MOV     DPL,?XSP + 0
   \   000034   85..83       MOV     DPH,?XSP + 1
   \   000037   F0           MOVX    @DPTR,A
    484            macaddr[1]=120;
   \   000038   7401         MOV     A,#0x1
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   12....       LCALL   ?Subroutine1 & 0xFFFF
    485            macaddr[2]=hextoword1(aExtendedAddress[7]);
   \                     ??CrossCallReturnLabel_2:
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   12....       LCALL   ?Subroutine12 & 0xFFFF
    486            macaddr[3]=hextoword2(aExtendedAddress[7]);
   \                     ??CrossCallReturnLabel_21:
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ?Subroutine2 & 0xFFFF
    487            macaddr[4]=hextoword1(aExtendedAddress[6]);
   \                     ??CrossCallReturnLabel_4:
   \   00004E   7404         MOV     A,#0x4
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   12....       LCALL   ?Subroutine13 & 0xFFFF
    488            macaddr[5]=hextoword2(aExtendedAddress[6]);
   \                     ??CrossCallReturnLabel_33:
   \   000056   7405         MOV     A,#0x5
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   12....       LCALL   ?Subroutine3 & 0xFFFF
    489            macaddr[6]=hextoword1(aExtendedAddress[5]);
   \                     ??CrossCallReturnLabel_6:
   \   00005E   7406         MOV     A,#0x6
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   12....       LCALL   ?Subroutine13 & 0xFFFF
    490            macaddr[7]=hextoword2(aExtendedAddress[5]);
   \                     ??CrossCallReturnLabel_34:
   \   000066   7407         MOV     A,#0x7
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   12....       LCALL   ?Subroutine4 & 0xFFFF
    491            macaddr[8]=hextoword1(aExtendedAddress[4]);
   \                     ??CrossCallReturnLabel_8:
   \   00006E   7408         MOV     A,#0x8
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   12....       LCALL   ?Subroutine13 & 0xFFFF
    492            macaddr[9]=hextoword2(aExtendedAddress[4]);
   \                     ??CrossCallReturnLabel_35:
   \   000076   7409         MOV     A,#0x9
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   12....       LCALL   ?Subroutine5 & 0xFFFF
    493            macaddr[10]=hextoword1(aExtendedAddress[3]);
   \                     ??CrossCallReturnLabel_10:
   \   00007E   740A         MOV     A,#0xa
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   12....       LCALL   ?Subroutine13 & 0xFFFF
    494            macaddr[11]=hextoword2(aExtendedAddress[3]);
   \                     ??CrossCallReturnLabel_36:
   \   000086   740B         MOV     A,#0xb
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   12....       LCALL   ?Subroutine6 & 0xFFFF
    495            macaddr[12]=hextoword1(aExtendedAddress[2]);
   \                     ??CrossCallReturnLabel_12:
   \   00008E   740C         MOV     A,#0xc
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   12....       LCALL   ?Subroutine13 & 0xFFFF
    496            macaddr[13]=hextoword2(aExtendedAddress[2]);
   \                     ??CrossCallReturnLabel_37:
   \   000096   740D         MOV     A,#0xd
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   12....       LCALL   ?Subroutine7 & 0xFFFF
    497            macaddr[14]=hextoword1(aExtendedAddress[1]);
   \                     ??CrossCallReturnLabel_14:
   \   00009E   740E         MOV     A,#0xe
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL   ?Subroutine13 & 0xFFFF
    498            macaddr[15]=hextoword2(aExtendedAddress[1]);
   \                     ??CrossCallReturnLabel_38:
   \   0000A6   740F         MOV     A,#0xf
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   12....       LCALL   ?Subroutine9 & 0xFFFF
    499            macaddr[16]=hextoword1(aExtendedAddress[0]);
   \                     ??CrossCallReturnLabel_54:
   \   0000AE   7410         MOV     A,#0x10
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   12....       LCALL   ?Subroutine10 & 0xFFFF
    500            macaddr[17]=hextoword2(aExtendedAddress[0]);
   \                     ??CrossCallReturnLabel_31:
   \   0000B6   7411         MOV     A,#0x11
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   E9           MOV     A,R1
   \   0000BC   F0           MOVX    @DPTR,A
    501            macaddr[18]='\n';
   \   0000BD   7412         MOV     A,#0x12
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   740A         MOV     A,#0xa
   \   0000C4   F0           MOVX    @DPTR,A
    502            pointer2=&macaddr[0];
    503            HalUARTWrite(SERIAL_APP_PORT,pointer2,19);
   \   0000C5                ; Setup parameters for call to function HalUARTWrite
   \   0000C5   7C13         MOV     R4,#0x13
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   85..82       MOV     DPL,?XSP + 0
   \   0000CC   85..83       MOV     DPH,?XSP + 1
   \   0000CF   AA82         MOV     R2,DPL
   \   0000D1   AB83         MOV     R3,DPH
   \   0000D3   7900         MOV     R1,#0x0
   \   0000D5   12....       LCALL   ??HalUARTWrite?relay
    504            osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    505                  60000 );
   \   0000D8                ; Setup parameters for call to function osal_start_timerEx
   \   0000D8   12....       LCALL   ?Subroutine17 & 0xFFFF
    506          
    507          }
   \                     ??CrossCallReturnLabel_57:
   \   0000DB   7426         MOV     A,#0x26
   \   0000DD                REQUIRE ?Subroutine27
   \   0000DD                ; // Fall through to label ?Subroutine27

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F01         MOV     R7,#0x1
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E9           MOV     A,R1
   \   000001   F0           MOVX    @DPTR,A
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002   EE           MOV     A,R6
   \   000003   F9           MOV     R1,A
   \   000004   12....       LCALL   ??hextoword2?relay
   \   000007   7403         MOV     A,#0x3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E9           MOV     A,R1
   \   000001   F0           MOVX    @DPTR,A
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002   EE           MOV     A,R6
   \   000003                REQUIRE ?Subroutine25
   \   000003                ; // Fall through to label ?Subroutine25

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F9           MOV     R1,A
   \   000001   12....       LCALL   ??hextoword2?relay
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E9           MOV     A,R1
   \   000001   F0           MOVX    @DPTR,A
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002                ; Setup parameters for call to function hextoword2
   \   000002   90....       MOV     DPTR,#aExtendedAddress
   \   000005   E0           MOVX    A,@DPTR
   \   000006   80..         SJMP    ?Subroutine25

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E9           MOV     A,R1
   \   000001   F0           MOVX    @DPTR,A
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002   90....       MOV     DPTR,#aExtendedAddress
   \   000005   E0           MOVX    A,@DPTR
   \   000006                REQUIRE ?Subroutine26
   \   000006                ; // Fall through to label ?Subroutine26

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F9           MOV     R1,A
   \   000001   12....       LCALL   ??hextoword1?relay
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E9           MOV     A,R1
   \   000001   F0           MOVX    @DPTR,A
   \   000002   90....       MOV     DPTR,#(aExtendedAddress + 1)
   \   000005   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E9           MOV     A,R1
   \   000001   F0           MOVX    @DPTR,A
   \   000002   90....       MOV     DPTR,#(aExtendedAddress + 2)
   \   000005   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E9           MOV     A,R1
   \   000001   F0           MOVX    @DPTR,A
   \   000002   90....       MOV     DPTR,#(aExtendedAddress + 3)
   \   000005   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E9           MOV     A,R1
   \   000001   F0           MOVX    @DPTR,A
   \   000002   90....       MOV     DPTR,#(aExtendedAddress + 4)
   \   000005   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002                ; Setup parameters for call to function hextoword1
   \   000002   80..         SJMP    ?Subroutine26

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E9           MOV     A,R1
   \   000001   F0           MOVX    @DPTR,A
   \   000002   90....       MOV     DPTR,#(aExtendedAddress + 5)
   \   000005   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E9           MOV     A,R1
   \   000001   F0           MOVX    @DPTR,A
   \   000002   90....       MOV     DPTR,#(aExtendedAddress + 6)
   \   000005   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7478         MOV     A,#0x78
   \   000002   F0           MOVX    @DPTR,A
   \   000003   90....       MOV     DPTR,#(aExtendedAddress + 7)
   \   000006   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    508          void SampleApp_showhex(uint16 sixteenword)
   \                     SampleApp_showhex:
    509          {  uint8 short_ddr_H;
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    510            uint8 short_ddr_L;
    511            uint8 shortaddr[7];
    512            uint8 *pointer1;
    513            short_ddr_H=(uint8)((sixteenword&0xff00)>>8);
   \   00000A   EB           MOV     A,R3
   \   00000B   F9           MOV     R1,A
   \   00000C   FE           MOV     R6,A
    514            short_ddr_L=(uint8)sixteenword;
   \   00000D   EA           MOV     A,R2
   \   00000E   FF           MOV     R7,A
    515            shortaddr[0]=48;
   \   00000F   7430         MOV     A,#0x30
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   F0           MOVX    @DPTR,A
    516            shortaddr[1]=120;
   \   000018   7401         MOV     A,#0x1
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   7478         MOV     A,#0x78
   \   00001F   F0           MOVX    @DPTR,A
    517            shortaddr[2]=hextoword1(short_ddr_H);
   \   000020                ; Setup parameters for call to function hextoword1
   \   000020   12....       LCALL   ??hextoword1?relay
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine12 & 0xFFFF
    518            shortaddr[3]=hextoword2(short_ddr_H);
   \                     ??CrossCallReturnLabel_22:
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E9           MOV     A,R1
   \   00002F   F0           MOVX    @DPTR,A
    519            shortaddr[4]=hextoword1(short_ddr_L);
   \   000030                ; Setup parameters for call to function hextoword1
   \   000030   EF           MOV     A,R7
   \   000031   F9           MOV     R1,A
   \   000032   12....       LCALL   ??hextoword1?relay
   \   000035   7404         MOV     A,#0x4
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   E9           MOV     A,R1
   \   00003B   F0           MOVX    @DPTR,A
    520            shortaddr[5]=hextoword2(short_ddr_L);
   \   00003C                ; Setup parameters for call to function hextoword2
   \   00003C   EF           MOV     A,R7
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   ??hextoword2?relay
   \   000041   7405         MOV     A,#0x5
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E9           MOV     A,R1
   \   000047   F0           MOVX    @DPTR,A
    521            shortaddr[6]='\n';
   \   000048   7406         MOV     A,#0x6
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   740A         MOV     A,#0xa
   \   00004F   F0           MOVX    @DPTR,A
    522            pointer1=&shortaddr[0];
    523            HalUARTWrite(SERIAL_APP_PORT,pointer1,7);
   \   000050                ; Setup parameters for call to function HalUARTWrite
   \   000050   7C07         MOV     R4,#0x7
   \   000052   7D00         MOV     R5,#0x0
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   AA82         MOV     R2,DPL
   \   00005C   AB83         MOV     R3,DPH
   \   00005E   7900         MOV     R1,#0x0
   \   000060   12....       LCALL   ??HalUARTWrite?relay
    524            
    525          
    526          }
   \   000063   7407         MOV     A,#0x7
   \   000065   80..         SJMP    ?Subroutine27
    527          /*********************************************************************
    528           * @fn      hextoword
    529           *
    530           * @brief   十六进制转字符函数 (SampleApp.c)  这两个函数由网友提供.
    531           *
    532           * @param   none
    533           *
    534           * @return  none
    535           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    536          uint8 hextoword1(uint8 t )
   \                     hextoword1:
    537          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    538            uint8 abc;
    539            uint8 cba;
    540            uint8 xx1;
    541            abc=t;
    542            cba=0xf0;
    543            abc=(abc&cba)>>4;
   \   000000   E9           MOV     A,R1
   \   000001   C4           SWAP    A
   \   000002   540F         ANL     A,#0xf
   \   000004   FA           MOV     R2,A
    544            if(abc<10)
   \   000005   C3           CLR     C
   \   000006   940A         SUBB    A,#0xa
   \   000008   5004         JNC     ??hextoword1_0
    545            {
    546              xx1=abc+48;
   \   00000A   7430         MOV     A,#0x30
   \   00000C   8002         SJMP    ??hextoword1_1
    547            }
    548            else
    549            {
    550              xx1=abc+55;
   \                     ??hextoword1_0:
   \   00000E   7437         MOV     A,#0x37
    551            }
   \                     ??hextoword1_1:
   \   000010                REQUIRE ?Subroutine23
   \   000010                ; // Fall through to label ?Subroutine23
    552            return xx1;
    553          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   2A           ADD     A,R2
   \   000001   F9           MOV     R1,A
   \   000002   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554          uint8 hextoword2(uint8 t)
   \                     hextoword2:
    555          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    556            uint8 abc;
    557            uint8 cba;
    558            uint8 xx2;
    559            abc=t;
    560            cba=0x0f;
    561            abc=abc&cba;
   \   000000   740F         MOV     A,#0xf
   \   000002   59           ANL     A,R1
   \   000003   FA           MOV     R2,A
    562            if(abc<10)
   \   000004   C3           CLR     C
   \   000005   940A         SUBB    A,#0xa
   \   000007   5004         JNC     ??hextoword2_0
    563            {
    564              xx2=abc+48;
   \   000009   7430         MOV     A,#0x30
   \   00000B   8002         SJMP    ??hextoword2_1
    565            }
    566            else
    567            {
    568              xx2=abc+55;
   \                     ??hextoword2_0:
   \   00000D   7437         MOV     A,#0x37
    569            }
   \                     ??hextoword2_1:
   \   00000F   80..         SJMP    ?Subroutine23
    570            return xx2;
    571          }
    572          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    573          void SampleApp_Send_TestID_Message(void)//将本节点地址回复给协调器
   \                     SampleApp_Send_TestID_Message:
    574          {    int i;
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 39
   \   000005   74D9         MOV     A,#-0x27
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    575              uint16 short_add;
    576              uint32 Jaoyanma=0;
   \   00000A   90....       MOV     DPTR,#__Constant_0
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   12....       LCALL   ?L_MOV_X
    577              uint8  Jaoyanma1=0;
    578              uint8 pshort_add[39];
    579              uint8 pshort_ddr_H;
    580              uint8 pshort_ddr_L;
    581              short_add=NLME_GetShortAddr();
   \   000012                ; Setup parameters for call to function NLME_GetShortAddr
   \   000012   12....       LCALL   ??NLME_GetShortAddr?relay
    582              
    583              pshort_ddr_H=(uint8)((short_add&0xff00)>>8);
   \   000015   EB           MOV     A,R3
   \   000016   F5..         MOV     ?V0 + 8,A
    584              pshort_ddr_L=(uint8)short_add;
   \   000018   EA           MOV     A,R2
   \   000019   F5..         MOV     ?V0 + 12,A
    585               
    586              pshort_add[0]=51;//3
   \   00001B   7433         MOV     A,#0x33
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   F0           MOVX    @DPTR,A
    587              pshort_add[1]=48;//0
   \   000024   7401         MOV     A,#0x1
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   7430         MOV     A,#0x30
   \   00002B   F0           MOVX    @DPTR,A
    588              pshort_add[2]=73;//I
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   7449         MOV     A,#0x49
   \   000033   F0           MOVX    @DPTR,A
    589              pshort_add[3]=68;//D
   \   000034   7403         MOV     A,#0x3
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   7444         MOV     A,#0x44
   \   00003B   F0           MOVX    @DPTR,A
    590              pshort_add[4]=58;//:
   \   00003C   7404         MOV     A,#0x4
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   743A         MOV     A,#0x3a
   \   000043   F0           MOVX    @DPTR,A
    591              pshort_add[5]=48;//0
   \   000044   7405         MOV     A,#0x5
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   7430         MOV     A,#0x30
   \   00004B   F0           MOVX    @DPTR,A
    592              pshort_add[6]=120;//x
   \   00004C   7406         MOV     A,#0x6
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7478         MOV     A,#0x78
   \   000053   F0           MOVX    @DPTR,A
    593              pshort_add[7]=hextoword1(pshort_ddr_H);
   \   000054                ; Setup parameters for call to function hextoword1
   \   000054   A9..         MOV     R1,?V0 + 8
   \   000056   12....       LCALL   ??hextoword1?relay
   \   000059   7407         MOV     A,#0x7
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   E9           MOV     A,R1
   \   00005F   F0           MOVX    @DPTR,A
    594              pshort_add[8]=hextoword2(pshort_ddr_H);
   \   000060                ; Setup parameters for call to function hextoword2
   \   000060   A9..         MOV     R1,?V0 + 8
   \   000062   12....       LCALL   ??hextoword2?relay
   \   000065   7408         MOV     A,#0x8
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E9           MOV     A,R1
   \   00006B   F0           MOVX    @DPTR,A
    595              pshort_add[9]=hextoword1(pshort_ddr_L);
   \   00006C                ; Setup parameters for call to function hextoword1
   \   00006C   A9..         MOV     R1,?V0 + 12
   \   00006E   12....       LCALL   ??hextoword1?relay
   \   000071   7409         MOV     A,#0x9
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   E9           MOV     A,R1
   \   000077   F0           MOVX    @DPTR,A
    596              pshort_add[10]=hextoword2(pshort_ddr_L);
   \   000078                ; Setup parameters for call to function hextoword2
   \   000078   A9..         MOV     R1,?V0 + 12
   \   00007A   12....       LCALL   ??hextoword2?relay
   \   00007D   740A         MOV     A,#0xa
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   E9           MOV     A,R1
   \   000083   F0           MOVX    @DPTR,A
    597              pshort_add[11]=32;
   \   000084   740B         MOV     A,#0xb
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   7420         MOV     A,#0x20
   \   00008B   F0           MOVX    @DPTR,A
    598              pshort_add[12]=77;//M
   \   00008C   740C         MOV     A,#0xc
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   744D         MOV     A,#0x4d
   \   000093   F0           MOVX    @DPTR,A
    599              pshort_add[13]=65;//A
   \   000094   740D         MOV     A,#0xd
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   7441         MOV     A,#0x41
   \   00009B   F0           MOVX    @DPTR,A
    600              pshort_add[14]=67;//C
   \   00009C   740E         MOV     A,#0xe
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   7443         MOV     A,#0x43
   \   0000A3   F0           MOVX    @DPTR,A
    601              pshort_add[15]=58;//:
   \   0000A4   740F         MOV     A,#0xf
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   743A         MOV     A,#0x3a
   \   0000AB   F0           MOVX    @DPTR,A
    602              pshort_add[16]=48;
   \   0000AC   7410         MOV     A,#0x10
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   7430         MOV     A,#0x30
   \   0000B3   F0           MOVX    @DPTR,A
    603              pshort_add[17]=120;
   \   0000B4   7411         MOV     A,#0x11
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   12....       LCALL   ?Subroutine1 & 0xFFFF
    604              pshort_add[18]=hextoword1(aExtendedAddress[7]);
   \                     ??CrossCallReturnLabel_3:
   \   0000BC   7412         MOV     A,#0x12
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   12....       LCALL   ?Subroutine13 & 0xFFFF
    605              pshort_add[19]=hextoword2(aExtendedAddress[7]);
   \                     ??CrossCallReturnLabel_39:
   \   0000C4   7413         MOV     A,#0x13
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL   ?Subroutine2 & 0xFFFF
    606              pshort_add[20]=hextoword1(aExtendedAddress[6]);
   \                     ??CrossCallReturnLabel_5:
   \   0000CC   7414         MOV     A,#0x14
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   12....       LCALL   ?Subroutine13 & 0xFFFF
    607              pshort_add[21]=hextoword2(aExtendedAddress[6]);
   \                     ??CrossCallReturnLabel_40:
   \   0000D4   7415         MOV     A,#0x15
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   12....       LCALL   ?Subroutine3 & 0xFFFF
    608              pshort_add[22]=hextoword1(aExtendedAddress[5]);
   \                     ??CrossCallReturnLabel_7:
   \   0000DC   7416         MOV     A,#0x16
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   12....       LCALL   ?Subroutine13 & 0xFFFF
    609              pshort_add[23]=hextoword2(aExtendedAddress[5]);
   \                     ??CrossCallReturnLabel_41:
   \   0000E4   7417         MOV     A,#0x17
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   12....       LCALL   ?Subroutine4 & 0xFFFF
    610              pshort_add[24]=hextoword1(aExtendedAddress[4]);
   \                     ??CrossCallReturnLabel_9:
   \   0000EC   7418         MOV     A,#0x18
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   12....       LCALL   ?Subroutine13 & 0xFFFF
    611              pshort_add[25]=hextoword2(aExtendedAddress[4]);
   \                     ??CrossCallReturnLabel_42:
   \   0000F4   7419         MOV     A,#0x19
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   12....       LCALL   ?Subroutine5 & 0xFFFF
    612              pshort_add[26]=hextoword1(aExtendedAddress[3]);
   \                     ??CrossCallReturnLabel_11:
   \   0000FC   741A         MOV     A,#0x1a
   \   0000FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000101   12....       LCALL   ?Subroutine13 & 0xFFFF
    613              pshort_add[27]=hextoword2(aExtendedAddress[3]);
   \                     ??CrossCallReturnLabel_43:
   \   000104   741B         MOV     A,#0x1b
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   12....       LCALL   ?Subroutine6 & 0xFFFF
    614              pshort_add[28]=hextoword1(aExtendedAddress[2]);
   \                     ??CrossCallReturnLabel_13:
   \   00010C   741C         MOV     A,#0x1c
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   12....       LCALL   ?Subroutine13 & 0xFFFF
    615              pshort_add[29]=hextoword2(aExtendedAddress[2]);
   \                     ??CrossCallReturnLabel_44:
   \   000114   741D         MOV     A,#0x1d
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   12....       LCALL   ?Subroutine7 & 0xFFFF
    616              pshort_add[30]=hextoword1(aExtendedAddress[1]);
   \                     ??CrossCallReturnLabel_15:
   \   00011C   741E         MOV     A,#0x1e
   \   00011E   12....       LCALL   ?XSTACK_DISP0_8
   \   000121   12....       LCALL   ?Subroutine13 & 0xFFFF
    617              pshort_add[31]=hextoword2(aExtendedAddress[1]);
   \                     ??CrossCallReturnLabel_45:
   \   000124   741F         MOV     A,#0x1f
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   12....       LCALL   ?Subroutine9 & 0xFFFF
    618              pshort_add[32]=hextoword1(aExtendedAddress[0]);
   \                     ??CrossCallReturnLabel_55:
   \   00012C   7420         MOV     A,#0x20
   \   00012E   12....       LCALL   ?XSTACK_DISP0_8
   \   000131   12....       LCALL   ?Subroutine10 & 0xFFFF
    619              pshort_add[33]=hextoword2(aExtendedAddress[0]);
   \                     ??CrossCallReturnLabel_32:
   \   000134   7421         MOV     A,#0x21
   \   000136   12....       LCALL   ?XSTACK_DISP0_8
   \   000139   E9           MOV     A,R1
   \   00013A   F0           MOVX    @DPTR,A
    620              for (i=7;i>=0;i--)
   \   00013B   7A07         MOV     R2,#0x7
   \   00013D   7B00         MOV     R3,#0x0
    621              {Jaoyanma+=aExtendedAddress[i];
   \                     ??SampleApp_Send_TestID_Message_0:
   \   00013F   EA           MOV     A,R2
   \   000140   24..         ADD     A,#(aExtendedAddress & 0xff)
   \   000142   F582         MOV     DPL,A
   \   000144   EB           MOV     A,R3
   \   000145   34..         ADDC    A,#((aExtendedAddress >> 8) & 0xff)
   \   000147   F583         MOV     DPH,A
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   F5..         MOV     ?V0 + 4,A
   \   00014C   75..00       MOV     ?V0 + 5,#0x0
   \   00014F   75..00       MOV     ?V0 + 6,#0x0
   \   000152   75..00       MOV     ?V0 + 7,#0x0
   \   000155   78..         MOV     R0,#?V0 + 0
   \   000157   79..         MOV     R1,#?V0 + 4
   \   000159   12....       LCALL   ?L_ADD
    622              }
   \   00015C   EA           MOV     A,R2
   \   00015D   24FF         ADD     A,#-0x1
   \   00015F   1A           DEC     R2
   \   000160   EB           MOV     A,R3
   \   000161   34FF         ADDC    A,#-0x1
   \   000163   FB           MOV     R3,A
   \   000164   C3           CLR     C
   \   000165   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000168   50D5         JNC     ??SampleApp_Send_TestID_Message_0
    623              for (i=0;i<7;i++)
   \   00016A   7A00         MOV     R2,#0x0
   \   00016C   7B00         MOV     R3,#0x0
    624              {Jaoyanma+=pshort_add[i];
   \                     ??SampleApp_Send_TestID_Message_1:
   \   00016E   12....       LCALL   ?Subroutine14 & 0xFFFF
    625              }
   \                     ??CrossCallReturnLabel_23:
   \   000171   12....       LCALL   ?L_ADD
   \   000174   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000177   9407         SUBB    A,#0x7
   \   000179   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00017C   40F0         JC      ??SampleApp_Send_TestID_Message_1
    626              Jaoyanma+=pshort_ddr_H;
    627              Jaoyanma+=pshort_ddr_L;
   \   00017E   75..00       MOV     ?V0 + 9,#0x0
   \   000181   75..00       MOV     ?V0 + 10,#0x0
   \   000184   75..00       MOV     ?V0 + 11,#0x0
   \   000187   75..00       MOV     ?V0 + 13,#0x0
   \   00018A   75..00       MOV     ?V0 + 14,#0x0
   \   00018D   75..00       MOV     ?V0 + 15,#0x0
   \   000190   78..         MOV     R0,#?V0 + 8
   \   000192   79..         MOV     R1,#?V0 + 12
   \   000194   12....       LCALL   ?L_ADD
   \   000197   78..         MOV     R0,#?V0 + 0
   \   000199   79..         MOV     R1,#?V0 + 8
   \   00019B   12....       LCALL   ?L_ADD
    628              for (i=12;i<18;i++)
   \   00019E   7A0C         MOV     R2,#0xc
   \   0001A0   7B00         MOV     R3,#0x0
    629              {Jaoyanma+=pshort_add[i];
   \                     ??SampleApp_Send_TestID_Message_2:
   \   0001A2   12....       LCALL   ?Subroutine14 & 0xFFFF
    630              }
   \                     ??CrossCallReturnLabel_24:
   \   0001A5   12....       LCALL   ?L_ADD
   \   0001A8   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0001AB   9412         SUBB    A,#0x12
   \   0001AD   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0001B0   40F0         JC      ??SampleApp_Send_TestID_Message_2
    631              Jaoyanma1=(uint8)(Jaoyanma&0x000000ff);  
   \   0001B2   AE..         MOV     R6,?V0 + 0
    632              pshort_add[34]=hextoword1(Jaoyanma1);
   \   0001B4                ; Setup parameters for call to function hextoword1
   \   0001B4   EE           MOV     A,R6
   \   0001B5   F9           MOV     R1,A
   \   0001B6   12....       LCALL   ??hextoword1?relay
   \   0001B9   7422         MOV     A,#0x22
   \   0001BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BE   12....       LCALL   ?Subroutine13 & 0xFFFF
    633              pshort_add[35]=hextoword2(Jaoyanma1);  
   \                     ??CrossCallReturnLabel_46:
   \   0001C1   7423         MOV     A,#0x23
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   E9           MOV     A,R1
   \   0001C7   F0           MOVX    @DPTR,A
    634              pshort_add[36]=49;//1
   \   0001C8   7424         MOV     A,#0x24
   \   0001CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CD   7431         MOV     A,#0x31
   \   0001CF   F0           MOVX    @DPTR,A
    635              pshort_add[37]=54;//6
   \   0001D0   7425         MOV     A,#0x25
   \   0001D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D5   7436         MOV     A,#0x36
   \   0001D7   F0           MOVX    @DPTR,A
    636              pshort_add[38]='\n'; 
   \   0001D8   7426         MOV     A,#0x26
   \   0001DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DD   740A         MOV     A,#0xa
   \   0001DF   F0           MOVX    @DPTR,A
    637            
    638            SampleApp_TestID_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0001E0   7402         MOV     A,#0x2
   \   0001E2   90....       MOV     DPTR,#(SampleApp_TestID_DstAddr + 8)
   \   0001E5   F0           MOVX    @DPTR,A
    639            SampleApp_TestID_DstAddr.endPoint =SAMPLEAPP_ENDPOINT;
   \   0001E6   7414         MOV     A,#0x14
   \   0001E8   90....       MOV     DPTR,#(SampleApp_TestID_DstAddr + 9)
   \   0001EB   F0           MOVX    @DPTR,A
    640            SampleApp_TestID_DstAddr.addr.shortAddr =0x0000; 
   \   0001EC   90....       MOV     DPTR,#SampleApp_TestID_DstAddr
   \   0001EF   E4           CLR     A
   \   0001F0   F0           MOVX    @DPTR,A
   \   0001F1   A3           INC     DPTR
   \   0001F2   12....       LCALL   ?Subroutine11 & 0xFFFF
    641            
    642            if(AF_DataRequest(&SampleApp_TestID_DstAddr,
    643                              (endPointDesc_t *)&SampleApp_epDesc,
    644                              SAMPLEAPP_TEST_ID_BACK_CLUSTERID,
    645                              39, 
    646                              &pshort_add[0],
    647                              &SampleApp_TransID, 
    648                              0, 
    649                              AF_DEFAULT_RADIUS)==afStatus_SUCCESS)
   \                     ??CrossCallReturnLabel_19:
   \   0001F5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001F8   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   0001FB   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   0001FE   78..         MOV     R0,#?V0 + 0
   \   000200   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000203   7403         MOV     A,#0x3
   \   000205   12....       LCALL   ?XSTACK_DISP0_8
   \   000208   8582..       MOV     ?V0 + 0,DPL
   \   00020B   8583..       MOV     ?V0 + 1,DPH
   \   00020E   78..         MOV     R0,#?V0 + 0
   \   000210   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000213   75..27       MOV     ?V0 + 0,#0x27
   \   000216   75..00       MOV     ?V0 + 1,#0x0
   \   000219   78..         MOV     R0,#?V0 + 0
   \   00021B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021E   75..08       MOV     ?V0 + 0,#0x8
   \   000221   78..         MOV     R0,#?V0 + 0
   \   000223   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000226   7900         MOV     R1,#0x0
   \   000228   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   00022A   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   00022C   7A..         MOV     R2,#(SampleApp_TestID_DstAddr & 0xff)
   \   00022E   7B..         MOV     R3,#((SampleApp_TestID_DstAddr >> 8) & 0xff)
   \   000230   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000233   12....       LCALL   ?DEALLOC_XSTACK8
    650            {
    651            }
    652            else
    653            {
    654            }
    655          }
   \   000236   7427         MOV     A,#0x27
   \   000238   12....       LCALL   ?DEALLOC_XSTACK8
   \   00023B   7F10         MOV     R7,#0x10
   \   00023D   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   C3           CLR     C
   \   000009   EA           MOV     A,R2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   EB           MOV     A,R3
   \   000001                REQUIRE ??Subroutine30_0
   \   000001                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   9400         SUBB    A,#0x0
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   2A           ADD     A,R2
   \   000009   F582         MOV     DPL,A
   \   00000B   E583         MOV     A,DPH
   \   00000D   3B           ADDC    A,R3
   \   00000E   F583         MOV     DPH,A
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 4,A
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   79..         MOV     R1,#?V0 + 4
   \   000017   22           RET
    656          /*********************************************************************
    657           * @fn      SampleApp_SPI_SendData
    658           *
    659           * @brief   sent the uart buffer data to the air
    660           *详细说明：函数的功能是如果uart的buf中有数据，则通过这个函数讲数据发送出去（通过天线发送到空中）
    661          
    662                      1、如果这个设备启动的时候为协调器，则以广播的形式发送到所有其他设备
    663          
    664                      2、如果这个设备不是协调器，即路由器，则以单播的形式发送到协调器
    665          
    666            注意：用完之后要释放内存
    667          
    668           * @param   *buf   the dat
    669                      len    the length of the dat 
    670           *
    671           * @return  none
    672           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    673          void SampleApp_SPI_SendData( uint8 *buf, uint8 len )
   \                     SampleApp_SPI_SendData:
    674          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   \   000009   89..         MOV     ?V0 + 0,R1
    675            uint8 i; 
    676            uint8 *dat=buf;
    677            uint16 newadress=0,temp=0;
   \   00000B   7A00         MOV     R2,#0x0
   \   00000D   7B00         MOV     R3,#0x0
    678            
    679          
    680            for ( i = 0; i <9; i++ )//这几个空过去是因为有设备ID。
    681            {
    682             dat++ ;
    683            }
    684              dat++;
    685              dat++;  
   \   00000F   E5..         MOV     A,?V0 + 2
   \   000011   240B         ADD     A,#0xb
   \   000013   F8           MOV     R0,A
   \   000014   E5..         MOV     A,?V0 + 3
   \   000016   3400         ADDC    A,#0x0
   \   000018   F9           MOV     R1,A
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
    686            for ( i =0; i <4; i++ )
   \   00001D   7C00         MOV     R4,#0x0
    687            { 
    688             if(*dat>=48&&*dat<=57)
   \                     ??SampleApp_SPI_SendData_0:
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 4,A
   \   000022   C3           CLR     C
   \   000023   9430         SUBB    A,#0x30
   \   000025   400B         JC      ??SampleApp_SPI_SendData_1
   \   000027   E5..         MOV     A,?V0 + 4
   \   000029   C3           CLR     C
   \   00002A   943A         SUBB    A,#0x3a
   \   00002C   5004         JNC     ??SampleApp_SPI_SendData_1
    689               {
    690                temp=(*dat)-48;    
   \   00002E   74D0         MOV     A,#-0x30
   \   000030   8026         SJMP    ??SampleApp_SPI_SendData_2
    691               }
    692             else if(*dat>=97&&*dat<=102)
   \                     ??SampleApp_SPI_SendData_1:
   \   000032   E5..         MOV     A,?V0 + 4
   \   000034   C3           CLR     C
   \   000035   9461         SUBB    A,#0x61
   \   000037   E5..         MOV     A,?V0 + 4
   \   000039   400C         JC      ??SampleApp_SPI_SendData_3
   \   00003B   C3           CLR     C
   \   00003C   9467         SUBB    A,#0x67
   \   00003E   4003         JC      $+5
   \   000040   02....       LJMP    ??SampleApp_SPI_SendData_4 & 0xFFFF
    693               {
    694                temp=(*dat)-87;
   \   000043   74A9         MOV     A,#-0x57
   \   000045   8011         SJMP    ??SampleApp_SPI_SendData_2
    695               }
    696              else if(*dat>=65&&*dat<=70)
   \                     ??SampleApp_SPI_SendData_3:
   \   000047   C3           CLR     C
   \   000048   9441         SUBB    A,#0x41
   \   00004A   5003         JNC     $+5
   \   00004C   02....       LJMP    ??SampleApp_SPI_SendData_4 & 0xFFFF
   \   00004F   E5..         MOV     A,?V0 + 4
   \   000051   C3           CLR     C
   \   000052   9447         SUBB    A,#0x47
   \   000054   5079         JNC     ??SampleApp_SPI_SendData_4
    697               {
    698                temp=(*dat)-55;
   \   000056   74C9         MOV     A,#-0x37
   \                     ??SampleApp_SPI_SendData_2:
   \   000058   25..         ADD     A,?V0 + 4
   \   00005A   F5..         MOV     ?V0 + 4,A
   \   00005C   74FF         MOV     A,#-0x1
   \   00005E   3400         ADDC    A,#0x0
   \   000060   F5..         MOV     ?V0 + 5,A
    699               }
    700             else
    701               return;
    702             
    703                *dat++;
   \   000062   A3           INC     DPTR
    704               temp=temp<<((3-i)*4);
    705               newadress|=temp;
   \   000063   7403         MOV     A,#0x3
   \   000065   C3           CLR     C
   \   000066   9C           SUBB    A,R4
   \   000067   33           RLC     A
   \   000068   33           RLC     A
   \   000069   54FC         ANL     A,#0xfc
   \   00006B   78..         MOV     R0,#?V0 + 4
   \   00006D   12....       LCALL   ?S_SHL
   \   000070   E5..         MOV     A,?V0 + 4
   \   000072   4A           ORL     A,R2
   \   000073   FA           MOV     R2,A
   \   000074   E5..         MOV     A,?V0 + 5
   \   000076   4B           ORL     A,R3
   \   000077   FB           MOV     R3,A
    706             } 
   \   000078   0C           INC     R4
   \   000079   EC           MOV     A,R4
   \   00007A   C3           CLR     C
   \   00007B   9404         SUBB    A,#0x4
   \   00007D   40A0         JC      ??SampleApp_SPI_SendData_0
    707             if ( newadress == 0xFFFF )
   \   00007F   74FF         MOV     A,#-0x1
   \   000081   6A           XRL     A,R2
   \   000082   7003         JNZ     ??SampleApp_SPI_SendData_5
   \   000084   74FF         MOV     A,#-0x1
   \   000086   6B           XRL     A,R3
   \                     ??SampleApp_SPI_SendData_5:
   \   000087   7005         JNZ     ??SampleApp_SPI_SendData_6
    708            {
    709              SampleApp_SPI_SendData_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000089   12....       LCALL   ?Subroutine0 & 0xFFFF
    710              SampleApp_SPI_SendData_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    711              SampleApp_SPI_SendData_DstAddr.addr.shortAddr = 0xFFFF; 
    712            }
   \                     ??CrossCallReturnLabel_1:
   \   00008C   8007         SJMP    ??SampleApp_SPI_SendData_7
    713            else
    714              
    715            {
    716              SampleApp_SPI_SendData_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??SampleApp_SPI_SendData_6:
   \   00008E   12....       LCALL   ?Subroutine8 & 0xFFFF
    717              SampleApp_SPI_SendData_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    718              SampleApp_SPI_SendData_DstAddr.addr.shortAddr = newadress; 
    719            }
   \                     ??CrossCallReturnLabel_16:
   \   000091   EA           MOV     A,R2
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
   \   000094   EB           MOV     A,R3
   \                     ??SampleApp_SPI_SendData_7:
   \   000095   F0           MOVX    @DPTR,A
    720              if ( AF_DataRequest   ( &SampleApp_SPI_SendData_DstAddr,
    721                                   (endPointDesc_t *)&SampleApp_epDesc,
    722                                    SAMPLEAPP_FLASH_CLUSTERID,
    723                                    len, buf,
    724                                    &SampleApp_TransID, 
    725                                    0, 
    726                                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000096                ; Setup parameters for call to function AF_DataRequest
   \   000096   75..1E       MOV     ?V0 + 1,#0x1e
   \   000099   78..         MOV     R0,#?V0 + 1
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009E   75....       MOV     ?V0 + 4,#(SampleApp_TransID & 0xff)
   \   0000A1   75....       MOV     ?V0 + 5,#((SampleApp_TransID >> 8) & 0xff)
   \   0000A4   78..         MOV     R0,#?V0 + 4
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A9   78..         MOV     R0,#?V0 + 2
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   75..00       MOV     ?V0 + 1,#0x0
   \   0000B1   78..         MOV     R0,#?V0 + 0
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   75..02       MOV     ?V0 + 0,#0x2
   \   0000B9   78..         MOV     R0,#?V0 + 0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BE   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
    727            {
    728              osal_mem_free( rbuf );  //必须释放内存,不然造成溢出!
   \   0000C4                ; Setup parameters for call to function osal_mem_free
   \   0000C4   90....       MOV     DPTR,#rbuf
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   FA           MOV     R2,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   FB           MOV     R3,A
   \   0000CC   12....       LCALL   ??osal_mem_free?relay
   \                     ??SampleApp_SPI_SendData_4:
   \   0000CF   7F06         MOV     R7,#0x6
   \   0000D1   02....       LJMP    ?BANKED_LEAVE_XDATA
    729            }
    730            else
    731            {
    732              osal_mem_free( rbuf ); //必须释放内存,不然造成溢出!    
    733            }  
    734          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000005   22           RET
    735          
    736          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    737          void CompforFUWEI(uint8 *dat)
   \                     CompforFUWEI:
    738          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    739            uint8 predict[5]={102,117,119,101,105};//fuwei
   \   00000A   7405         MOV     A,#0x5
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   AC82         MOV     R4,DPL
   \   000011   AD83         MOV     R5,DPH
   \   000013   7583..       MOV     DPH,#((`?<Constant {102, 117, 119, 101, 105}>` >> 8) & 0xff)
   \   000016   7582..       MOV     DPL,#(`?<Constant {102, 117, 119, 101, 105}>` & 0xff)
   \   000019   7405         MOV     A,#0x5
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    740            uint8 *ppredict=&predict[0];
   \   00001E   7405         MOV     A,#0x5
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   A882         MOV     R0,DPL
   \   000025   A983         MOV     R1,DPH
    741            uint8 i; 
    742            uint16 newadress=0,temp=0;
   \   000027   75..00       MOV     ?V0 + 0,#0x0
   \   00002A   75..00       MOV     ?V0 + 1,#0x0
    743            uint8 pshort_add[5]={70,85,87,69,73};//FUWEI
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   AC82         MOV     R4,DPL
   \   000035   AD83         MOV     R5,DPH
   \   000037   7583..       MOV     DPH,#((`?<Constant {70, 85, 87, 69, 73}>` >> 8) & 0xff)
   \   00003A   7582..       MOV     DPL,#(`?<Constant {70, 85, 87, 69, 73}>` & 0xff)
   \   00003D   7405         MOV     A,#0x5
   \   00003F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    744            if(rxlen!=9)//比较从上位机来的数据长度！！
   \   000042   90....       MOV     DPTR,#rxlen
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6409         XRL     A,#0x9
   \   000048   6003         JZ      $+5
   \   00004A   02....       LJMP    ??CompforFUWEI_0 & 0xFFFF
    745            return;
    746            
    747            for ( i = 0; i <9; i++ )//这几个空过去是因为有设备ID。
   \   00004D   EA           MOV     A,R2
   \   00004E   2409         ADD     A,#0x9
   \   000050   FA           MOV     R2,A
   \   000051   EB           MOV     A,R3
   \   000052   3400         ADDC    A,#0x0
   \   000054   FB           MOV     R3,A
    748            {
    749             *dat++ ;
    750            }
    751            
    752            for ( i = 0; i <5; i++ )
   \   000055   75..00       MOV     ?V0 + 4,#0x0
    753            {
    754             if(*dat++ == *ppredict++);
   \                     ??CompforFUWEI_1:
   \   000058   EA           MOV     A,R2
   \   000059   FC           MOV     R4,A
   \   00005A   EB           MOV     A,R3
   \   00005B   FD           MOV     R5,A
   \   00005C   8C82         MOV     DPL,R4
   \   00005E   8D83         MOV     DPH,R5
   \   000060   A3           INC     DPTR
   \   000061   AA82         MOV     R2,DPL
   \   000063   AB83         MOV     R3,DPH
   \   000065   E8           MOV     A,R0
   \   000066   FE           MOV     R6,A
   \   000067   E9           MOV     A,R1
   \   000068   FF           MOV     R7,A
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   A3           INC     DPTR
   \   00006E   A882         MOV     R0,DPL
   \   000070   A983         MOV     R1,DPH
   \   000072   8C82         MOV     DPL,R4
   \   000074   8D83         MOV     DPH,R5
   \   000076   E0           MOVX    A,@DPTR
   \   000077   FC           MOV     R4,A
   \   000078   8E82         MOV     DPL,R6
   \   00007A   8F83         MOV     DPH,R7
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   6C           XRL     A,R4
   \   00007E   6003         JZ      $+5
   \   000080   02....       LJMP    ??CompforFUWEI_0 & 0xFFFF
    755             else
    756                 return;
    757            }  
   \   000083   05..         INC     ?V0 + 4
   \   000085   E5..         MOV     A,?V0 + 4
   \   000087   C3           CLR     C
   \   000088   9405         SUBB    A,#0x5
   \   00008A   40CC         JC      ??CompforFUWEI_1
    758            for ( i =0; i <4; i++ )
   \   00008C   75..00       MOV     ?V0 + 4,#0x0
    759            { 
    760             if(*dat>=48&&*dat<=57)
   \                     ??CompforFUWEI_2:
   \   00008F   8A82         MOV     DPL,R2
   \   000091   8B83         MOV     DPH,R3
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F5..         MOV     ?V0 + 2,A
   \   000096   C3           CLR     C
   \   000097   9430         SUBB    A,#0x30
   \   000099   400B         JC      ??CompforFUWEI_3
   \   00009B   E5..         MOV     A,?V0 + 2
   \   00009D   C3           CLR     C
   \   00009E   943A         SUBB    A,#0x3a
   \   0000A0   5004         JNC     ??CompforFUWEI_3
    761               {
    762                temp=(*dat)-48;    
   \   0000A2   74D0         MOV     A,#-0x30
   \   0000A4   8026         SJMP    ??CompforFUWEI_4
    763               }
    764             else if(*dat>=97&&*dat<=102)
   \                     ??CompforFUWEI_3:
   \   0000A6   E5..         MOV     A,?V0 + 2
   \   0000A8   C3           CLR     C
   \   0000A9   9461         SUBB    A,#0x61
   \   0000AB   E5..         MOV     A,?V0 + 2
   \   0000AD   400C         JC      ??CompforFUWEI_5
   \   0000AF   C3           CLR     C
   \   0000B0   9467         SUBB    A,#0x67
   \   0000B2   4003         JC      $+5
   \   0000B4   02....       LJMP    ??CompforFUWEI_0 & 0xFFFF
    765               {
    766                temp=(*dat)-87;
   \   0000B7   74A9         MOV     A,#-0x57
   \   0000B9   8011         SJMP    ??CompforFUWEI_4
    767               }
    768              else if(*dat>=65&&*dat<=70)
   \                     ??CompforFUWEI_5:
   \   0000BB   C3           CLR     C
   \   0000BC   9441         SUBB    A,#0x41
   \   0000BE   5003         JNC     $+5
   \   0000C0   02....       LJMP    ??CompforFUWEI_0 & 0xFFFF
   \   0000C3   E5..         MOV     A,?V0 + 2
   \   0000C5   C3           CLR     C
   \   0000C6   9447         SUBB    A,#0x47
   \   0000C8   507D         JNC     ??CompforFUWEI_0
    769               {
    770                temp=(*dat)-55;
   \   0000CA   74C9         MOV     A,#-0x37
   \                     ??CompforFUWEI_4:
   \   0000CC   25..         ADD     A,?V0 + 2
   \   0000CE   F5..         MOV     ?V0 + 2,A
   \   0000D0   74FF         MOV     A,#-0x1
   \   0000D2   3400         ADDC    A,#0x0
   \   0000D4   F5..         MOV     ?V0 + 3,A
    771               }
    772             else
    773               return;
    774             
    775                *dat++;
   \   0000D6   A3           INC     DPTR
   \   0000D7   AA82         MOV     R2,DPL
   \   0000D9   AB83         MOV     R3,DPH
    776               temp=temp<<((3-i)*4);
    777               newadress|=temp;
   \   0000DB   7403         MOV     A,#0x3
   \   0000DD   C3           CLR     C
   \   0000DE   95..         SUBB    A,?V0 + 4
   \   0000E0   33           RLC     A
   \   0000E1   33           RLC     A
   \   0000E2   54FC         ANL     A,#0xfc
   \   0000E4   78..         MOV     R0,#?V0 + 2
   \   0000E6   12....       LCALL   ?S_SHL
   \   0000E9   E5..         MOV     A,?V0 + 2
   \   0000EB   45..         ORL     A,?V0 + 0
   \   0000ED   F5..         MOV     ?V0 + 0,A
   \   0000EF   E5..         MOV     A,?V0 + 3
   \   0000F1   45..         ORL     A,?V0 + 1
   \   0000F3   F5..         MOV     ?V0 + 1,A
    778             } 
   \   0000F5   05..         INC     ?V0 + 4
   \   0000F7   E5..         MOV     A,?V0 + 4
   \   0000F9   C3           CLR     C
   \   0000FA   9404         SUBB    A,#0x4
   \   0000FC   4091         JC      ??CompforFUWEI_2
    779             
    780              SampleApp_SPI_SendData_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0000FE   12....       LCALL   ?Subroutine8 & 0xFFFF
    781              SampleApp_SPI_SendData_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    782              SampleApp_SPI_SendData_DstAddr.addr.shortAddr = newadress; 
   \                     ??CrossCallReturnLabel_17:
   \   000101   E5..         MOV     A,?V0 + 0
   \   000103   F0           MOVX    @DPTR,A
   \   000104   A3           INC     DPTR
   \   000105   E5..         MOV     A,?V0 + 1
   \   000107   12....       LCALL   ?Subroutine11 & 0xFFFF
    783            
    784              if ( AF_DataRequest   (&SampleApp_SPI_SendData_DstAddr,
    785                                    (endPointDesc_t *)&SampleApp_epDesc,
    786                                    SAMPLEAPP_TEST_BATTERY_CLUSTERID,
    787                                    2, 
    788                                    &pshort_add[0],
    789                                    &SampleApp_TransID, 
    790                                    0, 
    791                                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_20:
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010D   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000110   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000113   78..         MOV     R0,#?V0 + 0
   \   000115   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000118   7403         MOV     A,#0x3
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   8582..       MOV     ?V0 + 0,DPL
   \   000120   8583..       MOV     ?V0 + 1,DPH
   \   000123   78..         MOV     R0,#?V0 + 0
   \   000125   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000128   75..02       MOV     ?V0 + 0,#0x2
   \   00012B   75..00       MOV     ?V0 + 1,#0x0
   \   00012E   78..         MOV     R0,#?V0 + 0
   \   000130   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000133   75..09       MOV     ?V0 + 0,#0x9
   \   000136   78..         MOV     R0,#?V0 + 0
   \   000138   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013B   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00013E   12....       LCALL   ?DEALLOC_XSTACK8
    792               {
    793              
    794               }
    795               else
    796               {    
    797               } 
    798              rbuf_Free_Flag=1;
   \   000141   7401         MOV     A,#0x1
   \   000143   90....       MOV     DPTR,#rbuf_Free_Flag
   \   000146   F0           MOVX    @DPTR,A
    799          }
   \                     ??CompforFUWEI_0:
   \   000147   740A         MOV     A,#0xa
   \   000149   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014C   7F05         MOV     R7,#0x5
   \   00014E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_UART_EVT?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_UART_EVT

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SPI_short?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SPI_short

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SPI_mac?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SPI_mac

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_showhex?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_showhex

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??hextoword1?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hextoword1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??hextoword2?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hextoword2

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_TestID_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_TestID_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SPI_SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SPI_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CompforFUWEI?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CompforFUWEI

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {116, 101, 115, 116, 105, 100}>`:
   \   000000   74657374     DB 116, 101, 115, 116, 105, 100
   \            6964    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "My short Address is:">`:
   \   000000   4D792073     DB "My short Address is:"
   \            686F7274
   \            20416464
   \            72657373
   \            2069733A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "My MAC Address is:">`:
   \   000000   4D79204D     DB "My MAC Address is:"
   \            41432041
   \            64647265
   \            73732069
   \            733A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {102, 117, 119, 101, 105}>`:
   \   000000   66757765     DB 102, 117, 119, 101, 105
   \            69      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {70, 85, 87, 69, 73}>`:
   \   000000   46555745     DB 70, 85, 87, 69, 73
   \            49      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     CompforFUWEI                       2      0     32
       -> AF_DataRequest                0      0     64
     SampleApp_Init                     2      0      0
       -> afRegister                    4      0      0
       -> RegisterForKeys               4      0      0
       -> readbuf                       4      0      0
     SampleApp_MessageMSGCB             0      0     27
       -> osal_nv_item_init             0      0     26
       -> osal_nv_read                  0      0     30
       -> HalUARTWrite                  0      0     22
       -> HalUARTWrite                  0      0     22
       -> osal_rand                     0      0     22
       -> osal_start_timerEx            0      0     22
       -> HalUARTWrite                  0      0     22
       -> osal_rand                     0      0     22
       -> osal_start_timerEx            0      0     22
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_UART_EVT            0      0     24
       -> SampleApp_SPI_short           0      0     24
       -> SampleApp_SPI_mac             0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_start_timerEx            0      0     24
       -> SampleApp_Send_TestID_Message
                                        0      0     24
       -> Onboard_soft_reset            0      0     24
     SampleApp_SPI_SendData             0      0     23
       -> AF_DataRequest                0      0     46
       -> osal_mem_free                 0      0     28
     SampleApp_SPI_mac                  2      0     59
       -> HalUARTWrite                  0      0     94
       -> hextoword1                    0      0     94
       -> hextoword2                    0      0     94
       -> hextoword1                    0      0     94
       -> hextoword2                    0      0     94
       -> hextoword1                    0      0     94
       -> hextoword2                    0      0     94
       -> hextoword1                    0      0     94
       -> hextoword2                    0      0     94
       -> hextoword1                    0      0     94
       -> hextoword2                    0      0     94
       -> hextoword1                    0      0     94
       -> hextoword2                    0      0     94
       -> hextoword1                    0      0     94
       -> hextoword2                    0      0     94
       -> hextoword1                    0      0     94
       -> hextoword2                    0      0     94
       -> HalUARTWrite                  0      0     94
       -> osal_start_timerEx            0      0     94
     SampleApp_SPI_short                4      0     33
       -> HalUARTWrite                  4      0     42
       -> NLME_GetShortAddr             4      0     42
       -> SampleApp_showhex             4      0     42
     SampleApp_SendFlashMessage         1      0     22
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0     37
       -> AF_DataRequest                0      0     50
     SampleApp_Send_TestID_Message      1      0     84
       -> NLME_GetShortAddr             0      0    126
       -> hextoword1                    0      0    126
       -> hextoword2                    0      0    126
       -> hextoword1                    0      0    126
       -> hextoword2                    0      0    126
       -> hextoword1                    0      0    126
       -> hextoword2                    0      0    126
       -> hextoword1                    0      0    126
       -> hextoword2                    0      0    126
       -> hextoword1                    0      0    126
       -> hextoword2                    0      0    126
       -> hextoword1                    0      0    126
       -> hextoword2                    0      0    126
       -> hextoword1                    0      0    126
       -> hextoword2                    0      0    126
       -> hextoword1                    0      0    126
       -> hextoword2                    0      0    126
       -> hextoword1                    0      0    126
       -> hextoword2                    0      0    126
       -> hextoword1                    0      0    126
       -> hextoword2                    0      0    126
       -> hextoword1                    0      0    126
       -> hextoword2                    0      0    126
       -> AF_DataRequest                0      0    144
     SampleApp_UART_EVT                 2      0     12
       -> SampleApp_SPI_SendData        4      0      0
       -> CompforFUWEI                  4      0      0
     SampleApp_showhex                  1      0     37
       -> hextoword1                    0      0     32
       -> hextoword2                    0      0     32
       -> hextoword1                    0      0     32
       -> hextoword2                    0      0     32
       -> HalUARTWrite                  0      0     32
     hextoword1                         0      0     63
     hextoword2                         0      0     63


   Segment part sizes:

     Function/Label                             Bytes
     --------------                             -----
     SampleApp_ClusterList                        20
     SampleApp_SimpleDesc                         12
     SampleApp_epDesc                              6
     SampleApp_TaskID                              1
     SampleApp_NwkState                            1
     SampleApp_TransID                             1
     SampleApp_Periodic_DstAddr                   12
     SampleApp_Flash_DstAddr                      12
     SampleApp_SPI_SendData_DstAddr               12
     SampleApp_TestID_DstAddr                     12
     SampleApp_Group                              18
     SampleAppPeriodicCounter                      1
     SampleAppFlashCounter                         1
     short_test                                    2
     SampleApp_Init                               69
     ?Subroutine22                                 7
     SampleApp_ProcessEvent                      197
     ?Subroutine17                                 6
     ??Subroutine28_0                             11
     SampleApp_MessageMSGCB                      222
     ?Subroutine24                                 8
     ?Subroutine15                                14
     SampleApp_SendPeriodicMessage               108
     ?Subroutine16                                10
     ??Subroutine29_0                              6
     ?Subroutine0                                 10
     ?Subroutine20                                14
     SampleApp_SendFlashMessage                  113
     ?Subroutine11                                 7
     rbuf_Free_Flag                                1
     SampleApp_UART_EVT                           45
     SampleApp_SPI_short                          61
     SampleApp_SPI_mac                           221
     ?Subroutine27                                 8
     ?Subroutine12                                10
     ?Subroutine13                                 3
     ?Subroutine25                                 5
     ?Subroutine10                                 8
     ?Subroutine9                                  6
     ?Subroutine26                                 5
     ?Subroutine7                                  9
     ?Subroutine6                                  9
     ?Subroutine5                                  9
     ?Subroutine4                                  9
     ?Subroutine21                                 4
     ?Subroutine3                                  9
     ?Subroutine2                                  9
     ?Subroutine1                                 10
     SampleApp_showhex                           103
     hextoword1                                   16
     ?Subroutine23                                 5
     hextoword2                                   17
     SampleApp_Send_TestID_Message               576
     ?Subroutine19                                11
     ?Subroutine18                                 1
     ??Subroutine30_0                              8
     ?Subroutine14                                24
     SampleApp_SPI_SendData                      212
     ?Subroutine8                                  6
     CompforFUWEI                                337
     ??SampleApp_Init?relay                        6
     ??SampleApp_ProcessEvent?relay                6
     ??SampleApp_MessageMSGCB?relay                6
     ??SampleApp_SendPeriodicMessage?relay         6
     ??SampleApp_SendFlashMessage?relay            6
     ??SampleApp_UART_EVT?relay                    6
     ??SampleApp_SPI_short?relay                   6
     ??SampleApp_SPI_mac?relay                     6
     ??SampleApp_showhex?relay                     6
     ??hextoword1?relay                            6
     ??hextoword2?relay                            6
     ??SampleApp_Send_TestID_Message?relay         6
     ??SampleApp_SPI_SendData?relay                6
     ??CompforFUWEI?relay                          6
     ?<Constant {116, 101, 115, 116, 105, 100}>    6
     ?<Constant "My short Address is:">           21
     ?<Constant "My MAC Address is:">             19
     ?<Constant {102, 117, 119, 101, 105}>         5
     ?<Constant {70, 85, 87, 69, 73}>              5
     __Constant_0                                  4

 
 2 558 bytes in segment BANKED_CODE
    84 bytes in segment BANK_RELAYS
    92 bytes in segment XDATA_ROM_C
    80 bytes in segment XDATA_Z
 
 2 642 bytes of CODE  memory
    88 bytes of CONST memory (+ 4 bytes shared)
    80 bytes of XDATA memory

Errors: none
Warnings: 2
