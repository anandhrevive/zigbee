///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               16/Sep/2011  10:53:12 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZSta /
//                          ck¶¨Ê±¸´Î»¼ì²â\Components\mac\low_level\srf04\mac /
//                          _rx.c                                             /
//    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg /
//                          " (-DCPU32MHZ -DROOT=__near_func                  /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cf /
//                          g" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Documents and          /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Co /
//                          mponents\mac\low_level\srf04\mac_rx.c" -D         /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D HAL_UART=TRUE -D                   /
//                          SERIAL_APP_PORT=0 -D BUILD_ALL_DEVICES -D         /
//                          xLCD_SUPPORTED=DEBUG -D SOFT_SATRT -D             /
//                          ZDO_COORDINATOR -D NV_INIT -D RTR_NWK -lC         /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\CoordinatorEB\List\" -lA "C:\Documents  /
//                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì² /
//                          â\Projects\zstack\Samples\SampleApp\CC2530DB\Coor /
//                          dinatorEB\List\" --diag_suppress Pe001,Pa010 -o   /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\CoordinatorEB\Obj\" -e                  /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "C:\Documents and         /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\" -I     /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\SOURCE\" -I "C:\Documents and        /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \ZMAIN\TI2530DB\" -I "C:\Documents and            /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\MT\" -I "C:\Documents and       /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\HAL\INCLUDE\" -I "C:\Documents  /
//                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì² /
//                          â\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I    /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSO /
//                          C\" -I "C:\Documents and                          /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\OSAL\INCLUDE\" -I               /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"    /
//                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ /
//                          " -I "C:\Documents and Settings\Administrator\×ÀÃ /
//                          æ\ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Samp /
//                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE /
//                          C\" -I "C:\Documents and                          /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\SAPI\" -I "C:\Documents   /
//                          and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì² /
//                          â\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\STACK\SYS\" -I              /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"   /
//                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\" /
//                           -I "C:\Documents and Settings\Administrator\×ÀÃæ /
//                          \ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"    /
//                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\S /
//                          ADDR\" -I "C:\Documents and                       /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\SERVICES\SDATA\" -I             /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\" /
//                           -I "C:\Documents and Settings\Administrator\×ÀÃæ /
//                          \ZStack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_ /
//                          LEVEL\" -I "C:\Documents and                      /
//                          Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I        /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSt /
//                          ack¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL /
//                          \srf04\SINGLE_CHIP\" -I D:\IAR\8051\INC\ -I       /
//                          D:\IAR\8051\INC\CLIB\ -Ohz                        /
//    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\ZSta /
//                          ck¶¨Ê±¸´Î»¼ì²â\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\CoordinatorEB\List\mac_rx.s51            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME mac_rx

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??macRxHaltCleanup?relay
        EXTERN ??macRxPromiscuousMode?relay
        EXTERN ??rxAddrIsr?relay
        EXTERN ??rxDiscardFrame?relay
        EXTERN ??rxDiscardIsr?relay
        EXTERN ??rxDone?relay
        EXTERN ??rxFcsIsr?relay
        EXTERN ??rxHaltCleanupFinalStep?relay
        EXTERN ??rxPayloadIsr?relay
        EXTERN ??rxPostRxUpdates?relay
        EXTERN ??rxPrepPayload?relay
        EXTERN ??rxStartIsr?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??macRxAckTxDoneCallback?relay
        FUNCTION ??macRxAckTxDoneCallback?relay,0203H
        PUBLIC ??macRxFifoOverflowIsr?relay
        FUNCTION ??macRxFifoOverflowIsr?relay,0203H
        PUBLIC ??macRxHaltCleanup?relay
        FUNCTION ??macRxHaltCleanup?relay,0203H
        PUBLIC ??macRxInit?relay
        FUNCTION ??macRxInit?relay,0203H
        PUBLIC ??macRxPromiscuousMode?relay
        FUNCTION ??macRxPromiscuousMode?relay,0203H
        PUBLIC ??macRxRadioPowerUpInit?relay
        FUNCTION ??macRxRadioPowerUpInit?relay,0203H
        PUBLIC ??macRxThresholdIsr?relay
        FUNCTION ??macRxThresholdIsr?relay,0203H
        PUBLIC ??macRxTxReset?relay
        FUNCTION ??macRxTxReset?relay,0203H
        FUNCTION ??rxAddrIsr?relay,0203H
        FUNCTION ??rxDiscardFrame?relay,0203H
        FUNCTION ??rxDiscardIsr?relay,0203H
        FUNCTION ??rxDone?relay,0203H
        FUNCTION ??rxFcsIsr?relay,0203H
        FUNCTION ??rxHaltCleanupFinalStep?relay,0203H
        FUNCTION ??rxPayloadIsr?relay,0203H
        FUNCTION ??rxPostRxUpdates?relay,0203H
        FUNCTION ??rxPrepPayload?relay,0203H
        FUNCTION ??rxStartIsr?relay,0203H
        PUBWEAK RFIRQF0
        PUBWEAK RFIRQF1
        PUBWEAK RFST
        PUBWEAK S1CON
        PUBWEAK _A_IEN0
        PUBLIC macRxAckTxDoneCallback
        FUNCTION macRxAckTxDoneCallback,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxActive
        PUBLIC macRxFifoOverflowIsr
        FUNCTION macRxFifoOverflowIsr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxFilter
        PUBLIC macRxHaltCleanup
        FUNCTION macRxHaltCleanup,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxInit
        FUNCTION macRxInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxOutgoingAckFlag
        PUBLIC macRxPromiscuousMode
        FUNCTION macRxPromiscuousMode,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxRadioPowerUpInit
        FUNCTION macRxRadioPowerUpInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxThresholdIsr
        FUNCTION macRxThresholdIsr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxTxReset
        FUNCTION macRxTxReset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxAddrIsr,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        FUNCTION rxDiscardFrame,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxDiscardIsr,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION rxDone,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxFcsIsr,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION rxHaltCleanupFinalStep,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxPayloadIsr,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxPostRxUpdates,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxPrepPayload,0203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxStartIsr,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
macRxHardDisable    SYMBOL "macRxHardDisable"
macDataRxMemFree    SYMBOL "macDataRxMemFree"
halAssertHandler    SYMBOL "halAssertHandler"
macCspForceTxDoneIfPending SYMBOL "macCspForceTxDoneIfPending"
macMemReadRxFifo    SYMBOL "macMemReadRxFifo"
macRadioComputeLQI  SYMBOL "macRadioComputeLQI"
macTxAckReceivedCallback SYMBOL "macTxAckReceivedCallback"
macTxAckNotReceivedCallback SYMBOL "macTxAckNotReceivedCallback"
macDataRxMemAlloc   SYMBOL "macDataRxMemAlloc"
macRxCheckMACPendingCallback SYMBOL "macRxCheckMACPendingCallback"
MAC_SrcMatchCheckAllPending SYMBOL "MAC_SrcMatchCheckAllPending"
macRxCheckPendingCallback SYMBOL "macRxCheckPendingCallback"
macMcuOverflowCapture SYMBOL "macMcuOverflowCapture"
macMcuTimerCapture  SYMBOL "macMcuTimerCapture"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
macRxOffRequest     SYMBOL "macRxOffRequest"
MAC_SrcMatchCheckResult SYMBOL "MAC_SrcMatchCheckResult"
macRxCompleteCallback SYMBOL "macRxCompleteCallback"
macRadioUpdateTxPower SYMBOL "macRadioUpdateTxPower"
macTxStartQueuedFrame SYMBOL "macTxStartQueuedFrame"
??MAC_SrcMatchCheckAllPending?relay SYMBOL "?relay", MAC_SrcMatchCheckAllPending
??MAC_SrcMatchCheckResult?relay SYMBOL "?relay", MAC_SrcMatchCheckResult
??halAssertHandler?relay SYMBOL "?relay", halAssertHandler
??macCspForceTxDoneIfPending?relay SYMBOL "?relay", macCspForceTxDoneIfPending
??macDataRxMemAlloc?relay SYMBOL "?relay", macDataRxMemAlloc
??macDataRxMemFree?relay SYMBOL "?relay", macDataRxMemFree
??macMcuOverflowCapture?relay SYMBOL "?relay", macMcuOverflowCapture
??macMcuTimerCapture?relay SYMBOL "?relay", macMcuTimerCapture
??macMemReadRxFifo?relay SYMBOL "?relay", macMemReadRxFifo
??macRadioComputeLQI?relay SYMBOL "?relay", macRadioComputeLQI
??macRadioUpdateTxPower?relay SYMBOL "?relay", macRadioUpdateTxPower
??macRxCheckMACPendingCallback?relay SYMBOL "?relay", macRxCheckMACPendingCallback
??macRxCheckPendingCallback?relay SYMBOL "?relay", macRxCheckPendingCallback
??macRxCompleteCallback?relay SYMBOL "?relay", macRxCompleteCallback
??macRxHardDisable?relay SYMBOL "?relay", macRxHardDisable
??macRxOffRequest?relay SYMBOL "?relay", macRxOffRequest
??macTxAckNotReceivedCallback?relay SYMBOL "?relay", macTxAckNotReceivedCallback
??macTxAckReceivedCallback?relay SYMBOL "?relay", macTxAckReceivedCallback
??macTxStartQueuedFrame?relay SYMBOL "?relay", macTxStartQueuedFrame
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
macRxAckTxDoneCallback SYMBOL "macRxAckTxDoneCallback"
??macRxAckTxDoneCallback?relay SYMBOL "?relay", macRxAckTxDoneCallback
macRxFifoOverflowIsr SYMBOL "macRxFifoOverflowIsr"
??macRxFifoOverflowIsr?relay SYMBOL "?relay", macRxFifoOverflowIsr
macRxHaltCleanup    SYMBOL "macRxHaltCleanup"
??macRxHaltCleanup?relay SYMBOL "?relay", macRxHaltCleanup
macRxInit           SYMBOL "macRxInit"
??macRxInit?relay   SYMBOL "?relay", macRxInit
macRxPromiscuousMode SYMBOL "macRxPromiscuousMode"
??macRxPromiscuousMode?relay SYMBOL "?relay", macRxPromiscuousMode
macRxRadioPowerUpInit SYMBOL "macRxRadioPowerUpInit"
??macRxRadioPowerUpInit?relay SYMBOL "?relay", macRxRadioPowerUpInit
macRxThresholdIsr   SYMBOL "macRxThresholdIsr"
??macRxThresholdIsr?relay SYMBOL "?relay", macRxThresholdIsr
macRxTxReset        SYMBOL "macRxTxReset"
??macRxTxReset?relay SYMBOL "?relay", macRxTxReset

        EXTERN macRxHardDisable
        FUNCTION macRxHardDisable,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macDataRxMemFree
        FUNCTION macDataRxMemFree,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halAssertHandler
        FUNCTION halAssertHandler,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macCspForceTxDoneIfPending
        FUNCTION macCspForceTxDoneIfPending,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMemReadRxFifo
        FUNCTION macMemReadRxFifo,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRadioComputeLQI
        FUNCTION macRadioComputeLQI,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macTxAckReceivedCallback
        FUNCTION macTxAckReceivedCallback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macTxAckNotReceivedCallback
        FUNCTION macTxAckNotReceivedCallback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macDataRxMemAlloc
        FUNCTION macDataRxMemAlloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxCheckMACPendingCallback
        FUNCTION macRxCheckMACPendingCallback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchCheckAllPending
        FUNCTION MAC_SrcMatchCheckAllPending,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxCheckPendingCallback
        FUNCTION macRxCheckPendingCallback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMcuOverflowCapture
        FUNCTION macMcuOverflowCapture,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMcuTimerCapture
        FUNCTION macMcuTimerCapture,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxOffRequest
        FUNCTION macRxOffRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchCheckResult
        FUNCTION MAC_SrcMatchCheckResult,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxCompleteCallback
        FUNCTION macRxCompleteCallback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRadioUpdateTxPower
        FUNCTION macRadioUpdateTxPower,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macTxStartQueuedFrame
        FUNCTION macTxStartQueuedFrame,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??MAC_SrcMatchCheckAllPending?relay
        FUNCTION ??MAC_SrcMatchCheckAllPending?relay,00H
        EXTERN ??MAC_SrcMatchCheckResult?relay
        FUNCTION ??MAC_SrcMatchCheckResult?relay,00H
        EXTERN ??halAssertHandler?relay
        FUNCTION ??halAssertHandler?relay,00H
        EXTERN ??macCspForceTxDoneIfPending?relay
        FUNCTION ??macCspForceTxDoneIfPending?relay,00H
        EXTERN ??macDataRxMemAlloc?relay
        FUNCTION ??macDataRxMemAlloc?relay,00H
        EXTERN ??macDataRxMemFree?relay
        FUNCTION ??macDataRxMemFree?relay,00H
        EXTERN ??macMcuOverflowCapture?relay
        FUNCTION ??macMcuOverflowCapture?relay,00H
        EXTERN ??macMcuTimerCapture?relay
        FUNCTION ??macMcuTimerCapture?relay,00H
        EXTERN ??macMemReadRxFifo?relay
        FUNCTION ??macMemReadRxFifo?relay,00H
        EXTERN ??macRadioComputeLQI?relay
        FUNCTION ??macRadioComputeLQI?relay,00H
        EXTERN ??macRadioUpdateTxPower?relay
        FUNCTION ??macRadioUpdateTxPower?relay,00H
        EXTERN ??macRxCheckMACPendingCallback?relay
        FUNCTION ??macRxCheckMACPendingCallback?relay,00H
        EXTERN ??macRxCheckPendingCallback?relay
        FUNCTION ??macRxCheckPendingCallback?relay,00H
        EXTERN ??macRxCompleteCallback?relay
        FUNCTION ??macRxCompleteCallback?relay,00H
        EXTERN ??macRxHardDisable?relay
        FUNCTION ??macRxHardDisable?relay,00H
        EXTERN ??macRxOffRequest?relay
        FUNCTION ??macRxOffRequest?relay,00H
        EXTERN ??macTxAckNotReceivedCallback?relay
        FUNCTION ??macTxAckNotReceivedCallback?relay,00H
        EXTERN ??macTxAckReceivedCallback?relay
        FUNCTION ??macTxAckReceivedCallback?relay,00H
        EXTERN ??macTxStartQueuedFrame?relay
        FUNCTION ??macTxStartQueuedFrame?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN macChipVersion
        EXTERN macRxOnFlag
        EXTERN macSrcMatchIsEnabled
        EXTERN macTxActive
        EXTERN pMacDataTx

// C:\Documents and Settings\Administrator\×ÀÃæ\ZStack¶¨Ê±¸´Î»¼ì²â\Components\mac\low_level\srf04\mac_rx.c
//    1 /**************************************************************************************************
//    2   Filename:       mac_rx.c
//    3   Revised:        $Date: 2007-10-08 14:05:36 -0700 (Mon, 08 Oct 2007) $
//    4   Revision:       $Revision: 15624 $
//    5 
//    6   Description:    Describe the purpose and contents of the file.
//    7 
//    8 
//    9   Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /* ------------------------------------------------------------------------------------------------
//   41  *                                          Includes
//   42  * ------------------------------------------------------------------------------------------------
//   43  */
//   44 
//   45 /* hal */
//   46 #include "hal_defs.h"
//   47 #include "hal_types.h"
//   48 
//   49 /* high-level */
//   50 #include "mac_high_level.h"
//   51 #include "mac_spec.h"
//   52 
//   53 /* exported low-level */
//   54 #include "mac_low_level.h"
//   55 
//   56 /* low-level specific */
//   57 #include "mac_rx.h"
//   58 #include "mac_tx.h"
//   59 #include "mac_rx_onoff.h"
//   60 #include "mac_radio.h"
//   61 
//   62 /* target specific */
//   63 #include "mac_radio_defs.h"

        ASEGN SFR_AN:DATA:NOROOT,091H
// unsigned char volatile __sfr RFIRQF1
RFIRQF1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09bH
// unsigned char volatile __sfr S1CON
S1CON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e1H
// unsigned char volatile __sfr RFST
RFST:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e9H
// unsigned char volatile __sfr RFIRQF0
RFIRQF0:
        DS 1
//   64 #include "mac_autopend.h"
//   65 
//   66 /* debug */
//   67 #include "mac_assert.h"
//   68 
//   69 
//   70 /* ------------------------------------------------------------------------------------------------
//   71  *                                            Defines
//   72  * ------------------------------------------------------------------------------------------------
//   73  */
//   74 #define MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT   16   /* adjustable to tune performance */
//   75 
//   76 /* receive FIFO bytes needed to start a valid receive (see function rxStartIsr for details) */
//   77 #define RX_THRESHOLD_START_LEN    (MAC_PHY_PHR_LEN        +  \ 
//   78                                    MAC_FCF_FIELD_LEN      +  \ 
//   79                                    MAC_SEQ_NUM_FIELD_LEN  +  \ 
//   80                                    MAC_FCS_FIELD_LEN)
//   81 
//   82 /* maximum size of addressing fields (note: command frame identifier processed as part of address) */
//   83 #define MAX_ADDR_FIELDS_LEN  ((MAC_EXT_ADDR_FIELD_LEN + MAC_PAN_ID_FIELD_LEN) * 2)
//   84 
//   85 /* addressing mode reserved value */
//   86 #define ADDR_MODE_RESERVERED  1
//   87 
//   88 /* length of command frame identifier */
//   89 #define CMD_FRAME_ID_LEN      1
//   90 
//   91 /* packet size mask is equal to the maximum value */
//   92 #define PHY_PACKET_SIZE_MASK  0x7F
//   93 
//   94 /* value for promiscuous off, must not conflict with other mode variants from separate include files */
//   95 #define PROMISCUOUS_MODE_OFF  0x00
//   96 
//   97 /* bit of proprietary FCS format that indicates if the CRC is OK */
//   98 #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
//   99 
//  100 /* dummy length value for unused entry in lookup table */
//  101 #define DUMMY_LEN   0xBE
//  102 
//  103 /* value for rxThresholdIntState */
//  104 #define RX_THRESHOLD_INT_STATE_INACTIVE   0
//  105 #define RX_THRESHOLD_INT_STATE_ACTIVE     1
//  106 #define RX_THRESHOLD_INT_STATE_RESET      2
//  107 
//  108 
//  109 /* ------------------------------------------------------------------------------------------------
//  110  *                                             Macros
//  111  * ------------------------------------------------------------------------------------------------
//  112  */
//  113 #define MEM_ALLOC(x)   macDataRxMemAlloc(x)
//  114 #define MEM_FREE(x)    macDataRxMemFree((uint8 **)x)
//  115 
//  116 /*
//  117  *  Macro for encoding frame control information into internal flags format.
//  118  *  Parameter is pointer to the frame.  NOTE!  If either the internal frame
//  119  *  format *or* the specification changes, this macro will need to be modified.
//  120  */
//  121 #define INTERNAL_FCF_FLAGS(p)  ((((p)[1] >> 4) & 0x03) | ((p)[0] & 0x78))
//  122 
//  123 /*
//  124  *  The radio replaces the actual FCS with different information.  This proprietary FCS is
//  125  *  the same length as the original and includes:
//  126  *    1) the RSSI value
//  127  *    2) the average correlation value (used for LQI)
//  128  *    3) a CRC passed bit
//  129  *
//  130  *  These macros decode the proprietary FCS.  The macro parameter is a pointer to the two byte FCS.
//  131  */
//  132 #define PROPRIETARY_FCS_RSSI(p)                 ((int8)((p)[0]))
//  133 #define PROPRIETARY_FCS_CRC_OK(p)               ((p)[1] & PROPRIETARY_FCS_CRC_OK_BIT)
//  134 #define PROPRIETARY_FCS_CORRELATION_VALUE(p)    ((p)[1] & ~PROPRIETARY_FCS_CRC_OK_BIT)
//  135 
//  136 
//  137 /* ------------------------------------------------------------------------------------------------
//  138  *                                       Global Variables
//  139  * ------------------------------------------------------------------------------------------------
//  140  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  141 uint8 macRxActive;
macRxActive:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  142 uint8 macRxFilter;
macRxFilter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  143 uint8 macRxOutgoingAckFlag;
macRxOutgoingAckFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  144 
//  145 
//  146 /* ------------------------------------------------------------------------------------------------
//  147  *                                       Local Constants
//  148  * ------------------------------------------------------------------------------------------------
//  149  */

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  150 static const uint8 CODE macRxAddrLen[] =
macRxAddrLen:
        DB 0, 190, 4, 10
//  151 {
//  152   0,                                                /* no address */
//  153   DUMMY_LEN,                                        /* reserved */
//  154   MAC_PAN_ID_FIELD_LEN + MAC_SHORT_ADDR_FIELD_LEN,  /* short address + pan id */
//  155   MAC_PAN_ID_FIELD_LEN + MAC_EXT_ADDR_FIELD_LEN     /* extended address + pan id */
//  156 };
//  157 
//  158 
//  159 /* ------------------------------------------------------------------------------------------------
//  160  *                                       Local Prototypes
//  161  * ------------------------------------------------------------------------------------------------
//  162  */
//  163 static void rxHaltCleanupFinalStep(void);
//  164 
//  165 static void rxStartIsr(void);
//  166 static void rxAddrIsr(void);
//  167 static void rxPayloadIsr(void);
//  168 static void rxDiscardIsr(void);
//  169 static void rxFcsIsr(void);
//  170 
//  171 static void rxPrepPayload(void);
//  172 static void rxDiscardFrame(void);
//  173 static void rxDone(void);
//  174 static void rxPostRxUpdates(void);
//  175 
//  176 
//  177 /* ------------------------------------------------------------------------------------------------
//  178  *                                         Local Variables
//  179  * ------------------------------------------------------------------------------------------------
//  180  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  181 static void    (* pFuncRxState)(void);
pFuncRxState:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  182 static macRx_t  * pRxBuf;
pRxBuf:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  183 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  184 static uint8  rxBuf[MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN];
rxBuf:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  185 static uint8  rxUnreadLen;
rxUnreadLen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  186 static uint8  rxNextLen;
rxNextLen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  187 static uint8  rxPayloadLen;
rxPayloadLen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  188 static uint8  rxFilter;
rxFilter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  189 static uint8  rxPromiscuousMode;
rxPromiscuousMode:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  190 static uint8  rxIsrActiveFlag;
rxIsrActiveFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  191 static uint8  rxResetFlag;
rxResetFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  192 static uint8  rxFifoOverflowCount;
rxFifoOverflowCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  193 
//  194 #ifdef PACKET_FILTER_STATS
//  195   uint32      rxCrcFailure = 0;
//  196   uint32      rxCrcSuccess = 0;
//  197 #endif /* PACKET_FILTER_STATS */
//  198 
//  199 
//  200 /**************************************************************************************************
//  201  * @fn          macRxInit
//  202  *
//  203  * @brief       Initialize receive variable states.
//  204  *
//  205  * @param       none
//  206  *
//  207  * @return      none
//  208  **************************************************************************************************
//  209  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  210 MAC_INTERNAL_API void macRxInit(void)
macRxInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function macRxInit
//  211 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  212   macRxFilter          = RX_FILTER_OFF;
        CLR     A
        MOV     DPTR,#macRxFilter
        MOVX    @DPTR,A
//  213   rxPromiscuousMode    = PROMISCUOUS_MODE_OFF;
        MOV     DPTR,#rxPromiscuousMode
        MOVX    @DPTR,A
//  214   pRxBuf               = NULL; /* required for macRxReset() to function correctly */
        MOV     DPTR,#pRxBuf
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  215   macRxActive          = MAC_RX_ACTIVE_NO_ACTIVITY;
        MOV     DPTR,#macRxActive
        LCALL   ?Subroutine2 & 0xFFFF
//  216   pFuncRxState         = &rxStartIsr;
//  217   macRxOutgoingAckFlag = 0;
??CrossCallReturnLabel_2:
        CLR     A
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    @DPTR,A
//  218   rxIsrActiveFlag      = 0;
        MOV     DPTR,#rxIsrActiveFlag
        MOVX    @DPTR,A
//  219   rxResetFlag          = 0;
        MOV     DPTR,#rxResetFlag
        MOVX    @DPTR,A
//  220   rxFifoOverflowCount  = 0;
        MOV     DPTR,#rxFifoOverflowCount
        LJMP    ?Subroutine21 & 0xFFFF
        CFI EndBlock cfiBlock0
//  221 }
//  222 
//  223 
//  224 /**************************************************************************************************
//  225  * @fn          macRxRadioPowerUpInit
//  226  *
//  227  * @brief       Initialization for after radio first powers up.
//  228  *
//  229  * @param       none
//  230  *
//  231  * @return      none
//  232  **************************************************************************************************
//  233  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  234 MAC_INTERNAL_API void macRxRadioPowerUpInit(void)
macRxRadioPowerUpInit:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function macRxRadioPowerUpInit
//  235 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  236   /* set threshold at initial value */
//  237   MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
        MOV     A,#0x5
        MOV     DPTR,#0x6194
        LCALL   ?Subroutine3 & 0xFFFF
//  238 
//  239   /* clear any accidental threshold interrupt that happened as part of power up sequence */
//  240   MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
??CrossCallReturnLabel_4:
        MOV     0xe9,#-0x5
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  241 
//  242   /* enable threshold interrupts */
//  243   MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT();
        MOV     DPTR,#0x61a3
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.2
        LJMP    ?Subroutine21 & 0xFFFF
        CFI EndBlock cfiBlock1
        REQUIRE S1CON
        REQUIRE RFIRQF0
        REQUIRE _A_IEN0
//  244 }
//  245 
//  246 
//  247 /**************************************************************************************************
//  248  * @fn          macRxTxReset
//  249  *
//  250  * @brief       Reset the receive state.
//  251  *
//  252  * @param       none
//  253  *
//  254  * @return      none
//  255  **************************************************************************************************
//  256  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  257 MAC_INTERNAL_API void macRxTxReset(void)
macRxTxReset:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function macRxTxReset
//  258 {
        FUNCALL macRxTxReset, macRxHardDisable
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macRxTxReset, macRxPromiscuousMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  259   /* forces receiver off, cleans up by calling macRxHaltCleanup() and macTxHaltCleanup() */
//  260   macRxHardDisable();
        ; Setup parameters for call to function macRxHardDisable
        LCALL   ??macRxHardDisable?relay
//  261 
//  262   /*
//  263    *   Note : transmit does not require any reset logic
//  264    *          beyond what macRxHardDisable() provides.
//  265    */
//  266 
//  267   /* restore deault filter mode to off */
//  268   macRxFilter = RX_FILTER_OFF;
        CLR     A
        MOV     DPTR,#macRxFilter
        MOVX    @DPTR,A
//  269 
//  270   /* return promiscuous mode to default off state */
//  271   macRxPromiscuousMode(MAC_PROMISCUOUS_MODE_OFF);
        ; Setup parameters for call to function macRxPromiscuousMode
        MOV     R1,A
        LCALL   ??macRxPromiscuousMode?relay
//  272 }
        LJMP    ??Subroutine22_0 & 0xFFFF
        CFI EndBlock cfiBlock2
//  273 
//  274 
//  275 /**************************************************************************************************
//  276  * @fn          macRxHaltCleanup
//  277  *
//  278  * @brief       Cleanup up the receive logic after receiver is forced off.
//  279  *
//  280  * @param       none
//  281  *
//  282  * @return      none
//  283  **************************************************************************************************
//  284  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  285 MAC_INTERNAL_API void macRxHaltCleanup(void)
macRxHaltCleanup:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function macRxHaltCleanup
//  286 {
        FUNCALL macRxHaltCleanup, rxHaltCleanupFinalStep
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  287   rxResetFlag = 1;
        MOV     A,#0x1
        MOV     DPTR,#rxResetFlag
        MOVX    @DPTR,A
//  288   if (!rxIsrActiveFlag)
        MOV     DPTR,#rxIsrActiveFlag
        MOVX    A,@DPTR
        JNZ     ??CrossCallReturnLabel_34
//  289   {
//  290     rxHaltCleanupFinalStep();
        ; Setup parameters for call to function rxHaltCleanupFinalStep
        LCALL   ?Subroutine15 & 0xFFFF
//  291     rxResetFlag = 0;
//  292   }
//  293 }
??CrossCallReturnLabel_34:
        LJMP    ??Subroutine22_0 & 0xFFFF
        CFI EndBlock cfiBlock3
//  294 
//  295 
//  296 /*=================================================================================================
//  297  * @fn          rxHaltCleanupFinalStep
//  298  *
//  299  * @brief       Required cleanup if receiver is halted in the middle of a receive.
//  300  *
//  301  * @param       none
//  302  *
//  303  * @return      none
//  304  *=================================================================================================
//  305  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  306 static void rxHaltCleanupFinalStep(void)
rxHaltCleanupFinalStep:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function rxHaltCleanupFinalStep
//  307 {
        FUNCALL rxHaltCleanupFinalStep, macDataRxMemFree
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxHaltCleanupFinalStep, rxPostRxUpdates
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  308   /* cancel any upcoming ACK transmit complete callback */
//  309   MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
        MOV     DPTR,#0x61a4
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
        MOVX    @DPTR,A
//  310 
//  311   /* set start of frame threshold */
//  312   MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
        MOV     A,#0x5
        MOV     DPTR,#0x6194
        MOVX    @DPTR,A
//  313 
//  314   /* flush the receive FIFO */
//  315   MAC_RADIO_FLUSH_RX_FIFO();
        MOV     0xe1,#-0x13
        MOV     0xe1,#-0x13
//  316 
//  317   /* clear any receive interrupt that happened to squeak through */
//  318   MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        CLR     0xa8.7
        MOV     0x9b,#0x0
        MOV     0xe9,#-0x5
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  319 
//  320   /* if data buffer has been allocated, free it */
//  321   if (pRxBuf != NULL)
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        JNZ     ??rxHaltCleanupFinalStep_0
        INC     DPTR
        MOVX    A,@DPTR
??rxHaltCleanupFinalStep_0:
        JZ      ??rxHaltCleanupFinalStep_1
//  322   {
//  323     MEM_FREE((uint8 **)&pRxBuf);
        ; Setup parameters for call to function macDataRxMemFree
        MOV     R2,#(pRxBuf & 0xff)
        MOV     R3,#((pRxBuf >> 8) & 0xff)
        LCALL   ??macDataRxMemFree?relay
//  324   }
//  325   pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
??rxHaltCleanupFinalStep_1:
        MOV     DPTR,#pRxBuf
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine2 & 0xFFFF
//  326 
//  327   pFuncRxState = &rxStartIsr;
//  328 
//  329   /* if receive was active, perform the post receive updates */
//  330   if (macRxActive || macRxOutgoingAckFlag)
??CrossCallReturnLabel_3:
        MOV     DPTR,#macRxActive
        MOVX    A,@DPTR
        JNZ     ??rxHaltCleanupFinalStep_2
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    A,@DPTR
        JZ      ??rxHaltCleanupFinalStep_3
//  331   {
//  332     macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
??rxHaltCleanupFinalStep_2:
        CLR     A
        MOV     DPTR,#macRxActive
        MOVX    @DPTR,A
//  333     macRxOutgoingAckFlag = 0;
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    @DPTR,A
//  334 
//  335     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        LCALL   ??rxPostRxUpdates?relay
//  336   }
//  337 }
??rxHaltCleanupFinalStep_3:
        SJMP    ??Subroutine22_0
        CFI EndBlock cfiBlock4
        REQUIRE S1CON
        REQUIRE RFST
        REQUIRE RFIRQF0
        REQUIRE _A_IEN0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond6) CFA_SP SP+-5
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_36:
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_3
        CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond9) CFA_SP SP+-5
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_0
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_1
        CFI (cfiCond11) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond11) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond11) CFA_SP SP+-5
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#pFuncRxState
        MOV     A,#(??rxStartIsr?relay & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((??rxStartIsr?relay >> 8) & 0xff)
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//  338 
//  339 
//  340 /**************************************************************************************************
//  341  * @fn          macRxThresholdIsr
//  342  *
//  343  * @brief       Interrupt service routine called when bytes in FIFO reach threshold value.
//  344  *              It implements a state machine for receiving a packet.
//  345  *
//  346  * @param       none
//  347  *
//  348  * @return      none
//  349  **************************************************************************************************
//  350  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  351 MAC_INTERNAL_API void macRxThresholdIsr(void)
macRxThresholdIsr:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function macRxThresholdIsr
//  352 {
        FUNCALL macRxThresholdIsr, rxHaltCleanupFinalStep
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  353   /* if currently reseting, do not execute receive ISR logic */
//  354   if (rxResetFlag)
        MOV     DPTR,#rxResetFlag
        MOVX    A,@DPTR
        JNZ     ??CrossCallReturnLabel_35
//  355   {
//  356     return;
//  357   }
//  358 
//  359   /*
//  360    *  Call the function that handles the current receive state.
//  361    *  A flag is set for the duration of the call to indicate
//  362    *  the ISR is executing.  This is necessary for the reset
//  363    *  logic so it does not perform a reset in the middle of
//  364    *  executing the ISR.
//  365    */
//  366   rxIsrActiveFlag = 1;
        MOV     A,#0x1
        MOV     DPTR,#rxIsrActiveFlag
        MOVX    @DPTR,A
//  367   (*pFuncRxState)();
        ; Setup parameters for indirect call
        MOV     DPTR,#pFuncRxState
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL   ?CALL_IND
//  368   rxIsrActiveFlag = 0;
        CLR     A
        MOV     DPTR,#rxIsrActiveFlag
        MOVX    @DPTR,A
//  369 
//  370   /* if a reset occurred during the ISR, peform cleanup here */
//  371   if (rxResetFlag)
        MOV     DPTR,#rxResetFlag
        MOVX    A,@DPTR
        JZ      ??CrossCallReturnLabel_35
//  372   {
//  373     rxHaltCleanupFinalStep();
        ; Setup parameters for call to function rxHaltCleanupFinalStep
        LCALL   ?Subroutine15 & 0xFFFF
//  374     rxResetFlag = 0;
//  375   }
??CrossCallReturnLabel_35:
        SJMP    ??Subroutine22_0
        CFI EndBlock cfiBlock13
//  376 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock14
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine22_0:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond17) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond17) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond17) CFA_SP SP+-5
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        LCALL   ??rxHaltCleanupFinalStep?relay
        CLR     A
        MOV     DPTR,#rxResetFlag
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
//  377 
//  378 
//  379 /*=================================================================================================
//  380  * @fn          rxStartIsr
//  381  *
//  382  * @brief       First ISR state for receiving a packet - compute packet length, allocate
//  383  *              buffer, initialize buffer.  Acknowledgements are handled immediately without
//  384  *              allocating a buffer.
//  385  *
//  386  * @param       none
//  387  *
//  388  * @return      none
//  389  *=================================================================================================
//  390  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  391 static void rxStartIsr(void)
rxStartIsr:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function rxStartIsr
//  392 {
        FUNCALL rxStartIsr, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, rxPostRxUpdates
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macCspForceTxDoneIfPending
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, rxDone
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macRadioComputeLQI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macTxAckReceivedCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macTxAckNotReceivedCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, rxDone
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macTxAckNotReceivedCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macDataRxMemAlloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, rxDiscardFrame
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macRxCheckMACPendingCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, MAC_SrcMatchCheckAllPending
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macRxCheckPendingCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macMcuOverflowCapture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macMcuTimerCapture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, rxPrepPayload
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  393   uint8  addrLen;
//  394   uint8  ackWithPending;
//  395   uint8  dstAddrMode;
//  396   uint8  srcAddrMode;
//  397 
//  398   MAC_ASSERT(!macRxActive); /* receive on top of receive */
        MOV     DPTR,#macRxActive
        MOVX    A,@DPTR
        JZ      ??rxStartIsr_0
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
//  399 
//  400   /* indicate rx is active */
//  401   macRxActive = MAC_RX_ACTIVE_STARTED;
??rxStartIsr_0:
        MOV     A,#-0x7f
        MOV     DPTR,#macRxActive
        MOVX    @DPTR,A
//  402 
//  403   /*
//  404    *  For bullet proof functionality, need to see if the receiver was just turned off.
//  405    *  The logic to request turning off the receiver, disables interrupts and then checks
//  406    *  the value of macRxActive.  If it is TRUE, the receiver will not be turned off.
//  407    *
//  408    *  There is a small hole though.  It's possible to attempt turning off the receiver
//  409    *  in the window from when the receive interrupt fires and the point where macRxActive
//  410    *  is set to TRUE.  To plug this hole, the on/off status must be tested *after*
//  411    *  macRxActive has been set.  If the receiver is off at this point, there is nothing
//  412    *  in the RX fifo and the receive is simply aborted.
//  413    *
//  414    *  Also, there are some considerations in case a hard disable just happened.  Usually,
//  415    *  the receiver will just be off at this point after a hard disable.  The check described
//  416    *  above will account for this case too.  However, if a hard disable were immediately
//  417    *  followed by an enable, the receiver would be on.  To catch this case, the receive
//  418    *  FIFO is also tested to see if it is empty.  Recovery is identical to the other cases.
//  419    */
//  420   if (!macRxOnFlag || MAC_RADIO_RX_FIFO_IS_EMPTY())
        MOV     DPTR,#macRxOnFlag
        MOVX    A,@DPTR
        JZ      ??rxStartIsr_1
        MOV     DPTR,#0x6193
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JC      ??rxStartIsr_2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??rxStartIsr_2
//  421   {
//  422     /* reset active flag */
//  423     macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
??rxStartIsr_1:
        CLR     A
        MOV     DPTR,#macRxActive
        MOVX    @DPTR,A
//  424 
//  425     /*
//  426      *  To be absolutely bulletproof, must make sure no transmit queue'ed up during
//  427      *  the tiny, tiny window when macRxActive was not zero.
//  428      */
//  429     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        LCALL   ??rxPostRxUpdates?relay
//  430 
//  431     /* return immediately from here */
//  432     return;
        LJMP    ??rxStartIsr_3 & 0xFFFF
//  433   }
//  434 
//  435   /*
//  436    *  If interrupts are held off for too long it's possible the previous "transmit done"
//  437    *  callback is pending.  If this is the case, it needs to be completed before
//  438    *  continuing with the receive logic.
//  439    */
//  440   MAC_RADIO_FORCE_TX_DONE_IF_PENDING();
??rxStartIsr_2:
        ; Setup parameters for call to function macCspForceTxDoneIfPending
        LCALL   ??macCspForceTxDoneIfPending?relay
//  441 
//  442   /*
//  443    *  It's possible receive logic is still waiting for confirmation of an ACK that went out
//  444    *  for the previous receive.  This is OK but the callback needs to be canceled at this point.
//  445    *  That callback execute receive cleanup logic that will run at the completion
//  446    *  of *this* receive.  Also, it is important the flag for the outgoing ACK to be cleared.
//  447    */
//  448   MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
        LCALL   ?Subroutine13 & 0xFFFF
//  449   macRxOutgoingAckFlag = 0;
//  450 
//  451   /*
//  452    *  Make a module-local copy of macRxFilter.  This prevents the selected
//  453    *  filter from changing in the middle of a receive.
//  454    */
//  455   rxFilter = macRxFilter;
??CrossCallReturnLabel_30:
        MOV     DPTR,#macRxFilter
        MOVX    A,@DPTR
        MOV     DPTR,#rxFilter
        MOVX    @DPTR,A
//  456 
//  457   /*-------------------------------------------------------------------------------
//  458    *  Read initial frame information from FIFO.
//  459    *
//  460    *   This code is not triggered until the following are in the RX FIFO:
//  461    *     frame length          - one byte containing length of MAC frame (excludes this field)
//  462    *     frame control field   - two bytes defining frame type, addressing fields, control flags
//  463    *     sequence number       - one byte unique sequence identifier
//  464    *     additional two bytes  - these bytes are available in case the received frame is an ACK,
//  465    *                             if so, the frame can be verified and responded to immediately,
//  466    *                             if not an ACK, these bytes will be processed normally
//  467    */
//  468 
//  469   /* read frame length, frame control field, and sequence number from FIFO */
//  470   MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV     R1,#0x4
        MOV     R2,#(rxBuf & 0xff)
        MOV     R3,#((rxBuf >> 8) & 0xff)
        LCALL   ??macMemReadRxFifo?relay
//  471 
//  472   /* bytes to read from FIFO equals frame length minus length of MHR fields just read from FIFO */
//  473   rxUnreadLen = (rxBuf[0] & PHY_PACKET_SIZE_MASK) - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN;
        MOV     DPTR,#rxBuf
        MOVX    A,@DPTR
        ANL     A,#0x7f
        ADD     A,#-0x3
        MOV     DPTR,#rxUnreadLen
        MOVX    @DPTR,A
//  474 
//  475   /*
//  476    *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
//  477    *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
//  478    *  the entire receive buffer is flushed.
//  479    *
//  480    *  In the case that this workaround is not needed, an assert is used to make sure the
//  481    *  receive length field is not corrupted.  This is important because a corrupted receive
//  482    *  length field is utterly fatal and, if not caught here, extremely hard to track down.
//  483    */
//  484   if (macChipVersion == REV_A)
        MOV     DPTR,#macChipVersion
        MOVX    A,@DPTR
        MOV     DPTR,#rxUnreadLen
        JNZ     ??rxStartIsr_4
//  485   {
//  486     if ((rxUnreadLen > (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN)) ||
//  487         (MAC_FRAME_TYPE(&rxBuf[1]) > MAC_FRAME_TYPE_MAX_VALID))
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x7d
        JNC     ??rxStartIsr_5
        MOV     DPTR,#(rxBuf + 1)
        MOVX    A,@DPTR
        ANL     A,#0x7
        CLR     C
        SUBB    A,#0x4
        JC      ??rxStartIsr_6
//  488     {
//  489       MAC_RADIO_FLUSH_RX_FIFO();
??rxStartIsr_5:
        MOV     0xe1,#-0x13
        MOV     0xe1,#-0x13
//  490       rxDone();
        ; Setup parameters for call to function rxDone
??rxStartIsr_7:
        LCALL   ??rxDone?relay
//  491       return;
        LJMP    ??rxStartIsr_3 & 0xFFFF
//  492     }
//  493   }
//  494   else
//  495   {
//  496     /* radio supplied a corrupted receive buffer length */
//  497     MAC_ASSERT(rxUnreadLen <= (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN));
??rxStartIsr_4:
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x7d
        JC      ??rxStartIsr_6
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
//  498   }
//  499 
//  500 
//  501 
//  502   /*-------------------------------------------------------------------------------
//  503    *  Process ACKs.
//  504    *
//  505    *  If this frame is an ACK, process it immediately and exit from here.
//  506    *  If this frame is not an ACK and transmit is listening for an ACK, let
//  507    *  the transmit logic know an non-ACK was received so transmit can complete.
//  508    *
//  509    *  In promiscuous mode ACKs are treated like any other frame.
//  510    */
//  511   if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_ACK) && (rxPromiscuousMode == PROMISCUOUS_MODE_OFF))
??rxStartIsr_6:
        MOV     DPTR,#(rxBuf + 1)
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??rxStartIsr_8 & 0xFFFF
        MOV     DPTR,#rxPromiscuousMode
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??rxStartIsr_8 & 0xFFFF
//  512   {
//  513     halIntState_t  s;
//  514     uint8 fcsBuf[MAC_FCF_FIELD_LEN];
//  515     /*
//  516      *  There are guaranteed to be two unread bytes in the FIFO.  By defintion, for ACK frames
//  517      *  these two bytes will be the FCS.
//  518      */
//  519 
//  520     /* read FCS from FIFO (threshold set so bytes are guaranteed to be there) */
//  521     MAC_RADIO_READ_RX_FIFO(fcsBuf, MAC_FCS_FIELD_LEN);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV     R1,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??macMemReadRxFifo?relay
//  522 
//  523     /*
//  524      *  This critical section ensures that the ACK timeout won't be triggered in the
//  525      *  millde of receiving the ACK frame.
//  526      */
//  527     HAL_ENTER_CRITICAL_SECTION(s);
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R6,A
        CLR     0xa8.7
//  528 
//  529     /* see if transmit is listening for an ACK */
//  530     if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
        MOV     DPTR,#macTxActive
        MOVX    A,@DPTR
        XRL     A,#0x86
        JNZ     ??rxStartIsr_9
//  531     {
//  532       MAC_ASSERT(pMacDataTx != NULL); /* transmit buffer must be present */
        MOV     DPTR,#pMacDataTx
        MOVX    A,@DPTR
        JNZ     ??rxStartIsr_10
        INC     DPTR
        MOVX    A,@DPTR
??rxStartIsr_10:
        JNZ     ??rxStartIsr_11
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
//  533 
//  534       /* record link quality metrics for the receive ACK */
//  535       {
//  536         int8 rssiDbm;
//  537         uint8 corr;
//  538 
//  539         rssiDbm = PROPRIETARY_FCS_RSSI(fcsBuf) + MAC_RADIO_RSSI_OFFSET;
??rxStartIsr_11:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#-0x49
        MOV     R7,A
//  540         MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
//  541         corr = PROPRIETARY_FCS_CORRELATION_VALUE(fcsBuf);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x7f
        MOV     ?V0 + 0,A
//  542 
//  543         pMacDataTx->internal.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
        ; Setup parameters for call to function macRadioComputeLQI
        MOV     R2,A
        MOV     A,R7
        MOV     R1,A
        LCALL   ??macRadioComputeLQI?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#pMacDataTx
        MOVX    A,@DPTR
        ADD     A,#0x14
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_20:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  544         pMacDataTx->internal.correlation = corr;
        MOV     DPTR,#pMacDataTx
        MOVX    A,@DPTR
        ADD     A,#0x15
        LCALL   ?Subroutine10 & 0xFFFF
//  545         pMacDataTx->internal.rssi= rssiDbm;
??CrossCallReturnLabel_18:
        MOV     DPTR,#pMacDataTx
        MOVX    A,@DPTR
        ADD     A,#0x16
        LCALL   ?Subroutine11 & 0xFFFF
//  546       }
??CrossCallReturnLabel_21:
        MOV     A,R7
        MOVX    @DPTR,A
//  547 
//  548       /*
//  549        *  It's okay if the ACK timeout is triggered here. The callbacks for ACK received
//  550        *  or ACK not received will check "macTxActive" flag before taking any actions.
//  551        */
//  552       HAL_EXIT_CRITICAL_SECTION(s);
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  553 
//  554       /*
//  555        *  An ACK was received so transmit logic needs to know.  If the FCS failed,
//  556        *  the transmit logic still needs to know.  In that case, treat the frame
//  557        *  as a non-ACK to complete the active transmit.
//  558        */
//  559       if (PROPRIETARY_FCS_CRC_OK(fcsBuf))
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??rxStartIsr_12
//  560       {
//  561         /* call transmit logic to indicate ACK was received */
//  562         macTxAckReceivedCallback(MAC_SEQ_NUMBER(&rxBuf[1]), MAC_FRAME_PENDING(&rxBuf[1]));
        ; Setup parameters for call to function macTxAckReceivedCallback
        MOV     DPTR,#(rxBuf + 1)
        MOVX    A,@DPTR
        ANL     A,#0x10
        MOV     R2,A
        MOV     DPTR,#(rxBuf + 3)
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??macTxAckReceivedCallback?relay
        SJMP    ??rxStartIsr_13
//  563       }
//  564       else
//  565       {
//  566         macTxAckNotReceivedCallback();
??rxStartIsr_12:
        ; Setup parameters for call to function macTxAckNotReceivedCallback
        LCALL   ??macTxAckNotReceivedCallback?relay
        SJMP    ??rxStartIsr_13
//  567       }
//  568     }
//  569     else
//  570     {
//  571       HAL_EXIT_CRITICAL_SECTION(s);
??rxStartIsr_9:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  572     }
//  573 
//  574     /* receive is done, exit from here */
//  575     rxDone();
??rxStartIsr_13:
        ; Setup parameters for call to function rxDone
        LJMP    ??rxStartIsr_7 & 0xFFFF
//  576     return;
//  577   }
//  578   else if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
??rxStartIsr_8:
        MOV     DPTR,#macTxActive
        MOVX    A,@DPTR
        XRL     A,#0x86
        JNZ     ??rxStartIsr_14
//  579   {
//  580     macTxAckNotReceivedCallback();
        ; Setup parameters for call to function macTxAckNotReceivedCallback
        LCALL   ??macTxAckNotReceivedCallback?relay
//  581   }
//  582 
//  583   /*-------------------------------------------------------------------------------
//  584    *  Apply filtering.
//  585    *
//  586    *  For efficiency, see if filtering is even 'on' before processing.  Also test
//  587    *  to make sure promiscuous mode is disabled.  If promiscuous mode is enabled,
//  588    *  do not apply filtering.
//  589    */
//  590   if ((rxFilter != RX_FILTER_OFF) && !rxPromiscuousMode)
??rxStartIsr_14:
        MOV     DPTR,#rxFilter
        MOVX    A,@DPTR
        JZ      ??rxStartIsr_15
        MOV     DPTR,#rxPromiscuousMode
        MOVX    A,@DPTR
        JNZ     ??rxStartIsr_15
//  591   {
//  592     if (/* filter all frames */
//  593          (rxFilter == RX_FILTER_ALL) ||
//  594 
//  595          /* filter non-beacon frames */
//  596          ((rxFilter == RX_FILTER_NON_BEACON_FRAMES) &&
//  597           (MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_BEACON)) ||
//  598 
//  599          /* filter non-command frames */
//  600          ((rxFilter == RX_FILTER_NON_COMMAND_FRAMES) &&
//  601           ((MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_COMMAND))))
        MOV     DPTR,#rxFilter
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     $+5
        LJMP    ??rxStartIsr_16 & 0xFFFF
        MOV     DPTR,#(rxBuf + 1)
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R2,A
        MOV     DPTR,#rxFilter
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??rxStartIsr_17 & 0xFFFF
        MOV     A,R2
        JZ      $+5
        LJMP    ??rxStartIsr_16 & 0xFFFF
//  602     {
//  603       /* discard rest of frame */
//  604       rxDiscardFrame();
//  605       return;
//  606     }
//  607   }
//  608 
//  609   /*-------------------------------------------------------------------------------
//  610    *  Compute length of addressing fields.  Compute payload length.
//  611    */
//  612 
//  613   /* decode addressing modes */
//  614   dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
??rxStartIsr_15:
        MOV     DPTR,#(rxBuf + 2)
        MOVX    A,@DPTR
        MOV     R2,A
        RRC     A
        RRC     A
        ANL     A,#0x3f
        ANL     A,#0x3
        MOV     ?V0 + 0,A
//  615   srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
        MOV     A,R2
        SWAP    A
        RRC     A
        RRC     A
        ANL     A,#0x3
        MOV     ?V0 + 1,A
//  616 
//  617   /*
//  618   *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
//  619    *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
//  620    *  the entire receive buffer is flushed.
//  621    */
//  622   if (macChipVersion == REV_A)
        MOV     DPTR,#macChipVersion
        MOVX    A,@DPTR
        JNZ     ??rxStartIsr_18
//  623   {
//  624     if ((srcAddrMode == ADDR_MODE_RESERVERED) || (dstAddrMode == ADDR_MODE_RESERVERED))
        MOV     A,#0x1
        XRL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??rxStartIsr_5 & 0xFFFF
        MOV     A,#0x1
        XRL     A,?V0 + 0
        JNZ     $+5
        LJMP    ??rxStartIsr_5 & 0xFFFF
//  625     {
//  626       MAC_RADIO_FLUSH_RX_FIFO();
//  627       rxDone();
//  628       return;
//  629     }
//  630   }
//  631 
//  632   /*
//  633    *  Compute the addressing field length.  A lookup table based on addressing
//  634    *  mode is used for efficiency.  If the source address is present and the
//  635    *  frame is intra-PAN, the PAN Id is not repeated.  In this case, the address
//  636    *  length is adjusted to match the smaller length.
//  637    */
//  638   addrLen = macRxAddrLen[dstAddrMode] + macRxAddrLen[srcAddrMode];
??rxStartIsr_18:
        MOV     ?V0 + 2,?V0 + 1
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_32:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     ?V0 + 2,?V0 + 0
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     R2,A
        POP     A
        CFI CFA_SP SP+0
        ADD     A,R2
        MOV     R6,A
//  639   if ((srcAddrMode != SADDR_MODE_NONE) && MAC_INTRA_PAN(&rxBuf[1]))
        MOV     A,?V0 + 1
        JZ      ??rxStartIsr_19
        MOV     DPTR,#(rxBuf + 1)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??rxStartIsr_19
//  640   {
//  641     addrLen -= MAC_PAN_ID_FIELD_LEN;
        DEC     R6
        DEC     R6
//  642   }
//  643 
//  644   /*
//  645    *  If there are not enough unread bytes to include the computed address
//  646    *  plus FCS field, the frame is corrupted and must be discarded.
//  647    */
//  648   if ((addrLen + MAC_FCS_FIELD_LEN) > rxUnreadLen)
??rxStartIsr_19:
        MOV     DPTR,#rxUnreadLen
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     ?V0 + 2,R6
        MOV     A,#0x2
        ADD     A,?V0 + 2
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R2
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        CLR     C
        XRL     A,PSW
        RLC     A
        JC      ??rxStartIsr_16
//  649   {
//  650     /* discard frame and exit */
//  651     rxDiscardFrame();
//  652     return;
//  653   }
//  654 
//  655   /* payload length is equal to unread bytes minus address length, minus the FCS */
//  656   rxPayloadLen = rxUnreadLen - addrLen - MAC_FCS_FIELD_LEN;
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R6
        ADD     A,#-0x2
        MOV     DPTR,#rxPayloadLen
        MOVX    @DPTR,A
//  657 
//  658   /*-------------------------------------------------------------------------------
//  659    *  Allocate memory for the incoming frame.
//  660    */
//  661   pRxBuf = (macRx_t *) MEM_ALLOC(sizeof(macRx_t) + rxPayloadLen);
        ; Setup parameters for call to function macDataRxMemAlloc
        MOV     R0,A
        MOV     A,#0x32
        ADD     A,R0
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??macDataRxMemAlloc?relay
        MOV     DPTR,#pRxBuf
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ??Subroutine23_0 & 0xFFFF
//  662   if (pRxBuf == NULL)
??CrossCallReturnLabel_50:
        JNZ     ??rxStartIsr_20
        INC     DPTR
        MOVX    A,@DPTR
??rxStartIsr_20:
        JNZ     ??rxStartIsr_21
//  663   {
//  664     /* Cancel the outgoing TX ACK */
//  665     MAC_RADIO_CANCEL_TX_ACK();
        MOV     0xe1,#-0x18
        SJMP    ??rxStartIsr_16
//  666 
//  667     /* buffer allocation failed, discard the frame and exit*/
//  668     rxDiscardFrame();
//  669     return;
//  670   }
??rxStartIsr_17:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      $+5
        LJMP    ??rxStartIsr_15 & 0xFFFF
        MOV     A,#0x3
        XRL     A,R2
        JNZ     $+5
        LJMP    ??rxStartIsr_15 & 0xFFFF
??rxStartIsr_16:
        ; Setup parameters for call to function rxDiscardFrame
        LCALL   ??rxDiscardFrame?relay
        LJMP    ??rxStartIsr_3 & 0xFFFF
//  671 
//  672   /*-------------------------------------------------------------------------------
//  673    *  Set up to process ACK request.  Do not ACK if in promiscuous mode.
//  674    */
//  675   ackWithPending = 0;
??rxStartIsr_21:
        MOV     R7,#0x0
//  676   if (!rxPromiscuousMode)
        MOV     DPTR,#(rxBuf + 1)
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#rxPromiscuousMode
        MOVX    A,@DPTR
        JNZ     ??rxStartIsr_22
//  677   {
//  678     macRxOutgoingAckFlag = MAC_ACK_REQUEST(&rxBuf[1]);
        MOV     A,#0x20
        ANL     A,R2
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    @DPTR,A
//  679   }
//  680 
//  681   /*-------------------------------------------------------------------------------
//  682    *  Process any ACK request.
//  683    */
//  684   if (macRxOutgoingAckFlag)
??rxStartIsr_22:
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    A,@DPTR
        JZ      ??rxStartIsr_23
//  685   {
//  686     halIntState_t  s;
//  687 
//  688     /*
//  689      *  This critical section ensures that the callback ISR is initiated within time
//  690      *  to guarantee correlation with the strobe.
//  691      */
//  692     HAL_ENTER_CRITICAL_SECTION(s);
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     ?V0 + 2,A
        CLR     0xa8.7
//  693 
//  694     /* Do not ack data packet with pending more data */
//  695     if( MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_COMMAND )
        MOV     A,#0x7
        ANL     A,R2
        XRL     A,#0x3
        JNZ     ??rxStartIsr_24
//  696     {
//  697       if( macRxCheckMACPendingCallback())
        ; Setup parameters for call to function macRxCheckMACPendingCallback
        LCALL   ??macRxCheckMACPendingCallback?relay
        MOV     A,R1
        JZ      ??rxStartIsr_25
//  698       {
//  699         /* Check is any mac data pending for end devices */
//  700         ackWithPending = MAC_RX_FLAG_ACK_PENDING;
??rxStartIsr_26:
        MOV     R7,#0x4
//  701       }
//  702       else
//  703       {
//  704         if( macSrcMatchIsEnabled )
//  705         {
//  706           /* When autopend is enabled, check if allpending is set to true */
//  707           if( MAC_SrcMatchCheckAllPending() == MAC_AUTOACK_PENDING_ALL_ON )
//  708           {
//  709             ackWithPending = MAC_RX_FLAG_ACK_PENDING;
//  710           }
//  711         }
//  712         else
//  713         {
//  714           /* When autopend is disabled, check the application pending callback */
//  715           if( macRxCheckPendingCallback() )
//  716           {
//  717             ackWithPending = MAC_RX_FLAG_ACK_PENDING;
//  718           }
//  719         }
//  720       }
//  721     }
//  722 
//  723     if( ackWithPending == MAC_RX_FLAG_ACK_PENDING )
//  724     {
//  725       MAC_RADIO_TX_ACK_PEND();
        MOV     DPTR,#0x618a
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.2
        SJMP    ??rxStartIsr_27
//  726     }
??rxStartIsr_25:
        MOV     DPTR,#macSrcMatchIsEnabled
        MOVX    A,@DPTR
        JZ      ??rxStartIsr_28
        ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
        LCALL   ??MAC_SrcMatchCheckAllPending?relay
        MOV     A,R1
        XRL     A,#0xfe
        JNZ     ??rxStartIsr_24
        SJMP    ??rxStartIsr_26
??rxStartIsr_28:
        ; Setup parameters for call to function macRxCheckPendingCallback
        LCALL   ??macRxCheckPendingCallback?relay
        MOV     A,R1
        JNZ     ??rxStartIsr_26
//  727     else
//  728     {
//  729       MAC_RADIO_TX_ACK();
??rxStartIsr_24:
        MOV     DPTR,#0x618a
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.2
//  730     }
??rxStartIsr_27:
        LCALL   ?Subroutine3 & 0xFFFF
//  731 
//  732 
//  733     /* request a callback to macRxAckTxDoneCallback() when the ACK transmit has finished */
//  734     MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK();
??CrossCallReturnLabel_5:
        MOV     0x91,#-0x2
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
        MOV     DPTR,#0x61a4
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
//  735     HAL_EXIT_CRITICAL_SECTION(s);
        MOV     A,?V0 + 2
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  736   }
//  737 
//  738  /*-------------------------------------------------------------------------------
//  739   *  Populate the receive buffer going up to high-level.
//  740   */
//  741 
//  742   /* configure the payload buffer */
//  743   pRxBuf->msdu.p = (uint8 *) (pRxBuf + 1);
??rxStartIsr_23:
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        MOVX    @DPTR,A
//  744   pRxBuf->msdu.len = rxPayloadLen;
        MOV     DPTR,#rxPayloadLen
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_28:
        INC     DPTR
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine23_0 & 0xFFFF
//  745 
//  746   /* set internal values */
//  747   pRxBuf->mac.srcAddr.addrMode  = srcAddrMode;
??CrossCallReturnLabel_51:
        ADD     A,#0x1a
        LCALL   ?Subroutine0 & 0xFFFF
//  748   pRxBuf->mac.dstAddr.addrMode  = dstAddrMode;
??CrossCallReturnLabel_48:
        ADD     A,#0x23
        LCALL   ?Subroutine10 & 0xFFFF
//  749   pRxBuf->mac.timestamp         = MAC_RADIO_BACKOFF_CAPTURE();
??CrossCallReturnLabel_19:
        ; Setup parameters for call to function macMcuOverflowCapture
        LCALL   ??macMcuOverflowCapture?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x24
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  750   pRxBuf->mac.timestamp2        = MAC_RADIO_TIMER_CAPTURE();
        ; Setup parameters for call to function macMcuTimerCapture
        LCALL   ??macMcuTimerCapture?relay
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x28
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  751   pRxBuf->internal.frameType    = MAC_FRAME_TYPE(&rxBuf[1]);
        MOV     DPTR,#(rxBuf + 1)
        MOVX    A,@DPTR
        ANL     A,#0x7
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_16:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  752   pRxBuf->mac.dsn               = MAC_SEQ_NUMBER(&rxBuf[1]);
        MOV     DPTR,#(rxBuf + 3)
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x31
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_24:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  753   pRxBuf->internal.flags        = INTERNAL_FCF_FLAGS(&rxBuf[1]) | ackWithPending;
        MOV     DPTR,#(rxBuf + 1)
        MOVX    A,@DPTR
        ANL     A,#0x78
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#(rxBuf + 2)
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        ANL     A,#0x3
        MOV     R2,A
        POP     A
        CFI CFA_SP SP+0
        ORL     A,R2
        ORL     A,R7
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_17:
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine23_0 & 0xFFFF
//  754   pRxBuf->sec.securityLevel     = MAC_SEC_LEVEL_NONE;
??CrossCallReturnLabel_52:
        ADD     A,#0xf
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_25:
        CLR     A
        MOVX    @DPTR,A
//  755 
//  756   /*-------------------------------------------------------------------------------
//  757    *  If the processing the addressing fields does not require more bytes from
//  758    *  the FIFO go directly address processing function.  Otherwise, configure
//  759    *  interrupt to jump there once bytes are received.
//  760    */
//  761   if (addrLen == 0)
        MOV     A,R6
        JNZ     ??rxStartIsr_29
//  762   {
//  763     /* no addressing fields to read, prepare for payload interrupts */
//  764     pFuncRxState = &rxPayloadIsr;
        LCALL   ?Subroutine4 & 0xFFFF
//  765     rxPrepPayload();
//  766   }
??CrossCallReturnLabel_6:
        SJMP    ??rxStartIsr_3
//  767   else
//  768   {
//  769     /* need to read and process addressing fields, prepare for address interrupt */
//  770     rxNextLen = addrLen;
??rxStartIsr_29:
        MOV     DPTR,#rxNextLen
        MOVX    @DPTR,A
//  771     MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        DEC     A
        MOV     DPTR,#0x6194
        MOVX    @DPTR,A
//  772     pFuncRxState = &rxAddrIsr;
        MOV     DPTR,#pFuncRxState
        MOV     A,#(??rxAddrIsr?relay & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((??rxAddrIsr?relay >> 8) & 0xff)
        MOVX    @DPTR,A
??rxStartIsr_3:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock19
        REQUIRE RFIRQF1
        REQUIRE S1CON
        REQUIRE RFST
        REQUIRE _A_IEN0
//  773   }
//  774 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+-1
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOV     A,?V0 + 2
        ADD     A,#(macRxAddrLen & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((macRxAddrLen >> 8) & 0xff)
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+-1
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_43:
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_17
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+-1
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_14
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_15
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        MOV     DPTR,#pRxBuf
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_46:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOVX    @DPTR,A
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        CLR     0xa8.7
        MOV     0x9b,#0x0
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36
//  775 
//  776 
//  777 /*=================================================================================================
//  778  * @fn          rxAddrIsr
//  779  *
//  780  * @brief       Receive ISR state for decoding address.  Reads and stores the address information
//  781  *              from the incoming packet.
//  782  *
//  783  * @param       none
//  784  *
//  785  * @return      none
//  786  *=================================================================================================
//  787  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  788 static void rxAddrIsr(void)
rxAddrIsr:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI Function rxAddrIsr
//  789 {
        FUNCALL rxAddrIsr, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxAddrIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxAddrIsr, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxAddrIsr, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxAddrIsr, rxPrepPayload
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
//  790   uint8 buf[MAX_ADDR_FIELDS_LEN];
//  791   uint8 dstAddrMode;
//  792   uint8 srcAddrMode;
//  793   uint8  * p;
//  794 
//  795   MAC_ASSERT(rxNextLen != 0); /* logic assumes at least one address byte in buffer */
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        JNZ     ??rxAddrIsr_0
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
//  796 
//  797   /*  read out address fields into local buffer in one shot */
//  798   MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
??rxAddrIsr_0:
        ; Setup parameters for call to function macMemReadRxFifo
        LCALL   ?Subroutine7 & 0xFFFF
//  799 
//  800   /* set pointer to buffer with addressing fields */
//  801   p = buf;
??CrossCallReturnLabel_12:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
//  802 
//  803   /* destination address */
//  804   dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
        MOV     DPTR,#(rxBuf + 2)
        MOVX    A,@DPTR
        RRC     A
        RRC     A
        ANL     A,#0x3f
        ANL     A,#0x3
        MOV     R6,A
//  805   if (dstAddrMode != SADDR_MODE_NONE)
        JZ      ??rxAddrIsr_1
//  806   {
//  807     pRxBuf->mac.srcPanId = pRxBuf->mac.dstPanId = BUILD_UINT16(p[0], p[1]);
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x2c
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R4
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ??Subroutine23_0 & 0xFFFF
//  808     p += MAC_PAN_ID_FIELD_LEN;
//  809     if (dstAddrMode == SADDR_MODE_EXT)
??CrossCallReturnLabel_53:
        ADD     A,#0x1b
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,#0x3
        XRL     A,R6
        JNZ     ??rxAddrIsr_2
//  810     {
//  811       sAddrExtCpy(pRxBuf->mac.dstAddr.addr.extAddr, p);
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??sAddrExtCpy?relay
//  812       p += MAC_EXT_ADDR_FIELD_LEN;
        MOV     A,#0xa
        SJMP    ??rxAddrIsr_3
//  813     }
//  814     else
//  815     {
//  816       pRxBuf->mac.dstAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
??rxAddrIsr_2:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  817       p += MAC_SHORT_ADDR_FIELD_LEN;
        MOV     A,#0x4
??rxAddrIsr_3:
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
//  818     }
//  819   }
//  820 
//  821   /* sources address */
//  822   srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
??rxAddrIsr_1:
        MOV     DPTR,#(rxBuf + 2)
        MOVX    A,@DPTR
        SWAP    A
        RRC     A
        RRC     A
        ANL     A,#0x3
        MOV     R6,A
//  823   if (srcAddrMode != SADDR_MODE_NONE)
        JZ      ??rxAddrIsr_4
//  824   {
//  825     if (!(pRxBuf->internal.flags & MAC_RX_FLAG_INTRA_PAN))
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     C,0xE0 /* A   */.6
        JC      ??rxAddrIsr_5
//  826     {
//  827       pRxBuf->mac.srcPanId = BUILD_UINT16(p[0], p[1]);
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_11:
        MOVX    @DPTR,A
//  828       p += MAC_PAN_ID_FIELD_LEN;
        MOV     A,R4
        ADD     A,#0x2
        INC     R4
        INC     R4
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
//  829     }
//  830     if (srcAddrMode == SADDR_MODE_EXT)
??rxAddrIsr_5:
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x12
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,#0x3
        XRL     A,R6
        JNZ     ??rxAddrIsr_6
//  831     {
//  832       sAddrExtCpy(pRxBuf->mac.srcAddr.addr.extAddr, p);
        ; Setup parameters for call to function sAddrExtCpy
        LCALL   ??sAddrExtCpy?relay
        SJMP    ??rxAddrIsr_4
//  833     }
//  834     else
//  835     {
//  836       pRxBuf->mac.srcAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
??rxAddrIsr_6:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  837     }
//  838   }
//  839 
//  840   /*-------------------------------------------------------------------------------
//  841    *  Prepare for payload interrupts.
//  842    */
//  843   pFuncRxState = &rxPayloadIsr;
??rxAddrIsr_4:
        LCALL   ?Subroutine4 & 0xFFFF
//  844   rxPrepPayload();
//  845 }
??CrossCallReturnLabel_7:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x2a
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOV     DPTR,#pFuncRxState
        MOV     A,#(??rxPayloadIsr?relay & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((??rxPayloadIsr?relay >> 8) & 0xff)
        MOVX    @DPTR,A
        ; Setup parameters for call to function rxPrepPayload
        ; Setup parameters for call to function rxPrepPayload
        LCALL   ??rxPrepPayload?relay
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV     A,?V0 + 1
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker56 Using cfiCommon1
        CFI (cfiPicker56) NoFunction
        CFI (cfiPicker56) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function macRxCompleteCallback
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiPicker56
//  846 
//  847 
//  848 /*=================================================================================================
//  849  * @fn          rxPrepPayload
//  850  *
//  851  * @brief       Common code to prepare for the payload ISR.
//  852  *
//  853  * @param       none
//  854  *
//  855  * @return      none
//  856  *=================================================================================================
//  857  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  858 static void rxPrepPayload(void)
rxPrepPayload:
        CFI Block cfiBlock57 Using cfiCommon0
        CFI Function rxPrepPayload
//  859 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  860   if (rxPayloadLen == 0)
        MOV     DPTR,#rxPayloadLen
        MOVX    A,@DPTR
        JNZ     ??rxPrepPayload_0
//  861   {
//  862     MAC_RADIO_SET_RX_THRESHOLD(MAC_FCS_FIELD_LEN);
        MOV     A,#0x1
        MOV     DPTR,#0x6194
        MOVX    @DPTR,A
//  863     pFuncRxState = &rxFcsIsr;
        MOV     DPTR,#pFuncRxState
        MOV     A,#(??rxFcsIsr?relay & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((??rxFcsIsr?relay >> 8) & 0xff)
        SJMP    ??rxPrepPayload_1
//  864   }
//  865   else
//  866   {
//  867     rxNextLen = MIN(rxPayloadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
??rxPrepPayload_0:
        CLR     C
        SUBB    A,#0x10
        JNC     ??rxPrepPayload_2
        MOVX    A,@DPTR
        SJMP    ??rxPrepPayload_3
??rxPrepPayload_2:
        MOV     A,#0x10
??rxPrepPayload_3:
        MOV     DPTR,#rxNextLen
        MOVX    @DPTR,A
//  868     MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        MOVX    A,@DPTR
        DEC     A
        MOV     DPTR,#0x6194
//  869   }
??rxPrepPayload_1:
        LJMP    ?Subroutine21 & 0xFFFF
        CFI EndBlock cfiBlock57
//  870 }
//  871 
//  872 
//  873 /*=================================================================================================
//  874  * @fn          rxPayloadIsr
//  875  *
//  876  * @brief       Receive ISR state for reading out and storing the packet payload.
//  877  *
//  878  * @param       none
//  879  *
//  880  * @return      none
//  881  *=================================================================================================
//  882  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  883 static void rxPayloadIsr(void)
rxPayloadIsr:
        CFI Block cfiBlock58 Using cfiCommon0
        CFI Function rxPayloadIsr
//  884 {
        FUNCALL rxPayloadIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxPayloadIsr, rxPrepPayload
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  885   MAC_RADIO_READ_RX_FIFO(pRxBuf->msdu.p, rxNextLen);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_29:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??macMemReadRxFifo?relay
//  886   pRxBuf->msdu.p += rxNextLen;
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  887   rxPayloadLen -= rxNextLen;
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#rxPayloadLen
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R2
        MOVX    @DPTR,A
//  888 
//  889   rxPrepPayload();
        ; Setup parameters for call to function rxPrepPayload
        LCALL   ??rxPrepPayload?relay
//  890 }
        LJMP    ??Subroutine22_0 & 0xFFFF
        CFI EndBlock cfiBlock58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond60) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond60) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond60) CFA_SP SP+-5
        CFI Block cfiPicker61 Using cfiCommon1
        CFI (cfiPicker61) NoFunction
        CFI (cfiPicker61) Picker
        MOV     DPTR,#pRxBuf
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_45:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiPicker61

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond62 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_28
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+-1
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_29
        CFI (cfiCond64) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond64) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond64) CFA_SP SP+-5
        CFI Block cfiPicker65 Using cfiCommon1
        CFI (cfiPicker65) NoFunction
        CFI (cfiPicker65) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_47:
        RET
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiPicker65

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond66 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_17
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+-1
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_14
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_15
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_44
        CFI (cfiCond70) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond70) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond70) CFA_SP SP+-5
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_28
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+-1
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_29
        CFI (cfiCond72) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond72) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond72) CFA_SP SP+-5
        CFI Block cfiPicker73 Using cfiCommon1
        CFI (cfiPicker73) NoFunction
        CFI (cfiPicker73) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiPicker73
//  891 
//  892 
//  893 /*=================================================================================================
//  894  * @fn          rxFcsIsr
//  895  *
//  896  * @brief       Receive ISR state for handling the FCS.
//  897  *
//  898  * @param       none
//  899  *
//  900  * @return      none
//  901  *=================================================================================================
//  902  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  903 static void rxFcsIsr(void)
rxFcsIsr:
        CFI Block cfiBlock74 Using cfiCommon0
        CFI Function rxFcsIsr
//  904 {
        FUNCALL rxFcsIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, macRxOffRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, MAC_SrcMatchCheckResult
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, macRadioComputeLQI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, macRxCompleteCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, macDataRxMemFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, rxDone
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  905   uint8 crcOK;
//  906   uint8 ackWithPending = 0;
        MOV     R6,#0x0
//  907 
//  908   /* read FCS, rxBuf is now available storage */
//  909   MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_FCS_FIELD_LEN);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV     R1,#0x2
        MOV     R2,#(rxBuf & 0xff)
        MOV     R3,#((rxBuf >> 8) & 0xff)
        LCALL   ??macMemReadRxFifo?relay
//  910 
//  911   /*
//  912    *  The FCS has actually been replaced within the radio by a proprietary version of the FCS.
//  913    *  This proprietary FCS is two bytes (same length as the real FCS) and contains:
//  914    *    1) the RSSI value
//  915    *    2) the average correlation value (used for LQI)
//  916    *    3) a CRC passed bit
//  917    */
//  918 
//  919   /* save the "CRC-is-OK" status */
//  920   crcOK = PROPRIETARY_FCS_CRC_OK(rxBuf);
        MOV     DPTR,#(rxBuf + 1)
        MOVX    A,@DPTR
        ANL     A,#0x80
        MOV     R7,A
//  921 
//  922   /*
//  923    *  See if the frame should be passed up to high-level MAC.  If the CRC is OK, the
//  924    *  the frame is always passed up.  Frames with a bad CRC are also passed up *if*
//  925    *  a special variant of promiscuous mode is active.
//  926    */
//  927   if (crcOK || (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC))
        JNZ     ??rxFcsIsr_0
        MOV     DPTR,#rxPromiscuousMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??rxFcsIsr_1
//  928   {
//  929     int8 rssiDbm;
//  930     uint8 corr;
//  931 
//  932 #ifdef PACKET_FILTER_STATS
//  933     rxCrcSuccess++;
//  934 #endif /* PACKET_FILTER_STATS */
//  935 
//  936     /*
//  937      *  As power saving optimization, set state variable to indicate physical receive
//  938      *  has completed and then request turning of the receiver.  This means the receiver
//  939      *  can be off (if other conditions permit) during execution of the callback function.
//  940      *
//  941      *  The receiver will be requested to turn off once again at the end of the receive
//  942      *  logic.  There is no harm in doing this.
//  943      */
//  944     macRxActive = MAC_RX_ACTIVE_DONE;
??rxFcsIsr_0:
        MOV     A,#0x2
        MOV     DPTR,#macRxActive
        MOVX    @DPTR,A
//  945     macRxOffRequest();
        ; Setup parameters for call to function macRxOffRequest
        LCALL   ??macRxOffRequest?relay
//  946 
//  947     /* decode RSSI and correlation values */
//  948     rssiDbm = PROPRIETARY_FCS_RSSI(rxBuf) + MAC_RADIO_RSSI_OFFSET;
        MOV     DPTR,#rxBuf
        MOVX    A,@DPTR
        ADD     A,#-0x49
        MOV     ?V0 + 0,A
//  949     MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
//  950     corr = PROPRIETARY_FCS_CORRELATION_VALUE(rxBuf);
        MOV     DPTR,#(rxBuf + 1)
        MOVX    A,@DPTR
        ANL     A,#0x7f
        MOV     ?V0 + 1,A
//  951 
//  952     /* Read the source matching result back */
//  953     if( macSrcMatchIsEnabled && MAC_RADIO_SRC_MATCH_RESULT() )
        MOV     DPTR,#macSrcMatchIsEnabled
        MOVX    A,@DPTR
        JZ      ??rxFcsIsr_2
        ; Setup parameters for call to function MAC_SrcMatchCheckResult
        LCALL   ??MAC_SrcMatchCheckResult?relay
        MOV     A,R1
        JZ      ??rxFcsIsr_2
//  954     {
//  955       /* This result will not overwrite the previously determined pRxBuf->internal.flags */
//  956       ackWithPending = MAC_RX_FLAG_ACK_PENDING;
        MOV     R6,#0x4
//  957     }
//  958 
//  959     /* record parameters that get passed up to high-level */
//  960     pRxBuf->internal.flags |= ( crcOK | ackWithPending );
??rxFcsIsr_2:
        MOV     A,R6
        ORL     A,R7
        MOV     R2,A
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        ORL     A,R2
        MOVX    @DPTR,A
//  961     pRxBuf->mac.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
        ; Setup parameters for call to function macRadioComputeLQI
        MOV     R2,?V0 + 1
        MOV     R1,?V0 + 0
        LCALL   ??macRadioComputeLQI?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x2e
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_26:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine23_0 & 0xFFFF
//  962     pRxBuf->mac.rssi = rssiDbm;
??CrossCallReturnLabel_54:
        ADD     A,#0x30
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     A,?V0 + 0
        LCALL   ??Subroutine23_0 & 0xFFFF
//  963     pRxBuf->mac.correlation = corr;
??CrossCallReturnLabel_55:
        ADD     A,#0x2f
        LCALL   ?Subroutine0 & 0xFFFF
//  964 
//  965     /* set the MSDU pointer to point at start of data */
//  966     pRxBuf->msdu.p = (uint8 *) (pRxBuf + 1);
??CrossCallReturnLabel_49:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ??Subroutine23_0 & 0xFFFF
//  967 
//  968     /* finally... execute callback function */
//  969     macRxCompleteCallback(pRxBuf);
??CrossCallReturnLabel_56:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??macRxCompleteCallback?relay
//  970     pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
        SJMP    ??rxFcsIsr_3
//  971   }
//  972   else
//  973   {
//  974 #ifdef PACKET_FILTER_STATS
//  975     rxCrcFailure++;
//  976 #endif /* PACKET_FILTER_STATS */
//  977 
//  978     /*
//  979      *  The CRC is bad so no ACK was sent.  Cancel any callback and clear the flag.
//  980      *  (It's OK to cancel the outgoing ACK even if an ACK was not requested.  It's
//  981      *  slightly more efficient to do so.)
//  982      */
//  983     MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
??rxFcsIsr_1:
        LCALL   ?Subroutine13 & 0xFFFF
//  984     macRxOutgoingAckFlag = 0;
//  985 
//  986     /* the CRC failed so the packet must be discarded */
//  987     MEM_FREE((uint8 **)&pRxBuf);
??CrossCallReturnLabel_31:
        ; Setup parameters for call to function macDataRxMemFree
        MOV     R2,#(pRxBuf & 0xff)
        MOV     R3,#((pRxBuf >> 8) & 0xff)
        LCALL   ??macDataRxMemFree?relay
//  988     pRxBuf = NULL;  /* needed to indicate buffer is no longer allocated */
??rxFcsIsr_3:
        MOV     DPTR,#pRxBuf
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  989   }
//  990 
//  991   /* reset threshold level, reset receive state, and complete receive logic */
//  992   MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
        LCALL   ?Subroutine1 & 0xFFFF
//  993   pFuncRxState = &rxStartIsr;
//  994   rxDone();
//  995 }
??CrossCallReturnLabel_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker77 Using cfiCommon1
        CFI (cfiPicker77) NoFunction
        CFI (cfiPicker77) Picker
        MOV     DPTR,#0x61a4
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
        MOVX    @DPTR,A
        CLR     A
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond78 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+-1
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+-1
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker86 Using cfiCommon1
        CFI (cfiPicker86) NoFunction
        CFI (cfiPicker86) Picker
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_41:
        RET
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiPicker86

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond87 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_19
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_10
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_11
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_48
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_49
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_20
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+-1
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_21
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_22
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_23
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_24
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+-1
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_25
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_26
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+-1
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_27
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker101 Using cfiCommon1
        CFI (cfiPicker101) NoFunction
        CFI (cfiPicker101) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiPicker101

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond102 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker104 Using cfiCommon1
        CFI (cfiPicker104) NoFunction
        CFI (cfiPicker104) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_42:
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiPicker104

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond105 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker107 Using cfiCommon1
        CFI (cfiPicker107) NoFunction
        CFI (cfiPicker107) Picker
        ADD     A,#0x32
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        RET
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiPicker107
//  996 
//  997 
//  998 /*=================================================================================================
//  999  * @fn          rxDone
// 1000  *
// 1001  * @brief       Common exit point for receive.
// 1002  *
// 1003  * @param       none
// 1004  *
// 1005  * @return      none
// 1006  *=================================================================================================
// 1007  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1008 static void rxDone(void)
rxDone:
        CFI Block cfiBlock108 Using cfiCommon0
        CFI Function rxDone
// 1009 {
        FUNCALL rxDone, rxPostRxUpdates
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1010   /* if the receive FIFO has overflowed, flush it here */
// 1011   if (MAC_RADIO_RX_FIFO_HAS_OVERFLOWED())
        MOV     DPTR,#0x6193
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??rxDone_0
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JC      ??rxDone_0
// 1012   {
// 1013     MAC_RADIO_FLUSH_RX_FIFO();
        MOV     0xe1,#-0x13
        MOV     0xe1,#-0x13
// 1014   }
// 1015 
// 1016   /* mark receive as inactive */
// 1017   macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
??rxDone_0:
        CLR     A
        MOV     DPTR,#macRxActive
        MOVX    @DPTR,A
// 1018 
// 1019   /* if there is no outgoing ACK, run the post receive updates */
// 1020   if (!macRxOutgoingAckFlag)
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    A,@DPTR
        JNZ     ??rxDone_1
// 1021   {
// 1022     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        LCALL   ??rxPostRxUpdates?relay
// 1023   }
// 1024 }
??rxDone_1:
        LJMP    ??Subroutine22_0 & 0xFFFF
        CFI EndBlock cfiBlock108
        REQUIRE RFST
// 1025 
// 1026 
// 1027 /**************************************************************************************************
// 1028  * @fn          macRxAckTxDoneCallback
// 1029  *
// 1030  * @brief       Function called when the outoing ACK has completed transmitting.
// 1031  *
// 1032  * @param       none
// 1033  *
// 1034  * @return      none
// 1035  **************************************************************************************************
// 1036  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1037 void macRxAckTxDoneCallback(void)
macRxAckTxDoneCallback:
        CFI Block cfiBlock109 Using cfiCommon0
        CFI Function macRxAckTxDoneCallback
// 1038 {
        FUNCALL macRxAckTxDoneCallback, rxPostRxUpdates
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1039   macRxOutgoingAckFlag = 0;
        CLR     A
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    @DPTR,A
// 1040 
// 1041   /*
// 1042    *  With certain interrupt priorities and timing conditions, it is possible this callback
// 1043    *  could be executed before the primary receive logic completes.  To prevent this, the
// 1044    *  post updates are only executed if receive logic is no longer active.  In the case the
// 1045    *  post updates are not executed here, they will execute when the main receive logic
// 1046    *  completes.
// 1047    */
// 1048   if (!macRxActive)
        MOV     DPTR,#macRxActive
        MOVX    A,@DPTR
        JNZ     ??macRxAckTxDoneCallback_0
// 1049   {
// 1050     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        LCALL   ??rxPostRxUpdates?relay
// 1051   }
// 1052 }
??macRxAckTxDoneCallback_0:
        LJMP    ??Subroutine22_0 & 0xFFFF
        CFI EndBlock cfiBlock109
// 1053 
// 1054 
// 1055 /*=================================================================================================
// 1056  * @fn          rxPostRxUpdates
// 1057  *
// 1058  * @brief       Updates that need to be performed once receive is complete.
// 1059  *
// 1060  *              It is not fatal to execute this function if somehow receive is active.  Under
// 1061  *              certain timing/interrupt conditions a new receive may have started before this
// 1062  *              function executes.  This should happen very rarely (if it happens at all) and
// 1063  *              would cause no problems.
// 1064  *
// 1065  * @param       none
// 1066  *
// 1067  * @return      none
// 1068  *=================================================================================================
// 1069  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1070 static void rxPostRxUpdates(void)
rxPostRxUpdates:
        CFI Block cfiBlock110 Using cfiCommon0
        CFI Function rxPostRxUpdates
// 1071 {
        FUNCALL rxPostRxUpdates, macRxOffRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxPostRxUpdates, macRadioUpdateTxPower
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxPostRxUpdates, macTxStartQueuedFrame
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1072   /* turn off receiver if permitted */
// 1073   macRxOffRequest();
        ; Setup parameters for call to function macRxOffRequest
        LCALL   ??macRxOffRequest?relay
// 1074 
// 1075   /* update the transmit power, update may have been blocked by transmit of outgoing ACK */
// 1076   macRadioUpdateTxPower();
        ; Setup parameters for call to function macRadioUpdateTxPower
        LCALL   ??macRadioUpdateTxPower?relay
// 1077 
// 1078   /* initiate and transmit that was queued during receive */
// 1079   macTxStartQueuedFrame();
        ; Setup parameters for call to function macTxStartQueuedFrame
        LCALL   ??macTxStartQueuedFrame?relay
// 1080 }
        LJMP    ??Subroutine22_0 & 0xFFFF
        CFI EndBlock cfiBlock110
// 1081 
// 1082 
// 1083 /*=================================================================================================
// 1084  * @fn          rxDiscardFrame
// 1085  *
// 1086  * @brief       Initializes for discarding a packet.  Must be called before ACK is strobed.
// 1087  *
// 1088  * @param       none
// 1089  *
// 1090  * @return      none
// 1091  *=================================================================================================
// 1092  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1093 static void rxDiscardFrame(void)
rxDiscardFrame:
        CFI Block cfiBlock111 Using cfiCommon0
        CFI Function rxDiscardFrame
// 1094 {
        FUNCALL rxDiscardFrame, halAssertHandler
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxDiscardFrame, rxDone
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1095   MAC_ASSERT(pFuncRxState == &rxStartIsr); /* illegal state for calling discard frame function */
        MOV     DPTR,#pFuncRxState
        MOVX    A,@DPTR
        XRL     A,#(??rxStartIsr?relay & 0xff)
        JNZ     ??rxDiscardFrame_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#((??rxStartIsr?relay >> 8) & 0xff)
??rxDiscardFrame_0:
        JZ      ??rxDiscardFrame_1
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
// 1096 
// 1097   if (rxUnreadLen == 0)
??rxDiscardFrame_1:
        MOV     DPTR,#rxUnreadLen
        MOVX    A,@DPTR
        JNZ     ??rxDiscardFrame_2
// 1098   {
// 1099     rxDone();
        ; Setup parameters for call to function rxDone
        LCALL   ??rxDone?relay
        SJMP    ??rxDiscardFrame_3
// 1100   }
// 1101   else
// 1102   {
// 1103     rxNextLen = MIN(rxUnreadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
??rxDiscardFrame_2:
        CLR     C
        SUBB    A,#0x10
        JNC     ??rxDiscardFrame_4
        MOVX    A,@DPTR
        SJMP    ??rxDiscardFrame_5
??rxDiscardFrame_4:
        MOV     A,#0x10
??rxDiscardFrame_5:
        MOV     DPTR,#rxNextLen
        MOVX    @DPTR,A
// 1104     MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        MOVX    A,@DPTR
        DEC     A
        MOV     DPTR,#0x6194
        MOVX    @DPTR,A
// 1105     pFuncRxState = &rxDiscardIsr;
        MOV     DPTR,#pFuncRxState
        MOV     A,#(??rxDiscardIsr?relay & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((??rxDiscardIsr?relay >> 8) & 0xff)
        MOVX    @DPTR,A
// 1106   }
// 1107 }
??rxDiscardFrame_3:
        LJMP    ??Subroutine22_0 & 0xFFFF
        CFI EndBlock cfiBlock111
// 1108 
// 1109 
// 1110 /*=================================================================================================
// 1111  * @fn          rxDiscardIsr
// 1112  *
// 1113  * @brief       Receive ISR state for discarding a packet.
// 1114  *
// 1115  * @param       none
// 1116  *
// 1117  * @return      none
// 1118  *=================================================================================================
// 1119  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1120 static void rxDiscardIsr(void)
rxDiscardIsr:
        CFI Block cfiBlock112 Using cfiCommon0
        CFI Function rxDiscardIsr
// 1121 {
        FUNCALL rxDiscardIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxDiscardIsr, rxDone
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
// 1122   uint8 buf[MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT];
// 1123 
// 1124   MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
        ; Setup parameters for call to function macMemReadRxFifo
        LCALL   ?Subroutine7 & 0xFFFF
// 1125   rxUnreadLen -= rxNextLen;
??CrossCallReturnLabel_13:
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#rxUnreadLen
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R2
        MOVX    @DPTR,A
// 1126 
// 1127   /* read out and discard bytes until all bytes of packet are disposed of */
// 1128   if (rxUnreadLen != 0)
        JZ      ??rxDiscardIsr_0
// 1129   {
// 1130     if (rxUnreadLen < MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT)
        CLR     C
        SUBB    A,#0x10
        JNC     ??CrossCallReturnLabel_1
// 1131     {
// 1132       rxNextLen = rxUnreadLen;
        MOVX    A,@DPTR
        MOV     DPTR,#rxNextLen
        MOVX    @DPTR,A
// 1133       MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        DEC     A
        MOV     DPTR,#0x6194
        MOVX    @DPTR,A
        SJMP    ??CrossCallReturnLabel_1
// 1134     }
// 1135   }
// 1136   else
// 1137   {
// 1138     /* reset threshold level, reset receive state, and complete receive logic */
// 1139     MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
??rxDiscardIsr_0:
        LCALL   ?Subroutine1 & 0xFFFF
// 1140     pFuncRxState = &rxStartIsr;
// 1141     rxDone();
// 1142   }
// 1143 }
??CrossCallReturnLabel_1:
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        LJMP    ??Subroutine22_0 & 0xFFFF
        CFI EndBlock cfiBlock112

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond113 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond114) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond114) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond114) CFA_SP SP+-5
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker115 Using cfiCommon1
        CFI (cfiPicker115) NoFunction
        CFI (cfiPicker115) Picker
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??macMemReadRxFifo?relay
        RET
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond116 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond117) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond117) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond117) CFA_SP SP+-5
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker118 Using cfiCommon1
        CFI (cfiPicker118) NoFunction
        CFI (cfiPicker118) Picker
        MOV     A,#0x5
        MOV     DPTR,#0x6194
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_37:
        ; Setup parameters for call to function rxDone
        ; Setup parameters for call to function rxDone
        LCALL   ??rxDone?relay
        RET
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiPicker118
// 1144 
// 1145 
// 1146 /**************************************************************************************************
// 1147  * @fn          maxRxRifoOverflowIsr
// 1148  *
// 1149  * @brief       This interrupt service routine is called when RX FIFO overflow. Note that this
// 1150  *              exception does not retrieve the good frames that are trapped in the RX FIFO.
// 1151  *              It simply halts and cleanup the RX.
// 1152  *
// 1153  * @param       none
// 1154  *
// 1155  * @return      none
// 1156  **************************************************************************************************
// 1157  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1158 MAC_INTERNAL_API void macRxFifoOverflowIsr(void)
macRxFifoOverflowIsr:
        CFI Block cfiBlock119 Using cfiCommon0
        CFI Function macRxFifoOverflowIsr
// 1159 {
        FUNCALL macRxFifoOverflowIsr, macRxHaltCleanup
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1160   rxFifoOverflowCount++; /* This flag is used for debug purpose only */
        MOV     DPTR,#rxFifoOverflowCount
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1161   macRxHaltCleanup();
        ; Setup parameters for call to function macRxHaltCleanup
        LCALL   ??macRxHaltCleanup?relay
// 1162 }
        LJMP    ??Subroutine22_0 & 0xFFFF
        CFI EndBlock cfiBlock119
// 1163 
// 1164 
// 1165 /**************************************************************************************************
// 1166  * @fn          macRxPromiscuousMode
// 1167  *
// 1168  * @brief       Sets promiscuous mode - enabling or disabling it.
// 1169  *
// 1170  * @param       none
// 1171  *
// 1172  * @return      none
// 1173  **************************************************************************************************
// 1174  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1175 MAC_INTERNAL_API void macRxPromiscuousMode(uint8 mode)
macRxPromiscuousMode:
        CFI Block cfiBlock120 Using cfiCommon0
        CFI Function macRxPromiscuousMode
// 1176 {
        FUNCALL macRxPromiscuousMode, halAssertHandler
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1177   rxPromiscuousMode = mode;
        MOV     A,R1
        MOV     DPTR,#rxPromiscuousMode
        MOVX    @DPTR,A
// 1178 
// 1179   if (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_OFF)
        JNZ     ??macRxPromiscuousMode_0
// 1180   {
// 1181       MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
        CLR     A
        MOV     DPTR,#0x6180
        MOVX    @DPTR,A
        MOVX    A,@DPTR
        ORL     A,#0x5
        SJMP    ??macRxPromiscuousMode_1
// 1182   }
// 1183   else
// 1184   {
// 1185     MAC_ASSERT((mode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC)   ||
// 1186                (mode == MAC_PROMISCUOUS_MODE_COMPLIANT));  /* invalid mode */
??macRxPromiscuousMode_0:
        MOV     A,#0x2
        XRL     A,R1
        JZ      ??macRxPromiscuousMode_2
        MOV     A,#0x1
        XRL     A,R1
        JZ      ??macRxPromiscuousMode_2
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
// 1187 
// 1188     MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING();
??macRxPromiscuousMode_2:
        MOV     DPTR,#0x6180
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
// 1189   }
??macRxPromiscuousMode_1:
        LJMP    ?Subroutine21 & 0xFFFF
        CFI EndBlock cfiBlock120
// 1190 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxRadioPowerUpInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxRadioPowerUpInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxTxReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxTxReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxHaltCleanup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxHaltCleanup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxHaltCleanupFinalStep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxHaltCleanupFinalStep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxThresholdIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxThresholdIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxStartIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxStartIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxAddrIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxAddrIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxPrepPayload?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxPrepPayload

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxPayloadIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxPayloadIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxFcsIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxFcsIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxDone?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxDone

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxAckTxDoneCallback?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxAckTxDoneCallback

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxPostRxUpdates?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxPostRxUpdates

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxDiscardFrame?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxDiscardFrame

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxDiscardIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxDiscardIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxFifoOverflowIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxFifoOverflowIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxPromiscuousMode?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxPromiscuousMode

        END
// 1191 
// 1192 
// 1193 
// 1194 /**************************************************************************************************
// 1195  *                                  Compile Time Integrity Checks
// 1196  **************************************************************************************************
// 1197  */
// 1198 
// 1199 /* check for changes to the spec that would affect the source code */
// 1200 #if ((MAC_A_MAX_PHY_PACKET_SIZE   !=  0x7F )   ||  \ 
// 1201      (MAC_FCF_FIELD_LEN           !=  2    )   ||  \ 
// 1202      (MAC_FCF_FRAME_TYPE_POS      !=  0    )   ||  \ 
// 1203      (MAC_FCF_FRAME_PENDING_POS   !=  4    )   ||  \ 
// 1204      (MAC_FCF_ACK_REQUEST_POS     !=  5    )   ||  \ 
// 1205      (MAC_FCF_INTRA_PAN_POS       !=  6    )   ||  \ 
// 1206      (MAC_FCF_DST_ADDR_MODE_POS   !=  10   )   ||  \ 
// 1207      (MAC_FCF_FRAME_VERSION_POS   !=  12   )   ||  \ 
// 1208      (MAC_FCF_SRC_ADDR_MODE_POS   !=  14   ))
// 1209 #error "ERROR!  Change to the spec that requires modification of source code."
// 1210 #endif
// 1211 
// 1212 /* check for changes to the internal flags format */
// 1213 #if ((MAC_RX_FLAG_VERSION      !=  0x03)  ||  \ 
// 1214      (MAC_RX_FLAG_ACK_PENDING  !=  0x04)  ||  \ 
// 1215      (MAC_RX_FLAG_SECURITY     !=  0x08)  ||  \ 
// 1216      (MAC_RX_FLAG_PENDING      !=  0x10)  ||  \ 
// 1217      (MAC_RX_FLAG_ACK_REQUEST  !=  0x20)  ||  \ 
// 1218      (MAC_RX_FLAG_INTRA_PAN    !=  0x40))
// 1219 #error "ERROR!  Change to the internal RX flags format.  Requires modification of source code."
// 1220 #endif
// 1221 
// 1222 /* validate CRC OK bit optimization */
// 1223 #if (MAC_RX_FLAG_CRC_OK != PROPRIETARY_FCS_CRC_OK_BIT)
// 1224 #error "ERROR!  Optimization relies on these bits having the same position."
// 1225 #endif
// 1226 
// 1227 #if (MAC_RX_ACTIVE_NO_ACTIVITY != 0x00)
// 1228 #error "ERROR! Zero is reserved value of macRxActive. Allows boolean operations, e.g !macRxActive."
// 1229 #endif
// 1230 
// 1231 #if (MAC_PROMISCUOUS_MODE_OFF != 0x00)
// 1232 #error "ERROR! Zero is reserved value of rxPromiscuousMode. Allows boolean operations, e.g !rxPromiscuousMode."
// 1233 #endif
// 1234 
// 1235 
// 1236 /**************************************************************************************************
// 1237 */
// 
// 2 096 bytes in segment BANKED_CODE
//   108 bytes in segment BANK_RELAYS
//     4 bytes in segment CODE_C
//     5 bytes in segment SFR_AN
//    19 bytes in segment XDATA_Z
// 
// 2 208 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 5 bytes shared)
//    19 bytes of XDATA memory
//
//Errors: none
//Warnings: none
