///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               15/Aug/2011  15:27:11 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Components\stack\zdo\ZDSecMgr.c              /
//    Command line       =  -f C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4. /
//                          0ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\Tools\CC2530DB\f8wCoord.cfg            /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4. /
//                          0ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\Tools\CC2530DB\f8wConfig.cfg           /
//                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR     /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x11FF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\zhoufei\Desktop\Z /
//                          igBee³ÌÐò\ZStack1.4.0ÐÞ¸Äºó\Components\stack\zdo\ /
//                          ZDSecMgr.c -D ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK    /
//                          -D MT_SYS_FUNC -D MT_ZDO_FUNC -D HAL_UART=TRUE    /
//                          -D SERIAL_APP_PORT=0 -D LCD_SUPPORTED=DEBUG -lC   /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\C /
//                          oordinatorEB-Pro\List\ -lA                        /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\C /
//                          oordinatorEB-Pro\List\ --diag_suppress            /
//                          Pe001,Pa010 -o C:\Users\zhoufei\Desktop\ZigBee³ÌÐ /
//                          ò\ZStack1.4.0ÐÞ¸Äºó\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\CoordinatorEB-Pro\Obj\ -e           /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\  /
//                          -I C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4. /
//                          0ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\SOURCE\ -I C:\Users\zhoufei\Desktop\ZigBee³Ì /
//                          Ðò\ZStack1.4.0ÐÞ¸Äºó\Projects\zstack\Samples\Samp /
//                          leApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I        /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\MT\ -I                   /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I          /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I  /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I       /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I         /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\STACK\AF\ -I             /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\STACK\NWK\ -I            /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\STACK\SEC\ -I            /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\STACK\SAPI\ -I           /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\STACK\SYS\ -I            /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\STACK\ZDO\ -I            /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I             /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\ZMAC\ -I                 /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I       /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I       /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I          /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I       /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I  /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SING /
//                          LE_CHIP\ -I D:\IAR\8051\INC\ -I                   /
//                          D:\IAR\8051\INC\CLIB\ -Ohz                        /
//    List file          =  C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\C /
//                          oordinatorEB-Pro\List\ZDSecMgr.s51                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZDSecMgr

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??APSME_IsDefaultTCLK?relay
        EXTERN ??APSME_LinkKeyNVIdGet?relay
        EXTERN ??APSME_LinkKeySet?relay
        EXTERN ??APSME_TCLinkKeyInit?relay
        EXTERN ??ZDSecMgrAddrMgrUpdate?relay
        EXTERN ??ZDSecMgrAddrStore?relay
        EXTERN ??ZDSecMgrAppKeyReq?relay
        EXTERN ??ZDSecMgrApsLinkKeyInit?relay
        EXTERN ??ZDSecMgrAssocDeviceAuth?relay
        EXTERN ??ZDSecMgrAuthNwkKey?relay
        EXTERN ??ZDSecMgrCtrlAdd?relay
        EXTERN ??ZDSecMgrCtrlLookup?relay
        EXTERN ??ZDSecMgrCtrlReset?relay
        EXTERN ??ZDSecMgrCtrlSet?relay
        EXTERN ??ZDSecMgrCtrlTerm?relay
        EXTERN ??ZDSecMgrDeviceCtrlHandler?relay
        EXTERN ??ZDSecMgrDeviceCtrlUpdate?relay
        EXTERN ??ZDSecMgrDeviceEntryAdd?relay
        EXTERN ??ZDSecMgrDeviceEntryRemove?relay
        EXTERN ??ZDSecMgrDeviceJoin?relay
        EXTERN ??ZDSecMgrDeviceJoinDirect?relay
        EXTERN ??ZDSecMgrDeviceNew?relay
        EXTERN ??ZDSecMgrDeviceRemove?relay
        EXTERN ??ZDSecMgrDeviceValidate?relay
        EXTERN ??ZDSecMgrDeviceValidateRM?relay
        EXTERN ??ZDSecMgrDeviceValidateSKKE?relay
        EXTERN ??ZDSecMgrEntryFree?relay
        EXTERN ??ZDSecMgrEntryLookup?relay
        EXTERN ??ZDSecMgrEntryLookupAMI?relay
        EXTERN ??ZDSecMgrEntryLookupExt?relay
        EXTERN ??ZDSecMgrEntryLookupExtGetIndex?relay
        EXTERN ??ZDSecMgrEntryNew?relay
        EXTERN ??ZDSecMgrEstablishKey?relay
        EXTERN ??ZDSecMgrExtAddrLookup?relay
        EXTERN ??ZDSecMgrMasterKeyInit?relay
        EXTERN ??ZDSecMgrMasterKeyLoad?relay
        EXTERN ??ZDSecMgrMasterKeyLookup?relay
        EXTERN ??ZDSecMgrMasterKeyStore?relay
        EXTERN ??ZDSecMgrNwkKeyInit?relay
        EXTERN ??ZDSecMgrReadKeyFromNv?relay
        EXTERN ??ZDSecMgrSendMasterKey?relay
        EXTERN ??ZDSecMgrSendNwkKey?relay
        EXTERN ??ZDSecMgrTCDataLoad?relay
        EXTERN ??ZDSecMgrTCExtAddrCheck?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?UL_GT
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??APSME_IsDefaultTCLK?relay
        FUNCTION ??APSME_IsDefaultTCLK?relay,0203H
        PUBLIC ??APSME_IsLinkKeyValid?relay
        FUNCTION ??APSME_IsLinkKeyValid?relay,0203H
        PUBLIC ??APSME_KeyFwdToChild?relay
        FUNCTION ??APSME_KeyFwdToChild?relay,0203H
        PUBLIC ??APSME_LinkKeyNVIdGet?relay
        FUNCTION ??APSME_LinkKeyNVIdGet?relay,0203H
        PUBLIC ??APSME_LinkKeySet?relay
        FUNCTION ??APSME_LinkKeySet?relay,0203H
        PUBLIC ??APSME_MasterKeyGet?relay
        FUNCTION ??APSME_MasterKeyGet?relay,0203H
        PUBLIC ??APSME_SKA_TimerExpired?relay
        FUNCTION ??APSME_SKA_TimerExpired?relay,0203H
        PUBLIC ??APSME_TCLinkKeyInit?relay
        FUNCTION ??APSME_TCLinkKeyInit?relay,0203H
        PUBLIC ??APSME_TCLinkKeyLoad?relay
        FUNCTION ??APSME_TCLinkKeyLoad?relay,0203H
        PUBLIC ??APSME_TCLinkKeySync?relay
        FUNCTION ??APSME_TCLinkKeySync?relay,0203H
        PUBLIC ??ZDSecMgrAPSRemove?relay
        FUNCTION ??ZDSecMgrAPSRemove?relay,0203H
        PUBLIC ??ZDSecMgrAddLinkKey?relay
        FUNCTION ??ZDSecMgrAddLinkKey?relay,0203H
        PUBLIC ??ZDSecMgrAddrMgrUpdate?relay
        FUNCTION ??ZDSecMgrAddrMgrUpdate?relay,0203H
        PUBLIC ??ZDSecMgrAddrStore?relay
        FUNCTION ??ZDSecMgrAddrStore?relay,0203H
        PUBLIC ??ZDSecMgrAppKeyGet?relay
        FUNCTION ??ZDSecMgrAppKeyGet?relay,0203H
        PUBLIC ??ZDSecMgrAppKeyReq?relay
        FUNCTION ??ZDSecMgrAppKeyReq?relay,0203H
        PUBLIC ??ZDSecMgrAppKeyTypeSet?relay
        FUNCTION ??ZDSecMgrAppKeyTypeSet?relay,0203H
        PUBLIC ??ZDSecMgrApsLinkKeyInit?relay
        FUNCTION ??ZDSecMgrApsLinkKeyInit?relay,0203H
        PUBLIC ??ZDSecMgrAssocDeviceAuth?relay
        FUNCTION ??ZDSecMgrAssocDeviceAuth?relay,0203H
        PUBLIC ??ZDSecMgrAuthInitiate?relay
        FUNCTION ??ZDSecMgrAuthInitiate?relay,0203H
        PUBLIC ??ZDSecMgrAuthNwkKey?relay
        FUNCTION ??ZDSecMgrAuthNwkKey?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticateCfm?relay
        FUNCTION ??ZDSecMgrAuthenticateCfm?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticateInd?relay
        FUNCTION ??ZDSecMgrAuthenticateInd?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticationCheck?relay
        FUNCTION ??ZDSecMgrAuthenticationCheck?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticationSet?relay
        FUNCTION ??ZDSecMgrAuthenticationSet?relay,0203H
        PUBLIC ??ZDSecMgrConfig?relay
        FUNCTION ??ZDSecMgrConfig?relay,0203H
        PUBLIC ??ZDSecMgrCtrlAdd?relay
        FUNCTION ??ZDSecMgrCtrlAdd?relay,0203H
        PUBLIC ??ZDSecMgrCtrlInit?relay
        FUNCTION ??ZDSecMgrCtrlInit?relay,0203H
        PUBLIC ??ZDSecMgrCtrlLookup?relay
        FUNCTION ??ZDSecMgrCtrlLookup?relay,0203H
        PUBLIC ??ZDSecMgrCtrlRelease?relay
        FUNCTION ??ZDSecMgrCtrlRelease?relay,0203H
        PUBLIC ??ZDSecMgrCtrlReset?relay
        FUNCTION ??ZDSecMgrCtrlReset?relay,0203H
        PUBLIC ??ZDSecMgrCtrlSet?relay
        FUNCTION ??ZDSecMgrCtrlSet?relay,0203H
        PUBLIC ??ZDSecMgrCtrlTerm?relay
        FUNCTION ??ZDSecMgrCtrlTerm?relay,0203H
        PUBLIC ??ZDSecMgrDeviceCtrlHandler?relay
        FUNCTION ??ZDSecMgrDeviceCtrlHandler?relay,0203H
        PUBLIC ??ZDSecMgrDeviceCtrlSetup?relay
        FUNCTION ??ZDSecMgrDeviceCtrlSetup?relay,0203H
        PUBLIC ??ZDSecMgrDeviceCtrlUpdate?relay
        FUNCTION ??ZDSecMgrDeviceCtrlUpdate?relay,0203H
        PUBLIC ??ZDSecMgrDeviceEntryAdd?relay
        FUNCTION ??ZDSecMgrDeviceEntryAdd?relay,0203H
        PUBLIC ??ZDSecMgrDeviceEntryRemove?relay
        FUNCTION ??ZDSecMgrDeviceEntryRemove?relay,0203H
        PUBLIC ??ZDSecMgrDeviceJoin?relay
        FUNCTION ??ZDSecMgrDeviceJoin?relay,0203H
        PUBLIC ??ZDSecMgrDeviceJoinDirect?relay
        FUNCTION ??ZDSecMgrDeviceJoinDirect?relay,0203H
        PUBLIC ??ZDSecMgrDeviceJoinFwd?relay
        FUNCTION ??ZDSecMgrDeviceJoinFwd?relay,0203H
        PUBLIC ??ZDSecMgrDeviceNew?relay
        FUNCTION ??ZDSecMgrDeviceNew?relay,0203H
        PUBLIC ??ZDSecMgrDeviceRemove?relay
        FUNCTION ??ZDSecMgrDeviceRemove?relay,0203H
        PUBLIC ??ZDSecMgrDeviceRemoveByExtAddr?relay
        FUNCTION ??ZDSecMgrDeviceRemoveByExtAddr?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidate?relay
        FUNCTION ??ZDSecMgrDeviceValidate?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidateCM?relay
        FUNCTION ??ZDSecMgrDeviceValidateCM?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidateRM?relay
        FUNCTION ??ZDSecMgrDeviceValidateRM?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidateSKKE?relay
        FUNCTION ??ZDSecMgrDeviceValidateSKKE?relay,0203H
        PUBLIC ??ZDSecMgrEntryFree?relay
        FUNCTION ??ZDSecMgrEntryFree?relay,0203H
        PUBLIC ??ZDSecMgrEntryInit?relay
        FUNCTION ??ZDSecMgrEntryInit?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookup?relay
        FUNCTION ??ZDSecMgrEntryLookup?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookupAMI?relay
        FUNCTION ??ZDSecMgrEntryLookupAMI?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookupExt?relay
        FUNCTION ??ZDSecMgrEntryLookupExt?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookupExtGetIndex?relay
        FUNCTION ??ZDSecMgrEntryLookupExtGetIndex?relay,0203H
        PUBLIC ??ZDSecMgrEntryNew?relay
        FUNCTION ??ZDSecMgrEntryNew?relay,0203H
        PUBLIC ??ZDSecMgrEstablishKey?relay
        FUNCTION ??ZDSecMgrEstablishKey?relay,0203H
        PUBLIC ??ZDSecMgrEstablishKeyCfm?relay
        FUNCTION ??ZDSecMgrEstablishKeyCfm?relay,0203H
        PUBLIC ??ZDSecMgrEstablishKeyInd?relay
        FUNCTION ??ZDSecMgrEstablishKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrEvent?relay
        FUNCTION ??ZDSecMgrEvent?relay,0203H
        PUBLIC ??ZDSecMgrExtAddrLookup?relay
        FUNCTION ??ZDSecMgrExtAddrLookup?relay,0203H
        PUBLIC ??ZDSecMgrExtAddrStore?relay
        FUNCTION ??ZDSecMgrExtAddrStore?relay,0203H
        PUBLIC ??ZDSecMgrInit?relay
        FUNCTION ??ZDSecMgrInit?relay,0203H
        PUBLIC ??ZDSecMgrInitNVKeyTables?relay
        FUNCTION ??ZDSecMgrInitNVKeyTables?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyInit?relay
        FUNCTION ??ZDSecMgrMasterKeyInit?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyLoad?relay
        FUNCTION ??ZDSecMgrMasterKeyLoad?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyLookup?relay
        FUNCTION ??ZDSecMgrMasterKeyLookup?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyStore?relay
        FUNCTION ??ZDSecMgrMasterKeyStore?relay,0203H
        PUBLIC ??ZDSecMgrNewDeviceEvent?relay
        FUNCTION ??ZDSecMgrNewDeviceEvent?relay,0203H
        PUBLIC ??ZDSecMgrNwkKeyInit?relay
        FUNCTION ??ZDSecMgrNwkKeyInit?relay,0203H
        PUBLIC ??ZDSecMgrPermitJoining?relay
        FUNCTION ??ZDSecMgrPermitJoining?relay,0203H
        PUBLIC ??ZDSecMgrPermitJoiningTimeout?relay
        FUNCTION ??ZDSecMgrPermitJoiningTimeout?relay,0203H
        PUBLIC ??ZDSecMgrReadKeyFromNv?relay
        FUNCTION ??ZDSecMgrReadKeyFromNv?relay,0203H
        PUBLIC ??ZDSecMgrRemoveDeviceInd?relay
        FUNCTION ??ZDSecMgrRemoveDeviceInd?relay,0203H
        PUBLIC ??ZDSecMgrRequestKeyInd?relay
        FUNCTION ??ZDSecMgrRequestKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrSaveApsLinkKey?relay
        FUNCTION ??ZDSecMgrSaveApsLinkKey?relay,0203H
        PUBLIC ??ZDSecMgrSaveTCLinkKey?relay
        FUNCTION ??ZDSecMgrSaveTCLinkKey?relay,0203H
        PUBLIC ??ZDSecMgrSendMasterKey?relay
        FUNCTION ??ZDSecMgrSendMasterKey?relay,0203H
        PUBLIC ??ZDSecMgrSendNwkKey?relay
        FUNCTION ??ZDSecMgrSendNwkKey?relay,0203H
        PUBLIC ??ZDSecMgrSetDefaultNV?relay
        FUNCTION ??ZDSecMgrSetDefaultNV?relay,0203H
        PUBLIC ??ZDSecMgrSwitchKeyInd?relay
        FUNCTION ??ZDSecMgrSwitchKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrSwitchNwkKey?relay
        FUNCTION ??ZDSecMgrSwitchNwkKey?relay,0203H
        PUBLIC ??ZDSecMgrTCDataLoad?relay
        FUNCTION ??ZDSecMgrTCDataLoad?relay,0203H
        PUBLIC ??ZDSecMgrTCExtAddrCheck?relay
        FUNCTION ??ZDSecMgrTCExtAddrCheck?relay,0203H
        PUBLIC ??ZDSecMgrTransportKeyInd?relay
        FUNCTION ??ZDSecMgrTransportKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrUpdateDeviceInd?relay
        FUNCTION ??ZDSecMgrUpdateDeviceInd?relay,0203H
        PUBLIC ??ZDSecMgrUpdateNwkKey?relay
        FUNCTION ??ZDSecMgrUpdateNwkKey?relay,0203H
        PUBLIC APSME_IsDefaultTCLK
        FUNCTION APSME_IsDefaultTCLK,0203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC APSME_IsLinkKeyValid
        FUNCTION APSME_IsLinkKeyValid,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC APSME_KeyFwdToChild
        FUNCTION APSME_KeyFwdToChild,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC APSME_LinkKeyNVIdGet
        FUNCTION APSME_LinkKeyNVIdGet,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC APSME_LinkKeySet
        FUNCTION APSME_LinkKeySet,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        PUBLIC APSME_MasterKeyGet
        FUNCTION APSME_MasterKeyGet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC APSME_SKA_TimerExpired
        FUNCTION APSME_SKA_TimerExpired,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC APSME_TCLinkKeyInit
        FUNCTION APSME_TCLinkKeyInit,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 48, STACK
        PUBLIC APSME_TCLinkKeyLoad
        FUNCTION APSME_TCLinkKeyLoad,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 65, STACK
        PUBLIC APSME_TCLinkKeySync
        FUNCTION APSME_TCLinkKeySync,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        PUBLIC ApsLinkKeyFrmCntr
        PUBLIC TCLinkKeyFrmCntr
        PUBLIC TrustCenterLinkKey
        PUBLIC ZDSecMgrAPSRemove
        FUNCTION ZDSecMgrAPSRemove,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrAddLinkKey
        FUNCTION ZDSecMgrAddLinkKey,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDSecMgrAddrMgrUpdate
        FUNCTION ZDSecMgrAddrMgrUpdate,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrAddrStore
        FUNCTION ZDSecMgrAddrStore,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrAppKeyGet
        FUNCTION ZDSecMgrAppKeyGet,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrAppKeyReq
        FUNCTION ZDSecMgrAppKeyReq,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 49, STACK
        PUBLIC ZDSecMgrAppKeyType
        PUBLIC ZDSecMgrAppKeyTypeSet
        FUNCTION ZDSecMgrAppKeyTypeSet,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrApsLinkKeyInit
        FUNCTION ZDSecMgrApsLinkKeyInit,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 39, STACK
        PUBLIC ZDSecMgrAssocDeviceAuth
        FUNCTION ZDSecMgrAssocDeviceAuth,0203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthInitiate
        FUNCTION ZDSecMgrAuthInitiate,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrAuthNwkKey
        FUNCTION ZDSecMgrAuthNwkKey,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthenticateCfm
        FUNCTION ZDSecMgrAuthenticateCfm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthenticateInd
        FUNCTION ZDSecMgrAuthenticateInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC ZDSecMgrAuthenticationCheck
        FUNCTION ZDSecMgrAuthenticationCheck,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDSecMgrAuthenticationSet
        FUNCTION ZDSecMgrAuthenticationSet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrConfig
        FUNCTION ZDSecMgrConfig,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrCtrlAdd
        FUNCTION ZDSecMgrCtrlAdd,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrCtrlData
        PUBLIC ZDSecMgrCtrlInit
        FUNCTION ZDSecMgrCtrlInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrCtrlLookup
        FUNCTION ZDSecMgrCtrlLookup,0203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrCtrlRelease
        FUNCTION ZDSecMgrCtrlRelease,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrCtrlReset
        FUNCTION ZDSecMgrCtrlReset,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrCtrlSet
        FUNCTION ZDSecMgrCtrlSet,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrCtrlTerm
        FUNCTION ZDSecMgrCtrlTerm,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceCtrlHandler
        FUNCTION ZDSecMgrDeviceCtrlHandler,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrDeviceCtrlSetup
        FUNCTION ZDSecMgrDeviceCtrlSetup,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrDeviceCtrlUpdate
        FUNCTION ZDSecMgrDeviceCtrlUpdate,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDSecMgrDeviceEntryAdd
        FUNCTION ZDSecMgrDeviceEntryAdd,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDSecMgrDeviceEntryRemove
        FUNCTION ZDSecMgrDeviceEntryRemove,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrDeviceJoin
        FUNCTION ZDSecMgrDeviceJoin,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrDeviceJoinDirect
        FUNCTION ZDSecMgrDeviceJoinDirect,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrDeviceJoinFwd
        FUNCTION ZDSecMgrDeviceJoinFwd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ZDSecMgrDeviceNew
        FUNCTION ZDSecMgrDeviceNew,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceRemove
        FUNCTION ZDSecMgrDeviceRemove,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDSecMgrDeviceRemoveByExtAddr
        FUNCTION ZDSecMgrDeviceRemoveByExtAddr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrDeviceValidate
        FUNCTION ZDSecMgrDeviceValidate,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrDeviceValidateCM
        FUNCTION ZDSecMgrDeviceValidateCM,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDSecMgrDeviceValidateRM
        FUNCTION ZDSecMgrDeviceValidateRM,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceValidateSKKE
        FUNCTION ZDSecMgrDeviceValidateSKKE,021203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDSecMgrEntries
        PUBLIC ZDSecMgrEntryFree
        FUNCTION ZDSecMgrEntryFree,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDSecMgrEntryInit
        FUNCTION ZDSecMgrEntryInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrEntryLookup
        FUNCTION ZDSecMgrEntryLookup,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrEntryLookupAMI
        FUNCTION ZDSecMgrEntryLookupAMI,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrEntryLookupExt
        FUNCTION ZDSecMgrEntryLookupExt,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEntryLookupExtGetIndex
        FUNCTION ZDSecMgrEntryLookupExtGetIndex,021203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDSecMgrEntryNew
        FUNCTION ZDSecMgrEntryNew,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEstablishKey
        FUNCTION ZDSecMgrEstablishKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrEstablishKeyCfm
        FUNCTION ZDSecMgrEstablishKeyCfm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrEstablishKeyInd
        FUNCTION ZDSecMgrEstablishKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC ZDSecMgrEvent
        FUNCTION ZDSecMgrEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDSecMgrExtAddrLookup
        FUNCTION ZDSecMgrExtAddrLookup,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrExtAddrStore
        FUNCTION ZDSecMgrExtAddrStore,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrInit
        FUNCTION ZDSecMgrInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrInitNVKeyTables
        FUNCTION ZDSecMgrInitNVKeyTables,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrMasterKeyInit
        FUNCTION ZDSecMgrMasterKeyInit,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 34, STACK
        PUBLIC ZDSecMgrMasterKeyLoad
        FUNCTION ZDSecMgrMasterKeyLoad,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDSecMgrMasterKeyLookup
        FUNCTION ZDSecMgrMasterKeyLookup,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 38, STACK
        PUBLIC ZDSecMgrMasterKeyStore
        FUNCTION ZDSecMgrMasterKeyStore,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 38, STACK
        PUBLIC ZDSecMgrNewDeviceEvent
        FUNCTION ZDSecMgrNewDeviceEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDSecMgrNwkKeyInit
        FUNCTION ZDSecMgrNwkKeyInit,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 52, STACK
        PUBLIC ZDSecMgrPermitJoining
        FUNCTION ZDSecMgrPermitJoining,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrPermitJoiningEnabled
        PUBLIC ZDSecMgrPermitJoiningTimed
        PUBLIC ZDSecMgrPermitJoiningTimeout
        FUNCTION ZDSecMgrPermitJoiningTimeout,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrReadKeyFromNv
        FUNCTION ZDSecMgrReadKeyFromNv,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrRemoveDeviceInd
        FUNCTION ZDSecMgrRemoveDeviceInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDSecMgrRequestKeyInd
        FUNCTION ZDSecMgrRequestKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrSaveApsLinkKey
        FUNCTION ZDSecMgrSaveApsLinkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDSecMgrSaveTCLinkKey
        FUNCTION ZDSecMgrSaveTCLinkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDSecMgrSendMasterKey
        FUNCTION ZDSecMgrSendMasterKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 45, STACK
        PUBLIC ZDSecMgrSendNwkKey
        FUNCTION ZDSecMgrSendNwkKey,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 46, STACK
        PUBLIC ZDSecMgrSetDefaultNV
        FUNCTION ZDSecMgrSetDefaultNV,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDSecMgrSwitchKeyInd
        FUNCTION ZDSecMgrSwitchKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrSwitchNwkKey
        FUNCTION ZDSecMgrSwitchNwkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDSecMgrTCAuthenticated
        PUBLIC ZDSecMgrTCDataLoad
        FUNCTION ZDSecMgrTCDataLoad,021203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 34, STACK
        PUBLIC ZDSecMgrTCDataLoaded
        PUBLIC ZDSecMgrTCExtAddr
        PUBLIC ZDSecMgrTCExtAddrCheck
        FUNCTION ZDSecMgrTCExtAddrCheck,021203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrTCMasterKey
        PUBLIC ZDSecMgrTransportKeyInd
        FUNCTION ZDSecMgrTransportKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDSecMgrUpdateDeviceInd
        FUNCTION ZDSecMgrUpdateDeviceInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrUpdateNwkKey
        FUNCTION ZDSecMgrUpdateNwkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBWEAK __Constant_0
        PUBWEAK __Constant_1
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_memset         SYMBOL "osal_memset"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_write       SYMBOL "osal_nv_write"
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
osal_nv_read        SYMBOL "osal_nv_read"
osal_memcpy         SYMBOL "osal_memcpy"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
osal_mem_free       SYMBOL "osal_mem_free"
SSP_GetTrueRand     SYMBOL "SSP_GetTrueRand"
APSME_LookupNwkAddr SYMBOL "APSME_LookupNwkAddr"
APSME_LookupExtAddr SYMBOL "APSME_LookupExtAddr"
APSME_TransportKeyReq SYMBOL "APSME_TransportKeyReq"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
APSME_EstablishKeyReq SYMBOL "APSME_EstablishKeyReq"
NLME_ReadNwkKeyInfo SYMBOL "NLME_ReadNwkKeyInfo"
AddrMgrEntryGet     SYMBOL "AddrMgrEntryGet"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
AssocGetWithExt     SYMBOL "AssocGetWithExt"
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
APSME_RemoveDeviceReq SYMBOL "APSME_RemoveDeviceReq"
AssocGetWithShort   SYMBOL "AssocGetWithShort"
APSME_UpdateDeviceReq SYMBOL "APSME_UpdateDeviceReq"
APSME_AuthenticateReq SYMBOL "APSME_AuthenticateReq"
osal_set_event      SYMBOL "osal_set_event"
APSME_SecurityNM    SYMBOL "APSME_SecurityNM"
AssocMatchDeviceStatus SYMBOL "AssocMatchDeviceStatus"
AssocRemove         SYMBOL "AssocRemove"
AddrMgrExtAddrLookup SYMBOL "AddrMgrExtAddrLookup"
AddrMgrExtAddrEqual SYMBOL "AddrMgrExtAddrEqual"
APSME_EstablishKeyRsp SYMBOL "APSME_EstablishKeyRsp"
SSP_UpdateNwkKey    SYMBOL "SSP_UpdateNwkKey"
SSP_SwitchNwkKey    SYMBOL "SSP_SwitchNwkKey"
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
APSME_SwitchKeyReq  SYMBOL "APSME_SwitchKeyReq"
osal_memcmp         SYMBOL "osal_memcmp"
AddrMgrExtAddrValid SYMBOL "AddrMgrExtAddrValid"
AddrMgrEntryRelease SYMBOL "AddrMgrEntryRelease"
??APSME_AuthenticateReq?relay SYMBOL "?relay", APSME_AuthenticateReq
??APSME_EstablishKeyReq?relay SYMBOL "?relay", APSME_EstablishKeyReq
??APSME_EstablishKeyRsp?relay SYMBOL "?relay", APSME_EstablishKeyRsp
??APSME_LookupExtAddr?relay SYMBOL "?relay", APSME_LookupExtAddr
??APSME_LookupNwkAddr?relay SYMBOL "?relay", APSME_LookupNwkAddr
??APSME_RemoveDeviceReq?relay SYMBOL "?relay", APSME_RemoveDeviceReq
??APSME_SecurityNM?relay SYMBOL "?relay", APSME_SecurityNM
??APSME_SwitchKeyReq?relay SYMBOL "?relay", APSME_SwitchKeyReq
??APSME_TransportKeyReq?relay SYMBOL "?relay", APSME_TransportKeyReq
??APSME_UpdateDeviceReq?relay SYMBOL "?relay", APSME_UpdateDeviceReq
??AddrMgrEntryGet?relay SYMBOL "?relay", AddrMgrEntryGet
??AddrMgrEntryLookupExt?relay SYMBOL "?relay", AddrMgrEntryLookupExt
??AddrMgrEntryLookupNwk?relay SYMBOL "?relay", AddrMgrEntryLookupNwk
??AddrMgrEntryRelease?relay SYMBOL "?relay", AddrMgrEntryRelease
??AddrMgrEntryUpdate?relay SYMBOL "?relay", AddrMgrEntryUpdate
??AddrMgrExtAddrEqual?relay SYMBOL "?relay", AddrMgrExtAddrEqual
??AddrMgrExtAddrLookup?relay SYMBOL "?relay", AddrMgrExtAddrLookup
??AddrMgrExtAddrSet?relay SYMBOL "?relay", AddrMgrExtAddrSet
??AddrMgrExtAddrValid?relay SYMBOL "?relay", AddrMgrExtAddrValid
??AssocGetWithExt?relay SYMBOL "?relay", AssocGetWithExt
??AssocGetWithShort?relay SYMBOL "?relay", AssocGetWithShort
??AssocMatchDeviceStatus?relay SYMBOL "?relay", AssocMatchDeviceStatus
??AssocRemove?relay SYMBOL "?relay", AssocRemove
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??NLME_LeaveReq?relay SYMBOL "?relay", NLME_LeaveReq
??NLME_ReadNwkKeyInfo?relay SYMBOL "?relay", NLME_ReadNwkKeyInfo
??SSP_GetTrueRand?relay SYMBOL "?relay", SSP_GetTrueRand
??SSP_SwitchNwkKey?relay SYMBOL "?relay", SSP_SwitchNwkKey
??SSP_UpdateNwkKey?relay SYMBOL "?relay", SSP_UpdateNwkKey
??ZDApp_NVUpdate?relay SYMBOL "?relay", ZDApp_NVUpdate
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcmp?relay SYMBOL "?relay", osal_memcmp
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
APSME_IsDefaultTCLK SYMBOL "APSME_IsDefaultTCLK"
??APSME_IsDefaultTCLK?relay SYMBOL "?relay", APSME_IsDefaultTCLK
APSME_IsLinkKeyValid SYMBOL "APSME_IsLinkKeyValid"
??APSME_IsLinkKeyValid?relay SYMBOL "?relay", APSME_IsLinkKeyValid
APSME_KeyFwdToChild SYMBOL "APSME_KeyFwdToChild"
??APSME_KeyFwdToChild?relay SYMBOL "?relay", APSME_KeyFwdToChild
APSME_LinkKeyNVIdGet SYMBOL "APSME_LinkKeyNVIdGet"
??APSME_LinkKeyNVIdGet?relay SYMBOL "?relay", APSME_LinkKeyNVIdGet
APSME_LinkKeySet    SYMBOL "APSME_LinkKeySet"
??APSME_LinkKeySet?relay SYMBOL "?relay", APSME_LinkKeySet
APSME_MasterKeyGet  SYMBOL "APSME_MasterKeyGet"
??APSME_MasterKeyGet?relay SYMBOL "?relay", APSME_MasterKeyGet
APSME_SKA_TimerExpired SYMBOL "APSME_SKA_TimerExpired"
??APSME_SKA_TimerExpired?relay SYMBOL "?relay", APSME_SKA_TimerExpired
APSME_TCLinkKeyInit SYMBOL "APSME_TCLinkKeyInit"
??APSME_TCLinkKeyInit?relay SYMBOL "?relay", APSME_TCLinkKeyInit
APSME_TCLinkKeyLoad SYMBOL "APSME_TCLinkKeyLoad"
??APSME_TCLinkKeyLoad?relay SYMBOL "?relay", APSME_TCLinkKeyLoad
APSME_TCLinkKeySync SYMBOL "APSME_TCLinkKeySync"
??APSME_TCLinkKeySync?relay SYMBOL "?relay", APSME_TCLinkKeySync
ZDSecMgrAPSRemove   SYMBOL "ZDSecMgrAPSRemove"
??ZDSecMgrAPSRemove?relay SYMBOL "?relay", ZDSecMgrAPSRemove
ZDSecMgrAddLinkKey  SYMBOL "ZDSecMgrAddLinkKey"
??ZDSecMgrAddLinkKey?relay SYMBOL "?relay", ZDSecMgrAddLinkKey
ZDSecMgrAddrMgrUpdate SYMBOL "ZDSecMgrAddrMgrUpdate"
??ZDSecMgrAddrMgrUpdate?relay SYMBOL "?relay", ZDSecMgrAddrMgrUpdate
ZDSecMgrAddrStore   SYMBOL "ZDSecMgrAddrStore"
??ZDSecMgrAddrStore?relay SYMBOL "?relay", ZDSecMgrAddrStore
ZDSecMgrAppKeyGet   SYMBOL "ZDSecMgrAppKeyGet"
??ZDSecMgrAppKeyGet?relay SYMBOL "?relay", ZDSecMgrAppKeyGet
ZDSecMgrAppKeyReq   SYMBOL "ZDSecMgrAppKeyReq"
??ZDSecMgrAppKeyReq?relay SYMBOL "?relay", ZDSecMgrAppKeyReq
ZDSecMgrAppKeyTypeSet SYMBOL "ZDSecMgrAppKeyTypeSet"
??ZDSecMgrAppKeyTypeSet?relay SYMBOL "?relay", ZDSecMgrAppKeyTypeSet
ZDSecMgrApsLinkKeyInit SYMBOL "ZDSecMgrApsLinkKeyInit"
??ZDSecMgrApsLinkKeyInit?relay SYMBOL "?relay", ZDSecMgrApsLinkKeyInit
ZDSecMgrAssocDeviceAuth SYMBOL "ZDSecMgrAssocDeviceAuth"
??ZDSecMgrAssocDeviceAuth?relay SYMBOL "?relay", ZDSecMgrAssocDeviceAuth
ZDSecMgrAuthInitiate SYMBOL "ZDSecMgrAuthInitiate"
??ZDSecMgrAuthInitiate?relay SYMBOL "?relay", ZDSecMgrAuthInitiate
ZDSecMgrAuthNwkKey  SYMBOL "ZDSecMgrAuthNwkKey"
??ZDSecMgrAuthNwkKey?relay SYMBOL "?relay", ZDSecMgrAuthNwkKey
ZDSecMgrAuthenticateCfm SYMBOL "ZDSecMgrAuthenticateCfm"
??ZDSecMgrAuthenticateCfm?relay SYMBOL "?relay", ZDSecMgrAuthenticateCfm
ZDSecMgrAuthenticateInd SYMBOL "ZDSecMgrAuthenticateInd"
??ZDSecMgrAuthenticateInd?relay SYMBOL "?relay", ZDSecMgrAuthenticateInd
ZDSecMgrAuthenticationCheck SYMBOL "ZDSecMgrAuthenticationCheck"
??ZDSecMgrAuthenticationCheck?relay SYMBOL "?relay", ZDSecMgrAuthenticationCheck
ZDSecMgrAuthenticationSet SYMBOL "ZDSecMgrAuthenticationSet"
??ZDSecMgrAuthenticationSet?relay SYMBOL "?relay", ZDSecMgrAuthenticationSet
ZDSecMgrConfig      SYMBOL "ZDSecMgrConfig"
??ZDSecMgrConfig?relay SYMBOL "?relay", ZDSecMgrConfig
ZDSecMgrCtrlAdd     SYMBOL "ZDSecMgrCtrlAdd"
??ZDSecMgrCtrlAdd?relay SYMBOL "?relay", ZDSecMgrCtrlAdd
ZDSecMgrCtrlInit    SYMBOL "ZDSecMgrCtrlInit"
??ZDSecMgrCtrlInit?relay SYMBOL "?relay", ZDSecMgrCtrlInit
ZDSecMgrCtrlLookup  SYMBOL "ZDSecMgrCtrlLookup"
??ZDSecMgrCtrlLookup?relay SYMBOL "?relay", ZDSecMgrCtrlLookup
ZDSecMgrCtrlRelease SYMBOL "ZDSecMgrCtrlRelease"
??ZDSecMgrCtrlRelease?relay SYMBOL "?relay", ZDSecMgrCtrlRelease
ZDSecMgrCtrlReset   SYMBOL "ZDSecMgrCtrlReset"
??ZDSecMgrCtrlReset?relay SYMBOL "?relay", ZDSecMgrCtrlReset
ZDSecMgrCtrlSet     SYMBOL "ZDSecMgrCtrlSet"
??ZDSecMgrCtrlSet?relay SYMBOL "?relay", ZDSecMgrCtrlSet
ZDSecMgrCtrlTerm    SYMBOL "ZDSecMgrCtrlTerm"
??ZDSecMgrCtrlTerm?relay SYMBOL "?relay", ZDSecMgrCtrlTerm
ZDSecMgrDeviceCtrlHandler SYMBOL "ZDSecMgrDeviceCtrlHandler"
??ZDSecMgrDeviceCtrlHandler?relay SYMBOL "?relay", ZDSecMgrDeviceCtrlHandler
ZDSecMgrDeviceCtrlSetup SYMBOL "ZDSecMgrDeviceCtrlSetup"
??ZDSecMgrDeviceCtrlSetup?relay SYMBOL "?relay", ZDSecMgrDeviceCtrlSetup
ZDSecMgrDeviceCtrlUpdate SYMBOL "ZDSecMgrDeviceCtrlUpdate"
??ZDSecMgrDeviceCtrlUpdate?relay SYMBOL "?relay", ZDSecMgrDeviceCtrlUpdate
ZDSecMgrDeviceEntryAdd SYMBOL "ZDSecMgrDeviceEntryAdd"
??ZDSecMgrDeviceEntryAdd?relay SYMBOL "?relay", ZDSecMgrDeviceEntryAdd
ZDSecMgrDeviceEntryRemove SYMBOL "ZDSecMgrDeviceEntryRemove"
??ZDSecMgrDeviceEntryRemove?relay SYMBOL "?relay", ZDSecMgrDeviceEntryRemove
ZDSecMgrDeviceJoin  SYMBOL "ZDSecMgrDeviceJoin"
??ZDSecMgrDeviceJoin?relay SYMBOL "?relay", ZDSecMgrDeviceJoin
ZDSecMgrDeviceJoinDirect SYMBOL "ZDSecMgrDeviceJoinDirect"
??ZDSecMgrDeviceJoinDirect?relay SYMBOL "?relay", ZDSecMgrDeviceJoinDirect
ZDSecMgrDeviceJoinFwd SYMBOL "ZDSecMgrDeviceJoinFwd"
??ZDSecMgrDeviceJoinFwd?relay SYMBOL "?relay", ZDSecMgrDeviceJoinFwd
ZDSecMgrDeviceNew   SYMBOL "ZDSecMgrDeviceNew"
??ZDSecMgrDeviceNew?relay SYMBOL "?relay", ZDSecMgrDeviceNew
ZDSecMgrDeviceRemove SYMBOL "ZDSecMgrDeviceRemove"
??ZDSecMgrDeviceRemove?relay SYMBOL "?relay", ZDSecMgrDeviceRemove
ZDSecMgrDeviceRemoveByExtAddr SYMBOL "ZDSecMgrDeviceRemoveByExtAddr"
??ZDSecMgrDeviceRemoveByExtAddr?relay SYMBOL "?relay", ZDSecMgrDeviceRemoveByExtAddr
ZDSecMgrDeviceValidate SYMBOL "ZDSecMgrDeviceValidate"
??ZDSecMgrDeviceValidate?relay SYMBOL "?relay", ZDSecMgrDeviceValidate
ZDSecMgrDeviceValidateCM SYMBOL "ZDSecMgrDeviceValidateCM"
??ZDSecMgrDeviceValidateCM?relay SYMBOL "?relay", ZDSecMgrDeviceValidateCM
ZDSecMgrDeviceValidateRM SYMBOL "ZDSecMgrDeviceValidateRM"
??ZDSecMgrDeviceValidateRM?relay SYMBOL "?relay", ZDSecMgrDeviceValidateRM
ZDSecMgrDeviceValidateSKKE SYMBOL "ZDSecMgrDeviceValidateSKKE"
??ZDSecMgrDeviceValidateSKKE?relay SYMBOL "?relay", ZDSecMgrDeviceValidateSKKE
ZDSecMgrEntryFree   SYMBOL "ZDSecMgrEntryFree"
??ZDSecMgrEntryFree?relay SYMBOL "?relay", ZDSecMgrEntryFree
ZDSecMgrEntryInit   SYMBOL "ZDSecMgrEntryInit"
??ZDSecMgrEntryInit?relay SYMBOL "?relay", ZDSecMgrEntryInit
ZDSecMgrEntryLookup SYMBOL "ZDSecMgrEntryLookup"
??ZDSecMgrEntryLookup?relay SYMBOL "?relay", ZDSecMgrEntryLookup
ZDSecMgrEntryLookupAMI SYMBOL "ZDSecMgrEntryLookupAMI"
??ZDSecMgrEntryLookupAMI?relay SYMBOL "?relay", ZDSecMgrEntryLookupAMI
ZDSecMgrEntryLookupExt SYMBOL "ZDSecMgrEntryLookupExt"
??ZDSecMgrEntryLookupExt?relay SYMBOL "?relay", ZDSecMgrEntryLookupExt
ZDSecMgrEntryLookupExtGetIndex SYMBOL "ZDSecMgrEntryLookupExtGetIndex"
??ZDSecMgrEntryLookupExtGetIndex?relay SYMBOL "?relay", ZDSecMgrEntryLookupExtGetIndex
ZDSecMgrEntryNew    SYMBOL "ZDSecMgrEntryNew"
??ZDSecMgrEntryNew?relay SYMBOL "?relay", ZDSecMgrEntryNew
ZDSecMgrEstablishKey SYMBOL "ZDSecMgrEstablishKey"
??ZDSecMgrEstablishKey?relay SYMBOL "?relay", ZDSecMgrEstablishKey
ZDSecMgrEstablishKeyCfm SYMBOL "ZDSecMgrEstablishKeyCfm"
??ZDSecMgrEstablishKeyCfm?relay SYMBOL "?relay", ZDSecMgrEstablishKeyCfm
ZDSecMgrEstablishKeyInd SYMBOL "ZDSecMgrEstablishKeyInd"
??ZDSecMgrEstablishKeyInd?relay SYMBOL "?relay", ZDSecMgrEstablishKeyInd
ZDSecMgrEvent       SYMBOL "ZDSecMgrEvent"
??ZDSecMgrEvent?relay SYMBOL "?relay", ZDSecMgrEvent
ZDSecMgrExtAddrLookup SYMBOL "ZDSecMgrExtAddrLookup"
??ZDSecMgrExtAddrLookup?relay SYMBOL "?relay", ZDSecMgrExtAddrLookup
ZDSecMgrExtAddrStore SYMBOL "ZDSecMgrExtAddrStore"
??ZDSecMgrExtAddrStore?relay SYMBOL "?relay", ZDSecMgrExtAddrStore
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
??ZDSecMgrInit?relay SYMBOL "?relay", ZDSecMgrInit
ZDSecMgrInitNVKeyTables SYMBOL "ZDSecMgrInitNVKeyTables"
??ZDSecMgrInitNVKeyTables?relay SYMBOL "?relay", ZDSecMgrInitNVKeyTables
ZDSecMgrMasterKeyInit SYMBOL "ZDSecMgrMasterKeyInit"
??ZDSecMgrMasterKeyInit?relay SYMBOL "?relay", ZDSecMgrMasterKeyInit
ZDSecMgrMasterKeyLoad SYMBOL "ZDSecMgrMasterKeyLoad"
??ZDSecMgrMasterKeyLoad?relay SYMBOL "?relay", ZDSecMgrMasterKeyLoad
ZDSecMgrMasterKeyLookup SYMBOL "ZDSecMgrMasterKeyLookup"
??ZDSecMgrMasterKeyLookup?relay SYMBOL "?relay", ZDSecMgrMasterKeyLookup
ZDSecMgrMasterKeyStore SYMBOL "ZDSecMgrMasterKeyStore"
??ZDSecMgrMasterKeyStore?relay SYMBOL "?relay", ZDSecMgrMasterKeyStore
ZDSecMgrNewDeviceEvent SYMBOL "ZDSecMgrNewDeviceEvent"
??ZDSecMgrNewDeviceEvent?relay SYMBOL "?relay", ZDSecMgrNewDeviceEvent
ZDSecMgrNwkKeyInit  SYMBOL "ZDSecMgrNwkKeyInit"
??ZDSecMgrNwkKeyInit?relay SYMBOL "?relay", ZDSecMgrNwkKeyInit
ZDSecMgrPermitJoining SYMBOL "ZDSecMgrPermitJoining"
??ZDSecMgrPermitJoining?relay SYMBOL "?relay", ZDSecMgrPermitJoining
ZDSecMgrPermitJoiningTimeout SYMBOL "ZDSecMgrPermitJoiningTimeout"
??ZDSecMgrPermitJoiningTimeout?relay SYMBOL "?relay", ZDSecMgrPermitJoiningTimeout
ZDSecMgrReadKeyFromNv SYMBOL "ZDSecMgrReadKeyFromNv"
??ZDSecMgrReadKeyFromNv?relay SYMBOL "?relay", ZDSecMgrReadKeyFromNv
ZDSecMgrRemoveDeviceInd SYMBOL "ZDSecMgrRemoveDeviceInd"
??ZDSecMgrRemoveDeviceInd?relay SYMBOL "?relay", ZDSecMgrRemoveDeviceInd
ZDSecMgrRequestKeyInd SYMBOL "ZDSecMgrRequestKeyInd"
??ZDSecMgrRequestKeyInd?relay SYMBOL "?relay", ZDSecMgrRequestKeyInd
ZDSecMgrSaveApsLinkKey SYMBOL "ZDSecMgrSaveApsLinkKey"
??ZDSecMgrSaveApsLinkKey?relay SYMBOL "?relay", ZDSecMgrSaveApsLinkKey
ZDSecMgrSaveTCLinkKey SYMBOL "ZDSecMgrSaveTCLinkKey"
??ZDSecMgrSaveTCLinkKey?relay SYMBOL "?relay", ZDSecMgrSaveTCLinkKey
ZDSecMgrSendMasterKey SYMBOL "ZDSecMgrSendMasterKey"
??ZDSecMgrSendMasterKey?relay SYMBOL "?relay", ZDSecMgrSendMasterKey
ZDSecMgrSendNwkKey  SYMBOL "ZDSecMgrSendNwkKey"
??ZDSecMgrSendNwkKey?relay SYMBOL "?relay", ZDSecMgrSendNwkKey
ZDSecMgrSetDefaultNV SYMBOL "ZDSecMgrSetDefaultNV"
??ZDSecMgrSetDefaultNV?relay SYMBOL "?relay", ZDSecMgrSetDefaultNV
ZDSecMgrSwitchKeyInd SYMBOL "ZDSecMgrSwitchKeyInd"
??ZDSecMgrSwitchKeyInd?relay SYMBOL "?relay", ZDSecMgrSwitchKeyInd
ZDSecMgrSwitchNwkKey SYMBOL "ZDSecMgrSwitchNwkKey"
??ZDSecMgrSwitchNwkKey?relay SYMBOL "?relay", ZDSecMgrSwitchNwkKey
ZDSecMgrTCDataLoad  SYMBOL "ZDSecMgrTCDataLoad"
??ZDSecMgrTCDataLoad?relay SYMBOL "?relay", ZDSecMgrTCDataLoad
ZDSecMgrTCExtAddrCheck SYMBOL "ZDSecMgrTCExtAddrCheck"
??ZDSecMgrTCExtAddrCheck?relay SYMBOL "?relay", ZDSecMgrTCExtAddrCheck
ZDSecMgrTransportKeyInd SYMBOL "ZDSecMgrTransportKeyInd"
??ZDSecMgrTransportKeyInd?relay SYMBOL "?relay", ZDSecMgrTransportKeyInd
ZDSecMgrUpdateDeviceInd SYMBOL "ZDSecMgrUpdateDeviceInd"
??ZDSecMgrUpdateDeviceInd?relay SYMBOL "?relay", ZDSecMgrUpdateDeviceInd
ZDSecMgrUpdateNwkKey SYMBOL "ZDSecMgrUpdateNwkKey"
??ZDSecMgrUpdateNwkKey?relay SYMBOL "?relay", ZDSecMgrUpdateNwkKey

        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_GetTrueRand
        FUNCTION SSP_GetTrueRand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupNwkAddr
        FUNCTION APSME_LookupNwkAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupExtAddr
        FUNCTION APSME_LookupExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_TransportKeyReq
        FUNCTION APSME_TransportKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_EstablishKeyReq
        FUNCTION APSME_EstablishKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReadNwkKeyInfo
        FUNCTION NLME_ReadNwkKeyInfo,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryGet
        FUNCTION AddrMgrEntryGet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithExt
        FUNCTION AssocGetWithExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RemoveDeviceReq
        FUNCTION APSME_RemoveDeviceReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithShort
        FUNCTION AssocGetWithShort,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_UpdateDeviceReq
        FUNCTION APSME_UpdateDeviceReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_AuthenticateReq
        FUNCTION APSME_AuthenticateReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SecurityNM
        FUNCTION APSME_SecurityNM,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocMatchDeviceStatus
        FUNCTION AssocMatchDeviceStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocRemove
        FUNCTION AssocRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrLookup
        FUNCTION AddrMgrExtAddrLookup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrEqual
        FUNCTION AddrMgrExtAddrEqual,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_EstablishKeyRsp
        FUNCTION APSME_EstablishKeyRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_UpdateNwkKey
        FUNCTION SSP_UpdateNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_SwitchNwkKey
        FUNCTION SSP_SwitchNwkKey,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SwitchKeyReq
        FUNCTION APSME_SwitchKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrValid
        FUNCTION AddrMgrExtAddrValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryRelease
        FUNCTION AddrMgrEntryRelease,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??APSME_AuthenticateReq?relay
        FUNCTION ??APSME_AuthenticateReq?relay,00H
        EXTERN ??APSME_EstablishKeyReq?relay
        FUNCTION ??APSME_EstablishKeyReq?relay,00H
        EXTERN ??APSME_EstablishKeyRsp?relay
        FUNCTION ??APSME_EstablishKeyRsp?relay,00H
        EXTERN ??APSME_LookupExtAddr?relay
        FUNCTION ??APSME_LookupExtAddr?relay,00H
        EXTERN ??APSME_LookupNwkAddr?relay
        FUNCTION ??APSME_LookupNwkAddr?relay,00H
        EXTERN ??APSME_RemoveDeviceReq?relay
        FUNCTION ??APSME_RemoveDeviceReq?relay,00H
        EXTERN ??APSME_SecurityNM?relay
        FUNCTION ??APSME_SecurityNM?relay,00H
        EXTERN ??APSME_SwitchKeyReq?relay
        FUNCTION ??APSME_SwitchKeyReq?relay,00H
        EXTERN ??APSME_TransportKeyReq?relay
        FUNCTION ??APSME_TransportKeyReq?relay,00H
        EXTERN ??APSME_UpdateDeviceReq?relay
        FUNCTION ??APSME_UpdateDeviceReq?relay,00H
        EXTERN ??AddrMgrEntryGet?relay
        FUNCTION ??AddrMgrEntryGet?relay,00H
        EXTERN ??AddrMgrEntryLookupExt?relay
        FUNCTION ??AddrMgrEntryLookupExt?relay,00H
        EXTERN ??AddrMgrEntryLookupNwk?relay
        FUNCTION ??AddrMgrEntryLookupNwk?relay,00H
        EXTERN ??AddrMgrEntryRelease?relay
        FUNCTION ??AddrMgrEntryRelease?relay,00H
        EXTERN ??AddrMgrEntryUpdate?relay
        FUNCTION ??AddrMgrEntryUpdate?relay,00H
        EXTERN ??AddrMgrExtAddrEqual?relay
        FUNCTION ??AddrMgrExtAddrEqual?relay,00H
        EXTERN ??AddrMgrExtAddrLookup?relay
        FUNCTION ??AddrMgrExtAddrLookup?relay,00H
        EXTERN ??AddrMgrExtAddrSet?relay
        FUNCTION ??AddrMgrExtAddrSet?relay,00H
        EXTERN ??AddrMgrExtAddrValid?relay
        FUNCTION ??AddrMgrExtAddrValid?relay,00H
        EXTERN ??AssocGetWithExt?relay
        FUNCTION ??AssocGetWithExt?relay,00H
        EXTERN ??AssocGetWithShort?relay
        FUNCTION ??AssocGetWithShort?relay,00H
        EXTERN ??AssocMatchDeviceStatus?relay
        FUNCTION ??AssocMatchDeviceStatus?relay,00H
        EXTERN ??AssocRemove?relay
        FUNCTION ??AssocRemove?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??NLME_LeaveReq?relay
        FUNCTION ??NLME_LeaveReq?relay,00H
        EXTERN ??NLME_ReadNwkKeyInfo?relay
        FUNCTION ??NLME_ReadNwkKeyInfo?relay,00H
        EXTERN ??SSP_GetTrueRand?relay
        FUNCTION ??SSP_GetTrueRand?relay,00H
        EXTERN ??SSP_SwitchNwkKey?relay
        FUNCTION ??SSP_SwitchNwkKey?relay,00H
        EXTERN ??SSP_UpdateNwkKey?relay
        FUNCTION ??SSP_UpdateNwkKey?relay,00H
        EXTERN ??ZDApp_NVUpdate?relay
        FUNCTION ??ZDApp_NVUpdate?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcmp?relay
        FUNCTION ??osal_memcmp?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ZDAppTaskID
        EXTERN _NIB
        EXTERN defaultTCLinkKey
        EXTERN devState
        EXTERN zgPreConfigKeys
        EXTERN zgSecurePermitJoin
        EXTERN zgUseDefaultTCLK

// C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸Äºó\Components\stack\zdo\ZDSecMgr.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDSecMgr.c
//    3   Revised:        $Date: 2010-08-20 15:30:00 -0700 (Fri, 20 Aug 2010) $
//    4   Revision:       $Revision: 23463 $
//    5 
//    6   Description:    The ZigBee Device Security Manager.
//    7 
//    8 
//    9   Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 #ifdef __cplusplus
//   41 extern "C"
//   42 {
//   43 #endif
//   44 
//   45 /******************************************************************************
//   46  * INCLUDES
//   47  */
//   48 #include "ZComdef.h"
//   49 #include "OSAL.h"
//   50 #include "OSAL_NV.h"
//   51 #include "ZGlobals.h"
//   52 #include "ssp.h"
//   53 #include "nwk_globals.h"
//   54 #include "nwk.h"
//   55 #include "NLMEDE.h"
//   56 #include "AddrMgr.h"
//   57 #include "AssocList.h"
//   58 #include "APSMEDE.h"
//   59 #include "AF.h"
//   60 #include "ZDConfig.h"
//   61 #include "ZDApp.h"
//   62 #include "ZDSecMgr.h"
//   63 
//   64 
//   65 /******************************************************************************
//   66  * CONSTANTS
//   67  */
//   68 // maximum number of devices managed by this Security Manager
//   69 #if !defined ( ZDSECMGR_DEVICE_MAX )
//   70   #define ZDSECMGR_DEVICE_MAX 3
//   71 #endif
//   72 
//   73 // total number of preconfigured devices (EXT address, MASTER key)
//   74 //devtag.pro.security
//   75 //#define ZDSECMGR_PRECONFIG_MAX ZDSECMGR_DEVICE_MAX
//   76 #define ZDSECMGR_PRECONFIG_MAX 0
//   77 
//   78 // maximum number of MASTER keys this device may hold
//   79 #define ZDSECMGR_MASTERKEY_MAX ZDSECMGR_DEVICE_MAX
//   80 
//   81 // maximum number of LINK keys this device may store
//   82 #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
//   83 
//   84 // total number of devices under control - authentication, SKKE, etc.
//   85 #define ZDSECMGR_CTRL_MAX ZDSECMGR_DEVICE_MAX
//   86 
//   87 // total number of stored devices
//   88 #if !defined ( ZDSECMGR_STORED_DEVICES )
//   89   #define ZDSECMGR_STORED_DEVICES 3
//   90 #endif
//   91   
//   92 // Total number of preconfigured trust center link key
//   93 #if !defined ( ZDSECMGR_TC_DEVICE_MAX )
//   94   #define ZDSECMGR_TC_DEVICE_MAX 1
//   95 #endif
//   96   
//   97 #if ( ZDSECMGR_TC_DEVICE_MAX < 1 ) || ( ZDSECMGR_TC_DEVICE_MAX > 255 )
//   98   #error "ZDSECMGR_TC_DEVICE_MAX shall be between 1 and 255 !"
//   99 #endif
//  100   
//  101 #define ZDSECMGR_CTRL_NONE       0
//  102 #define ZDSECMGR_CTRL_INIT       1
//  103 #define ZDSECMGR_CTRL_TK_MASTER  2
//  104 #define ZDSECMGR_CTRL_SKKE_INIT  3
//  105 #define ZDSECMGR_CTRL_SKKE_WAIT  4
//  106 #define ZDSECMGR_CTRL_SKKE_DONE  5
//  107 #define ZDSECMGR_CTRL_SKKE_FAIL  6
//  108 #define ZDSECMGR_CTRL_TK_NWK     7
//  109 
//  110 #define ZDSECMGR_CTRL_BASE_CNTR      1
//  111 #define ZDSECMGR_CTRL_SKKE_INIT_CNTR 1
//  112 #define ZDSECMGR_CTRL_TK_NWK_CNTR    1
//  113 
//  114 // set SKA slot maximum
//  115 #define ZDSECMGR_SKA_SLOT_MAX 1
//  116 
//  117 // APSME Stub Implementations
//  118 #define ZDSecMgrMasterKeyGet   APSME_MasterKeyGet
//  119 #define ZDSecMgrLinkKeySet     APSME_LinkKeySet
//  120 #define ZDSecMgrLinkKeyNVIdGet APSME_LinkKeyNVIdGet
//  121 #define ZDSecMgrKeyFwdToChild  APSME_KeyFwdToChild
//  122 #define ZDSecMgrIsLinkKeyValid APSME_IsLinkKeyValid
//  123 
//  124 /******************************************************************************
//  125  * TYPEDEFS
//  126  */
//  127 typedef struct
//  128 {
//  129   uint8 extAddr[Z_EXTADDR_LEN];
//  130   uint8 key[SEC_KEY_LEN];
//  131 } ZDSecMgrPreConfigData_t;
//  132 
//  133 typedef struct
//  134 {
//  135   uint16 ami;
//  136   uint8  key[SEC_KEY_LEN];
//  137 } ZDSecMgrMasterKeyData_t;
//  138 
//  139 typedef struct
//  140 {
//  141   uint16            ami;
//  142   uint16            keyNvId;   // index to the Link Key table in NV
//  143   ZDSecMgr_Authentication_Option authenticateOption;
//  144 } ZDSecMgrEntry_t;
//  145 
//  146 typedef struct
//  147 {
//  148   ZDSecMgrEntry_t* entry;
//  149   uint16           parentAddr;
//  150   uint8            secure;
//  151   uint8            state;
//  152   uint8            cntr;
//  153 } ZDSecMgrCtrl_t;
//  154 
//  155 typedef struct
//  156 {
//  157   uint16          nwkAddr;
//  158   uint8*          extAddr;
//  159   uint16          parentAddr;
//  160   uint8           secure;
//  161   uint8           devStatus;
//  162   ZDSecMgrCtrl_t* ctrl;
//  163 } ZDSecMgrDevice_t;
//  164 
//  165 /******************************************************************************
//  166  * LOCAL VARIABLES
//  167  */
//  168 #if 0 // Taken out because the following functionality is only used for test
//  169       // purpose. A more efficient (above) way is used. It can be put
//  170       // back in if customers request for a white/black list feature.
//  171 uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
//  172 {
//  173   { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  174   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
//  175   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  176 };
//  177 #endif
//  178 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  179 uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
ZDSecMgrTCExtAddr:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  180   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
//  181 
//  182 // Key data is put in CONST area for security reasons

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  183 CONST uint8 ZDSecMgrTCMasterKey[SEC_KEY_LEN] =
ZDSecMgrTCMasterKey:
        DB 0, 0, 0, 0, 0, 0, 0, 0, 137, 103, 69, 35, 1, 239, 205, 171
//  184   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  185    0x89,0x67,0x45,0x23,0x01,0xEF,0xCD,0xAB};
//  186 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  187 uint8 ZDSecMgrTCAuthenticated = FALSE;
ZDSecMgrTCAuthenticated:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  188 uint8 ZDSecMgrTCDataLoaded    = FALSE;
ZDSecMgrTCDataLoaded:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  189 
//  190 //devtag.pro.security - remove this
//  191 #if ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  192 const ZDSecMgrPreConfigData_t ZDSecMgrPreConfigData[ZDSECMGR_PRECONFIG_MAX] =
//  193 {
//  194   //---------------------------------------------------------------------------
//  195   // DEVICE A
//  196   //---------------------------------------------------------------------------
//  197   {
//  198     // extAddr
//  199     {0x7C,0x01,0x12,0x13,0x14,0x15,0x16,0x17},
//  200 
//  201     // key
//  202     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  203      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  204   },
//  205   //---------------------------------------------------------------------------
//  206   // DEVICE B
//  207   //---------------------------------------------------------------------------
//  208   {
//  209     // extAddr
//  210     {0x84,0x03,0x00,0x00,0x00,0x4B,0x12,0x00},
//  211 
//  212     // key
//  213     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  214      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  215   },
//  216   //---------------------------------------------------------------------------
//  217   // DEVICE C
//  218   //---------------------------------------------------------------------------
//  219   {
//  220     // extAddr
//  221     {0x3E,0x01,0x12,0x13,0x14,0x15,0x16,0x17},
//  222 
//  223     // key
//  224     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  225      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  226   },
//  227 };
//  228 #endif // ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  229 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  230 ZDSecMgrEntry_t* ZDSecMgrEntries  = NULL;
ZDSecMgrEntries:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  231 ZDSecMgrCtrl_t*  ZDSecMgrCtrlData = NULL;
ZDSecMgrCtrlData:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  232 void ZDSecMgrAddrMgrUpdate( uint16 ami, uint16 nwkAddr );
//  233 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
//  234 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  235 uint8 ZDSecMgrPermitJoiningEnabled;
ZDSecMgrPermitJoiningEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  236 uint8 ZDSecMgrPermitJoiningTimed;
ZDSecMgrPermitJoiningTimed:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  237 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  238 APSME_TCLinkKey_t TrustCenterLinkKey;
TrustCenterLinkKey:
        DS 32
        REQUIRE __INIT_XDATA_Z
//  239 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  240 APSME_ApsLinkKeyFrmCntr_t ApsLinkKeyFrmCntr[ZDSECMGR_ENTRY_MAX];
ApsLinkKeyFrmCntr:
        DS 27
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  241 APSME_TCLinkKeyFrmCntr_t TCLinkKeyFrmCntr[ZDSECMGR_TC_DEVICE_MAX];
TCLinkKeyFrmCntr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  242 
//  243 /******************************************************************************
//  244  * PRIVATE FUNCTIONS
//  245  *
//  246  *   ZDSecMgrMasterKeyInit
//  247  *   ZDSecMgrAddrStore
//  248  *   ZDSecMgrExtAddrStore
//  249  *   ZDSecMgrExtAddrLookup
//  250  *   ZDSecMgrMasterKeyLookup
//  251  *   ZDSecMgrMasterKeyStore
//  252  *   ZDSecMgrEntryInit
//  253  *   ZDSecMgrEntryLookup
//  254  *   ZDSecMgrEntryLookupAMI
//  255  *   ZDSecMgrEntryLookupExt
//  256  *   ZDSecMgrEntryLookupExtGetIndex
//  257  *   ZDSecMgrEntryFree
//  258  *   ZDSecMgrEntryNew
//  259  *   ZDSecMgrCtrlInit
//  260  *   ZDSecMgrCtrlRelease
//  261  *   ZDSecMgrCtrlLookup
//  262  *   ZDSecMgrCtrlSet
//  263  *   ZDSecMgrCtrlAdd
//  264  *   ZDSecMgrCtrlTerm
//  265  *   ZDSecMgrCtrlReset
//  266  *   ZDSecMgrMasterKeyLoad
//  267  *   ZDSecMgrAppKeyGet
//  268  *   ZDSecMgrAppKeyReq
//  269  *   ZDSecMgrEstablishKey
//  270  *   ZDSecMgrSendMasterKey
//  271  *   ZDSecMgrSendNwkKey
//  272  *   ZDSecMgrDeviceEntryRemove
//  273  *   ZDSecMgrDeviceEntryAdd
//  274  *   ZDSecMgrDeviceCtrlHandler
//  275  *   ZDSecMgrDeviceCtrlSetup
//  276  *   ZDSecMgrDeviceCtrlUpdate
//  277  *   ZDSecMgrDeviceRemove
//  278  *   ZDSecMgrDeviceValidateSKKE
//  279  *   ZDSecMgrDeviceValidateRM
//  280  *   ZDSecMgrDeviceValidateCM
//  281  *   ZDSecMgrDeviceValidate
//  282  *   ZDSecMgrDeviceJoin
//  283  *   ZDSecMgrDeviceJoinDirect
//  284  *   ZDSecMgrDeviceJoinFwd
//  285  *   ZDSecMgrDeviceNew
//  286  *   ZDSecMgrAssocDeviceAuth
//  287  *   ZDSecMgrAuthInitiate
//  288  *   ZDSecMgrAuthNwkKey
//  289  *   APSME_TCLinkKeyInit
//  290  *   APSME_IsDefaultTCLK
//  291  */
//  292 //-----------------------------------------------------------------------------
//  293 // master key data
//  294 //-----------------------------------------------------------------------------
//  295 void ZDSecMgrMasterKeyInit( void );
//  296 
//  297 //-----------------------------------------------------------------------------
//  298 // address management
//  299 //-----------------------------------------------------------------------------
//  300 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  301 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  302 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
//  303 
//  304 //-----------------------------------------------------------------------------
//  305 // MASTER key data
//  306 //-----------------------------------------------------------------------------
//  307 ZStatus_t ZDSecMgrMasterKeyLookup( uint16 ami, uint16* pKeyNvId );
//  308 ZStatus_t ZDSecMgrMasterKeyStore( uint16 ami, uint8* key );
//  309 
//  310 //-----------------------------------------------------------------------------
//  311 // entry data
//  312 //-----------------------------------------------------------------------------
//  313 void ZDSecMgrEntryInit(uint8 state);
//  314 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
//  315 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
//  316 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
//  317 ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex );
//  318 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
//  319 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
//  320 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
//  321 void ZDSecMgrApsLinkKeyInit(void);
//  322 #if defined NV_RESTORE
//  323 static void ZDSecMgrWriteNV(void);
//  324 static void ZDSecMgrRestoreFromNV(void);
//  325 #endif
//  326 
//  327 //-----------------------------------------------------------------------------
//  328 // control data
//  329 //-----------------------------------------------------------------------------
//  330 void ZDSecMgrCtrlInit( void );
//  331 void ZDSecMgrCtrlRelease( ZDSecMgrCtrl_t* ctrl );
//  332 void ZDSecMgrCtrlLookup( ZDSecMgrEntry_t* entry, ZDSecMgrCtrl_t** ctrl );
//  333 void ZDSecMgrCtrlSet( ZDSecMgrDevice_t* device,
//  334                       ZDSecMgrEntry_t*  entry,
//  335                       ZDSecMgrCtrl_t*   ctrl );
//  336 ZStatus_t ZDSecMgrCtrlAdd( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t*  entry );
//  337 void ZDSecMgrCtrlTerm( ZDSecMgrEntry_t* entry );
//  338 ZStatus_t ZDSecMgrCtrlReset( ZDSecMgrDevice_t* device,
//  339                              ZDSecMgrEntry_t*  entry );
//  340 
//  341 //-----------------------------------------------------------------------------
//  342 // key support
//  343 //-----------------------------------------------------------------------------
//  344 ZStatus_t ZDSecMgrMasterKeyLoad( uint8* extAddr, uint8* key );
//  345 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
//  346                              uint8*  initExtAddr,
//  347                              uint16  partNwkAddr,
//  348                              uint8*  partExtAddr,
//  349                              uint8** key,
//  350                              uint8*  keyType );
//  351 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
//  352 ZStatus_t ZDSecMgrEstablishKey( ZDSecMgrDevice_t* device );
//  353 ZStatus_t ZDSecMgrSendMasterKey( ZDSecMgrDevice_t* device );
//  354 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
//  355 void ZDSecMgrNwkKeyInit(uint8 setDefault);
//  356 
//  357 //-----------------------------------------------------------------------------
//  358 // device entry
//  359 //-----------------------------------------------------------------------------
//  360 void ZDSecMgrDeviceEntryRemove( ZDSecMgrEntry_t* entry );
//  361 ZStatus_t ZDSecMgrDeviceEntryAdd( ZDSecMgrDevice_t* device, uint16 ami );
//  362 
//  363 //-----------------------------------------------------------------------------
//  364 // device control
//  365 //-----------------------------------------------------------------------------
//  366 void ZDSecMgrDeviceCtrlHandler( ZDSecMgrDevice_t* device );
//  367 void ZDSecMgrDeviceCtrlSetup( ZDSecMgrDevice_t* device );
//  368 void ZDSecMgrDeviceCtrlUpdate( uint8* extAddr, uint8 state );
//  369 
//  370 //-----------------------------------------------------------------------------
//  371 // device management
//  372 //-----------------------------------------------------------------------------
//  373 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
//  374 ZStatus_t ZDSecMgrDeviceValidateSKKE( ZDSecMgrDevice_t* device );
//  375 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
//  376 ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device );
//  377 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
//  378 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
//  379 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
//  380 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
//  381 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
//  382 
//  383 //-----------------------------------------------------------------------------
//  384 // association management
//  385 //-----------------------------------------------------------------------------
//  386 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
//  387 
//  388 //-----------------------------------------------------------------------------
//  389 // authentication management
//  390 //-----------------------------------------------------------------------------
//  391 void ZDSecMgrAuthInitiate( uint8* responder );
//  392 void ZDSecMgrAuthNwkKey( void );
//  393 
//  394 //-----------------------------------------------------------------------------
//  395 // APSME function
//  396 //-----------------------------------------------------------------------------
//  397 void APSME_TCLinkKeyInit( uint8 setDefault );
//  398 uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
//  399 
//  400 /******************************************************************************
//  401  * @fn          ZDSecMgrMasterKeyInit                     ]
//  402  *
//  403  * @brief       Initialize master key data in NV
//  404  *
//  405  * @param       none
//  406  *
//  407  * @return      none
//  408  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  409 void ZDSecMgrMasterKeyInit( void )
ZDSecMgrMasterKeyInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyInit
//  410 {
        FUNCALL ZDSecMgrMasterKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//  411   uint16 index;
//  412   ZDSecMgrMasterKeyData_t   masterKeyData;
//  413 
//  414   masterKeyData.ami = INVALID_NODE_ADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  415 
//  416   osal_memset( &masterKeyData.key, 0x00, SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  417 
//  418   for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX; index++ )
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  419   {
//  420     if ( osal_nv_item_init( (ZCD_NV_MASTER_KEY_DATA_START + index), 
//  421                        sizeof(ZDSecMgrMasterKeyData_t), &masterKeyData) == SUCCESS)
??ZDSecMgrMasterKeyInit_0:
        MOV     A,#0x1
        ADD     A,?V0 + 0
        MOV     R6,A
        MOV     A,#0x3
        ADDC    A,?V0 + 1
        MOV     R7,A
        ; Setup parameters for call to function osal_nv_item_init
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#0x12
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_130:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R1
        JNZ     ??ZDSecMgrMasterKeyInit_1
//  422     {
//  423       // the item already exists in NV just needs to be set to default values
//  424       osal_nv_write( (ZCD_NV_MASTER_KEY_DATA_START + index), 0, 
//  425                       sizeof(ZDSecMgrMasterKeyData_t), &masterKeyData );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 2,#0x12
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        LCALL   ?Subroutine24 & 0xFFFF
//  426     }
//  427   }
??CrossCallReturnLabel_152:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
??ZDSecMgrMasterKeyInit_1:
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_110:
        MOV     A,R6
        SUBB    A,#0x3
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        JC      ??ZDSecMgrMasterKeyInit_0
//  428 }
        LJMP    ?Subroutine86 & 0xFFFF
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_130
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_131
        CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond2) CFA_SP SP+0
        CFI (cfiCond2) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        REQUIRE ??Subroutine101_0
        ; // Fall through to label ??Subroutine101_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine101_0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_132
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_133
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_134
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_135
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_130
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_131
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10
//  429 
//  430 /******************************************************************************
//  431  * @fn          ZDSecMgrAddrStore
//  432  *
//  433  * @brief       Store device addresses.
//  434  *
//  435  * @param       nwkAddr - [in] NWK address
//  436  * @param       extAddr - [in] EXT address
//  437  * @param       ami     - [out] Address Manager index
//  438  *
//  439  * @return      ZStatus_t
//  440  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  441 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrAddrStore:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function ZDSecMgrAddrStore
//  442 {
        FUNCALL ZDSecMgrAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine38 & 0xFFFF
//  443   ZStatus_t      status;
//  444   AddrMgrEntry_t entry;
//  445 
//  446 
//  447   // add entry
//  448   entry.user    = ADDRMGR_USER_SECURITY;
//  449   entry.nwkAddr = nwkAddr;
??CrossCallReturnLabel_58:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
//  450   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_22:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine62 & 0xFFFF
//  451 
//  452   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_97:
        JNZ     ??ZDSecMgrAddrStore_0
//  453   {
//  454     // return successful results
//  455     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  456     status = ZSuccess;
//  457   }
??CrossCallReturnLabel_136:
        SJMP    ??CrossCallReturnLabel_30
//  458   else
//  459   {
//  460     // return failed results
//  461     *ami   = entry.index;
??ZDSecMgrAddrStore_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
//  462     status = ZNwkUnknownDevice;
//  463   }
//  464 
//  465   return status;
??CrossCallReturnLabel_30:
        LJMP    ?Subroutine98 & 0xFFFF
        CFI EndBlock cfiBlock11
//  466 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_136
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_137
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_138
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15
        REQUIRE ??Subroutine102_0
        ; // Fall through to label ??Subroutine102_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine102_0:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_139
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_136
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_137
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_138
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20
        REQUIRE ??Subroutine103_0
        ; // Fall through to label ??Subroutine103_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine103_0:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_140
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_141
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_139
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_136
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_137
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_138
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_261:
        MOV     R1,#0x0
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27
//  467 
//  468 /******************************************************************************
//  469  * @fn          ZDSecMgrExtAddrStore
//  470  *
//  471  * @brief       Store EXT address.
//  472  *
//  473  * @param       extAddr - [in] EXT address
//  474  * @param       ami     - [out] Address Manager index
//  475  *
//  476  * @return      ZStatus_t
//  477  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  478 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrStore:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI Function ZDSecMgrExtAddrStore
//  479 {
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine38 & 0xFFFF
//  480   ZStatus_t      status;
//  481   AddrMgrEntry_t entry;
//  482 
//  483 
//  484   // add entry
//  485   entry.user    = ADDRMGR_USER_SECURITY;
//  486   entry.nwkAddr = nwkAddr;
??CrossCallReturnLabel_59:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
//  487   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_23:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine62 & 0xFFFF
//  488 
//  489   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_98:
        JNZ     ??ZDSecMgrExtAddrStore_0
//  490   {
//  491     // return successful results
//  492     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  493     status = ZSuccess;
//  494   }
??CrossCallReturnLabel_137:
        SJMP    ??CrossCallReturnLabel_31
//  495   else
//  496   {
//  497     // return failed results
//  498     *ami   = entry.index;
??ZDSecMgrExtAddrStore_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
//  499     status = ZNwkUnknownDevice;
//  500   }
//  501 
//  502   return status;
??CrossCallReturnLabel_31:
        SJMP    ?Subroutine98
        CFI EndBlock cfiBlock28
//  503 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine62:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_97
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        LCALL   ?Subroutine84 & 0xFFFF
??CrossCallReturnLabel_231:
        LCALL   ??AddrMgrEntryUpdate?relay
        MOV     A,R1
        XRL     A,#0x1
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        LCALL   ??Subroutine112_0 & 0xFFFF
??CrossCallReturnLabel_275:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        LCALL   ??Subroutine112_0 & 0xFFFF
??CrossCallReturnLabel_274:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_259:
        MOV     R1,#-0x38
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38
//  504 
//  505 /******************************************************************************
//  506  * @fn          ZDSecMgrExtAddrLookup
//  507  *
//  508  * @brief       Lookup index for specified EXT address.
//  509  *
//  510  * @param       extAddr - [in] EXT address
//  511  * @param       ami     - [out] Address Manager index
//  512  *
//  513  * @return      ZStatus_t
//  514  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  515 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrLookup:
        CFI Block cfiBlock39 Using cfiCommon0
        CFI Function ZDSecMgrExtAddrLookup
//  516 {
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  517   ZStatus_t      status;
//  518   AddrMgrEntry_t entry;
//  519 
//  520 
//  521   // lookup entry
//  522   entry.user = ADDRMGR_USER_SECURITY;
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  523   AddrMgrExtAddrSet( entry.extAddr, extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine84 & 0xFFFF
//  524 
//  525   if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
??CrossCallReturnLabel_232:
        LCALL   ??AddrMgrEntryLookupExt?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrExtAddrLookup_0
//  526   {
//  527     // return successful results
//  528     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  529     status = ZSuccess;
//  530   }
??CrossCallReturnLabel_138:
        SJMP    ??CrossCallReturnLabel_32
//  531   else
//  532   {
//  533     // return failed results
//  534     *ami   = entry.index;
??ZDSecMgrExtAddrLookup_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
        CFI EndBlock cfiBlock39
//  535     status = ZNwkUnknownDevice;
//  536   }
//  537 
//  538   return status;
??CrossCallReturnLabel_32:
        REQUIRE ?Subroutine98
        ; // Fall through to label ?Subroutine98
//  539 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine98:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0xd
        LJMP    ??Subroutine123_0 & 0xFFFF
        CFI EndBlock cfiBlock40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine84:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_97
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_98
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_232
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrSet?relay
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        REQUIRE ?Subroutine87
        ; // Fall through to label ?Subroutine87

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine87:
        CFI Block cfiCond45 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_97
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_98
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_232
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_227
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_228
        CFI (cfiCond49) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond49) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond49) CFA_SP SP+-5
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_229
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_230
        CFI (cfiCond51) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond51) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond51) CFA_SP SP+-5
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52
        REQUIRE ??Subroutine104_0
        ; // Fall through to label ??Subroutine104_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine104_0:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_215
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_216
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_217
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_218
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_219
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_220
        CFI (cfiCond58) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond58) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond58) CFA_SP SP+-5
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_221
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_222
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_223
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_224
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_225
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_226
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_97
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_98
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_232
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_227
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_228
        CFI (cfiCond69) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond69) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond69) CFA_SP SP+-5
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_229
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_230
        CFI (cfiCond71) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond71) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond71) CFA_SP SP+-5
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker72 Using cfiCommon1
        CFI (cfiPicker72) NoFunction
        CFI (cfiPicker72) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiPicker72
//  540 
//  541 /******************************************************************************
//  542  * @fn          ZDSecMgrMasterKeyLookup
//  543  *
//  544  * @brief       Lookup MASTER key for specified address index.
//  545  *
//  546  * @param       ami - [in] Address Manager index
//  547  * @param       pKeyNvId - [out] MASTER key NV ID
//  548  *
//  549  * @return      ZStatus_t
//  550  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  551 ZStatus_t ZDSecMgrMasterKeyLookup( uint16 ami, uint16* pKeyNvId )
ZDSecMgrMasterKeyLookup:
        CFI Block cfiBlock73 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyLookup
//  552 {
        FUNCALL ZDSecMgrMasterKeyLookup, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLookup, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLookup, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  553   uint16 index;
//  554   ZDSecMgrMasterKeyData_t masterKeyData;
//  555 
//  556   
//  557   for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX ; index++ )
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  558   {  
//  559     // Read entry index of the Master key table from NV
//  560     osal_nv_read( (ZCD_NV_MASTER_KEY_DATA_START + index), 0, 
//  561                   sizeof(ZDSecMgrMasterKeyData_t), &masterKeyData );
??ZDSecMgrMasterKeyLookup_0:
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V0 + 6,#0x12
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ?Subroutine90 & 0xFFFF
??CrossCallReturnLabel_123:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  562     
//  563     if ( masterKeyData.ami == ami )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,?V0 + 2
        JNZ     ??ZDSecMgrMasterKeyLookup_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 3
??ZDSecMgrMasterKeyLookup_1:
        JNZ     ??ZDSecMgrMasterKeyLookup_2
//  564     {
//  565       // return successful results
//  566       *pKeyNvId   = ZCD_NV_MASTER_KEY_DATA_START + index;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
//  567       
//  568       // clear copy of key in RAM
//  569       osal_memset(&masterKeyData, 0x00, sizeof(ZDSecMgrMasterKeyData_t));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x12
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  570       
//  571       return ZSuccess;
        MOV     R1,#0x0
        SJMP    ??ZDSecMgrMasterKeyLookup_3
//  572     }
//  573   }
??ZDSecMgrMasterKeyLookup_2:
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_45:
        JC      ??ZDSecMgrMasterKeyLookup_0
//  574   
//  575   *pKeyNvId = SEC_NO_KEY_NV_ID;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  576 
//  577   // clear copy of key in RAM
//  578   osal_memset(&masterKeyData, 0x00, sizeof(ZDSecMgrMasterKeyData_t));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x12
        MOV     R5,A
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  579 
//  580   return ZNwkUnknownDevice;
        MOV     R1,#-0x38
??ZDSecMgrMasterKeyLookup_3:
        LJMP    ?Subroutine93 & 0xFFFF
        CFI EndBlock cfiBlock73
//  581 }
//  582 
//  583 /******************************************************************************
//  584  * @fn          ZDSecMgrMasterKeyStore
//  585  *
//  586  * @brief       Store MASTER key for specified address index.
//  587  *
//  588  * @param       ami - [in] Address Manager index
//  589  * @param       key - [in] valid key to store
//  590  *
//  591  * @return      ZStatus_t
//  592  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  593 ZStatus_t ZDSecMgrMasterKeyStore( uint16 ami, uint8* key )
ZDSecMgrMasterKeyStore:
        CFI Block cfiBlock74 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyStore
//  594 {
        FUNCALL ZDSecMgrMasterKeyStore, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyStore, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyStore, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyStore, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyStore, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyStore, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  595   uint16    index;
//  596   ZDSecMgrMasterKeyData_t   masterKeyData;
//  597   
//  598 
//  599   for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX ; index++ )
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  600   {
//  601     // Read entry index of the Master key table from NV
//  602     osal_nv_read( (ZCD_NV_MASTER_KEY_DATA_START + index), 0, 
//  603                    sizeof(ZDSecMgrMasterKeyData_t), &masterKeyData );
??ZDSecMgrMasterKeyStore_0:
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V0 + 6,#0x12
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ?Subroutine90 & 0xFFFF
??CrossCallReturnLabel_124:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  604 
//  605     if ( masterKeyData.ami == INVALID_NODE_ADDR )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrMasterKeyStore_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDSecMgrMasterKeyStore_1:
        JZ      $+5
        LJMP    ??ZDSecMgrMasterKeyStore_2 & 0xFFFF
//  606     {
//  607       // store EXT address index
//  608       masterKeyData.ami = ami;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  609 
//  610       if ( key != NULL )
        MOV     A,R6
        JNZ     ??ZDSecMgrMasterKeyStore_3
        MOV     A,R7
??ZDSecMgrMasterKeyStore_3:
        JZ      ??ZDSecMgrMasterKeyStore_4
//  611       {
//  612         osal_memcpy( masterKeyData.key, key,  SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine65 & 0xFFFF
//  613       }
??CrossCallReturnLabel_189:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        SJMP    ??ZDSecMgrMasterKeyStore_5
//  614       else
//  615       {
//  616         osal_memset( masterKeyData.key, 0, SEC_KEY_LEN );
??ZDSecMgrMasterKeyStore_4:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  617       }
//  618 
//  619       // set new values in NV      
//  620       osal_nv_write( (ZCD_NV_MASTER_KEY_DATA_START + index), 0, 
//  621                       sizeof(ZDSecMgrMasterKeyData_t), &masterKeyData );
??ZDSecMgrMasterKeyStore_5:
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V0 + 0,#0x12
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??Subroutine108_0 & 0xFFFF
??CrossCallReturnLabel_159:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  622        
//  623       // clear copy of key in RAM
//  624       osal_memset( &masterKeyData, 0x00, sizeof(ZDSecMgrMasterKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x12
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  625 
//  626       // return successful results
//  627       return ZSuccess;
        MOV     R1,#0x0
        SJMP    ??ZDSecMgrMasterKeyStore_6
//  628     }
//  629   }
??ZDSecMgrMasterKeyStore_2:
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_46:
        JNC     $+5
        LJMP    ??ZDSecMgrMasterKeyStore_0 & 0xFFFF
//  630   
//  631   // clear copy of key in RAM
//  632   osal_memset( &masterKeyData, 0x00, sizeof(ZDSecMgrMasterKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x12
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  633   
//  634   return ZNwkUnknownDevice;
        MOV     R1,#-0x38
??ZDSecMgrMasterKeyStore_6:
        LJMP    ?Subroutine93 & 0xFFFF
        CFI EndBlock cfiBlock74
//  635 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker77 Using cfiCommon1
        CFI (cfiPicker77) NoFunction
        CFI (cfiPicker77) Picker
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_111:
        MOV     A,?V0 + 0
        SUBB    A,#0x3
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine74:
        CFI Block cfiCond78 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_110
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_45
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_46
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker81 Using cfiCommon1
        CFI (cfiPicker81) NoFunction
        CFI (cfiPicker81) Picker
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        CLR     C
        RET
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiPicker81

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond82 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker84 Using cfiCommon1
        CFI (cfiPicker84) NoFunction
        CFI (cfiPicker84) Picker
        MOV     A,#0x1
        ADD     A,?V0 + 0
        MOV     ?V0 + 4,A
        MOV     A,#0x3
        ADDC    A,?V0 + 1
        MOV     ?V0 + 5,A
        ; Setup parameters for call to function osal_nv_read
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 7,DPH
        MOV     R0,#?V0 + 6
        RET
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiPicker84
//  636 
//  637 /******************************************************************************
//  638  * @fn          ZDSecMgrEntryInit
//  639  *
//  640  * @brief       Initialize entry sub module
//  641  *
//  642  * @param       state - device initialization state
//  643  *
//  644  * @return      none
//  645  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  646 void ZDSecMgrEntryInit(uint8 state)
ZDSecMgrEntryInit:
        CFI Block cfiBlock85 Using cfiCommon0
        CFI Function ZDSecMgrEntryInit
//  647 {
        FUNCALL ZDSecMgrEntryInit, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  648   if (ZDSecMgrEntries == NULL)
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEntryInit_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryInit_0:
        JNZ     ??ZDSecMgrEntryInit_1
//  649   {
//  650     uint16 index;
//  651 
//  652     if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xf
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEntryInit_2
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryInit_2:
        JZ      ??ZDSecMgrEntryInit_1
//  653     {
//  654       return;
//  655     }
//  656 
//  657     for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
        MOV     R0,#0x0
        MOV     R1,#0x0
//  658     {
//  659       ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
??ZDSecMgrEntryInit_3:
        LCALL   ?Subroutine39 & 0xFFFF
//  660       
//  661       ZDSecMgrEntries[index].keyNvId = SEC_NO_KEY_NV_ID;
//  662     }
//  663   }
??CrossCallReturnLabel_147:
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        LCALL   ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_142:
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        JC      ??ZDSecMgrEntryInit_3
??ZDSecMgrEntryInit_1:
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock85
//  664 
//  665 #if defined NV_RESTORE
//  666   if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
//  667   {
//  668     ZDSecMgrRestoreFromNV();
//  669   }
//  670 #else
//  671   (void)state;
//  672 #endif
//  673 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond86 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_147
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_148
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker88 Using cfiCommon1
        CFI (cfiPicker88) NoFunction
        CFI (cfiPicker88) Picker
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x5
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x5
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiPicker88
        REQUIRE ?Subroutine91
        REQUIRE ??Subroutine105_0
        ; // Fall through to label ??Subroutine105_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine105_0:
        CFI Block cfiCond89 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_146
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_147
        CFI (cfiCond90) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond90) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond90) CFA_SP SP+-5
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_148
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker92 Using cfiCommon1
        CFI (cfiPicker92) NoFunction
        CFI (cfiPicker92) Picker
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiPicker92
        REQUIRE ?Subroutine91
        ; // Fall through to label ?Subroutine91

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine91:
        CFI Block cfiCond93 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_147
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_148
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_146
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_142
        CFI (cfiCond96) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond96) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond96) CFA_SP SP+-5
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_173
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_174
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_144
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_145
        CFI (cfiCond100) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond100) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond100) CFA_SP SP+-5
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker101 Using cfiCommon1
        CFI (cfiPicker101) NoFunction
        CFI (cfiPicker101) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        RET
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiPicker101
//  674 
//  675 /******************************************************************************
//  676  * @fn          ZDSecMgrEntryLookup
//  677  *
//  678  * @brief       Lookup entry index using specified NWK address.
//  679  *
//  680  * @param       nwkAddr - [in] NWK address
//  681  * @param       entry   - [out] valid entry
//  682  *
//  683  * @return      ZStatus_t
//  684  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  685 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookup:
        CFI Block cfiBlock102 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookup
//  686 {
        FUNCALL ZDSecMgrEntryLookup, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  687   ZStatus_t      status;
//  688   uint16         index;
//  689   AddrMgrEntry_t addrMgrEntry;
//  690 
//  691 
//  692   // initialize results
//  693   *entry = NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  694   status = ZNwkUnknownDevice;
//  695 
//  696   // verify data is available
//  697   if ( ZDSecMgrEntries != NULL )
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEntryLookup_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryLookup_0:
        JZ      ??ZDSecMgrEntryLookup_1
//  698   {
//  699     addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  700     addrMgrEntry.nwkAddr = nwkAddr;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//  701 
//  702     if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
??CrossCallReturnLabel_215:
        LCALL   ??AddrMgrEntryLookupNwk?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrEntryLookup_1
//  703     {
//  704       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  705       {
//  706         if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
??ZDSecMgrEntryLookup_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x5
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x5
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine81 & 0xFFFF
??CrossCallReturnLabel_112:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??ZDSecMgrEntryLookup_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??ZDSecMgrEntryLookup_3:
        JNZ     ??ZDSecMgrEntryLookup_4
//  707         {
//  708           // return successful results
//  709           *entry = &ZDSecMgrEntries[index];
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        LCALL   ??Subroutine102_0 & 0xFFFF
//  710           status = ZSuccess;
//  711 
//  712           // break from loop
//  713           return status;
//  714         }
//  715       }
??CrossCallReturnLabel_139:
        SJMP    ??ZDSecMgrEntryLookup_5
??ZDSecMgrEntryLookup_4:
        LCALL   ?Subroutine22 & 0xFFFF
//  716     }
//  717   }
??CrossCallReturnLabel_35:
        JC      ??ZDSecMgrEntryLookup_2
//  718 
//  719   return status;
??ZDSecMgrEntryLookup_1:
        MOV     R1,#-0x38
??ZDSecMgrEntryLookup_5:
        LJMP    ?Subroutine98 & 0xFFFF
        CFI EndBlock cfiBlock102
//  720 }
//  721 
//  722 /******************************************************************************
//  723  * @fn          ZDSecMgrEntryLookupAMI
//  724  *
//  725  * @brief       Lookup entry using specified address index
//  726  *
//  727  * @param       ami   - [in] Address Manager index
//  728  * @param       entry - [out] valid entry
//  729  *
//  730  * @return      ZStatus_t
//  731  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  732 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookupAMI:
        CFI Block cfiBlock103 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookupAMI
//  733 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  734   ZStatus_t status;
//  735   uint16    index;
//  736 
//  737 
//  738   // initialize results
//  739   *entry = NULL;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  740   status = ZNwkUnknownDevice;
//  741 
//  742   // verify data is available
//  743   if ( ZDSecMgrEntries != NULL )
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEntryLookupAMI_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryLookupAMI_0:
        JZ      ??ZDSecMgrEntryLookupAMI_1
//  744   {
//  745     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  746     {
//  747       if ( ZDSecMgrEntries[index].ami == ami )
??ZDSecMgrEntryLookupAMI_2:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R6
        MOV     B,#0x5
        MUL     AB
        MOV     R6,A
        MOV     ?V0 + 0,B
        MOV     B,#0x5
        MOV     A,R7
        MUL     AB
        ADD     A,?V0 + 0
        MOV     R7,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??ZDSecMgrEntryLookupAMI_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDSecMgrEntryLookupAMI_3:
        JNZ     ??ZDSecMgrEntryLookupAMI_4
//  748       {
//  749         // return successful results
//  750         *entry = &ZDSecMgrEntries[index];
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine103_0 & 0xFFFF
//  751         status = ZSuccess;
//  752 
//  753         // break from loop
//  754         return status;
//  755       }
//  756     }
??CrossCallReturnLabel_140:
        SJMP    ??ZDSecMgrEntryLookupAMI_5
??ZDSecMgrEntryLookupAMI_4:
        LCALL   ?Subroutine22 & 0xFFFF
//  757   }
??CrossCallReturnLabel_36:
        JC      ??ZDSecMgrEntryLookupAMI_2
//  758 
//  759   return status;
??ZDSecMgrEntryLookupAMI_1:
        MOV     R1,#-0x38
??ZDSecMgrEntryLookupAMI_5:
        LJMP    ??Subroutine124_0 & 0xFFFF
        CFI EndBlock cfiBlock103
//  760 }
//  761 
//  762 /******************************************************************************
//  763  * @fn          ZDSecMgrEntryLookupExt
//  764  *
//  765  * @brief       Lookup entry index using specified EXT address.
//  766  *
//  767  * @param       extAddr - [in] EXT address
//  768  * @param       entry   - [out] valid entry
//  769  *
//  770  * @return      ZStatus_t
//  771  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  772 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookupExt:
        CFI Block cfiBlock104 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookupExt
//  773 {
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  774   ZStatus_t status;
//  775   uint16    ami;
//  776 
//  777 
//  778   // initialize results
//  779   *entry = NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  780   status = ZNwkUnknownDevice;
        MOV     ?V0 + 0,#-0x38
//  781 
//  782   // lookup address index
//  783   if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrEntryLookupExt_0
//  784   {
//  785     status = ZDSecMgrEntryLookupAMI( ami, entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine56 & 0xFFFF
//  786   }
??CrossCallReturnLabel_87:
        MOV     A,R1
        MOV     ?V0 + 0,A
//  787 
//  788   return status;
??ZDSecMgrEntryLookupExt_0:
        LJMP    ?Subroutine92 & 0xFFFF
        CFI EndBlock cfiBlock104
//  789 }
//  790 
//  791 /******************************************************************************
//  792  * @fn          ZDSecMgrEntryLookupExtGetIndex
//  793  *
//  794  * @brief       Lookup entry index using specified EXT address.
//  795  *
//  796  * @param       extAddr - [in] EXT address
//  797  * @param       entryIndex - [out] valid index to the entry table
//  798  *
//  799  * @return      ZStatus_t
//  800  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  801 ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex )
ZDSecMgrEntryLookupExtGetIndex:
        CFI Block cfiBlock105 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookupExtGetIndex
//  802 {
        FUNCALL ZDSecMgrEntryLookupExtGetIndex, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine51 & 0xFFFF
//  803   ZStatus_t status;
//  804   uint16    ami;
//  805   uint16    index;
//  806 
//  807   // initialize results
//  808   status = ZNwkUnknownDevice;
//  809 
//  810   // lookup address index
//  811   if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
??CrossCallReturnLabel_78:
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrEntryLookupExtGetIndex_0
//  812   {  
//  813     // verify data is available
//  814     if ( ZDSecMgrEntries != NULL )
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEntryLookupExtGetIndex_1
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryLookupExtGetIndex_1:
        JZ      ??ZDSecMgrEntryLookupExtGetIndex_0
//  815     {
//  816       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  817       {
//  818         if ( ZDSecMgrEntries[index].ami == ami )
??ZDSecMgrEntryLookupExtGetIndex_2:
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_148:
        LCALL   ?Subroutine81 & 0xFFFF
??CrossCallReturnLabel_113:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??ZDSecMgrEntryLookupExtGetIndex_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??ZDSecMgrEntryLookupExtGetIndex_3:
        JNZ     ??ZDSecMgrEntryLookupExtGetIndex_4
//  819         {
//  820           // return successful results
//  821           *entry = &ZDSecMgrEntries[index];
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine15 & 0xFFFF
//  822           *entryIndex = index;
??CrossCallReturnLabel_25:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ??Subroutine103_0 & 0xFFFF
//  823           status = ZSuccess;
//  824           
//  825           return status;
//  826         }
//  827       }
??CrossCallReturnLabel_141:
        SJMP    ??ZDSecMgrEntryLookupExtGetIndex_5
??ZDSecMgrEntryLookupExtGetIndex_4:
        LCALL   ?Subroutine22 & 0xFFFF
//  828     }
//  829   }
??CrossCallReturnLabel_37:
        JC      ??ZDSecMgrEntryLookupExtGetIndex_2
//  830 
//  831   return status;
??ZDSecMgrEntryLookupExtGetIndex_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryLookupExtGetIndex_5:
        LJMP    ?Subroutine95 & 0xFFFF
        CFI EndBlock cfiBlock105
//  832 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond106 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker110 Using cfiCommon1
        CFI (cfiPicker110) NoFunction
        CFI (cfiPicker110) Picker
        LCALL   ?Subroutine73 & 0xFFFF
??CrossCallReturnLabel_108:
        RET
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiPicker110
//  833 
//  834 /******************************************************************************
//  835  * @fn          ZDSecMgrEntryFree
//  836  *
//  837  * @brief       Free entry.
//  838  *
//  839  * @param       entry - [in] valid entry
//  840  *
//  841  * @return      ZStatus_t
//  842  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  843 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
ZDSecMgrEntryFree:
        CFI Block cfiBlock111 Using cfiCommon0
        CFI Function ZDSecMgrEntryFree
//  844 {
        FUNCALL ZDSecMgrEntryFree, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  845   APSME_LinkKeyData_t   *pApsLinkKey = NULL;
//  846   
//  847   pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        LCALL   ?Subroutine66 & 0xFFFF
//  848 
//  849   if (pApsLinkKey != NULL)
??CrossCallReturnLabel_99:
        JNZ     ??ZDSecMgrEntryFree_0
        MOV     A,R3
??ZDSecMgrEntryFree_0:
        JZ      ??ZDSecMgrEntryFree_1
//  850   {
//  851     osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??osal_memset?relay
//  852 
//  853     // Clear the APS Link key in NV
//  854     osal_nv_write( entry->keyNvId, 0,
//  855                         sizeof(APSME_LinkKeyData_t), pApsLinkKey);
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_150:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 4,#0x18
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,?V0 + 0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ??Subroutine107_0 & 0xFFFF
??CrossCallReturnLabel_155:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  856 
//  857     // set entry to invalid Key
//  858     entry->keyNvId = SEC_NO_KEY_NV_ID;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  859     
//  860     osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
//  861   }
//  862 
//  863   // marking the entry as INVALID_NODE_ADDR
//  864   entry->ami = INVALID_NODE_ADDR;
??ZDSecMgrEntryFree_1:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  865 }
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock111

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond112 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_150
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_151
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker114 Using cfiCommon1
        CFI (cfiPicker114) NoFunction
        CFI (cfiPicker114) Picker
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R7
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiPicker114
        REQUIRE ??Subroutine106_0
        ; // Fall through to label ??Subroutine106_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine106_0:
        CFI Block cfiCond115 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_149
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_150
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_151
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker118 Using cfiCommon1
        CFI (cfiPicker118) NoFunction
        CFI (cfiPicker118) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        RET
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiPicker118

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond119 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_152
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_153
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_154
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker122 Using cfiCommon1
        CFI (cfiPicker122) NoFunction
        CFI (cfiPicker122) Picker
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiPicker122
        REQUIRE ??Subroutine107_0
        ; // Fall through to label ??Subroutine107_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine107_0:
        CFI Block cfiCond123 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_155
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_156
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_157
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_158
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_152
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_153
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_154
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker130 Using cfiCommon1
        CFI (cfiPicker130) NoFunction
        CFI (cfiPicker130) Picker
        MOV     R3,A
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiPicker130
        REQUIRE ??Subroutine108_0
        ; // Fall through to label ??Subroutine108_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine108_0:
        CFI Block cfiCond131 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_159
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_160
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_161
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_162
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_163
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 52)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_164
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 52)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_165
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 52)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_166
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_155
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_156
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_157
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_158
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_152
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_153
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_154
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker146 Using cfiCommon1
        CFI (cfiPicker146) NoFunction
        CFI (cfiPicker146) Picker
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiPicker146
//  866 
//  867 /******************************************************************************
//  868  * @fn          ZDSecMgrEntryNew
//  869  *
//  870  * @brief       Get a new entry.
//  871  *
//  872  * @param       entry - [out] valid entry
//  873  *
//  874  * @return      ZStatus_t
//  875  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  876 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
ZDSecMgrEntryNew:
        CFI Block cfiBlock147 Using cfiCommon0
        CFI Function ZDSecMgrEntryNew
//  877 {
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  878   ZStatus_t status;
//  879   uint16    index;
//  880 
//  881 
//  882   // initialize results
//  883   *entry = NULL;
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  884   status = ZNwkUnknownDevice;
        MOV     R1,#-0x38
//  885 
//  886   // verify data is available
//  887   if ( ZDSecMgrEntries != NULL )
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEntryNew_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryNew_0:
        JZ      ??ZDSecMgrEntryNew_1
//  888   {
//  889     // find available entry
//  890     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
//  891     {
//  892       if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
??ZDSecMgrEntryNew_2:
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0x5
        MUL     AB
        MOV     R4,A
        MOV     R0,B
        MOV     B,#0x5
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrEntryNew_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDSecMgrEntryNew_3:
        JNZ     ??ZDSecMgrEntryNew_4
//  893       {
//  894         // return successful result
//  895         *entry = &ZDSecMgrEntries[index];
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  896         status = ZSuccess;
        MOV     R1,#0x0
//  897 
//  898         // Set the authentication option to default
//  899         ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     DPL,R6
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  900 
//  901         // break from loop
//  902         index = ZDSECMGR_ENTRY_MAX;
        MOV     R6,#0x3
        MOV     R7,A
//  903       }
//  904     }
??ZDSecMgrEntryNew_4:
        LCALL   ?Subroutine23 & 0xFFFF
//  905   }
??CrossCallReturnLabel_39:
        JC      ??ZDSecMgrEntryNew_2
//  906 
//  907   return status;
??ZDSecMgrEntryNew_1:
        LJMP    ??Subroutine141_0 & 0xFFFF
        CFI EndBlock cfiBlock147
//  908 }
//  909 
//  910 /******************************************************************************
//  911  * @fn          ZDSecMgrCtrlInit
//  912  *
//  913  * @brief       Initialize control sub module
//  914  *
//  915  * @param       none
//  916  *
//  917  * @return      none
//  918  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  919 void ZDSecMgrCtrlInit( void )
ZDSecMgrCtrlInit:
        CFI Block cfiBlock148 Using cfiCommon0
        CFI Function ZDSecMgrCtrlInit
//  920 {
        FUNCALL ZDSecMgrCtrlInit, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  921   uint16 size;
//  922   uint16 index;
//  923 
//  924   // allocate entry data
//  925   size = (short)( sizeof(ZDSecMgrCtrl_t) * ZDSECMGR_CTRL_MAX );
//  926 
//  927   ZDSecMgrCtrlData = osal_mem_alloc( size );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x15
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ?Subroutine15 & 0xFFFF
//  928 
//  929   // initialize data
//  930   if ( ZDSecMgrCtrlData != NULL )
??CrossCallReturnLabel_26:
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlInit_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlInit_0:
        JZ      ??ZDSecMgrCtrlInit_1
//  931   {
//  932     for( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  933     {
//  934       ZDSecMgrCtrlData[index].state = ZDSECMGR_CTRL_NONE;
??ZDSecMgrCtrlInit_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x7
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     DPL,R4
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        LCALL   ?Subroutine6 & 0xFFFF
//  935     }
//  936   }
??CrossCallReturnLabel_5:
        JC      ??ZDSecMgrCtrlInit_2
//  937 }
??ZDSecMgrCtrlInit_1:
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock148

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond149 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond151) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond151) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond151) CFA_SP SP+-5
        CFI Block cfiCond152 Using cfiCommon0
        CFI (cfiCond152) NoFunction
        CFI (cfiCond152) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond152) CFA_SP SP+0
        CFI (cfiCond152) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond153) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond153) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond153) CFA_SP SP+-5
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker157 Using cfiCommon1
        CFI (cfiPicker157) NoFunction
        CFI (cfiPicker157) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiPicker157

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond158 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond159) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond159) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond159) CFA_SP SP+-5
        CFI Block cfiPicker160 Using cfiCommon1
        CFI (cfiPicker160) NoFunction
        CFI (cfiPicker160) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine73 & 0xFFFF
??CrossCallReturnLabel_109:
        RET
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiPicker160

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine73:
        CFI Block cfiCond161 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond162 Using cfiCommon0
        CFI (cfiCond162) NoFunction
        CFI (cfiCond162) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_36
        CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond162) CFA_SP SP+0
        CFI (cfiCond162) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_37
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_38
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_4
        CFI (cfiCond165) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond165) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond165) CFA_SP SP+-5
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_5
        CFI (cfiCond166) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond166) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond166) CFA_SP SP+-5
        CFI Block cfiPicker167 Using cfiCommon1
        CFI (cfiPicker167) NoFunction
        CFI (cfiPicker167) Picker
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x3
        MOV     A,R1
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond161
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiPicker167
//  938 
//  939 /******************************************************************************
//  940  * @fn          ZDSecMgrCtrlRelease
//  941  *
//  942  * @brief       Release control data.
//  943  *
//  944  * @param       ctrl - [in] valid control data
//  945  *
//  946  * @return      none
//  947  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  948 void ZDSecMgrCtrlRelease( ZDSecMgrCtrl_t* ctrl )
ZDSecMgrCtrlRelease:
        CFI Block cfiBlock168 Using cfiCommon0
        CFI Function ZDSecMgrCtrlRelease
//  949 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  950   // should always be enough entry control data
//  951   ctrl->state = ZDSECMGR_CTRL_NONE;
        CLR     A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  952 }
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock168
//  953 
//  954 /******************************************************************************
//  955  * @fn          ZDSecMgrCtrlLookup
//  956  *
//  957  * @brief       Lookup control data.
//  958  *
//  959  * @param       entry - [in] valid entry data
//  960  * @param       ctrl  - [out] control data - NULL if not found
//  961  *
//  962  * @return      none
//  963  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  964 void ZDSecMgrCtrlLookup( ZDSecMgrEntry_t* entry, ZDSecMgrCtrl_t** ctrl )
ZDSecMgrCtrlLookup:
        CFI Block cfiBlock169 Using cfiCommon0
        CFI Function ZDSecMgrCtrlLookup
//  965 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  966   uint16 index;
//  967 
//  968 
//  969   // initialize search results
//  970   *ctrl = NULL;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  971 
//  972   // verify data is available
//  973   if ( ZDSecMgrCtrlData != NULL )
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlLookup_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlLookup_0:
        JZ      ??ZDSecMgrCtrlLookup_1
//  974   {
//  975     for ( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  976     {
//  977       // make sure control data is in use
//  978       if ( ZDSecMgrCtrlData[index].state != ZDSECMGR_CTRL_NONE )
??ZDSecMgrCtrlLookup_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     ?V0 + 0,B
        MOV     B,#0x7
        MOV     A,R3
        MUL     AB
        ADD     A,?V0 + 0
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ??Subroutine105_0 & 0xFFFF
??CrossCallReturnLabel_146:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDSecMgrCtrlLookup_3
//  979       {
//  980         // check for entry match
//  981         if ( ZDSecMgrCtrlData[index].entry == entry )
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV     A,R6
        XRL     A,?V0 + 0
        JNZ     ??ZDSecMgrCtrlLookup_4
        MOV     A,R7
        XRL     A,?V0 + 1
??ZDSecMgrCtrlLookup_4:
        JNZ     ??ZDSecMgrCtrlLookup_3
//  982         {
//  983           // return this control data
//  984           *ctrl = &ZDSecMgrCtrlData[index];
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine130_0 & 0xFFFF
//  985 
//  986           // break from loop
//  987           index = ZDSECMGR_CTRL_MAX;
??CrossCallReturnLabel_239:
        MOV     R0,#0x3
        MOV     R1,#0x0
//  988         }
//  989       }
//  990     }
??ZDSecMgrCtrlLookup_3:
        LCALL   ?Subroutine22 & 0xFFFF
//  991   }
??CrossCallReturnLabel_38:
        JC      ??ZDSecMgrCtrlLookup_2
//  992 }
??ZDSecMgrCtrlLookup_1:
        LJMP    ??Subroutine116_0 & 0xFFFF
        CFI EndBlock cfiBlock169

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine51:
        CFI Block cfiCond170 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_78
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+0
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker173 Using cfiCommon1
        CFI (cfiPicker173) NoFunction
        CFI (cfiPicker173) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiPicker173
//  993 
//  994 /******************************************************************************
//  995  * @fn          ZDSecMgrCtrlSet
//  996  *
//  997  * @brief       Set control data.
//  998  *
//  999  * @param       device - [in] valid device data
// 1000  * @param       entry  - [in] valid entry data
// 1001  * @param       ctrl   - [in] valid control data
// 1002  *
// 1003  * @return      none
// 1004  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1005 void ZDSecMgrCtrlSet( ZDSecMgrDevice_t* device,
ZDSecMgrCtrlSet:
        CFI Block cfiBlock174 Using cfiCommon0
        CFI Function ZDSecMgrCtrlSet
// 1006                       ZDSecMgrEntry_t*  entry,
// 1007                       ZDSecMgrCtrl_t*   ctrl )
// 1008 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine131_0 & 0xFFFF
// 1009   // set control date
// 1010   ctrl->parentAddr = device->parentAddr;
??CrossCallReturnLabel_266:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine12 & 0xFFFF
// 1011   ctrl->secure     = device->secure;
??CrossCallReturnLabel_173:
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 1012   ctrl->entry      = entry;
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 1013   ctrl->state      = ZDSECMGR_CTRL_INIT;
        MOV     A,#0x1
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 1014   ctrl->cntr       = 0;
        CLR     A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine12 & 0xFFFF
// 1015 
// 1016   // set device pointer
// 1017   device->ctrl = ctrl;
??CrossCallReturnLabel_174:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine130_0 & 0xFFFF
// 1018 }
??CrossCallReturnLabel_240:
        LJMP    ??Subroutine124_0 & 0xFFFF
        CFI EndBlock cfiBlock174

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond175 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_173
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_174
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker177 Using cfiCommon1
        CFI (cfiPicker177) NoFunction
        CFI (cfiPicker177) Picker
        LCALL   ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_143:
        INC     DPTR
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiPicker177
        REQUIRE ?Subroutine89
        ; // Fall through to label ?Subroutine89

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine89:
        CFI Block cfiCond178 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_173
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_174
        CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond179) CFA_SP SP+0
        CFI (cfiCond179) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_68
        CFI (cfiCond180) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond180) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond180) CFA_SP SP+-5
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_69
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_62
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_63
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_175
        CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond184) CFA_SP SP+0
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker185 Using cfiCommon1
        CFI (cfiPicker185) NoFunction
        CFI (cfiPicker185) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond178
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiPicker185
// 1019 
// 1020 /******************************************************************************
// 1021  * @fn          ZDSecMgrCtrlAdd
// 1022  *
// 1023  * @brief       Add control data.
// 1024  *
// 1025  * @param       device - [in] valid device data
// 1026  * @param       entry  - [in] valid entry data
// 1027  *
// 1028  * @return      ZStatus_t
// 1029  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1030 ZStatus_t ZDSecMgrCtrlAdd( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t*  entry )
ZDSecMgrCtrlAdd:
        CFI Block cfiBlock186 Using cfiCommon0
        CFI Function ZDSecMgrCtrlAdd
// 1031 {
        FUNCALL ZDSecMgrCtrlAdd, ZDSecMgrCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
// 1032   ZStatus_t status;
// 1033   uint16    index;
// 1034 
// 1035 
// 1036   // initialize results
// 1037   status = ZNwkUnknownDevice;
        MOV     R1,#-0x38
// 1038 
// 1039   // verify data is available
// 1040   if ( ZDSecMgrCtrlData != NULL )
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlAdd_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlAdd_0:
        JZ      ??ZDSecMgrCtrlAdd_1
// 1041   {
// 1042     // look for an empty slot
// 1043     for ( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
        MOV     R2,#0x0
        MOV     R3,#0x0
// 1044     {
// 1045       if ( ZDSecMgrCtrlData[index].state == ZDSECMGR_CTRL_NONE )
??ZDSecMgrCtrlAdd_2:
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0x7
        MUL     AB
        MOV     R4,A
        MOV     R0,B
        MOV     B,#0x7
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     ?V0 + 3,A
        MOV     DPL,?V0 + 2
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlAdd_3
// 1046       {
// 1047         // return successful results
// 1048         ZDSecMgrCtrlSet( device, entry, &ZDSecMgrCtrlData[index] );
        ; Setup parameters for call to function ZDSecMgrCtrlSet
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrCtrlSet?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 1049 
// 1050         status = ZSuccess;
        MOV     R1,#0x0
// 1051 
// 1052         // break from loop
// 1053         index = ZDSECMGR_CTRL_MAX;
        MOV     R2,#0x3
        MOV     R3,#0x0
// 1054       }
// 1055     }
??ZDSecMgrCtrlAdd_3:
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        CLR     C
        MOV     A,R2
        SUBB    A,#0x3
        MOV     A,R3
        SUBB    A,#0x0
        JC      ??ZDSecMgrCtrlAdd_2
// 1056   }
// 1057 
// 1058   return status;
??ZDSecMgrCtrlAdd_1:
        LJMP    ??Subroutine129_0 & 0xFFFF
        CFI EndBlock cfiBlock186
// 1059 }
// 1060 
// 1061 /******************************************************************************
// 1062  * @fn          ZDSecMgrCtrlTerm
// 1063  *
// 1064  * @brief       Terminate device control.
// 1065  *
// 1066  * @param       entry - [in] valid entry data
// 1067  *
// 1068  * @return      none
// 1069  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1070 void ZDSecMgrCtrlTerm( ZDSecMgrEntry_t* entry )
ZDSecMgrCtrlTerm:
        CFI Block cfiBlock187 Using cfiCommon0
        CFI Function ZDSecMgrCtrlTerm
// 1071 {
        FUNCALL ZDSecMgrCtrlTerm, ZDSecMgrCtrlLookup
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 2)
// 1072   ZDSecMgrCtrl_t* ctrl;
// 1073 
// 1074   // remove device from control data
// 1075   ZDSecMgrCtrlLookup ( entry, &ctrl );
        ; Setup parameters for call to function ZDSecMgrCtrlLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?Subroutine67 & 0xFFFF
// 1076 
// 1077   if ( ctrl != NULL )
??CrossCallReturnLabel_101:
        JNZ     ??ZDSecMgrCtrlTerm_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlTerm_0:
        JZ      ??CrossCallReturnLabel_68
// 1078   {
// 1079     ZDSecMgrCtrlRelease ( ctrl );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine44 & 0xFFFF
// 1080   }
// 1081 }
??CrossCallReturnLabel_68:
        MOV     A,#0x2
        SJMP    ??Subroutine109_0
        CFI EndBlock cfiBlock187
// 1082 
// 1083 /******************************************************************************
// 1084  * @fn          ZDSecMgrCtrlReset
// 1085  *
// 1086  * @brief       Reset control data.
// 1087  *
// 1088  * @param       device - [in] valid device data
// 1089  * @param       entry  - [in] valid entry data
// 1090  *
// 1091  * @return      ZStatus_t
// 1092  */
// 1093 ZStatus_t ZDSecMgrCtrlReset( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t* entry )
// 1094 {
// 1095   ZStatus_t       status;
// 1096   ZDSecMgrCtrl_t* ctrl;
// 1097 
// 1098 
// 1099   // initialize results
// 1100   status = ZNwkUnknownDevice;
// 1101 
// 1102   // look for a match for the entry
// 1103   ZDSecMgrCtrlLookup( entry, &ctrl );
// 1104 
// 1105   if ( ctrl != NULL )
// 1106   {
// 1107     ZDSecMgrCtrlSet( device, entry, ctrl );
// 1108 
// 1109     status = ZSuccess;
// 1110   }
// 1111   else
// 1112   {
// 1113     status = ZDSecMgrCtrlAdd( device, entry );
// 1114   }
// 1115 
// 1116   return status;
// 1117 }
// 1118 
// 1119 /******************************************************************************
// 1120  * @fn          ZDSecMgrMasterKeyLoad
// 1121  *
// 1122  * @brief       Load the MASTER key for device with specified EXT
// 1123  *              address.
// 1124  *
// 1125  * @param       extAddr - [in] EXT address of device
// 1126  * @param       key     - [in] MASTER key shared with device
// 1127  *
// 1128  * @return      ZStatus_t
// 1129  */
// 1130 ZStatus_t ZDSecMgrMasterKeyLoad( uint8* extAddr, uint8* key )
// 1131 {
// 1132   ZStatus_t status;
// 1133   uint16 ami;
// 1134   uint16 keyNvId;
// 1135 
// 1136 
// 1137   // set status based on policy
// 1138   status = ZDSecMgrExtAddrLookup( extAddr, &ami );
// 1139 
// 1140   if ( status == ZSuccess )
// 1141   {
// 1142     // get the address NV ID
// 1143     if ( ZDSecMgrMasterKeyLookup( ami, &keyNvId ) == ZSuccess )
// 1144     {
// 1145       // overwrite old key in NV
// 1146       osal_nv_write( keyNvId, osal_offsetof(ZDSecMgrMasterKeyData_t, key), 
// 1147                      SEC_KEY_LEN, key );
// 1148     }
// 1149     else
// 1150     {
// 1151       // store new key -- NULL will zero key
// 1152       status = ZDSecMgrMasterKeyStore( ami, key );
// 1153     }
// 1154   }
// 1155 
// 1156   return status;
// 1157 }
// 1158 
// 1159 /******************************************************************************
// 1160  * @fn          ZDSecMgrAppKeyGet
// 1161  *
// 1162  * @brief       get an APP key - option APP(MASTER or LINK) key
// 1163  *
// 1164  * @param       initNwkAddr - [in] NWK address of initiator device
// 1165  * @param       initExtAddr - [in] EXT address of initiator device
// 1166  * @param       partNwkAddr - [in] NWK address of partner device
// 1167  * @param       partExtAddr - [in] EXT address of partner device
// 1168  * @param       key         - [out] APP(MASTER or LINK) key
// 1169  * @param       keyType     - [out] APP(MASTER or LINK) key type
// 1170  *
// 1171  * @return      ZStatus_t
// 1172  */

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
// 1173 uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
ZDSecMgrAppKeyType:
        DS 1
        REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
        REQUIRE __INIT_XDATA_I
// 1174                                                  // to KEY_TYPE_APP_LINK since
// 1175                                                  // only specific requirement
// 1176                                                  // right now comes from SE profile
// 1177 
// 1178 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
// 1179                              uint8*  initExtAddr,
// 1180                              uint16  partNwkAddr,
// 1181                              uint8*  partExtAddr,
// 1182                              uint8** key,
// 1183                              uint8*  keyType )
// 1184 {
// 1185   // Intentionally unreferenced parameters
// 1186   (void)initNwkAddr;
// 1187   (void)initExtAddr;
// 1188   (void)partNwkAddr;
// 1189   (void)partExtAddr;
// 1190   
// 1191   //---------------------------------------------------------------------------
// 1192   // note:
// 1193   // should use a robust mechanism to generate keys, for example
// 1194   // combine EXT addresses and call a hash function
// 1195   //---------------------------------------------------------------------------
// 1196   SSP_GetTrueRand( SEC_KEY_LEN, *key );
// 1197 
// 1198   *keyType = ZDSecMgrAppKeyType;
// 1199 
// 1200   return ZSuccess;
// 1201 }
// 1202 
// 1203 /******************************************************************************
// 1204  * @fn          ZDSecMgrAppKeyReq
// 1205  *
// 1206  * @brief       Process request for APP key between two devices.
// 1207  *
// 1208  * @param       device - [in] ZDO_RequestKeyInd_t, request info
// 1209  *
// 1210  * @return      none
// 1211  */
// 1212 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
// 1213 {
// 1214   APSME_TransportKeyReq_t req;
// 1215   uint8                   initExtAddr[Z_EXTADDR_LEN];
// 1216   uint16                  partNwkAddr;
// 1217   uint8                   key[SEC_KEY_LEN];
// 1218 
// 1219 
// 1220   // validate initiator and partner
// 1221   if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
// 1222        ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
// 1223   {
// 1224     // point the key to some memory
// 1225     req.key = key;
// 1226 
// 1227     // get an APP key - option APP (MASTER or LINK) key
// 1228     if ( ZDSecMgrAppKeyGet( ind->srcAddr,
// 1229                             initExtAddr,
// 1230                             partNwkAddr,
// 1231                             ind->partExtAddr,
// 1232                             &req.key,
// 1233                             &req.keyType ) == ZSuccess )
// 1234     {
// 1235       // always secure
// 1236       req.nwkSecure = TRUE;
// 1237       req.apsSecure = TRUE;
// 1238       req.tunnel    = NULL;
// 1239 
// 1240       // send key to initiator device
// 1241       req.dstAddr   = ind->srcAddr;
// 1242       req.extAddr   = ind->partExtAddr;
// 1243       req.initiator = TRUE;
// 1244       APSME_TransportKeyReq( &req );
// 1245 
// 1246       // send key to partner device
// 1247       req.dstAddr   = partNwkAddr;
// 1248       req.extAddr   = initExtAddr;
// 1249       req.initiator = FALSE;
// 1250 
// 1251       APSME_TransportKeyReq( &req );
// 1252       
// 1253       // clear copy of key in RAM
// 1254       osal_memset( key, 0x00, SEC_KEY_LEN);
// 1255 
// 1256     }
// 1257   }
// 1258 }
// 1259 
// 1260 /******************************************************************************
// 1261  * @fn          ZDSecMgrEstablishKey
// 1262  *
// 1263  * @brief       Start SKKE with device joining network.
// 1264  *
// 1265  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1266  *
// 1267  * @return      ZStatus_t
// 1268  */
// 1269 ZStatus_t ZDSecMgrEstablishKey( ZDSecMgrDevice_t* device )
// 1270 {
// 1271   ZStatus_t               status;
// 1272   APSME_EstablishKeyReq_t req;
// 1273 
// 1274 
// 1275   req.respExtAddr = device->extAddr;
// 1276   req.method      = APSME_SKKE_METHOD;
// 1277 
// 1278   if ( device->parentAddr == NLME_GetShortAddr() )
// 1279   {
// 1280     req.dstAddr   = device->nwkAddr;
// 1281     //devtag.0604.todo - remove obsolete
// 1282     req.apsSecure = FALSE;
// 1283     req.nwkSecure = FALSE;
// 1284   }
// 1285   else
// 1286   {
// 1287     req.dstAddr   = device->parentAddr;
// 1288     //devtag.0604.todo - remove obsolete
// 1289     req.apsSecure = TRUE;
// 1290     req.nwkSecure = TRUE;
// 1291   }
// 1292 
// 1293   status = APSME_EstablishKeyReq( &req );
// 1294 
// 1295   return status;
// 1296 }
// 1297 
// 1298 /******************************************************************************
// 1299  * @fn          ZDSecMgrSendMasterKey
// 1300  *
// 1301  * @brief       Send MASTER key to device joining network.
// 1302  *
// 1303  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1304  *
// 1305  * @return      ZStatus_t
// 1306  */
// 1307 ZStatus_t ZDSecMgrSendMasterKey( ZDSecMgrDevice_t* device )
// 1308 {
// 1309   ZStatus_t status;
// 1310   APSME_TransportKeyReq_t req;
// 1311   uint16 keyNvId;
// 1312   uint8 masterKey[SEC_KEY_LEN];
// 1313 
// 1314 
// 1315   req.keyType = KEY_TYPE_TC_MASTER;
// 1316   req.extAddr = device->extAddr;
// 1317   req.tunnel  = NULL;
// 1318 
// 1319   if ( ZDSecMgrMasterKeyLookup( device->ctrl->entry->ami, &keyNvId ) == ZSuccess )
// 1320   {
// 1321     osal_nv_read( keyNvId, osal_offsetof(ZDSecMgrMasterKeyData_t, key), 
// 1322                   SEC_KEY_LEN, masterKey );
// 1323   }
// 1324   else
// 1325   {
// 1326     // in case read from NV fails
// 1327     osal_memset( masterKey, 0x00, SEC_KEY_LEN);
// 1328   }
// 1329 
// 1330   req.key = masterKey;
// 1331 
// 1332   //check if using secure hop to to parent
// 1333   if ( device->parentAddr != NLME_GetShortAddr() )
// 1334   {
// 1335     //send to parent with security
// 1336     req.dstAddr   = device->parentAddr;
// 1337     req.nwkSecure = TRUE;
// 1338     req.apsSecure = TRUE;
// 1339   }
// 1340   else
// 1341   {
// 1342     //direct with no security
// 1343     req.dstAddr   = device->nwkAddr;
// 1344     req.nwkSecure = FALSE;
// 1345     req.apsSecure = FALSE;
// 1346   }
// 1347 
// 1348   status = APSME_TransportKeyReq( &req );
// 1349 
// 1350   // clear copy of key in RAM
// 1351   osal_memset( masterKey, 0x00, SEC_KEY_LEN);
// 1352 
// 1353   return status;
// 1354 }
// 1355 
// 1356 /******************************************************************************
// 1357  * @fn          ZDSecMgrSendNwkKey
// 1358  *
// 1359  * @brief       Send NWK key to device joining network.
// 1360  *
// 1361  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1362  *
// 1363  * @return      ZStatus_t
// 1364  */
// 1365 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
// 1366 {
// 1367   ZStatus_t status;
// 1368   APSME_TransportKeyReq_t req;
// 1369   APSDE_FrameTunnel_t tunnel;
// 1370   nwkKeyDesc tmpKey;
// 1371     
// 1372   req.dstAddr   = device->nwkAddr;
// 1373   req.extAddr   = device->extAddr;
// 1374 
// 1375   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1376     req.keyType   = KEY_TYPE_NWK_HIGH;
// 1377   else
// 1378     req.keyType   = KEY_TYPE_NWK;
// 1379 
// 1380   // get the Active Key into a local variable 
// 1381   if( NLME_ReadNwkKeyInfo( 0, sizeof(tmpKey), &tmpKey,
// 1382                            ZCD_NV_NWK_ACTIVE_KEY_INFO ) != SUCCESS )
// 1383   {
// 1384     // set key data to all 0s if NV read fails
// 1385     osal_memset(&tmpKey, 0x00, sizeof(tmpKey));
// 1386   }
// 1387   
// 1388   if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
// 1389       || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
// 1390   {
// 1391     // set values
// 1392     req.keySeqNum = tmpKey.keySeqNum;
// 1393     req.key       = tmpKey.key;
// 1394 
// 1395     //devtag.pro.security.todo - make sure that if there is no link key the NWK
// 1396     //key isn't used to secure the frame at the APS layer -- since the receiving
// 1397     //device may not have a NWK key yet
// 1398     req.apsSecure = TRUE;
// 1399 
// 1400     // check if using secure hop to to parent
// 1401     if ( device->parentAddr == NLME_GetShortAddr() )
// 1402     {
// 1403       req.nwkSecure = FALSE;
// 1404       req.tunnel    = NULL;
// 1405     }
// 1406     else
// 1407     {
// 1408       req.nwkSecure   = TRUE;
// 1409       req.tunnel      = &tunnel;
// 1410       req.tunnel->tna = device->parentAddr;
// 1411       req.tunnel->dea = device->extAddr;
// 1412     }
// 1413   }
// 1414   else
// 1415   {
// 1416     // default values
// 1417     //devtag.0604.verify
// 1418     req.nwkSecure = TRUE;
// 1419     req.apsSecure = FALSE;
// 1420     req.tunnel    = NULL;
// 1421 
// 1422     if ( device->parentAddr != NLME_GetShortAddr() )
// 1423     {
// 1424       req.dstAddr = device->parentAddr;
// 1425     }
// 1426 
// 1427     // special cases
// 1428     //devtag.0604.todo - modify to preconfig flag
// 1429     if ( device->secure == FALSE )
// 1430     {
// 1431       req.keySeqNum = tmpKey.keySeqNum;
// 1432       req.key       = tmpKey.key;
// 1433 
// 1434       // check if using secure hop to to parent
// 1435       if ( device->parentAddr == NLME_GetShortAddr() )
// 1436       {
// 1437         req.nwkSecure = FALSE;
// 1438       }
// 1439     }
// 1440     else
// 1441     {
// 1442       req.key       = NULL;
// 1443       req.keySeqNum = 0;
// 1444     }
// 1445   }
// 1446 
// 1447   status = APSME_TransportKeyReq( &req );
// 1448 
// 1449   // clear copy of key in RAM before return
// 1450   osal_memset( &tmpKey, 0x00, sizeof(nwkKeyDesc) );
// 1451 
// 1452   return status;
// 1453 }
// 1454 
// 1455 /******************************************************************************
// 1456  * @fn          ZDSecMgrDeviceEntryRemove
// 1457  *
// 1458  * @brief       Remove device entry.
// 1459  *
// 1460  * @param       entry - [in] valid entry
// 1461  *
// 1462  * @return      none
// 1463  */
// 1464 void ZDSecMgrDeviceEntryRemove( ZDSecMgrEntry_t* entry )
// 1465 {
// 1466   // terminate device control
// 1467   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1468   {
// 1469     ZDSecMgrCtrlTerm( entry );
// 1470   }
// 1471 
// 1472   // remove device from entry data
// 1473   ZDSecMgrEntryFree( entry );
// 1474 
// 1475   // remove EXT address
// 1476   //ZDSecMgrExtAddrRelease( aiOld );
// 1477 }
// 1478 
// 1479 /******************************************************************************
// 1480  * @fn          ZDSecMgrDeviceRemoveByExtAddr
// 1481  *
// 1482  * @brief       Remove device entry by its ext address.
// 1483  *
// 1484  * @param       pAddr - pointer to the extended address
// 1485  *
// 1486  * @return      ZStatus_t
// 1487  */
// 1488 ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
// 1489 {
// 1490   ZDSecMgrEntry_t *pEntry;
// 1491   uint8           retValue;
// 1492   
// 1493   retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
// 1494   
// 1495   if( retValue == ZSuccess )
// 1496   {
// 1497     ZDSecMgrDeviceEntryRemove( pEntry );
// 1498   }
// 1499   
// 1500   return retValue;
// 1501 }
// 1502 
// 1503 /******************************************************************************
// 1504  * @fn          ZDSecMgrDeviceEntryAdd
// 1505  *
// 1506  * @brief       Add entry.
// 1507  *
// 1508  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1509  * @param       ami    - [in] Address Manager index
// 1510  *
// 1511  * @return      ZStatus_t
// 1512  */
// 1513 void ZDSecMgrAddrMgrUpdate( uint16 ami, uint16 nwkAddr )
// 1514 {
// 1515   AddrMgrEntry_t entry;
// 1516 
// 1517   // get the ami data
// 1518   entry.user  = ADDRMGR_USER_SECURITY;
// 1519   entry.index = ami;
// 1520 
// 1521   AddrMgrEntryGet( &entry );
// 1522 
// 1523   // check if NWK address is same
// 1524   if ( entry.nwkAddr != nwkAddr )
// 1525   {
// 1526     // update NWK address
// 1527     entry.nwkAddr = nwkAddr;
// 1528 
// 1529     AddrMgrEntryUpdate( &entry );
// 1530   }
// 1531 }
// 1532 
// 1533 ZStatus_t ZDSecMgrDeviceEntryAdd( ZDSecMgrDevice_t* device, uint16 ami )
// 1534 {
// 1535   ZStatus_t        status;
// 1536   ZDSecMgrEntry_t* entry;
// 1537 
// 1538 
// 1539   // initialize as unknown until completion
// 1540   status = ZNwkUnknownDevice;
// 1541 
// 1542   device->ctrl = NULL;
// 1543 
// 1544   // make sure not already registered
// 1545   if ( ZDSecMgrEntryLookup( device->nwkAddr, &entry ) == ZSuccess )
// 1546   {
// 1547     // verify that address index is same
// 1548     if ( entry->ami != ami )
// 1549     {
// 1550       // remove conflicting entry
// 1551       ZDSecMgrDeviceEntryRemove( entry );
// 1552 
// 1553       if ( ZDSecMgrEntryLookupAMI( ami, &entry ) == ZSuccess )
// 1554       {
// 1555         // update NWK address
// 1556         ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
// 1557       }
// 1558     }
// 1559   }
// 1560   else if ( ZDSecMgrEntryLookupAMI( ami, &entry ) == ZSuccess )
// 1561   {
// 1562     // update NWK address
// 1563     ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
// 1564   }
// 1565 
// 1566   // check if a new entry needs to be created
// 1567   if ( entry == NULL )
// 1568   {
// 1569     // get new entry
// 1570     if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
// 1571     {
// 1572       // reset entry lkd
// 1573 
// 1574       // finish setting up entry
// 1575       entry->ami = ami;
// 1576 
// 1577       // update NWK address
// 1578       ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
// 1579 
// 1580       // enter new device into device control
// 1581       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1582       {
// 1583         status = ZDSecMgrCtrlAdd( device, entry );
// 1584       }
// 1585       else
// 1586       {
// 1587         status = ZSuccess;
// 1588       }
// 1589     }
// 1590   }
// 1591   else
// 1592   {
// 1593     // reset entry lkd
// 1594 
// 1595     // reset entry in entry control
// 1596     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1597     {
// 1598       status = ZDSecMgrCtrlReset( device, entry );
// 1599     }
// 1600     else
// 1601     {
// 1602       status = ZSuccess;
// 1603     }
// 1604   }
// 1605 
// 1606   return status;
// 1607 }
// 1608 
// 1609 /******************************************************************************
// 1610  * @fn          ZDSecMgrDeviceCtrlHandler
// 1611  *
// 1612  * @brief       Device control handler.
// 1613  *
// 1614  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1615  *
// 1616  * @return      none
// 1617  */
// 1618 void ZDSecMgrDeviceCtrlHandler( ZDSecMgrDevice_t* device )
// 1619 {
// 1620   uint8 state;
// 1621   uint8 cntr;
// 1622 
// 1623 
// 1624   state = device->ctrl->state;
// 1625   cntr  = ZDSECMGR_CTRL_BASE_CNTR;
// 1626 
// 1627   switch ( state )
// 1628   {
// 1629     case ZDSECMGR_CTRL_TK_MASTER:
// 1630       if ( ZDSecMgrSendMasterKey( device ) == ZSuccess )
// 1631       {
// 1632         state = ZDSECMGR_CTRL_SKKE_INIT;
// 1633         cntr  = ZDSECMGR_CTRL_SKKE_INIT_CNTR;
// 1634       }
// 1635       break;
// 1636 
// 1637     case ZDSECMGR_CTRL_SKKE_INIT:
// 1638       if ( ZDSecMgrEstablishKey( device ) == ZSuccess )
// 1639       {
// 1640         state = ZDSECMGR_CTRL_SKKE_WAIT;
// 1641       }
// 1642       break;
// 1643 
// 1644     case ZDSECMGR_CTRL_SKKE_WAIT:
// 1645       // continue to wait for SKA control timeout
// 1646       break;
// 1647 
// 1648     case ZDSECMGR_CTRL_TK_NWK:
// 1649       if ( ZDSecMgrSendNwkKey( device ) == ZSuccess )
// 1650       {
// 1651         state = ZDSECMGR_CTRL_NONE;
// 1652       }
// 1653       break;
// 1654 
// 1655     default:
// 1656       state = ZDSECMGR_CTRL_NONE;
// 1657       break;
// 1658   }
// 1659 
// 1660   if ( state != ZDSECMGR_CTRL_NONE )
// 1661   {
// 1662     device->ctrl->state = state;
// 1663     device->ctrl->cntr  = cntr;
// 1664 
// 1665     osal_start_timerEx(ZDAppTaskID, ZDO_SECMGR_EVENT, 100 );
// 1666   }
// 1667   else
// 1668   {
// 1669     ZDSecMgrCtrlRelease( device->ctrl );
// 1670   }
// 1671 }
// 1672 
// 1673 /******************************************************************************
// 1674  * @fn          ZDSecMgrDeviceCtrlSetup
// 1675  *
// 1676  * @brief       Setup device control.
// 1677  *
// 1678  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1679  *
// 1680  * @return      ZStatus_t
// 1681  */
// 1682 void ZDSecMgrDeviceCtrlSetup( ZDSecMgrDevice_t* device )
// 1683 {
// 1684   if ( device->ctrl != NULL )
// 1685   {
// 1686     if ( device->secure == FALSE )
// 1687     {
// 1688       // send the master key data to the joining device
// 1689       device->ctrl->state = ZDSECMGR_CTRL_TK_MASTER;
// 1690     }
// 1691     else
// 1692     {
// 1693       // start SKKE
// 1694       device->ctrl->state = ZDSECMGR_CTRL_SKKE_INIT;
// 1695     }
// 1696 
// 1697     ZDSecMgrDeviceCtrlHandler( device );
// 1698   }
// 1699 }
// 1700 
// 1701 /******************************************************************************
// 1702  * @fn          ZDSecMgrDeviceCtrlUpdate
// 1703  *
// 1704  * @brief       Update control data.
// 1705  *
// 1706  * @param       extAddr - [in] EXT address
// 1707  * @param       state   - [in] new control state
// 1708  *
// 1709  * @return      none
// 1710  */
// 1711 void ZDSecMgrDeviceCtrlUpdate( uint8* extAddr, uint8 state )
// 1712 {
// 1713   ZDSecMgrEntry_t* entry;
// 1714   ZDSecMgrCtrl_t*  ctrl;
// 1715 
// 1716 
// 1717   // lookup device entry data
// 1718   ZDSecMgrEntryLookupExt( extAddr, &entry );
// 1719 
// 1720   if ( entry != NULL )
// 1721   {
// 1722     // lookup device control data
// 1723     ZDSecMgrCtrlLookup( entry, &ctrl );
// 1724 
// 1725     // make sure control data is valid
// 1726     if ( ctrl != NULL )
// 1727     {
// 1728       // possible state transitions
// 1729       if ( ctrl->state == ZDSECMGR_CTRL_SKKE_WAIT )
// 1730       {
// 1731         if ( state == ZDSECMGR_CTRL_SKKE_DONE )
// 1732         {
// 1733           // send the network key
// 1734           ctrl->state = ZDSECMGR_CTRL_TK_NWK;
// 1735           ctrl->cntr  = ZDSECMGR_CTRL_TK_NWK_CNTR;
// 1736         }
// 1737         else if ( state == ZDSECMGR_CTRL_SKKE_FAIL )
// 1738         {
// 1739           // force default timeout in order to cleanup control logic
// 1740           ctrl->state = ZDSECMGR_CTRL_SKKE_FAIL;
// 1741           ctrl->cntr  = ZDSECMGR_CTRL_BASE_CNTR;
// 1742         }
// 1743       }
// 1744       // timer should be active
// 1745     }
// 1746   }
// 1747 }
// 1748 
// 1749 void APSME_SKA_TimerExpired( uint8 initiator, uint8* partExtAddr );
// 1750 void APSME_SKA_TimerExpired( uint8 initiator, uint8* partExtAddr )
// 1751 {
// 1752   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1753   {
// 1754     if ( initiator == TRUE )
// 1755     {
// 1756       ZDSecMgrDeviceCtrlUpdate( partExtAddr, ZDSECMGR_CTRL_SKKE_FAIL );
// 1757     }
// 1758   }
// 1759 }
// 1760 
// 1761 /******************************************************************************
// 1762  * @fn          ZDSecMgrDeviceRemove
// 1763  *
// 1764  * @brief       Remove device from network.
// 1765  *
// 1766  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1767  *
// 1768  * @return      none
// 1769  */
// 1770 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
// 1771 {
// 1772   APSME_RemoveDeviceReq_t remDevReq;
// 1773   NLME_LeaveReq_t         leaveReq;
// 1774   associated_devices_t*   assoc;
// 1775 
// 1776 
// 1777   // check if parent, remove the device
// 1778   if ( device->parentAddr == NLME_GetShortAddr() )
// 1779   {
// 1780     // this is the parent of the device
// 1781     leaveReq.extAddr        = device->extAddr;
// 1782     leaveReq.removeChildren = FALSE;
// 1783     leaveReq.rejoin         = FALSE;
// 1784 
// 1785     // find child association
// 1786     assoc = AssocGetWithExt( device->extAddr );
// 1787 
// 1788     if ( ( assoc != NULL                            ) &&
// 1789          ( assoc->nodeRelation >= CHILD_RFD         ) &&
// 1790          ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
// 1791     {
// 1792       // check if associated device is authenticated
// 1793       if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
// 1794       {
// 1795         leaveReq.silent = FALSE;
// 1796       }
// 1797       else
// 1798       {
// 1799         leaveReq.silent = TRUE;
// 1800       }
// 1801 
// 1802       NLME_LeaveReq( &leaveReq );
// 1803     }
// 1804   }
// 1805   else
// 1806   {
// 1807     // this is not the parent of the device
// 1808     remDevReq.parentAddr   = device->parentAddr;
// 1809     remDevReq.childExtAddr = device->extAddr;
// 1810 
// 1811     APSME_RemoveDeviceReq( &remDevReq );
// 1812   }
// 1813 }
// 1814 
// 1815 /******************************************************************************
// 1816  * @fn          ZDSecMgrDeviceValidateSKKE
// 1817  *
// 1818  * @brief       Decide whether device is allowed for SKKE.
// 1819  *
// 1820  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1821  *
// 1822  * @return      ZStatus_t
// 1823  */
// 1824 ZStatus_t ZDSecMgrDeviceValidateSKKE( ZDSecMgrDevice_t* device )
// 1825 {
// 1826   ZStatus_t status;
// 1827   uint16 ami;
// 1828   uint16 keyNvId;
// 1829 
// 1830 
// 1831   // get EXT address
// 1832   status = ZDSecMgrExtAddrLookup( device->extAddr, &ami );
// 1833 
// 1834   if ( status == ZSuccess )
// 1835   {
// 1836     // get MASTER key
// 1837     status = ZDSecMgrMasterKeyLookup( ami, &keyNvId );
// 1838 
// 1839     if ( status == ZSuccess )
// 1840     {
// 1841       status = ZDSecMgrDeviceEntryAdd( device, ami );
// 1842     }
// 1843   }
// 1844 
// 1845   return status;
// 1846 }
// 1847 
// 1848 /******************************************************************************
// 1849  * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
// 1850  *
// 1851  * @brief       Decide whether device is allowed.
// 1852  *
// 1853  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1854  *
// 1855  * @return      ZStatus_t
// 1856  */
// 1857 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
// 1858 {
// 1859 
// 1860   ZStatus_t status;
// 1861   status = ZSuccess;
// 1862 
// 1863   (void)device;  // Intentionally unreferenced parameter
// 1864   
// 1865   // For test purpose, turning off the zgSecurePermitJoin flag will force
// 1866   // the trust center to reject any newly joining devices by sending
// 1867   // Remove-device to the parents.
// 1868   if ( zgSecurePermitJoin == false )
// 1869   {
// 1870     status = ZNwkUnknownDevice;
// 1871   }
// 1872 
// 1873 
// 1874 
// 1875 #if 0  // Taken out because the following functionality is only used for test
// 1876        // purpose. A more efficient (above) way is used. It can be put
// 1877        // back in if customers request for a white/black list feature.
// 1878        // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
// 1879 
// 1880   // The following code processes the device black list (stored device list)
// 1881   // If the joining device is not part of the forbidden device list
// 1882   // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
// 1883   // will send Remove-device and ban the device from joining.
// 1884 
// 1885   uint8     index;
// 1886   uint8*    restricted;
// 1887 
// 1888   // Look through the stored device list - used for restricted devices
// 1889   for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
// 1890   {
// 1891     restricted = ZDSecMgrStoredDeviceList[index];
// 1892 
// 1893     if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
// 1894     {
// 1895       // return as unknown device in regards to validation
// 1896       status = ZNwkUnknownDevice;
// 1897 
// 1898       // break from loop
// 1899       index = ZDSECMGR_STORED_DEVICES;
// 1900     }
// 1901   }
// 1902 
// 1903 #endif
// 1904 
// 1905   return status;
// 1906 }
// 1907 
// 1908 /******************************************************************************
// 1909  * @fn          ZDSecMgrDeviceValidateCM (COMMERCIAL MODE)
// 1910  *
// 1911  * @brief       Decide whether device is allowed.
// 1912  *
// 1913  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1914  *
// 1915  * @return      ZStatus_t
// 1916  */
// 1917 //devtag.pro.security
// 1918 ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device )
// 1919 {
// 1920   ZStatus_t status;
// 1921   uint16    ami;
// 1922   uint8     key[SEC_KEY_LEN];
// 1923 
// 1924 
// 1925   // implement EXT address and MASTER key policy here -- the total number of
// 1926   // Security Manager entries should never exceed the number of EXT addresses
// 1927   // and MASTER keys available
// 1928   
// 1929   // set status based on policy
// 1930   //status = ZNwkUnknownDevice;
// 1931   
// 1932   // set status based on policy
// 1933   status = ZSuccess; // ZNwkUnknownDevice;
// 1934   
// 1935   // get key based on policy
// 1936   osal_memcpy( key, ZDSecMgrTCMasterKey, SEC_KEY_LEN);
// 1937   
// 1938   // if policy, store new EXT address
// 1939   status = ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
// 1940   
// 1941   // set the key
// 1942   ZDSecMgrMasterKeyLoad( device->extAddr, key );
// 1943   
// 1944   // if EXT address and MASTER key available -- add device
// 1945   if ( status == ZSuccess )
// 1946   {
// 1947     // add device to internal data - with control
// 1948     status = ZDSecMgrDeviceEntryAdd( device, ami );
// 1949   }
// 1950 
// 1951   // remove copy of key in RAM  
// 1952   osal_memset( key, 0x00, SEC_KEY_LEN );
// 1953 
// 1954   return status;
// 1955 }
// 1956 
// 1957 /******************************************************************************
// 1958  * @fn          ZDSecMgrDeviceValidate
// 1959  *
// 1960  * @brief       Decide whether device is allowed.
// 1961  *
// 1962  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1963  *
// 1964  * @return      ZStatus_t
// 1965  */
// 1966 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
// 1967 {
// 1968   ZStatus_t status;
// 1969 
// 1970 
// 1971   if ( ZDSecMgrPermitJoiningEnabled == TRUE )
// 1972   {
// 1973     // device may be joining with a secure flag but it is ultimately the Trust
// 1974     // Center that decides -- check if expected pre configured device --
// 1975     // override settings
// 1976     if ( zgPreConfigKeys == TRUE )
// 1977     {
// 1978       device->secure = TRUE;
// 1979     }
// 1980     else
// 1981     {
// 1982       device->secure = FALSE;
// 1983     }
// 1984 
// 1985     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1986     {
// 1987       status = ZDSecMgrDeviceValidateCM( device );
// 1988     }
// 1989     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 1990     {
// 1991       status = ZDSecMgrDeviceValidateRM( device );
// 1992     }
// 1993   }
// 1994   else
// 1995   {
// 1996     status = ZNwkUnknownDevice;
// 1997   }
// 1998 
// 1999   return status;
// 2000 }
// 2001 
// 2002 /******************************************************************************
// 2003  * @fn          ZDSecMgrDeviceJoin
// 2004  *
// 2005  * @brief       Try to join this device.
// 2006  *
// 2007  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2008  *
// 2009  * @return      ZStatus_t
// 2010  */
// 2011 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
// 2012 {
// 2013   ZStatus_t status;
// 2014   uint16    ami;
// 2015 
// 2016   // attempt to validate device
// 2017   status = ZDSecMgrDeviceValidate( device );
// 2018 
// 2019   if ( status == ZSuccess )
// 2020   {
// 2021     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2022     {
// 2023       ZDSecMgrDeviceCtrlSetup( device );
// 2024     }
// 2025     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2026     {
// 2027       // Add the device to the address manager
// 2028       ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
// 2029       //send the nwk key data to the joining device
// 2030       status = ZDSecMgrSendNwkKey( device );
// 2031     }
// 2032   }
// 2033   else
// 2034   {
// 2035     // not allowed, remove the device
// 2036     ZDSecMgrDeviceRemove( device );
// 2037   }
// 2038 
// 2039   return status;
// 2040 }
// 2041 
// 2042 /******************************************************************************
// 2043  * @fn          ZDSecMgrDeviceJoinDirect
// 2044  *
// 2045  * @brief       Try to join this device as a direct child.
// 2046  *
// 2047  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2048  *
// 2049  * @return      ZStatus_t
// 2050  */
// 2051 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
// 2052 {
// 2053   ZStatus_t status;
// 2054 
// 2055   status = ZDSecMgrDeviceJoin( device );
// 2056 
// 2057   if ( status == ZSuccess )
// 2058   {
// 2059     // set association status to authenticated
// 2060     ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
// 2061   }
// 2062 
// 2063   return status;
// 2064 }
// 2065 
// 2066 /******************************************************************************
// 2067  * @fn          ZDSecMgrDeviceJoinFwd
// 2068  *
// 2069  * @brief       Forward join to Trust Center.
// 2070  *
// 2071  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2072  *
// 2073  * @return      ZStatus_t
// 2074  */
// 2075 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
// 2076 {
// 2077   ZStatus_t               status;
// 2078   APSME_UpdateDeviceReq_t req;
// 2079 
// 2080 
// 2081   // forward any joining device to the Trust Center -- the Trust Center will
// 2082   // decide if the device is allowed to join
// 2083   status = ZSuccess;
// 2084 
// 2085   // forward authorization to the Trust Center
// 2086   req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
// 2087   req.devAddr    = device->nwkAddr;
// 2088   req.devExtAddr = device->extAddr;
// 2089 
// 2090   // set security status, option for router to reject if policy set
// 2091   if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
// 2092   {
// 2093     if ( device->devStatus & DEV_REJOIN_STATUS )
// 2094     {
// 2095       if ( device->secure == TRUE )
// 2096         req.status = APSME_UD_HIGH_SECURED_REJOIN;
// 2097       else
// 2098         req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
// 2099     }
// 2100     else
// 2101       req.status = APSME_UD_HIGH_UNSECURED_JOIN;
// 2102   }
// 2103   else
// 2104   {
// 2105     if ( device->devStatus & DEV_REJOIN_STATUS )
// 2106     {
// 2107       if ( device->secure == TRUE )
// 2108         req.status = APSME_UD_STANDARD_SECURED_REJOIN;
// 2109       else
// 2110         req.status = APSME_UD_STANDARD_UNSECURED_REJOIN;
// 2111     }
// 2112     else
// 2113       req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
// 2114   }
// 2115 
// 2116   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2117     req.apsSecure = TRUE;
// 2118   else
// 2119     req.apsSecure = FALSE;
// 2120 
// 2121   // send and APSME_UPDATE_DEVICE request to the trust center
// 2122   status = APSME_UpdateDeviceReq( &req );
// 2123 
// 2124   return status;
// 2125 }
// 2126 
// 2127 /******************************************************************************
// 2128  * @fn          ZDSecMgrDeviceNew
// 2129  *
// 2130  * @brief       Process a new device.
// 2131  *
// 2132  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2133  *
// 2134  * @return      ZStatus_t
// 2135  */
// 2136 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
// 2137 {
// 2138   ZStatus_t status;
// 2139 
// 2140   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2141   {
// 2142     // try to join this device
// 2143     status = ZDSecMgrDeviceJoinDirect( joiner );
// 2144   }
// 2145   else
// 2146   {
// 2147     status = ZDSecMgrDeviceJoinFwd( joiner );
// 2148   }
// 2149 
// 2150   return status;
// 2151 }
// 2152 
// 2153 /******************************************************************************
// 2154  * @fn          ZDSecMgrAssocDeviceAuth
// 2155  *
// 2156  * @brief       Set associated device status to authenticated
// 2157  *
// 2158  * @param       assoc - [in, out] associated_devices_t
// 2159  *
// 2160  * @return      none
// 2161  */
// 2162 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
// 2163 {
// 2164   if ( assoc != NULL )
// 2165   {
// 2166     assoc->devStatus |= DEV_SEC_AUTH_STATUS;
// 2167   }
// 2168 }
// 2169 
// 2170 /******************************************************************************
// 2171  * @fn          ZDSecMgrAuthInitiate
// 2172  *
// 2173  * @brief       Initiate entity authentication
// 2174  *
// 2175  * @param       responder - [in] responder EXT address
// 2176  *
// 2177  * @return      none
// 2178  */
// 2179 void ZDSecMgrAuthInitiate( uint8* responder )
// 2180 {
// 2181   APSME_AuthenticateReq_t req;
// 2182 
// 2183 
// 2184   // make sure NWK address is available
// 2185   if ( APSME_LookupNwkAddr( responder, &req.nwkAddr ) )
// 2186   {
// 2187     // set request fields
// 2188     req.extAddr   = responder;
// 2189     req.action    = APSME_EA_INITIATE;
// 2190     req.challenge = NULL;
// 2191 
// 2192     // start EA processing
// 2193     APSME_AuthenticateReq( &req );
// 2194   }
// 2195 }
// 2196 
// 2197 /******************************************************************************
// 2198  * @fn          ZDSecMgrAuthNwkKey
// 2199  *
// 2200  * @brief       Handle next step in authentication process
// 2201  *
// 2202  * @param       none
// 2203  *
// 2204  * @return      none
// 2205  */
// 2206 void ZDSecMgrAuthNwkKey()
// 2207 {
// 2208   if ( devState == DEV_END_DEVICE_UNAUTH )
// 2209   {
// 2210     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2211     {
// 2212       uint8 parent[Z_EXTADDR_LEN];
// 2213 
// 2214       // get parent's EXT address
// 2215       NLME_GetCoordExtAddr( parent );
// 2216 
// 2217       // begin entity authentication with parent
// 2218       ZDSecMgrAuthInitiate( parent );
// 2219     }
// 2220     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2221     {
// 2222       // inform ZDO that device has been authenticated
// 2223       osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
// 2224     }
// 2225   }
// 2226 }
// 2227 
// 2228 /******************************************************************************
// 2229  * PUBLIC FUNCTIONS
// 2230  */
// 2231 /******************************************************************************
// 2232  * @fn          ZDSecMgrInit
// 2233  *
// 2234  * @brief       Initialize ZigBee Device Security Manager.
// 2235  *
// 2236  * @param       state - device initialization state
// 2237  *
// 2238  * @return      none
// 2239  */
// 2240 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 2241 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
// 2242 void ZDSecMgrAddrMgrCB( uint8           update,
// 2243                         AddrMgrEntry_t* newEntry,
// 2244                         AddrMgrEntry_t* oldEntry )
// 2245 {
// 2246   (void)update;
// 2247   (void)newEntry;
// 2248   (void)oldEntry;
// 2249 }
// 2250 #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 2251 
// 2252 void ZDSecMgrInit(uint8 state)
// 2253 {
// 2254   if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
// 2255       || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
// 2256   {
// 2257     // initialize sub modules
// 2258     ZDSecMgrEntryInit(state);
// 2259 
// 2260     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2261     {
// 2262       ZDSecMgrCtrlInit();
// 2263     }
// 2264 
// 2265     // register with Address Manager
// 2266     #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 2267     AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
// 2268     #endif
// 2269   }
// 2270 
// 2271   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2272   {
// 2273     // configure SKA slot data
// 2274     APSME_SKA_SlotInit( ZDSECMGR_SKA_SLOT_MAX );
// 2275   }
// 2276   else if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 2277   {
// 2278     APSME_TCAddrSetup( zgTrustCenterAddr );    
// 2279   }
// 2280 
// 2281   if ( ZG_SECURE_ENABLED )
// 2282   {
// 2283     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2284     {
// 2285       // setup joining permissions
// 2286       ZDSecMgrPermitJoiningEnabled = TRUE;
// 2287       ZDSecMgrPermitJoiningTimed   = FALSE;
// 2288     }
// 2289   }
// 2290 
// 2291   
// 2292   // configure security based on security mode and type of device
// 2293   ZDSecMgrConfig();
// 2294 }
// 2295 
// 2296 /******************************************************************************
// 2297  * @fn          ZDSecMgrConfig
// 2298  *
// 2299  * @brief       Configure ZigBee Device Security Manager.
// 2300  *
// 2301  * @param       none
// 2302  *
// 2303  * @return      none
// 2304  */
// 2305 void ZDSecMgrConfig( void )
// 2306 {
// 2307   if ( ZG_SECURE_ENABLED )
// 2308   {
// 2309     SSP_Init();
// 2310 
// 2311     if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
// 2312         || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
// 2313     {
// 2314       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2315       {
// 2316         // COMMERCIAL MODE - COORDINATOR DEVICE
// 2317         APSME_SecurityCM_CD();
// 2318       }
// 2319       else if ( ZSTACK_ROUTER_BUILD )
// 2320       {
// 2321         // COMMERCIAL MODE - ROUTER DEVICE
// 2322         APSME_SecurityCM_RD();
// 2323       }
// 2324       else
// 2325       {
// 2326         // COMMERCIAL MODE - END DEVICE
// 2327         APSME_SecurityCM_ED();
// 2328       }
// 2329     }
// 2330     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2331     {
// 2332       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2333       {
// 2334         // RESIDENTIAL MODE - COORDINATOR DEVICE
// 2335         APSME_SecurityRM_CD();
// 2336       }
// 2337       else if ( ZSTACK_ROUTER_BUILD )
// 2338       {
// 2339         // RESIDENTIAL MODE - ROUTER DEVICE
// 2340         APSME_SecurityRM_RD();
// 2341       }
// 2342       else
// 2343       {
// 2344         // RESIDENTIAL MODE - END DEVICE
// 2345         APSME_SecurityRM_ED();
// 2346       }
// 2347     }
// 2348   }
// 2349   else
// 2350   {
// 2351     // NO SECURITY
// 2352     APSME_SecurityNM();
// 2353   }
// 2354 }
// 2355 
// 2356 /******************************************************************************
// 2357  * @fn          ZDSecMgrPermitJoining
// 2358  *
// 2359  * @brief       Process request to change joining permissions.
// 2360  *
// 2361  * @param       duration - [in] timed duration for join in seconds
// 2362  *                         - 0x00 not allowed
// 2363  *                         - 0xFF allowed without timeout
// 2364  *
// 2365  * @return      uint8 - success(TRUE:FALSE)
// 2366  */
// 2367 uint8 ZDSecMgrPermitJoining( uint8 duration )
// 2368 {
// 2369   uint8 accept;
// 2370 
// 2371 
// 2372   ZDSecMgrPermitJoiningTimed = FALSE;
// 2373 
// 2374   if ( duration > 0 )
// 2375   {
// 2376     ZDSecMgrPermitJoiningEnabled = TRUE;
// 2377 
// 2378     if ( duration != 0xFF )
// 2379     {
// 2380       ZDSecMgrPermitJoiningTimed = TRUE;
// 2381     }
// 2382   }
// 2383   else
// 2384   {
// 2385     ZDSecMgrPermitJoiningEnabled = FALSE;
// 2386   }
// 2387 
// 2388   accept = TRUE;
// 2389 
// 2390   return accept;
// 2391 }
// 2392 
// 2393 /******************************************************************************
// 2394  * @fn          ZDSecMgrPermitJoiningTimeout
// 2395  *
// 2396  * @brief       Process permit joining timeout
// 2397  *
// 2398  * @param       none
// 2399  *
// 2400  * @return      none
// 2401  */
// 2402 void ZDSecMgrPermitJoiningTimeout( void )
// 2403 {
// 2404   if ( ZDSecMgrPermitJoiningTimed == TRUE )
// 2405   {
// 2406     ZDSecMgrPermitJoiningEnabled = FALSE;
// 2407     ZDSecMgrPermitJoiningTimed   = FALSE;
// 2408   }
// 2409 }
// 2410 
// 2411 /******************************************************************************
// 2412  * @fn          ZDSecMgrNewDeviceEvent
// 2413  *
// 2414  * @brief       Process a the new device event, if found reset new device
// 2415  *              event/timer.
// 2416  *
// 2417  * @param       none
// 2418  *
// 2419  * @return      uint8 - found(TRUE:FALSE)
// 2420  */
// 2421 uint8 ZDSecMgrNewDeviceEvent( void )
// 2422 {
// 2423   uint8                 found;
// 2424   ZDSecMgrDevice_t      device;
// 2425   AddrMgrEntry_t        addrEntry;
// 2426   associated_devices_t* assoc;
// 2427   ZStatus_t             status;
// 2428 
// 2429   // initialize return results
// 2430   found = FALSE;
// 2431 
// 2432   // look for device in the security init state
// 2433   assoc = AssocMatchDeviceStatus( DEV_SEC_INIT_STATUS );
// 2434 
// 2435   if ( assoc != NULL )
// 2436   {
// 2437     // device found
// 2438     found = TRUE;
// 2439 
// 2440     // check for preconfigured security
// 2441     if ( zgPreConfigKeys == TRUE )
// 2442     {
// 2443       // set association status to authenticated
// 2444       ZDSecMgrAssocDeviceAuth( assoc );
// 2445     }
// 2446 
// 2447     // set up device info
// 2448     addrEntry.user  = ADDRMGR_USER_DEFAULT;
// 2449     addrEntry.index = assoc->addrIdx;
// 2450     AddrMgrEntryGet( &addrEntry );
// 2451 
// 2452     device.nwkAddr    = assoc->shortAddr;
// 2453     device.extAddr    = addrEntry.extAddr;
// 2454     device.parentAddr = NLME_GetShortAddr();
// 2455     device.secure     = FALSE;
// 2456     device.devStatus  = assoc->devStatus;
// 2457 
// 2458     // process new device
// 2459     status = ZDSecMgrDeviceNew( &device );
// 2460 
// 2461     if ( status == ZSuccess )
// 2462     {
// 2463       assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
// 2464     }
// 2465     else if ( status == ZNwkUnknownDevice )
// 2466     {
// 2467       AssocRemove( addrEntry.extAddr );
// 2468     }
// 2469   }
// 2470 
// 2471   return found;
// 2472 }
// 2473 
// 2474 /******************************************************************************
// 2475  * @fn          ZDSecMgrEvent
// 2476  *
// 2477  * @brief       Handle ZDO Security Manager event/timer(ZDO_SECMGR_EVENT).
// 2478  *
// 2479  * @param       none
// 2480  *
// 2481  * @return      none
// 2482  */
// 2483 void ZDSecMgrEvent( void )
// 2484 {
// 2485   uint8            action;
// 2486   uint8            restart;
// 2487   uint16           index;
// 2488   AddrMgrEntry_t   entry;
// 2489   ZDSecMgrDevice_t device;
// 2490 
// 2491 
// 2492   // verify data is available
// 2493   if ( ZDSecMgrCtrlData != NULL )
// 2494   {
// 2495     action  = FALSE;
// 2496     restart = FALSE;
// 2497 
// 2498     // update all the counters
// 2499     for ( index = 0; index < ZDSECMGR_ENTRY_MAX; index++ )
// 2500     {
// 2501       if ( ZDSecMgrCtrlData[index].state !=  ZDSECMGR_CTRL_NONE )
// 2502       {
// 2503         if ( ZDSecMgrCtrlData[index].cntr != 0 )
// 2504         {
// 2505           ZDSecMgrCtrlData[index].cntr--;
// 2506         }
// 2507 
// 2508         if ( ( action == FALSE ) && ( ZDSecMgrCtrlData[index].cntr == 0 ) )
// 2509         {
// 2510           action = TRUE;
// 2511 
// 2512           // update from control data
// 2513           device.parentAddr = ZDSecMgrCtrlData[index].parentAddr;
// 2514           device.secure     = ZDSecMgrCtrlData[index].secure;
// 2515           device.ctrl       = &ZDSecMgrCtrlData[index];
// 2516 
// 2517           // set the user and address index
// 2518           entry.user  = ADDRMGR_USER_SECURITY;
// 2519           entry.index = ZDSecMgrCtrlData[index].entry->ami;
// 2520 
// 2521           // get the address data
// 2522           AddrMgrEntryGet( &entry );
// 2523 
// 2524           // set device address data
// 2525           device.nwkAddr = entry.nwkAddr;
// 2526           device.extAddr = entry.extAddr;
// 2527 
// 2528           // update from entry data
// 2529           ZDSecMgrDeviceCtrlHandler( &device );
// 2530         }
// 2531         else
// 2532         {
// 2533           restart = TRUE;
// 2534         }
// 2535       }
// 2536     }
// 2537 
// 2538     // check for timer restart
// 2539     if ( restart == TRUE )
// 2540     {
// 2541       osal_start_timerEx(ZDAppTaskID, ZDO_SECMGR_EVENT, 100 );
// 2542     }
// 2543   }
// 2544 }
// 2545 
// 2546 /******************************************************************************
// 2547  * @fn          ZDSecMgrEstablishKeyCfm
// 2548  *
// 2549  * @brief       Process the ZDO_EstablishKeyCfm_t message.
// 2550  *
// 2551  * @param       cfm - [in] ZDO_EstablishKeyCfm_t confirmation
// 2552  *
// 2553  * @return      none
// 2554  */
// 2555 void ZDSecMgrEstablishKeyCfm( ZDO_EstablishKeyCfm_t* cfm )
// 2556 {
// 2557   // send the NWK key
// 2558   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2559   {
// 2560     // update control for specified EXT address
// 2561     ZDSecMgrDeviceCtrlUpdate( cfm->partExtAddr, ZDSECMGR_CTRL_SKKE_DONE );
// 2562   }
// 2563   else
// 2564   {
// 2565     // this should be done when receiving the NWK key
// 2566     // if devState ==
// 2567     //if ( devState == DEV_END_DEVICE_UNAUTH )
// 2568         //osal_set_event( ZDAppTaskID, ZDO_DEVICE_AUTH );
// 2569 
// 2570     // if not in joining state -- this should trigger an event for an
// 2571     // end point that requested SKKE
// 2572     // if ( devState == DEV_END_DEVICE )
// 2573    //       devState == DEV_ROUTER;
// 2574 
// 2575   }
// 2576 }
// 2577 
// 2578 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
// 2579 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
// 2580 {
// 2581   uint8  match;
// 2582   uint8  lookup[Z_EXTADDR_LEN];
// 2583 
// 2584   match = FALSE;
// 2585 
// 2586   if ( AddrMgrExtAddrLookup( APSME_TRUSTCENTER_NWKADDR, lookup ) )
// 2587   {
// 2588     match = AddrMgrExtAddrEqual( lookup, extAddr );
// 2589   }
// 2590 
// 2591   return match;
// 2592 }
// 2593 
// 2594 void ZDSecMgrTCDataLoad( uint8* extAddr );
// 2595 void ZDSecMgrTCDataLoad( uint8* extAddr )
// 2596 {
// 2597   uint16 ami;
// 2598   uint16 keyNvId;   
// 2599   uint8 masterKey[SEC_KEY_LEN];
// 2600 
// 2601   if ( !ZDSecMgrTCDataLoaded )
// 2602   {
// 2603     if ( ZDSecMgrAddrStore( APSME_TRUSTCENTER_NWKADDR, extAddr, &ami ) == ZSuccess )
// 2604     {
// 2605       // if preconfigured load key
// 2606       if ( zgPreConfigKeys == TRUE )
// 2607       {
// 2608         if ( ZDSecMgrMasterKeyLookup( ami, &keyNvId ) != ZSuccess )
// 2609         {
// 2610           // temporary copy
// 2611           osal_memcpy( masterKey, ZDSecMgrTCMasterKey, SEC_KEY_LEN);
// 2612 
// 2613           ZDSecMgrMasterKeyStore( ami, masterKey );
// 2614             
// 2615           // remove copy of key in RAM  
// 2616           osal_memset( masterKey, 0x00, SEC_KEY_LEN );
// 2617         }
// 2618       }
// 2619     }
// 2620 
// 2621     ZDSecMgrTCDataLoaded = TRUE;
// 2622   }
// 2623 }
// 2624 
// 2625 /******************************************************************************
// 2626  * @fn          ZDSecMgrEstablishKeyInd
// 2627  *
// 2628  * @brief       Process the ZDO_EstablishKeyInd_t message.
// 2629  *
// 2630  * @param       ind - [in] ZDO_EstablishKeyInd_t indication
// 2631  *
// 2632  * @return      none
// 2633  */
// 2634 void ZDSecMgrEstablishKeyInd( ZDO_EstablishKeyInd_t* ind )
// 2635 {
// 2636   ZDSecMgrDevice_t        device;
// 2637   APSME_EstablishKeyRsp_t rsp;
// 2638 
// 2639 
// 2640   // load Trust Center data if needed
// 2641   ZDSecMgrTCDataLoad( ind->initExtAddr );
// 2642 
// 2643   if ( ZDSecMgrTCExtAddrCheck( ind->initExtAddr ) )
// 2644   {
// 2645     //IF (ind->srcAddr == APSME_TRUSTCENTER_NWKADDR)
// 2646     //OR
// 2647     //!ZDSecMgrTCAuthenticated
// 2648     //devtag.0604.critical
// 2649         //how is the parentAddr used here
// 2650 
// 2651     // initial SKKE from Trust Center via parent
// 2652     device.nwkAddr    = APSME_TRUSTCENTER_NWKADDR;
// 2653     device.parentAddr = ind->srcAddr;
// 2654   }
// 2655   else
// 2656   {
// 2657     // Trust Center direct or E2E SKKE
// 2658     device.nwkAddr    = ind->srcAddr;
// 2659     device.parentAddr = INVALID_NODE_ADDR;
// 2660   }
// 2661 
// 2662   device.extAddr = ind->initExtAddr;
// 2663   //devtag.pro.security.0724.todo - verify usage
// 2664   device.secure  = ind->nwkSecure;
// 2665 
// 2666   // validate device for SKKE
// 2667   if ( ZDSecMgrDeviceValidateSKKE( &device ) == ZSuccess )
// 2668   {
// 2669     rsp.accept = TRUE;
// 2670   }
// 2671   else
// 2672   {
// 2673     rsp.accept = FALSE;
// 2674   }
// 2675 
// 2676   rsp.dstAddr     = ind->srcAddr;
// 2677   rsp.initExtAddr = &ind->initExtAddr[0];
// 2678   //devtag.0604.todo - remove obsolete
// 2679   rsp.apsSecure   = ind->apsSecure;
// 2680   rsp.nwkSecure   = ind->nwkSecure;
// 2681 
// 2682   APSME_EstablishKeyRsp( &rsp );
// 2683 }
// 2684 //devtag.pro.security
// 2685 #if 0
// 2686 void ZDSecMgrEstablishKeyInd( ZDO_EstablishKeyInd_t* ind )
// 2687 {
// 2688   ZDSecMgrDevice_t        device;
// 2689   APSME_EstablishKeyRsp_t rsp;
// 2690 
// 2691 
// 2692   device.extAddr = ind->initExtAddr;
// 2693   device.secure  = ind->secure;
// 2694 
// 2695   if ( ind->secure == FALSE )
// 2696   {
// 2697     // SKKE from Trust Center is not secured between child and parent
// 2698     device.nwkAddr    = APSME_TRUSTCENTER_NWKADDR;
// 2699     device.parentAddr = ind->srcAddr;
// 2700   }
// 2701   else
// 2702   {
// 2703     // SKKE from initiator should be secured
// 2704     device.nwkAddr    = ind->srcAddr;
// 2705     device.parentAddr = INVALID_NODE_ADDR;
// 2706   }
// 2707 
// 2708   rsp.dstAddr     = ind->srcAddr;
// 2709   rsp.initExtAddr = &ind->initExtAddr[0];
// 2710   rsp.secure      = ind->secure;
// 2711 
// 2712   // validate device for SKKE
// 2713   if ( ZDSecMgrDeviceValidateSKKE( &device ) == ZSuccess )
// 2714   {
// 2715     rsp.accept = TRUE;
// 2716   }
// 2717   else
// 2718   {
// 2719     rsp.accept = FALSE;
// 2720   }
// 2721 
// 2722   APSME_EstablishKeyRsp( &rsp );
// 2723 }
// 2724 #endif
// 2725 
// 2726 /******************************************************************************
// 2727  * @fn          ZDSecMgrTransportKeyInd
// 2728  *
// 2729  * @brief       Process the ZDO_TransportKeyInd_t message.
// 2730  *
// 2731  * @param       ind - [in] ZDO_TransportKeyInd_t indication
// 2732  *
// 2733  * @return      none
// 2734  */
// 2735 void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
// 2736 {
// 2737   uint8 index;
// 2738   uint8 zgPreConfigKey[SEC_KEY_LEN];
// 2739 
// 2740   // load Trust Center data if needed
// 2741   ZDSecMgrTCDataLoad( ind->srcExtAddr );
// 2742 
// 2743   if ( ind->keyType == KEY_TYPE_TC_MASTER )
// 2744   {
// 2745     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2746     //ZDSecMgrTCMasterKey( ind );
// 2747     {
// 2748       if ( zgPreConfigKeys != TRUE )
// 2749       {
// 2750         // devtag.pro.security.todo - check if Trust Center address is configured and correct
// 2751         ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
// 2752       }
// 2753       else
// 2754       {
// 2755         // error condition - reject key
// 2756       }
// 2757     }
// 2758   }
// 2759   else if ( ( ind->keyType == KEY_TYPE_NWK      ) ||
// 2760             ( ind->keyType == 6                 ) ||
// 2761             ( ind->keyType == KEY_TYPE_NWK_HIGH )    )
// 2762   {
// 2763     // check for dummy NWK key (all zeros)
// 2764     for ( index = 0;
// 2765           ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
// 2766           index++ );
// 2767 
// 2768     if ( index == SEC_KEY_LEN )
// 2769     {
// 2770       // load preconfigured key - once!!
// 2771       if ( !_NIB.nwkKeyLoaded )
// 2772       {
// 2773         ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
// 2774         SSP_UpdateNwkKey( zgPreConfigKey, 0 );
// 2775         SSP_SwitchNwkKey( 0 );
// 2776         
// 2777         // clear local copy of key
// 2778         osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
// 2779       }
// 2780     }
// 2781     else
// 2782     {
// 2783       SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
// 2784       if ( !_NIB.nwkKeyLoaded )
// 2785       {
// 2786         SSP_SwitchNwkKey( ind->keySeqNum );
// 2787       }
// 2788     }
// 2789 
// 2790     // handle next step in authentication process
// 2791     ZDSecMgrAuthNwkKey();
// 2792   }
// 2793   else if ( ind->keyType == KEY_TYPE_TC_LINK )
// 2794   {
// 2795     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2796     {
// 2797       // This should not happen because TCLK should not be Tx
// 2798     }
// 2799   }
// 2800   else if ( ind->keyType == KEY_TYPE_APP_MASTER )
// 2801   {
// 2802     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2803     {
// 2804       uint16           ami;
// 2805       AddrMgrEntry_t   entry;
// 2806       ZDSecMgrEntry_t* entryZD;
// 2807 
// 2808       ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami );
// 2809 
// 2810       if ( ind->initiator == TRUE )
// 2811       {
// 2812         // get the ami data
// 2813         entry.user  = ADDRMGR_USER_SECURITY;
// 2814         entry.index = ami;
// 2815         AddrMgrEntryGet( &entry );
// 2816 
// 2817         if ( entry.nwkAddr != INVALID_NODE_ADDR )
// 2818         {
// 2819           APSME_EstablishKeyReq_t req;
// 2820           ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
// 2821 
// 2822           ZDSecMgrEntryLookupAMI( ami, &entryZD );
// 2823 
// 2824           if ( entryZD == NULL )
// 2825           {
// 2826             // get new entry
// 2827             if ( ZDSecMgrEntryNew( &entryZD ) == ZSuccess )
// 2828             {
// 2829               // finish setting up entry
// 2830               entryZD->ami = ami;
// 2831             }
// 2832           }
// 2833 
// 2834           req.respExtAddr = ind->srcExtAddr;
// 2835           req.method      = APSME_SKKE_METHOD;
// 2836           req.dstAddr     = entry.nwkAddr;
// 2837           req.apsSecure   = FALSE;
// 2838           req.nwkSecure   = TRUE;
// 2839           APSME_EstablishKeyReq( &req );
// 2840         }
// 2841       }
// 2842       else
// 2843       {
// 2844         if ( ami == INVALID_NODE_ADDR )
// 2845         {
// 2846           // store new EXT address
// 2847           ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
// 2848         }
// 2849 
// 2850         ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
// 2851       }
// 2852     }
// 2853   }
// 2854   else if ( ind->keyType == KEY_TYPE_APP_LINK )
// 2855   {
// 2856     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2857     {
// 2858       uint16           ami;
// 2859       ZDSecMgrEntry_t* entry;
// 2860 
// 2861       // get the address index
// 2862       if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
// 2863       {
// 2864         // store new EXT address
// 2865         ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
// 2866         ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 2867       }
// 2868 
// 2869       ZDSecMgrEntryLookupAMI( ami, &entry );
// 2870 
// 2871       if ( entry == NULL )
// 2872       {
// 2873         // get new entry
// 2874         if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
// 2875         {
// 2876           // finish setting up entry
// 2877           entry->ami = ami;
// 2878         }
// 2879       }
// 2880 
// 2881       ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
// 2882     }
// 2883   }
// 2884 }
// 2885 
// 2886 /******************************************************************************
// 2887  * @fn          ZDSecMgrUpdateDeviceInd
// 2888  *
// 2889  * @brief       Process the ZDO_UpdateDeviceInd_t message.
// 2890  *
// 2891  * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
// 2892  *
// 2893  * @return      none
// 2894  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine100:
        CFI Block cfiBlock188 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 10)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0xa
        CFI EndBlock cfiBlock188
        REQUIRE ??Subroutine109_0
        ; // Fall through to label ??Subroutine109_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine109_0:
        CFI Block cfiBlock189 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        CFI Valid
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock189

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlReset:
        CFI Block cfiBlock190 Using cfiCommon0
        CFI Function ZDSecMgrCtrlReset
        FUNCALL ZDSecMgrCtrlReset, ZDSecMgrCtrlLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrCtrlReset, ZDSecMgrCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrCtrlReset, ZDSecMgrCtrlAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrCtrlLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_102:
        JNZ     ??ZDSecMgrCtrlReset_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlReset_0:
        JZ      ??ZDSecMgrCtrlReset_1
        ; Setup parameters for call to function ZDSecMgrCtrlSet
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrCtrlSet?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R1,#0x0
        SJMP    ??ZDSecMgrCtrlReset_2
??ZDSecMgrCtrlReset_1:
        ; Setup parameters for call to function ZDSecMgrCtrlAdd
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrCtrlAdd?relay
??ZDSecMgrCtrlReset_2:
        LJMP    ?Subroutine95 & 0xFFFF
        CFI EndBlock cfiBlock190

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine67:
        CFI Block cfiCond191 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_101
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond192 Using cfiCommon0
        CFI (cfiCond192) NoFunction
        CFI (cfiCond192) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond192) CFA_SP SP+0
        CFI (cfiCond192) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond193 Using cfiCommon0
        CFI (cfiCond193) NoFunction
        CFI (cfiCond193) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond193) CFA_SP SP+0
        CFI (cfiCond193) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker194 Using cfiCommon1
        CFI (cfiPicker194) NoFunction
        CFI (cfiPicker194) Picker
        LCALL   ??ZDSecMgrCtrlLookup?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond191
        CFI EndBlock cfiCond192
        CFI EndBlock cfiCond193
        CFI EndBlock cfiPicker194

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrMasterKeyLoad:
        CFI Block cfiBlock195 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyLoad
        FUNCALL ZDSecMgrMasterKeyLoad, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLoad, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLoad, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLoad, ZDSecMgrMasterKeyStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        MOV     R6,A
        JNZ     ??ZDSecMgrMasterKeyLoad_0
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_185:
        JNZ     ??ZDSecMgrMasterKeyLoad_1
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ??Subroutine107_0 & 0xFFFF
??CrossCallReturnLabel_156:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        SJMP    ??ZDSecMgrMasterKeyLoad_0
??ZDSecMgrMasterKeyLoad_1:
        ; Setup parameters for call to function ZDSecMgrMasterKeyStore
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_89:
        MOV     A,R1
        MOV     R6,A
??ZDSecMgrMasterKeyLoad_0:
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x4
        LJMP    ??Subroutine115_0 & 0xFFFF
        CFI EndBlock cfiBlock195

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAppKeyGet:
        CFI Block cfiBlock196 Using cfiCommon0
        CFI Function ZDSecMgrAppKeyGet
        FUNCALL ZDSecMgrAppKeyGet, SSP_GetTrueRand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine114_0 & 0xFFFF
??CrossCallReturnLabel_178:
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine114_0 & 0xFFFF
??CrossCallReturnLabel_179:
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        ; Setup parameters for call to function SSP_GetTrueRand
        LCALL   ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_201:
        MOV     R1,#0x10
        LCALL   ??SSP_GetTrueRand?relay
        MOV     DPTR,#ZDSecMgrAppKeyType
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     R1,#0x0
        LJMP    ??Subroutine124_0 & 0xFFFF
        CFI EndBlock cfiBlock196

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAppKeyReq:
        CFI Block cfiBlock197 Using cfiCommon0
        CFI Function ZDSecMgrAppKeyReq
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, SSP_GetTrueRand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 39
        MOV     A,#-0x27
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 49)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ADD     A,#0x5
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_49:
        JZ      $+5
        LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine106_0 & 0xFFFF
??CrossCallReturnLabel_149:
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine120_0 & 0xFFFF
??CrossCallReturnLabel_194:
        LCALL   ??APSME_LookupExtAddr?relay
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
??CrossCallReturnLabel_241:
        ; Setup parameters for call to function SSP_GetTrueRand
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x10
        LCALL   ??SSP_GetTrueRand?relay
        MOV     DPTR,#ZDSecMgrAppKeyType
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
??CrossCallReturnLabel_242:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
??CrossCallReturnLabel_243:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
??ZDSecMgrAppKeyReq_0:
        MOV     A,#0x27
        LJMP    ??Subroutine115_0 & 0xFFFF
        CFI EndBlock cfiBlock197

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEstablishKey:
        CFI Block cfiBlock198 Using cfiCommon0
        CFI Function ZDSecMgrEstablishKey
        FUNCALL ZDSecMgrEstablishKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKey, APSME_EstablishKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
??CrossCallReturnLabel_244:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        JNZ     ??ZDSecMgrEstablishKey_0
        MOV     A,R3
        XRL     A,R1
??ZDSecMgrEstablishKey_0:
        JNZ     ??ZDSecMgrEstablishKey_1
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine131_0 & 0xFFFF
??CrossCallReturnLabel_267:
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_167:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrEstablishKey_2
??ZDSecMgrEstablishKey_1:
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_168:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
??ZDSecMgrEstablishKey_2:
        LCALL   ??Subroutine126_0 & 0xFFFF
??CrossCallReturnLabel_217:
        LCALL   ??APSME_EstablishKeyReq?relay
        MOV     A,#0x7
        LJMP    ??Subroutine115_0 & 0xFFFF
        CFI EndBlock cfiBlock198

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond199 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_167
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond200 Using cfiCommon0
        CFI (cfiCond200) NoFunction
        CFI (cfiCond200) Conditional ??CrossCallReturnLabel_168
        CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond200) CFA_SP SP+0
        CFI (cfiCond200) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker201 Using cfiCommon1
        CFI (cfiPicker201) NoFunction
        CFI (cfiPicker201) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond199
        CFI EndBlock cfiCond200
        CFI EndBlock cfiPicker201
        REQUIRE ??Subroutine110_0
        ; // Fall through to label ??Subroutine110_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine110_0:
        CFI Block cfiCond202 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_169
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_167
        CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond203) CFA_SP SP+0
        CFI (cfiCond203) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond204 Using cfiCommon0
        CFI (cfiCond204) NoFunction
        CFI (cfiCond204) Conditional ??CrossCallReturnLabel_168
        CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond204) CFA_SP SP+0
        CFI (cfiCond204) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker205 Using cfiCommon1
        CFI (cfiPicker205) NoFunction
        CFI (cfiPicker205) Picker
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_262:
        ; Setup parameters for call to function APSME_RemoveDeviceReq
        MOV     A,#0x5
        RET
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiCond204
        CFI EndBlock cfiPicker205

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrSendMasterKey:
        CFI Block cfiBlock206 Using cfiCommon0
        CFI Function ZDSecMgrSendMasterKey
        FUNCALL ZDSecMgrSendMasterKey, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 31
        MOV     A,#-0x1f
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_170:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine125_0 & 0xFFFF
??CrossCallReturnLabel_205:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ??Subroutine118_0 & 0xFFFF
??CrossCallReturnLabel_188:
        JNZ     ??ZDSecMgrSendMasterKey_0
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_127:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
        SJMP    ??ZDSecMgrSendMasterKey_1
??ZDSecMgrSendMasterKey_0:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
??ZDSecMgrSendMasterKey_1:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        JNZ     ??ZDSecMgrSendMasterKey_2
        MOV     A,R3
        XRL     A,R1
??ZDSecMgrSendMasterKey_2:
        JZ      ??ZDSecMgrSendMasterKey_3
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
??CrossCallReturnLabel_245:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??ZDSecMgrSendMasterKey_4
??ZDSecMgrSendMasterKey_3:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
??CrossCallReturnLabel_246:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??ZDSecMgrSendMasterKey_4:
        MOVX    @DPTR,A
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
        MOV     A,R1
        MOV     R6,A
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x1f
        LJMP    ??Subroutine115_0 & 0xFFFF
        CFI EndBlock cfiBlock206

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
        CFI Block cfiCond207 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond208 Using cfiCommon0
        CFI (cfiCond208) NoFunction
        CFI (cfiCond208) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond208) CFA_SP SP+0
        CFI (cfiCond208) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond209 Using cfiCommon0
        CFI (cfiCond209) NoFunction
        CFI (cfiCond209) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond209) CFA_SP SP+0
        CFI (cfiCond209) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond210 Using cfiCommon0
        CFI (cfiCond210) NoFunction
        CFI (cfiCond210) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond210) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond210) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond210) CFA_SP SP+-5
        CFI (cfiCond210) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker211 Using cfiCommon1
        CFI (cfiPicker211) NoFunction
        CFI (cfiPicker211) Picker
        LCALL   ??Subroutine112_0 & 0xFFFF
??CrossCallReturnLabel_276:
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond207
        CFI EndBlock cfiCond208
        CFI EndBlock cfiCond209
        CFI EndBlock cfiCond210
        CFI EndBlock cfiPicker211

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond212 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond213 Using cfiCommon0
        CFI (cfiCond213) NoFunction
        CFI (cfiCond213) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond213) CFA_SP SP+0
        CFI (cfiCond213) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker214 Using cfiCommon1
        CFI (cfiPicker214) NoFunction
        CFI (cfiPicker214) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine80 & 0xFFFF
??CrossCallReturnLabel_277:
        MOV     A,R2
        XRL     A,R0
        RET
        CFI EndBlock cfiCond212
        CFI EndBlock cfiCond213
        CFI EndBlock cfiPicker214

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond215 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_170
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond216 Using cfiCommon0
        CFI (cfiCond216) NoFunction
        CFI (cfiCond216) Conditional ??CrossCallReturnLabel_171
        CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond216) CFA_SP SP+0
        CFI (cfiCond216) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker217 Using cfiCommon1
        CFI (cfiPicker217) NoFunction
        CFI (cfiPicker217) Picker
        CLR     A
        CFI EndBlock cfiCond215
        CFI EndBlock cfiCond216
        CFI EndBlock cfiPicker217
        REQUIRE ??Subroutine111_0
        ; // Fall through to label ??Subroutine111_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine111_0:
        CFI Block cfiCond218 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_172
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond219 Using cfiCommon0
        CFI (cfiCond219) NoFunction
        CFI (cfiCond219) Conditional ??CrossCallReturnLabel_170
        CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond219) CFA_SP SP+0
        CFI (cfiCond219) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond220 Using cfiCommon0
        CFI (cfiCond220) NoFunction
        CFI (cfiCond220) Conditional ??CrossCallReturnLabel_171
        CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond220) CFA_SP SP+0
        CFI (cfiCond220) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker221 Using cfiCommon1
        CFI (cfiPicker221) NoFunction
        CFI (cfiPicker221) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine80 & 0xFFFF
??CrossCallReturnLabel_279:
        RET
        CFI EndBlock cfiCond218
        CFI EndBlock cfiCond219
        CFI EndBlock cfiCond220
        CFI EndBlock cfiPicker221

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine80:
        CFI Block cfiCond222 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_277, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond223 Using cfiCommon0
        CFI (cfiCond223) NoFunction
        CFI (cfiCond223) Conditional ??CrossCallReturnLabel_277, ??CrossCallReturnLabel_1
        CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond223) CFA_SP SP+0
        CFI (cfiCond223) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond224 Using cfiCommon0
        CFI (cfiCond224) NoFunction
        CFI (cfiCond224) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_170
        CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond224) CFA_SP SP+0
        CFI (cfiCond224) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond225 Using cfiCommon0
        CFI (cfiCond225) NoFunction
        CFI (cfiCond225) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_171
        CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond225) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond225) CFA_SP SP+0
        CFI (cfiCond225) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond226 Using cfiCommon0
        CFI (cfiCond226) NoFunction
        CFI (cfiCond226) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_172
        CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond226) CFA_SP SP+0
        CFI (cfiCond226) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond227 Using cfiCommon0
        CFI (cfiCond227) NoFunction
        CFI (cfiCond227) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_2
        CFI (cfiCond227) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond227) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond227) CFA_SP SP+-5
        CFI (cfiCond227) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond228 Using cfiCommon0
        CFI (cfiCond228) NoFunction
        CFI (cfiCond228) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_3
        CFI (cfiCond228) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond228) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond228) CFA_SP SP+-5
        CFI (cfiCond228) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker229 Using cfiCommon1
        CFI (cfiPicker229) NoFunction
        CFI (cfiPicker229) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond222
        CFI EndBlock cfiCond223
        CFI EndBlock cfiCond224
        CFI EndBlock cfiCond225
        CFI EndBlock cfiCond226
        CFI EndBlock cfiCond227
        CFI EndBlock cfiCond228
        CFI EndBlock cfiPicker229
        REQUIRE ??Subroutine112_0
        ; // Fall through to label ??Subroutine112_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine112_0:
        CFI Block cfiCond230 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_275, ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond231 Using cfiCommon0
        CFI (cfiCond231) NoFunction
        CFI (cfiCond231) Conditional ??CrossCallReturnLabel_275, ??CrossCallReturnLabel_59
        CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond231) CFA_SP SP+0
        CFI (cfiCond231) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond232 Using cfiCommon0
        CFI (cfiCond232) NoFunction
        CFI (cfiCond232) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_30
        CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond232) CFA_SP SP+0
        CFI (cfiCond232) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond233 Using cfiCommon0
        CFI (cfiCond233) NoFunction
        CFI (cfiCond233) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_31
        CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond233) CFA_SP SP+0
        CFI (cfiCond233) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond234 Using cfiCommon0
        CFI (cfiCond234) NoFunction
        CFI (cfiCond234) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_32
        CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond234) CFA_SP SP+0
        CFI (cfiCond234) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond235 Using cfiCommon0
        CFI (cfiCond235) NoFunction
        CFI (cfiCond235) Conditional ??CrossCallReturnLabel_276, ??CrossCallReturnLabel_64
        CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond235) CFA_SP SP+0
        CFI (cfiCond235) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond236 Using cfiCommon0
        CFI (cfiCond236) NoFunction
        CFI (cfiCond236) Conditional ??CrossCallReturnLabel_276, ??CrossCallReturnLabel_65
        CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond236) CFA_SP SP+0
        CFI (cfiCond236) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond237 Using cfiCommon0
        CFI (cfiCond237) NoFunction
        CFI (cfiCond237) Conditional ??CrossCallReturnLabel_276, ??CrossCallReturnLabel_66
        CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond237) CFA_SP SP+0
        CFI (cfiCond237) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_276, ??CrossCallReturnLabel_67
        CFI (cfiCond238) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond238) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond238) CFA_SP SP+-5
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond239 Using cfiCommon0
        CFI (cfiCond239) NoFunction
        CFI (cfiCond239) Conditional ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_180
        CFI (cfiCond239) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond239) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond239) CFA_SP SP+-5
        CFI Block cfiCond240 Using cfiCommon0
        CFI (cfiCond240) NoFunction
        CFI (cfiCond240) Conditional ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_181
        CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond240) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond240) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond240) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond240) CFA_SP SP+0
        CFI (cfiCond240) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond241 Using cfiCommon0
        CFI (cfiCond241) NoFunction
        CFI (cfiCond241) Conditional ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_178
        CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond241) CFA_SP SP+0
        CFI (cfiCond241) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_179
        CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond242) CFA_SP SP+0
        CFI (cfiCond242) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond243 Using cfiCommon0
        CFI (cfiCond243) NoFunction
        CFI (cfiCond243) Conditional ??CrossCallReturnLabel_273, ??CrossCallReturnLabel_17
        CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond243) CFA_SP SP+0
        CFI (cfiCond243) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond244 Using cfiCommon0
        CFI (cfiCond244) NoFunction
        CFI (cfiCond244) Conditional ??CrossCallReturnLabel_273, ??CrossCallReturnLabel_18
        CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond244) CFA_SP SP+0
        CFI (cfiCond244) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond245 Using cfiCommon0
        CFI (cfiCond245) NoFunction
        CFI (cfiCond245) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_271
        CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond245) CFA_SP SP+0
        CFI (cfiCond245) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond246 Using cfiCommon0
        CFI (cfiCond246) NoFunction
        CFI (cfiCond246) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_272
        CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond246) CFA_SP SP+0
        CFI (cfiCond246) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond247 Using cfiCommon0
        CFI (cfiCond247) NoFunction
        CFI (cfiCond247) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_266
        CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond247) CFA_SP SP+0
        CFI (cfiCond247) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond248 Using cfiCommon0
        CFI (cfiCond248) NoFunction
        CFI (cfiCond248) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_267
        CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond248) CFA_SP SP+0
        CFI (cfiCond248) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond249 Using cfiCommon0
        CFI (cfiCond249) NoFunction
        CFI (cfiCond249) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_268
        CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond249) CFA_SP SP+0
        CFI (cfiCond249) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond250 Using cfiCommon0
        CFI (cfiCond250) NoFunction
        CFI (cfiCond250) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_269
        CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond250) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond250) CFA_SP SP+0
        CFI (cfiCond250) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond251 Using cfiCommon0
        CFI (cfiCond251) NoFunction
        CFI (cfiCond251) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_270
        CFI (cfiCond251) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond251) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond251) CFA_SP SP+-5
        CFI (cfiCond251) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond252 Using cfiCommon0
        CFI (cfiCond252) NoFunction
        CFI (cfiCond252) Conditional ??CrossCallReturnLabel_277, ??CrossCallReturnLabel_0
        CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond252) CFA_SP SP+0
        CFI (cfiCond252) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond253 Using cfiCommon0
        CFI (cfiCond253) NoFunction
        CFI (cfiCond253) Conditional ??CrossCallReturnLabel_277, ??CrossCallReturnLabel_1
        CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond253) CFA_SP SP+0
        CFI (cfiCond253) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond254 Using cfiCommon0
        CFI (cfiCond254) NoFunction
        CFI (cfiCond254) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_170
        CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond254) CFA_SP SP+0
        CFI (cfiCond254) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond255 Using cfiCommon0
        CFI (cfiCond255) NoFunction
        CFI (cfiCond255) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_171
        CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond255) CFA_SP SP+0
        CFI (cfiCond255) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond256 Using cfiCommon0
        CFI (cfiCond256) NoFunction
        CFI (cfiCond256) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_172
        CFI (cfiCond256) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond256) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond256) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond256) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond256) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond256) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond256) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond256) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond256) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond256) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond256) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond256) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond256) CFA_SP SP+0
        CFI (cfiCond256) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond257 Using cfiCommon0
        CFI (cfiCond257) NoFunction
        CFI (cfiCond257) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_2
        CFI (cfiCond257) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond257) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond257) CFA_SP SP+-5
        CFI (cfiCond257) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond258 Using cfiCommon0
        CFI (cfiCond258) NoFunction
        CFI (cfiCond258) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_3
        CFI (cfiCond258) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond258) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond258) CFA_SP SP+-5
        CFI (cfiCond258) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker259 Using cfiCommon1
        CFI (cfiPicker259) NoFunction
        CFI (cfiPicker259) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond230
        CFI EndBlock cfiCond231
        CFI EndBlock cfiCond232
        CFI EndBlock cfiCond233
        CFI EndBlock cfiCond234
        CFI EndBlock cfiCond235
        CFI EndBlock cfiCond236
        CFI EndBlock cfiCond237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiCond239
        CFI EndBlock cfiCond240
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiCond243
        CFI EndBlock cfiCond244
        CFI EndBlock cfiCond245
        CFI EndBlock cfiCond246
        CFI EndBlock cfiCond247
        CFI EndBlock cfiCond248
        CFI EndBlock cfiCond249
        CFI EndBlock cfiCond250
        CFI EndBlock cfiCond251
        CFI EndBlock cfiCond252
        CFI EndBlock cfiCond253
        CFI EndBlock cfiCond254
        CFI EndBlock cfiCond255
        CFI EndBlock cfiCond256
        CFI EndBlock cfiCond257
        CFI EndBlock cfiCond258
        CFI EndBlock cfiPicker259

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrSendNwkKey:
        CFI Block cfiBlock260 Using cfiCommon0
        CFI Function ZDSecMgrSendNwkKey
        FUNCALL ZDSecMgrSendNwkKey, NLME_ReadNwkKeyInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_81:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ??Subroutine111_0 & 0xFFFF
??CrossCallReturnLabel_172:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine117_0 & 0xFFFF
??CrossCallReturnLabel_184:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_ReadNwkKeyInfo
        MOV     ?V0 + 0,#0x3a
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_ReadNwkKeyInfo?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,R1
        JZ      ??ZDSecMgrSendNwkKey_0
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
??ZDSecMgrSendNwkKey_0:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,R6
        ADD     A,#0x4
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        XRL     A,R0
        JNZ     ??ZDSecMgrSendNwkKey_1
        MOV     A,R3
        XRL     A,R1
??ZDSecMgrSendNwkKey_1:
        JZ      ??CrossCallReturnLabel_253
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_253:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrSendNwkKey_2
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDSecMgrSendNwkKey_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDSecMgrSendNwkKey_3:
        JNZ     ??ZDSecMgrSendNwkKey_4
        MOV     A,#0xa
        SJMP    ??ZDSecMgrSendNwkKey_5
??ZDSecMgrSendNwkKey_2:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,#0x3
??ZDSecMgrSendNwkKey_5:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
??ZDSecMgrSendNwkKey_4:
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
        MOV     A,R1
        MOV     R6,A
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x1e
        LJMP    ??Subroutine128_0 & 0xFFFF
        CFI EndBlock cfiBlock260

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceEntryRemove:
        CFI Block cfiBlock261 Using cfiCommon0
        CFI Function ZDSecMgrDeviceEntryRemove
        FUNCALL ZDSecMgrDeviceEntryRemove, ZDSecMgrCtrlTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryRemove, ZDSecMgrEntryFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrCtrlTerm
        LCALL   ??ZDSecMgrCtrlTerm?relay
        ; Setup parameters for call to function ZDSecMgrEntryFree
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrEntryFree?relay
        LJMP    ??Subroutine124_0 & 0xFFFF
        CFI EndBlock cfiBlock261

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceRemoveByExtAddr:
        CFI Block cfiBlock262 Using cfiCommon0
        CFI Function ZDSecMgrDeviceRemoveByExtAddr
        FUNCALL ZDSecMgrDeviceRemoveByExtAddr, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemoveByExtAddr, ZDSecMgrDeviceEntryRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
        MOV     R6,A
        JNZ     ??CrossCallReturnLabel_91
        ; Setup parameters for call to function ZDSecMgrDeviceEntryRemove
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine122_0 & 0xFFFF
        CFI EndBlock cfiBlock262

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAddrMgrUpdate:
        CFI Block cfiBlock263 Using cfiCommon0
        CFI Function ZDSecMgrAddrMgrUpdate
        FUNCALL ZDSecMgrAddrMgrUpdate, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrMgrUpdate, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_216:
        LCALL   ??AddrMgrEntryGet?relay
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??ZDSecMgrAddrMgrUpdate_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??ZDSecMgrAddrMgrUpdate_0:
        JZ      ??ZDSecMgrAddrMgrUpdate_1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ??Subroutine126_0 & 0xFFFF
??CrossCallReturnLabel_218:
        LCALL   ??AddrMgrEntryUpdate?relay
??ZDSecMgrAddrMgrUpdate_1:
        LJMP    ?Subroutine98 & 0xFFFF
        CFI EndBlock cfiBlock263

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceEntryAdd:
        CFI Block cfiBlock264 Using cfiCommon0
        CFI Function ZDSecMgrDeviceEntryAdd
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrDeviceEntryRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrAddrMgrUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrAddrMgrUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrCtrlAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrCtrlReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V0 + 2,#-0x38
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_202:
        LCALL   ??ZDSecMgrEntryLookup?relay
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNZ     ??ZDSecMgrDeviceEntryAdd_0
        LCALL   ??Subroutine135_0 & 0xFFFF
??CrossCallReturnLabel_285:
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceEntryAdd_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??ZDSecMgrDeviceEntryAdd_1:
        JZ      ??ZDSecMgrDeviceEntryAdd_2
        ; Setup parameters for call to function ZDSecMgrDeviceEntryRemove
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_92:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrEntryLookupAMI?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceEntryAdd_2
??ZDSecMgrDeviceEntryAdd_3:
        ; Setup parameters for call to function ZDSecMgrAddrMgrUpdate
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        LCALL   ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_83:
        SJMP    ??ZDSecMgrDeviceEntryAdd_2
??ZDSecMgrDeviceEntryAdd_0:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrEntryLookupAMI?relay
        MOV     A,R1
        JZ      ??ZDSecMgrDeviceEntryAdd_3
??ZDSecMgrDeviceEntryAdd_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceEntryAdd_4
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrDeviceEntryAdd_4:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNZ     ??ZDSecMgrDeviceEntryAdd_5
        ; Setup parameters for call to function ZDSecMgrEntryNew
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrEntryNew?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceEntryAdd_6
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_287:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_84:
        ; Setup parameters for call to function ZDSecMgrCtrlAdd
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_85:
        LCALL   ??ZDSecMgrCtrlAdd?relay
        SJMP    ??ZDSecMgrDeviceEntryAdd_7
??ZDSecMgrDeviceEntryAdd_5:
        ; Setup parameters for call to function ZDSecMgrCtrlReset
        LCALL   ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_86:
        LCALL   ??ZDSecMgrCtrlReset?relay
??ZDSecMgrDeviceEntryAdd_7:
        MOV     A,R1
        MOV     ?V0 + 2,A
??ZDSecMgrDeviceEntryAdd_6:
        MOV     R1,?V0 + 2
        MOV     A,#0x2
        LJMP    ?Subroutine96 & 0xFFFF
        CFI EndBlock cfiBlock264

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine58:
        CFI Block cfiCond265 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_91
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond266 Using cfiCommon0
        CFI (cfiCond266) NoFunction
        CFI (cfiCond266) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond266) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond266) CFA_SP SP+0
        CFI (cfiCond266) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker267 Using cfiCommon1
        CFI (cfiPicker267) NoFunction
        CFI (cfiPicker267) Picker
        LCALL   ?Subroutine77 & 0xFFFF
??CrossCallReturnLabel_298:
        LCALL   ??ZDSecMgrDeviceEntryRemove?relay
        RET
        CFI EndBlock cfiCond265
        CFI EndBlock cfiCond266
        CFI EndBlock cfiPicker267

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine55:
        CFI Block cfiCond268 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_85
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond269 Using cfiCommon0
        CFI (cfiCond269) NoFunction
        CFI (cfiCond269) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond269) CFA_SP SP+0
        CFI (cfiCond269) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker270 Using cfiCommon1
        CFI (cfiPicker270) NoFunction
        CFI (cfiPicker270) Picker
        LCALL   ?Subroutine81 & 0xFFFF
??CrossCallReturnLabel_116:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        RET
        CFI EndBlock cfiCond268
        CFI EndBlock cfiCond269
        CFI EndBlock cfiPicker270

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine81:
        CFI Block cfiCond271 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_112
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond272 Using cfiCommon0
        CFI (cfiCond272) NoFunction
        CFI (cfiCond272) Conditional ??CrossCallReturnLabel_113
        CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond272) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond272) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond272) CFA_SP SP+0
        CFI (cfiCond272) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond273 Using cfiCommon0
        CFI (cfiCond273) NoFunction
        CFI (cfiCond273) Conditional ??CrossCallReturnLabel_116, ??CrossCallReturnLabel_85
        CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond273) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond273) CFA_SP SP+0
        CFI (cfiCond273) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond274 Using cfiCommon0
        CFI (cfiCond274) NoFunction
        CFI (cfiCond274) Conditional ??CrossCallReturnLabel_116, ??CrossCallReturnLabel_86
        CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond274) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond274) CFA_SP SP+0
        CFI (cfiCond274) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond275 Using cfiCommon0
        CFI (cfiCond275) NoFunction
        CFI (cfiCond275) Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_72
        CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond275) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond275) CFA_SP SP+0
        CFI (cfiCond275) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond276 Using cfiCommon0
        CFI (cfiCond276) NoFunction
        CFI (cfiCond276) Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_73
        CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond276) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond276) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond276) CFA_SP SP+0
        CFI (cfiCond276) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond277 Using cfiCommon0
        CFI (cfiCond277) NoFunction
        CFI (cfiCond277) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_60
        CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond277) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond277) CFA_SP SP+0
        CFI (cfiCond277) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond278 Using cfiCommon0
        CFI (cfiCond278) NoFunction
        CFI (cfiCond278) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_61
        CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond278) CFA_SP SP+0
        CFI (cfiCond278) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker279 Using cfiCommon1
        CFI (cfiPicker279) NoFunction
        CFI (cfiPicker279) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond271
        CFI EndBlock cfiCond272
        CFI EndBlock cfiCond273
        CFI EndBlock cfiCond274
        CFI EndBlock cfiCond275
        CFI EndBlock cfiCond276
        CFI EndBlock cfiCond277
        CFI EndBlock cfiCond278
        CFI EndBlock cfiPicker279

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine54:
        CFI Block cfiCond280 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_83
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond281 Using cfiCommon0
        CFI (cfiCond281) NoFunction
        CFI (cfiCond281) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond281) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond281) CFA_SP SP+0
        CFI (cfiCond281) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker282 Using cfiCommon1
        CFI (cfiPicker282) NoFunction
        CFI (cfiPicker282) Picker
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrAddrMgrUpdate?relay
        RET
        CFI EndBlock cfiCond280
        CFI EndBlock cfiCond281
        CFI EndBlock cfiPicker282

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond283 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond284 Using cfiCommon0
        CFI (cfiCond284) NoFunction
        CFI (cfiCond284) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond284) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond284) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond284) CFA_SP SP+0
        CFI (cfiCond284) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond285 Using cfiCommon0
        CFI (cfiCond285) NoFunction
        CFI (cfiCond285) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond285) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond285) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond285) CFA_SP SP+0
        CFI (cfiCond285) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker286 Using cfiCommon1
        CFI (cfiPicker286) NoFunction
        CFI (cfiPicker286) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrAddrMgrUpdate
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond283
        CFI EndBlock cfiCond284
        CFI EndBlock cfiCond285
        CFI EndBlock cfiPicker286

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond287 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond288 Using cfiCommon0
        CFI (cfiCond288) NoFunction
        CFI (cfiCond288) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond288) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond288) CFA_SP SP+0
        CFI (cfiCond288) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker289 Using cfiCommon1
        CFI (cfiPicker289) NoFunction
        CFI (cfiPicker289) Picker
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_208:
        MOV     R4,DPL
        MOV     R5,DPH
        RET
        CFI EndBlock cfiCond287
        CFI EndBlock cfiCond288
        CFI EndBlock cfiPicker289

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceCtrlHandler:
        CFI Block cfiBlock290 Using cfiCommon0
        CFI Function ZDSecMgrDeviceCtrlHandler
        FUNCALL ZDSecMgrDeviceCtrlHandler, ZDSecMgrSendMasterKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlHandler, ZDSecMgrEstablishKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlHandler, ZDSecMgrSendNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlHandler, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,R3
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL   ??Subroutine113_0 & 0xFFFF
??CrossCallReturnLabel_175:
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for ZDSecMgrDeviceCtrlHandler>_0`:
        DATA
        DB        2
        DB        5
        DW        ??ZDSecMgrDeviceCtrlHandler_0
        DW        ??ZDSecMgrDeviceCtrlHandler_1
        DW        ??ZDSecMgrDeviceCtrlHandler_2
        DW        ??ZDSecMgrDeviceCtrlHandler_3
        DW        ??ZDSecMgrDeviceCtrlHandler_0
        DW        ??ZDSecMgrDeviceCtrlHandler_0
        DW        ??ZDSecMgrDeviceCtrlHandler_4
        CODE
??ZDSecMgrDeviceCtrlHandler_1:
        ; Setup parameters for call to function ZDSecMgrSendMasterKey
        LCALL   ??ZDSecMgrSendMasterKey?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceCtrlHandler_3
        MOV     ?V0 + 0,#0x3
        SJMP    ??ZDSecMgrDeviceCtrlHandler_5
??ZDSecMgrDeviceCtrlHandler_2:
        ; Setup parameters for call to function ZDSecMgrEstablishKey
        LCALL   ??ZDSecMgrEstablishKey?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceCtrlHandler_3
        MOV     ?V0 + 0,#0x4
        SJMP    ??ZDSecMgrDeviceCtrlHandler_5
??ZDSecMgrDeviceCtrlHandler_4:
        ; Setup parameters for call to function ZDSecMgrSendNwkKey
        LCALL   ??ZDSecMgrSendNwkKey?relay
        MOV     A,R1
        JZ      ??ZDSecMgrDeviceCtrlHandler_0
??ZDSecMgrDeviceCtrlHandler_3:
        MOV     A,?V0 + 0
        JZ      ??ZDSecMgrDeviceCtrlHandler_0
??ZDSecMgrDeviceCtrlHandler_5:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_76:
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_62:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,A
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        SJMP    ??CrossCallReturnLabel_69
??ZDSecMgrDeviceCtrlHandler_0:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_69:
        LJMP    ??Subroutine124_0 & 0xFFFF
        CFI EndBlock cfiBlock290

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
        CFI Block cfiCond291 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond292 Using cfiCommon0
        CFI (cfiCond292) NoFunction
        CFI (cfiCond292) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond292) CFA_SP SP+0
        CFI (cfiCond292) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker293 Using cfiCommon1
        CFI (cfiPicker293) NoFunction
        CFI (cfiPicker293) Picker
        LCALL   ?Subroutine78 & 0xFFFF
??CrossCallReturnLabel_177:
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond291
        CFI EndBlock cfiCond292
        CFI EndBlock cfiPicker293

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine78:
        CFI Block cfiCond294 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_68
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond295 Using cfiCommon0
        CFI (cfiCond295) NoFunction
        CFI (cfiCond295) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_69
        CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond295) CFA_SP SP+0
        CFI (cfiCond295) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond296 Using cfiCommon0
        CFI (cfiCond296) NoFunction
        CFI (cfiCond296) Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_62
        CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond296) CFA_SP SP+0
        CFI (cfiCond296) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond297 Using cfiCommon0
        CFI (cfiCond297) NoFunction
        CFI (cfiCond297) Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_63
        CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond297) CFA_SP SP+0
        CFI (cfiCond297) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker298 Using cfiCommon1
        CFI (cfiPicker298) NoFunction
        CFI (cfiPicker298) Picker
        MOVX    A,@DPTR
        CFI EndBlock cfiCond294
        CFI EndBlock cfiCond295
        CFI EndBlock cfiCond296
        CFI EndBlock cfiCond297
        CFI EndBlock cfiPicker298
        REQUIRE ??Subroutine113_0
        ; // Fall through to label ??Subroutine113_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine113_0:
        CFI Block cfiCond299 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_175
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond300 Using cfiCommon0
        CFI (cfiCond300) NoFunction
        CFI (cfiCond300) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_68
        CFI (cfiCond300) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond300) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond300) CFA_SP SP+-5
        CFI (cfiCond300) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond301 Using cfiCommon0
        CFI (cfiCond301) NoFunction
        CFI (cfiCond301) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_69
        CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond301) CFA_SP SP+0
        CFI (cfiCond301) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond302 Using cfiCommon0
        CFI (cfiCond302) NoFunction
        CFI (cfiCond302) Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_62
        CFI (cfiCond302) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond302) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond302) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond302) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond302) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond302) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond302) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond302) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond302) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond302) CFA_SP SP+0
        CFI (cfiCond302) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond303 Using cfiCommon0
        CFI (cfiCond303) NoFunction
        CFI (cfiCond303) Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_63
        CFI (cfiCond303) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond303) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond303) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond303) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond303) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond303) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond303) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond303) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond303) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond303) CFA_SP SP+0
        CFI (cfiCond303) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker304 Using cfiCommon1
        CFI (cfiPicker304) NoFunction
        CFI (cfiPicker304) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LJMP    ?Subroutine89 & 0xFFFF
        CFI EndBlock cfiCond299
        CFI EndBlock cfiCond300
        CFI EndBlock cfiCond301
        CFI EndBlock cfiCond302
        CFI EndBlock cfiCond303
        CFI EndBlock cfiPicker304

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceCtrlSetup:
        CFI Block cfiBlock305 Using cfiCommon0
        CFI Function ZDSecMgrDeviceCtrlSetup
        FUNCALL ZDSecMgrDeviceCtrlSetup, ZDSecMgrDeviceCtrlHandler
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_180:
        JNZ     ??ZDSecMgrDeviceCtrlSetup_0
        MOV     A,R1
??ZDSecMgrDeviceCtrlSetup_0:
        JZ      ??ZDSecMgrDeviceCtrlSetup_1
        MOV     A,R0
        ADD     A,#0x5
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceCtrlSetup_2
        MOV     A,#0x2
        SJMP    ??ZDSecMgrDeviceCtrlSetup_3
??ZDSecMgrDeviceCtrlSetup_2:
        MOV     A,#0x3
??ZDSecMgrDeviceCtrlSetup_3:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrDeviceCtrlHandler
        LCALL   ??ZDSecMgrDeviceCtrlHandler?relay
??ZDSecMgrDeviceCtrlSetup_1:
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock305

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
        CFI Block cfiCond306 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_180
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond307 Using cfiCommon0
        CFI (cfiCond307) NoFunction
        CFI (cfiCond307) Conditional ??CrossCallReturnLabel_181
        CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond307) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond307) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond307) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond307) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond307) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond307) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond307) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond307) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond307) CFA_SP SP+0
        CFI (cfiCond307) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker308 Using cfiCommon1
        CFI (cfiPicker308) NoFunction
        CFI (cfiPicker308) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond306
        CFI EndBlock cfiCond307
        CFI EndBlock cfiPicker308
        REQUIRE ??Subroutine114_0
        ; // Fall through to label ??Subroutine114_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine114_0:
        CFI Block cfiCond309 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_178
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond310 Using cfiCommon0
        CFI (cfiCond310) NoFunction
        CFI (cfiCond310) Conditional ??CrossCallReturnLabel_179
        CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond310) CFA_SP SP+0
        CFI (cfiCond310) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond311 Using cfiCommon0
        CFI (cfiCond311) NoFunction
        CFI (cfiCond311) Conditional ??CrossCallReturnLabel_180
        CFI (cfiCond311) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond311) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond311) CFA_SP SP+-5
        CFI Block cfiCond312 Using cfiCommon0
        CFI (cfiCond312) NoFunction
        CFI (cfiCond312) Conditional ??CrossCallReturnLabel_181
        CFI (cfiCond312) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond312) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond312) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond312) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond312) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond312) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond312) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond312) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond312) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond312) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond312) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond312) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond312) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond312) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond312) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond312) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond312) CFA_SP SP+0
        CFI (cfiCond312) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker313 Using cfiCommon1
        CFI (cfiPicker313) NoFunction
        CFI (cfiPicker313) Picker
        LCALL   ??Subroutine112_0 & 0xFFFF
??CrossCallReturnLabel_280:
        MOV     A,R0
        RET
        CFI EndBlock cfiCond309
        CFI EndBlock cfiCond310
        CFI EndBlock cfiCond311
        CFI EndBlock cfiCond312
        CFI EndBlock cfiPicker313

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceCtrlUpdate:
        CFI Block cfiBlock314 Using cfiCommon0
        CFI Function ZDSecMgrDeviceCtrlUpdate
        FUNCALL ZDSecMgrDeviceCtrlUpdate, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlUpdate, ZDSecMgrCtrlLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        MOV     R6,A
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrDeviceCtrlUpdate_0:
        JZ      ??CrossCallReturnLabel_63
        ; Setup parameters for call to function ZDSecMgrCtrlLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine120_0 & 0xFFFF
??CrossCallReturnLabel_195:
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_103:
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_1
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrDeviceCtrlUpdate_1:
        JZ      ??CrossCallReturnLabel_63
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x5
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??CrossCallReturnLabel_63
        MOV     A,#0x5
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_2
        MOV     A,#0x7
        SJMP    ??ZDSecMgrDeviceCtrlUpdate_3
??ZDSecMgrDeviceCtrlUpdate_2:
        MOV     A,#0x6
        XRL     A,R6
        JNZ     ??CrossCallReturnLabel_63
        MOV     A,#0x6
??ZDSecMgrDeviceCtrlUpdate_3:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL   ?Subroutine42 & 0xFFFF
        CFI EndBlock cfiBlock314
??CrossCallReturnLabel_63:
        REQUIRE ?Subroutine99
        ; // Fall through to label ?Subroutine99

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine99:
        CFI Block cfiBlock315 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        LJMP    ??Subroutine123_0 & 0xFFFF
        CFI EndBlock cfiBlock315

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
        CFI Block cfiCond316 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond317 Using cfiCommon0
        CFI (cfiCond317) NoFunction
        CFI (cfiCond317) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond317) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond317) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond317) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond317) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond317) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond317) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond317) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond317) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond317) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond317) CFA_SP SP+0
        CFI (cfiCond317) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker318 Using cfiCommon1
        CFI (cfiPicker318) NoFunction
        CFI (cfiPicker318) Picker
        LCALL   ?Subroutine78 & 0xFFFF
??CrossCallReturnLabel_176:
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond316
        CFI EndBlock cfiCond317
        CFI EndBlock cfiPicker318

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_SKA_TimerExpired:
        CFI Block cfiBlock319 Using cfiCommon0
        CFI Function APSME_SKA_TimerExpired
        FUNCALL APSME_SKA_TimerExpired, ZDSecMgrDeviceCtrlUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,#0x1
        XRL     A,R1
        JNZ     ??APSME_SKA_TimerExpired_0
        ; Setup parameters for call to function ZDSecMgrDeviceCtrlUpdate
        MOV     R1,#0x6
        LCALL   ??ZDSecMgrDeviceCtrlUpdate?relay
??APSME_SKA_TimerExpired_0:
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock319

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceRemove:
        CFI Block cfiBlock320 Using cfiCommon0
        CFI Function ZDSecMgrDeviceRemove
        FUNCALL ZDSecMgrDeviceRemove, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, NLME_LeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, APSME_RemoveDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine131_0 & 0xFFFF
??CrossCallReturnLabel_268:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,?V0 + 0
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceRemove_0
        MOV     A,?V0 + 1
        XRL     A,R7
??ZDSecMgrDeviceRemove_0:
        JNZ     ??ZDSecMgrDeviceRemove_1
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_182:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_144:
        LCALL   ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        JNZ     ??ZDSecMgrDeviceRemove_2
        MOV     A,R1
??ZDSecMgrDeviceRemove_2:
        JZ      ??ZDSecMgrDeviceRemove_3
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDSecMgrDeviceRemove_3
        CLR     C
        SUBB    A,#0x5
        JNC     ??ZDSecMgrDeviceRemove_3
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        MOV     A,#0x4
        JNC     ??ZDSecMgrDeviceRemove_4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrDeviceRemove_5
??ZDSecMgrDeviceRemove_4:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
??ZDSecMgrDeviceRemove_5:
        LCALL   ??Subroutine126_0 & 0xFFFF
??CrossCallReturnLabel_219:
        LCALL   ??NLME_LeaveReq?relay
        SJMP    ??ZDSecMgrDeviceRemove_3
??ZDSecMgrDeviceRemove_1:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine110_0 & 0xFFFF
??CrossCallReturnLabel_169:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_RemoveDeviceReq?relay
??ZDSecMgrDeviceRemove_3:
        MOV     A,#0x9
        SJMP    ??Subroutine115_0
        CFI EndBlock cfiBlock320

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine95:
        CFI Block cfiBlock321 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        CFI EndBlock cfiBlock321
        REQUIRE ??Subroutine115_0
        ; // Fall through to label ??Subroutine115_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine115_0:
        CFI Block cfiBlock322 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock322
        REQUIRE ??Subroutine116_0
        ; // Fall through to label ??Subroutine116_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine116_0:
        CFI Block cfiBlock323 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock323

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine72:
        CFI Block cfiCond324 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_142
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond325 Using cfiCommon0
        CFI (cfiCond325) NoFunction
        CFI (cfiCond325) Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_173
        CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond325) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond325) CFA_SP SP+0
        CFI (cfiCond325) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond326 Using cfiCommon0
        CFI (cfiCond326) NoFunction
        CFI (cfiCond326) Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_174
        CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond326) CFA_SP SP+0
        CFI (cfiCond326) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond327 Using cfiCommon0
        CFI (cfiCond327) NoFunction
        CFI (cfiCond327) Conditional ??CrossCallReturnLabel_144
        CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond327) CFA_SP SP+0
        CFI (cfiCond327) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond328 Using cfiCommon0
        CFI (cfiCond328) NoFunction
        CFI (cfiCond328) Conditional ??CrossCallReturnLabel_145
        CFI (cfiCond328) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond328) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond328) CFA_SP SP+-5
        CFI (cfiCond328) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker329 Using cfiCommon1
        CFI (cfiPicker329) NoFunction
        CFI (cfiPicker329) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function AssocGetWithExt
        LJMP    ?Subroutine91 & 0xFFFF
        CFI EndBlock cfiCond324
        CFI EndBlock cfiCond325
        CFI EndBlock cfiCond326
        CFI EndBlock cfiCond327
        CFI EndBlock cfiCond328
        CFI EndBlock cfiPicker329

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond330 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_182
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond331 Using cfiCommon0
        CFI (cfiCond331) NoFunction
        CFI (cfiCond331) Conditional ??CrossCallReturnLabel_183
        CFI (cfiCond331) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond331) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond331) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond331) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond331) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond331) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond331) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond331) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond331) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond331) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond331) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond331) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond331) CFA_SP SP+0
        CFI (cfiCond331) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker332 Using cfiCommon1
        CFI (cfiPicker332) NoFunction
        CFI (cfiPicker332) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond330
        CFI EndBlock cfiCond331
        CFI EndBlock cfiPicker332
        REQUIRE ??Subroutine117_0
        ; // Fall through to label ??Subroutine117_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine117_0:
        CFI Block cfiCond333 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_184
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond334 Using cfiCommon0
        CFI (cfiCond334) NoFunction
        CFI (cfiCond334) Conditional ??CrossCallReturnLabel_182
        CFI (cfiCond334) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond334) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond334) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond334) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond334) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond334) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond334) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond334) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond334) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond334) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond334) CFA_SP SP+0
        CFI (cfiCond334) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond335 Using cfiCommon0
        CFI (cfiCond335) NoFunction
        CFI (cfiCond335) Conditional ??CrossCallReturnLabel_183
        CFI (cfiCond335) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond335) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond335) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond335) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond335) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond335) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond335) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond335) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond335) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond335) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond335) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond335) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond335) CFA_SP SP+0
        CFI (cfiCond335) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker336 Using cfiCommon1
        CFI (cfiPicker336) NoFunction
        CFI (cfiPicker336) Picker
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_263:
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond333
        CFI EndBlock cfiCond334
        CFI EndBlock cfiCond335
        CFI EndBlock cfiPicker336

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceValidateSKKE:
        CFI Block cfiBlock337 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidateSKKE
        FUNCALL ZDSecMgrDeviceValidateSKKE, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateSKKE, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateSKKE, ZDSecMgrDeviceEntryAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine120_0 & 0xFFFF
??CrossCallReturnLabel_196:
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        JNZ     ??CrossCallReturnLabel_72
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_186:
        JNZ     ??CrossCallReturnLabel_72
        ; Setup parameters for call to function ZDSecMgrDeviceEntryAdd
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_72:
        LJMP    ?Subroutine99 & 0xFFFF
        CFI EndBlock cfiBlock337

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond338 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_185
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond339 Using cfiCommon0
        CFI (cfiCond339) NoFunction
        CFI (cfiCond339) Conditional ??CrossCallReturnLabel_186
        CFI (cfiCond339) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond339) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond339) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond339) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond339) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond339) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond339) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond339) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond339) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond339) CFA_SP SP+0
        CFI (cfiCond339) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond340 Using cfiCommon0
        CFI (cfiCond340) NoFunction
        CFI (cfiCond340) Conditional ??CrossCallReturnLabel_187
        CFI (cfiCond340) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond340) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond340) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond340) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond340) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond340) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond340) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond340) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond340) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond340) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond340) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond340) CFA_SP SP+0
        CFI (cfiCond340) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker341 Using cfiCommon1
        CFI (cfiPicker341) NoFunction
        CFI (cfiPicker341) Picker
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond338
        CFI EndBlock cfiCond339
        CFI EndBlock cfiCond340
        CFI EndBlock cfiPicker341
        REQUIRE ??Subroutine118_0
        ; // Fall through to label ??Subroutine118_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine118_0:
        CFI Block cfiCond342 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_188
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond343 Using cfiCommon0
        CFI (cfiCond343) NoFunction
        CFI (cfiCond343) Conditional ??CrossCallReturnLabel_185
        CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond343) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond343) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond343) CFA_SP SP+0
        CFI (cfiCond343) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond344 Using cfiCommon0
        CFI (cfiCond344) NoFunction
        CFI (cfiCond344) Conditional ??CrossCallReturnLabel_186
        CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond344) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond344) CFA_SP SP+0
        CFI (cfiCond344) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond345 Using cfiCommon0
        CFI (cfiCond345) NoFunction
        CFI (cfiCond345) Conditional ??CrossCallReturnLabel_187
        CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond345) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond345) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond345) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond345) CFA_SP SP+0
        CFI (cfiCond345) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker346 Using cfiCommon1
        CFI (cfiPicker346) NoFunction
        CFI (cfiPicker346) Picker
        LCALL   ??Subroutine136_0 & 0xFFFF
??CrossCallReturnLabel_299:
        LCALL   ??ZDSecMgrMasterKeyLookup?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond342
        CFI EndBlock cfiCond343
        CFI EndBlock cfiCond344
        CFI EndBlock cfiCond345
        CFI EndBlock cfiPicker346

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceValidateRM:
        CFI Block cfiBlock347 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidateRM
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     R1,#0x0
        MOV     DPTR,#zgSecurePermitJoin
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceValidateRM_0
        MOV     R1,#-0x38
??ZDSecMgrDeviceValidateRM_0:
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock347

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceValidateCM:
        CFI Block cfiBlock348 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidateCM
        FUNCALL ZDSecMgrDeviceValidateCM, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateCM, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateCM, ZDSecMgrMasterKeyLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateCM, ZDSecMgrDeviceEntryAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateCM, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(ZDSecMgrTCMasterKey & 0xff)
        MOV     ?V0 + 1,#((ZDSecMgrTCMasterKey >> 8) & 0xff)
        MOV     ?V0 + 2,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_190:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_151:
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     DPL,?V0 + 0
        MOV     DPH,R1
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R1
        MOV     ?V0 + 2,A
        ; Setup parameters for call to function ZDSecMgrMasterKeyLoad
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ??Subroutine120_0 & 0xFFFF
??CrossCallReturnLabel_197:
        LCALL   ??ZDSecMgrMasterKeyLoad?relay
        MOV     A,?V0 + 2
        JNZ     ??ZDSecMgrDeviceValidateCM_0
        ; Setup parameters for call to function ZDSecMgrDeviceEntryAdd
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV     A,R1
        MOV     ?V0 + 2,A
??ZDSecMgrDeviceValidateCM_0:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        MOV     R1,?V0 + 2
        LJMP    ?Subroutine86 & 0xFFFF
        CFI EndBlock cfiBlock348

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine65:
        CFI Block cfiCond349 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_189
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond350 Using cfiCommon0
        CFI (cfiCond350) NoFunction
        CFI (cfiCond350) Conditional ??CrossCallReturnLabel_190
        CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond350) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond350) CFA_SP SP+0
        CFI (cfiCond350) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond351 Using cfiCommon0
        CFI (cfiCond351) NoFunction
        CFI (cfiCond351) Conditional ??CrossCallReturnLabel_191
        CFI (cfiCond351) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond351) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond351) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond351) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond351) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond351) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond351) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond351) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond351) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond351) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond351) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond351) CFA_SP SP+0
        CFI (cfiCond351) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond352 Using cfiCommon0
        CFI (cfiCond352) NoFunction
        CFI (cfiCond352) Conditional ??CrossCallReturnLabel_192
        CFI (cfiCond352) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond352) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond352) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond352) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond352) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond352) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond352) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond352) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond352) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond352) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond352) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond352) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond352) CFA_SP SP+0
        CFI (cfiCond352) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiPicker353 Using cfiCommon1
        CFI (cfiPicker353) NoFunction
        CFI (cfiPicker353) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiCond349
        CFI EndBlock cfiCond350
        CFI EndBlock cfiCond351
        CFI EndBlock cfiCond352
        CFI EndBlock cfiPicker353
        REQUIRE ??Subroutine119_0
        ; // Fall through to label ??Subroutine119_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine119_0:
        CFI Block cfiCond354 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_193
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond355 Using cfiCommon0
        CFI (cfiCond355) NoFunction
        CFI (cfiCond355) Conditional ??CrossCallReturnLabel_189
        CFI (cfiCond355) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond355) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond355) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond355) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond355) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond355) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond355) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond355) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond355) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond355) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond355) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond355) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond355) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond355) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond355) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond355) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond355) CFA_SP SP+0
        CFI (cfiCond355) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond356 Using cfiCommon0
        CFI (cfiCond356) NoFunction
        CFI (cfiCond356) Conditional ??CrossCallReturnLabel_190
        CFI (cfiCond356) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond356) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond356) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond356) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond356) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond356) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond356) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond356) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond356) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond356) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond356) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond356) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond356) CFA_SP SP+0
        CFI (cfiCond356) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond357 Using cfiCommon0
        CFI (cfiCond357) NoFunction
        CFI (cfiCond357) Conditional ??CrossCallReturnLabel_191
        CFI (cfiCond357) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond357) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond357) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond357) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond357) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond357) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond357) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond357) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond357) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond357) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond357) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond357) CFA_SP SP+0
        CFI (cfiCond357) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond358 Using cfiCommon0
        CFI (cfiCond358) NoFunction
        CFI (cfiCond358) Conditional ??CrossCallReturnLabel_192
        CFI (cfiCond358) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond358) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond358) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond358) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond358) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond358) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond358) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond358) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond358) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond358) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond358) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond358) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond358) CFA_SP SP+0
        CFI (cfiCond358) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiPicker359 Using cfiCommon1
        CFI (cfiPicker359) NoFunction
        CFI (cfiPicker359) Picker
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond354
        CFI EndBlock cfiCond355
        CFI EndBlock cfiCond356
        CFI EndBlock cfiCond357
        CFI EndBlock cfiCond358
        CFI EndBlock cfiPicker359

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
        CFI Block cfiCond360 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_72
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond361 Using cfiCommon0
        CFI (cfiCond361) NoFunction
        CFI (cfiCond361) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond361) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond361) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond361) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond361) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond361) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond361) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond361) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond361) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond361) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond361) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond361) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond361) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond361) CFA_SP SP+0
        CFI (cfiCond361) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker362 Using cfiCommon1
        CFI (cfiPicker362) NoFunction
        CFI (cfiPicker362) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine81 & 0xFFFF
??CrossCallReturnLabel_115:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrDeviceEntryAdd?relay
        RET
        CFI EndBlock cfiCond360
        CFI EndBlock cfiCond361
        CFI EndBlock cfiPicker362

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceValidate:
        CFI Block cfiBlock363 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidate
        FUNCALL ZDSecMgrDeviceValidate, ZDSecMgrDeviceValidateRM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceValidate_0
        MOV     A,R2
        ADD     A,#0x6
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceValidate_1
        MOV     A,#0x1
        SJMP    ??ZDSecMgrDeviceValidate_2
??ZDSecMgrDeviceValidate_1:
        CLR     A
??ZDSecMgrDeviceValidate_2:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
        LCALL   ??ZDSecMgrDeviceValidateRM?relay
        SJMP    ??ZDSecMgrDeviceValidate_3
??ZDSecMgrDeviceValidate_0:
        MOV     R1,#-0x38
??ZDSecMgrDeviceValidate_3:
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock363

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceJoin:
        CFI Block cfiBlock364 Using cfiCommon0
        CFI Function ZDSecMgrDeviceJoin
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceValidate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrSendNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrDeviceValidate
        LCALL   ??ZDSecMgrDeviceValidate?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
        JNZ     ??ZDSecMgrDeviceJoin_0
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_61:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        ; Setup parameters for call to function ZDSecMgrSendNwkKey
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrSendNwkKey?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
        SJMP    ??ZDSecMgrDeviceJoin_1
??ZDSecMgrDeviceJoin_0:
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrDeviceRemove?relay
??ZDSecMgrDeviceJoin_1:
        MOV     R1,?V0 + 0
        LJMP    ?Subroutine95 & 0xFFFF
        CFI EndBlock cfiBlock364

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond365 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond366 Using cfiCommon0
        CFI (cfiCond366) NoFunction
        CFI (cfiCond366) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond366) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond366) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond366) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond366) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond366) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond366) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond366) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond366) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond366) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond366) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond366) CFA_SP SP+0
        CFI (cfiCond366) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker367 Using cfiCommon1
        CFI (cfiPicker367) NoFunction
        CFI (cfiPicker367) Picker
        LCALL   ?Subroutine81 & 0xFFFF
??CrossCallReturnLabel_114:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine136_0 & 0xFFFF
??CrossCallReturnLabel_293:
        LCALL   ??ZDSecMgrAddrStore?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond365
        CFI EndBlock cfiCond366
        CFI EndBlock cfiPicker367

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceJoinDirect:
        CFI Block cfiBlock368 Using cfiCommon0
        CFI Function ZDSecMgrDeviceJoinDirect
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        LCALL   ??ZDSecMgrDeviceJoin?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
        JNZ     ??ZDSecMgrDeviceJoinDirect_0
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        ; Setup parameters for call to function AssocGetWithShort
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine120_0 & 0xFFFF
??CrossCallReturnLabel_198:
        LCALL   ??AssocGetWithShort?relay
        LCALL   ??ZDSecMgrAssocDeviceAuth?relay
??ZDSecMgrDeviceJoinDirect_0:
        MOV     R1,?V0 + 0
        LJMP    ??Subroutine124_0 & 0xFFFF
        CFI EndBlock cfiBlock368

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine60:
        CFI Block cfiCond369 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_201
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond370 Using cfiCommon0
        CFI (cfiCond370) NoFunction
        CFI (cfiCond370) Conditional ??CrossCallReturnLabel_202
        CFI (cfiCond370) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond370) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond370) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond370) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond370) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond370) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond370) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond370) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond370) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond370) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond370) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond370) CFA_SP SP+0
        CFI (cfiCond370) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker371 Using cfiCommon1
        CFI (cfiPicker371) NoFunction
        CFI (cfiPicker371) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        CFI EndBlock cfiCond369
        CFI EndBlock cfiCond370
        CFI EndBlock cfiPicker371
        REQUIRE ??Subroutine120_0
        ; // Fall through to label ??Subroutine120_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine120_0:
        CFI Block cfiCond372 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_194
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond373 Using cfiCommon0
        CFI (cfiCond373) NoFunction
        CFI (cfiCond373) Conditional ??CrossCallReturnLabel_195
        CFI (cfiCond373) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond373) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond373) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond373) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond373) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond373) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond373) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond373) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond373) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond373) CFA_SP SP+0
        CFI (cfiCond373) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond374 Using cfiCommon0
        CFI (cfiCond374) NoFunction
        CFI (cfiCond374) Conditional ??CrossCallReturnLabel_196
        CFI (cfiCond374) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond374) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond374) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond374) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond374) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond374) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond374) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond374) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond374) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond374) CFA_SP SP+0
        CFI (cfiCond374) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond375 Using cfiCommon0
        CFI (cfiCond375) NoFunction
        CFI (cfiCond375) Conditional ??CrossCallReturnLabel_197
        CFI (cfiCond375) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond375) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond375) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond375) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond375) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond375) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond375) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond375) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond375) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond375) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond375) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond375) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond375) CFA_SP SP+0
        CFI (cfiCond375) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond376 Using cfiCommon0
        CFI (cfiCond376) NoFunction
        CFI (cfiCond376) Conditional ??CrossCallReturnLabel_198
        CFI (cfiCond376) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond376) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond376) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond376) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond376) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond376) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond376) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond376) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond376) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond376) CFA_SP SP+0
        CFI (cfiCond376) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond377 Using cfiCommon0
        CFI (cfiCond377) NoFunction
        CFI (cfiCond377) Conditional ??CrossCallReturnLabel_199
        CFI (cfiCond377) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond377) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond377) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond377) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond377) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond377) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond377) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond377) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond377) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond377) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond377) CFA_SP SP+0
        CFI (cfiCond377) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond378 Using cfiCommon0
        CFI (cfiCond378) NoFunction
        CFI (cfiCond378) Conditional ??CrossCallReturnLabel_200
        CFI (cfiCond378) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond378) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond378) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond378) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond378) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond378) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond378) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond378) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond378) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond378) CFA_SP SP+0
        CFI (cfiCond378) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond379 Using cfiCommon0
        CFI (cfiCond379) NoFunction
        CFI (cfiCond379) Conditional ??CrossCallReturnLabel_201
        CFI (cfiCond379) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond379) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond379) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond379) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond379) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond379) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond379) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond379) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond379) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond379) CFA_SP SP+0
        CFI (cfiCond379) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond380 Using cfiCommon0
        CFI (cfiCond380) NoFunction
        CFI (cfiCond380) Conditional ??CrossCallReturnLabel_202
        CFI (cfiCond380) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond380) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond380) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond380) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond380) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond380) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond380) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond380) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond380) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond380) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond380) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond380) CFA_SP SP+0
        CFI (cfiCond380) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker381 Using cfiCommon1
        CFI (cfiPicker381) NoFunction
        CFI (cfiPicker381) Picker
        LCALL   ??Subroutine136_0 & 0xFFFF
??CrossCallReturnLabel_300:
        RET
        CFI EndBlock cfiCond372
        CFI EndBlock cfiCond373
        CFI EndBlock cfiCond374
        CFI EndBlock cfiCond375
        CFI EndBlock cfiCond376
        CFI EndBlock cfiCond377
        CFI EndBlock cfiCond378
        CFI EndBlock cfiCond379
        CFI EndBlock cfiCond380
        CFI EndBlock cfiPicker381

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceJoinFwd:
        CFI Block cfiBlock382 Using cfiCommon0
        CFI Function ZDSecMgrDeviceJoinFwd
        FUNCALL ZDSecMgrDeviceJoinFwd, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 8)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_145:
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_67:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
??CrossCallReturnLabel_247:
        MOV     A,R2
        ADD     A,#0x7
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_235:
        MOV     C,0xE0 /* A   */.7
        JNC     ??ZDSecMgrDeviceJoinFwd_0
        MOV     C,0xE0 /* A   */.6
        JNC     ??ZDSecMgrDeviceJoinFwd_1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceJoinFwd_2
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
??ZDSecMgrDeviceJoinFwd_2:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x7
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
??ZDSecMgrDeviceJoinFwd_1:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
??ZDSecMgrDeviceJoinFwd_0:
        MOV     C,0xE0 /* A   */.6
        JNC     ??ZDSecMgrDeviceJoinFwd_4
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceJoinFwd_5
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
??ZDSecMgrDeviceJoinFwd_5:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
??ZDSecMgrDeviceJoinFwd_4:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
??ZDSecMgrDeviceJoinFwd_3:
        MOVX    @DPTR,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ??Subroutine126_0 & 0xFFFF
??CrossCallReturnLabel_220:
        LCALL   ??APSME_UpdateDeviceReq?relay
        MOV     A,#0x8
        LJMP    ??Subroutine109_0 & 0xFFFF
        CFI EndBlock cfiBlock382

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceNew:
        CFI Block cfiBlock383 Using cfiCommon0
        CFI Function ZDSecMgrDeviceNew
        FUNCALL ZDSecMgrDeviceNew, ZDSecMgrDeviceJoinDirect
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function ZDSecMgrDeviceJoinDirect
        LCALL   ??ZDSecMgrDeviceJoinDirect?relay
        SJMP    ??Subroutine121_0
        CFI EndBlock cfiBlock383

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAssocDeviceAuth:
        CFI Block cfiBlock384 Using cfiCommon0
        CFI Function ZDSecMgrAssocDeviceAuth
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R2
        JNZ     ??ZDSecMgrAssocDeviceAuth_0
        MOV     A,R3
??ZDSecMgrAssocDeviceAuth_0:
        JZ      ??ZDSecMgrAssocDeviceAuth_1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.3
        MOVX    @DPTR,A
??ZDSecMgrAssocDeviceAuth_1:
        SJMP    ??Subroutine121_0
        CFI EndBlock cfiBlock384

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine94:
        CFI Block cfiBlock385 Using cfiCommon0
        CFI NoFunction
        PUSH    DPL
        CFI CFA_SP SP+-4
        CFI DPL0 Frame(CFA_SP, 4)
        PUSH    DPH
        CFI CFA_SP SP+-5
        CFI DPH0 Frame(CFA_SP, 5)
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function APSME_SecurityNM
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function APSME_SecurityNM
        LCALL   ??APSME_SecurityNM?relay
        CFI EndBlock cfiBlock385
        REQUIRE ??Subroutine121_0
        ; // Fall through to label ??Subroutine121_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine121_0:
        CFI Block cfiBlock386 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock386

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthInitiate:
        CFI Block cfiBlock387 Using cfiCommon0
        CFI Function ZDSecMgrAuthInitiate
        FUNCALL ZDSecMgrAuthInitiate, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthInitiate, APSME_AuthenticateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??APSME_LookupNwkAddr?relay
        MOV     A,R1
        JZ      ??ZDSecMgrAuthInitiate_0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ??Subroutine126_0 & 0xFFFF
??CrossCallReturnLabel_221:
        LCALL   ??APSME_AuthenticateReq?relay
??ZDSecMgrAuthInitiate_0:
        MOV     A,#0x7
        SJMP    ??Subroutine123_0
        CFI EndBlock cfiBlock387

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine92:
        CFI Block cfiBlock388 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,?V0 + 0
        CFI EndBlock cfiBlock388
        REQUIRE ??Subroutine122_0
        ; // Fall through to label ??Subroutine122_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine122_0:
        CFI Block cfiBlock389 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        CFI EndBlock cfiBlock389
        REQUIRE ??Subroutine123_0
        ; // Fall through to label ??Subroutine123_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine123_0:
        CFI Block cfiBlock390 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock390
        REQUIRE ??Subroutine124_0
        ; // Fall through to label ??Subroutine124_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine124_0:
        CFI Block cfiBlock391 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock391

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthNwkKey:
        CFI Block cfiBlock392 Using cfiCommon0
        CFI Function ZDSecMgrAuthNwkKey
        FUNCALL ZDSecMgrAuthNwkKey, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDSecMgrAuthNwkKey_0
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
??ZDSecMgrAuthNwkKey_0:
        SJMP    ??Subroutine121_0
        CFI EndBlock cfiBlock392

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrInit:
        CFI Block cfiBlock393 Using cfiCommon0
        CFI Function ZDSecMgrInit
        FUNCALL ZDSecMgrInit, APSME_SecurityNM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        SJMP    ?Subroutine94
        CFI EndBlock cfiBlock393

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrConfig:
        CFI Block cfiBlock394 Using cfiCommon0
        CFI Function ZDSecMgrConfig
        FUNCALL ZDSecMgrConfig, APSME_SecurityNM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        SJMP    ?Subroutine94
        CFI EndBlock cfiBlock394

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrPermitJoining:
        CFI Block cfiBlock395 Using cfiCommon0
        CFI Function ZDSecMgrPermitJoining
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        CLR     A
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    @DPTR,A
        MOV     A,R1
        JZ      ??ZDSecMgrPermitJoining_0
        MOV     A,#0x1
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX    @DPTR,A
        MOV     A,#-0x1
        XRL     A,R1
        JZ      ??ZDSecMgrPermitJoining_1
        MOV     A,#0x1
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        SJMP    ??ZDSecMgrPermitJoining_2
??ZDSecMgrPermitJoining_0:
        CLR     A
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
??ZDSecMgrPermitJoining_2:
        MOVX    @DPTR,A
??ZDSecMgrPermitJoining_1:
        MOV     R1,#0x1
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock395

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrPermitJoiningTimeout:
        CFI Block cfiBlock396 Using cfiCommon0
        CFI Function ZDSecMgrPermitJoiningTimeout
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrPermitJoiningTimeout_0
        CLR     A
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX    @DPTR,A
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    @DPTR,A
??ZDSecMgrPermitJoiningTimeout_0:
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock396

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrNewDeviceEvent:
        CFI Block cfiBlock397 Using cfiCommon0
        CFI Function ZDSecMgrNewDeviceEvent
        FUNCALL ZDSecMgrNewDeviceEvent, AssocMatchDeviceStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrDeviceNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AssocRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 23
        MOV     A,#-0x17
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#0x0
        ; Setup parameters for call to function AssocMatchDeviceStatus
        MOV     R1,#0x4
        LCALL   ??AssocMatchDeviceStatus?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        JNZ     ??ZDSecMgrNewDeviceEvent_0
        MOV     A,R7
??ZDSecMgrNewDeviceEvent_0:
        JNZ     $+5
        LJMP    ??ZDSecMgrNewDeviceEvent_1 & 0xFFFF
        MOV     ?V0 + 0,#0x1
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrNewDeviceEvent_2
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        LCALL   ??ZDSecMgrAssocDeviceAuth?relay
??ZDSecMgrNewDeviceEvent_2:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_171:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryGet?relay
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_203:
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x5
        MOV     R0,A
        MOV     A,R7
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_55:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine126_0 & 0xFFFF
??CrossCallReturnLabel_222:
        LCALL   ??ZDSecMgrDeviceNew?relay
        MOV     A,R1
        MOV     R2,A
        JNZ     ??ZDSecMgrNewDeviceEvent_3
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.2
        MOVX    @DPTR,A
        SJMP    ??ZDSecMgrNewDeviceEvent_1
??ZDSecMgrNewDeviceEvent_3:
        MOV     A,#-0x38
        XRL     A,R2
        JNZ     ??ZDSecMgrNewDeviceEvent_1
        ; Setup parameters for call to function AssocRemove
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AssocRemove?relay
??ZDSecMgrNewDeviceEvent_1:
        MOV     R1,?V0 + 0
        MOV     A,#0x17
        LJMP    ??Subroutine128_0 & 0xFFFF
        CFI EndBlock cfiBlock397

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond398 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond399 Using cfiCommon0
        CFI (cfiCond399) NoFunction
        CFI (cfiCond399) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond399) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond399) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond399) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond399) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond399) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond399) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond399) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond399) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond399) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond399) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond399) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond399) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond399) CFA_SP SP+0
        CFI (cfiCond399) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker400 Using cfiCommon1
        CFI (cfiPicker400) NoFunction
        CFI (cfiPicker400) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond398
        CFI EndBlock cfiCond399
        CFI EndBlock cfiPicker400

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond401 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond402 Using cfiCommon0
        CFI (cfiCond402) NoFunction
        CFI (cfiCond402) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond402) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond402) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond402) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond402) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond402) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond402) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond402) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond402) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond402) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond402) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond402) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond402) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond402) CFA_SP SP+0
        CFI (cfiCond402) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker403 Using cfiCommon1
        CFI (cfiPicker403) NoFunction
        CFI (cfiPicker403) Picker
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_260:
        ; Setup parameters for call to function NLME_GetShortAddr
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        RET
        CFI EndBlock cfiCond401
        CFI EndBlock cfiCond402
        CFI EndBlock cfiPicker403

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond404 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_203
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond405 Using cfiCommon0
        CFI (cfiCond405) NoFunction
        CFI (cfiCond405) Conditional ??CrossCallReturnLabel_204
        CFI (cfiCond405) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond405) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond405) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond405) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond405) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond405) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond405) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond405) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond405) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond405) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond405) CFA_SP SP+0
        CFI (cfiCond405) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker406 Using cfiCommon1
        CFI (cfiPicker406) NoFunction
        CFI (cfiPicker406) Picker
        LCALL   ?Subroutine79 & 0xFFFF
        CFI EndBlock cfiCond404
        CFI EndBlock cfiCond405
        CFI EndBlock cfiPicker406
??CrossCallReturnLabel_213:
        REQUIRE ??Subroutine125_0
        ; // Fall through to label ??Subroutine125_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine125_0:
        CFI Block cfiCond407 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_205
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond408 Using cfiCommon0
        CFI (cfiCond408) NoFunction
        CFI (cfiCond408) Conditional ??CrossCallReturnLabel_203
        CFI (cfiCond408) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond408) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond408) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond408) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond408) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond408) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond408) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond408) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond408) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond408) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond408) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond408) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond408) CFA_SP SP+0
        CFI (cfiCond408) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond409 Using cfiCommon0
        CFI (cfiCond409) NoFunction
        CFI (cfiCond409) Conditional ??CrossCallReturnLabel_204
        CFI (cfiCond409) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond409) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond409) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond409) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond409) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond409) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond409) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond409) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond409) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond409) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond409) CFA_SP SP+0
        CFI (cfiCond409) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker410 Using cfiCommon1
        CFI (cfiPicker410) NoFunction
        CFI (cfiPicker410) Picker
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_264:
        MOV     A,#0xd
        RET
        CFI EndBlock cfiCond407
        CFI EndBlock cfiCond408
        CFI EndBlock cfiCond409
        CFI EndBlock cfiPicker410

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond411 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond412 Using cfiCommon0
        CFI (cfiCond412) NoFunction
        CFI (cfiCond412) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond412) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond412) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond412) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond412) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond412) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond412) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond412) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond412) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond412) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond412) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond412) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond412) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond412) CFA_SP SP+0
        CFI (cfiCond412) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond413 Using cfiCommon0
        CFI (cfiCond413) NoFunction
        CFI (cfiCond413) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond413) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond413) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond413) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond413) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond413) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond413) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond413) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond413) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond413) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond413) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond413) CFA_SP SP+0
        CFI (cfiCond413) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond414 Using cfiCommon0
        CFI (cfiCond414) NoFunction
        CFI (cfiCond414) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond414) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond414) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond414) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond414) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond414) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond414) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond414) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond414) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond414) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond414) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond414) CFA_SP SP+0
        CFI (cfiCond414) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker415 Using cfiCommon1
        CFI (cfiPicker415) NoFunction
        CFI (cfiPicker415) Picker
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_258:
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function AddrMgrEntryGet
        MOV     A,#0xa
        RET
        CFI EndBlock cfiCond411
        CFI EndBlock cfiCond412
        CFI EndBlock cfiCond413
        CFI EndBlock cfiCond414
        CFI EndBlock cfiPicker415

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond416 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_215
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond417 Using cfiCommon0
        CFI (cfiCond417) NoFunction
        CFI (cfiCond417) Conditional ??CrossCallReturnLabel_216
        CFI (cfiCond417) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond417) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond417) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond417) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond417) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond417) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond417) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond417) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond417) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond417) CFA_SP SP+0
        CFI (cfiCond417) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker418 Using cfiCommon1
        CFI (cfiPicker418) NoFunction
        CFI (cfiPicker418) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        CFI EndBlock cfiCond416
        CFI EndBlock cfiCond417
        CFI EndBlock cfiPicker418
        REQUIRE ??Subroutine126_0
        ; // Fall through to label ??Subroutine126_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine126_0:
        CFI Block cfiCond419 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_217
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond420 Using cfiCommon0
        CFI (cfiCond420) NoFunction
        CFI (cfiCond420) Conditional ??CrossCallReturnLabel_218
        CFI (cfiCond420) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond420) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond420) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond420) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond420) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond420) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond420) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond420) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond420) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond420) CFA_SP SP+0
        CFI (cfiCond420) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond421 Using cfiCommon0
        CFI (cfiCond421) NoFunction
        CFI (cfiCond421) Conditional ??CrossCallReturnLabel_219
        CFI (cfiCond421) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond421) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond421) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond421) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond421) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond421) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond421) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond421) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond421) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond421) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond421) CFA_SP SP+0
        CFI (cfiCond421) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond422 Using cfiCommon0
        CFI (cfiCond422) NoFunction
        CFI (cfiCond422) Conditional ??CrossCallReturnLabel_220
        CFI (cfiCond422) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond422) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond422) CFA_SP SP+-5
        CFI (cfiCond422) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond423 Using cfiCommon0
        CFI (cfiCond423) NoFunction
        CFI (cfiCond423) Conditional ??CrossCallReturnLabel_221
        CFI (cfiCond423) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond423) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond423) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond423) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond423) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond423) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond423) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond423) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond423) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond423) CFA_SP SP+0
        CFI (cfiCond423) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond424 Using cfiCommon0
        CFI (cfiCond424) NoFunction
        CFI (cfiCond424) Conditional ??CrossCallReturnLabel_222
        CFI (cfiCond424) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond424) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond424) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond424) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond424) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond424) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond424) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond424) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond424) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond424) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond424) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond424) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond424) CFA_SP SP+0
        CFI (cfiCond424) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond425 Using cfiCommon0
        CFI (cfiCond425) NoFunction
        CFI (cfiCond425) Conditional ??CrossCallReturnLabel_223
        CFI (cfiCond425) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond425) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond425) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond425) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond425) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond425) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond425) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond425) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond425) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond425) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond425) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond425) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond425) CFA_SP SP+0
        CFI (cfiCond425) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond426 Using cfiCommon0
        CFI (cfiCond426) NoFunction
        CFI (cfiCond426) Conditional ??CrossCallReturnLabel_224
        CFI (cfiCond426) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond426) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond426) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond426) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond426) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond426) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond426) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond426) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond426) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond426) CFA_SP SP+0
        CFI (cfiCond426) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond427 Using cfiCommon0
        CFI (cfiCond427) NoFunction
        CFI (cfiCond427) Conditional ??CrossCallReturnLabel_225
        CFI (cfiCond427) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond427) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond427) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond427) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond427) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond427) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond427) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond427) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond427) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond427) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond427) CFA_SP SP+0
        CFI (cfiCond427) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond428 Using cfiCommon0
        CFI (cfiCond428) NoFunction
        CFI (cfiCond428) Conditional ??CrossCallReturnLabel_226
        CFI (cfiCond428) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond428) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond428) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond428) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond428) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond428) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond428) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond428) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond428) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond428) CFA_SP SP+0
        CFI (cfiCond428) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond429 Using cfiCommon0
        CFI (cfiCond429) NoFunction
        CFI (cfiCond429) Conditional ??CrossCallReturnLabel_215
        CFI (cfiCond429) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond429) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond429) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond429) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond429) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond429) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond429) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond429) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond429) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond429) CFA_SP SP+0
        CFI (cfiCond429) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond430 Using cfiCommon0
        CFI (cfiCond430) NoFunction
        CFI (cfiCond430) Conditional ??CrossCallReturnLabel_216
        CFI (cfiCond430) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond430) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond430) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond430) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond430) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond430) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond430) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond430) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond430) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond430) CFA_SP SP+0
        CFI (cfiCond430) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker431 Using cfiCommon1
        CFI (cfiPicker431) NoFunction
        CFI (cfiPicker431) Picker
        LCALL   ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_209:
        LJMP    ??Subroutine104_0 & 0xFFFF
        CFI EndBlock cfiCond419
        CFI EndBlock cfiCond420
        CFI EndBlock cfiCond421
        CFI EndBlock cfiCond422
        CFI EndBlock cfiCond423
        CFI EndBlock cfiCond424
        CFI EndBlock cfiCond425
        CFI EndBlock cfiCond426
        CFI EndBlock cfiCond427
        CFI EndBlock cfiCond428
        CFI EndBlock cfiCond429
        CFI EndBlock cfiCond430
        CFI EndBlock cfiPicker431

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEvent:
        CFI Block cfiBlock432 Using cfiCommon0
        CFI Function ZDSecMgrEvent
        FUNCALL ZDSecMgrEvent, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEvent, ZDSecMgrDeviceCtrlHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 23
        MOV     A,#-0x17
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEvent_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEvent_0:
        JNZ     $+5
        LJMP    ??ZDSecMgrEvent_1 & 0xFFFF
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 0,#0x0
        MOV     R6,#0x0
        MOV     R7,#0x0
??ZDSecMgrEvent_2:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x7
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDSecMgrEvent_3 & 0xFFFF
        MOV     A,R2
        ADD     A,#0x6
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_236:
        JZ      ??ZDSecMgrEvent_4
        DEC     A
        MOVX    @DPTR,A
??ZDSecMgrEvent_4:
        MOV     A,?V0 + 1
        JZ      $+5
        LJMP    ??ZDSecMgrEvent_5 & 0xFFFF
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEvent_5
        MOV     ?V0 + 1,#0x1
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine120_0 & 0xFFFF
??CrossCallReturnLabel_199:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_75:
        MOV     R1,A
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryGet?relay
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_204:
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_227:
        LCALL   ??ZDSecMgrDeviceCtrlHandler?relay
        SJMP    ??ZDSecMgrEvent_3
??ZDSecMgrEvent_5:
        MOV     ?V0 + 0,#0x1
??ZDSecMgrEvent_3:
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_40:
        JNC     $+5
        LJMP    ??ZDSecMgrEvent_2 & 0xFFFF
        MOV     A,#0x1
        XRL     A,?V0 + 0
        JNZ     ??ZDSecMgrEvent_1
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x1
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
??ZDSecMgrEvent_1:
        MOV     A,#0x17
        LJMP    ??Subroutine115_0 & 0xFFFF
        CFI EndBlock cfiBlock432

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
        CFI Block cfiCond433 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond434 Using cfiCommon0
        CFI (cfiCond434) NoFunction
        CFI (cfiCond434) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond434) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond434) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond434) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond434) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond434) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond434) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond434) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond434) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond434) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond434) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond434) CFA_SP SP+0
        CFI (cfiCond434) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker435 Using cfiCommon1
        CFI (cfiPicker435) NoFunction
        CFI (cfiPicker435) Picker
        LCALL   ?Subroutine83 & 0xFFFF
??CrossCallReturnLabel_289:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond433
        CFI EndBlock cfiCond434
        CFI EndBlock cfiPicker435

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond436 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_235
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond437 Using cfiCommon0
        CFI (cfiCond437) NoFunction
        CFI (cfiCond437) Conditional ??CrossCallReturnLabel_236
        CFI (cfiCond437) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond437) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond437) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond437) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond437) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond437) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond437) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond437) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond437) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond437) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond437) CFA_SP SP+0
        CFI (cfiCond437) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond438 Using cfiCommon0
        CFI (cfiCond438) NoFunction
        CFI (cfiCond438) Conditional ??CrossCallReturnLabel_237
        CFI (cfiCond438) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond438) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond438) CFA_SP SP+-5
        CFI (cfiCond438) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond439 Using cfiCommon0
        CFI (cfiCond439) NoFunction
        CFI (cfiCond439) Conditional ??CrossCallReturnLabel_238
        CFI (cfiCond439) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond439) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond439) CFA_SP SP+-5
        CFI Block cfiPicker440 Using cfiCommon1
        CFI (cfiPicker440) NoFunction
        CFI (cfiPicker440) Picker
        MOV     DPL,A
        MOV     A,R3
        CFI EndBlock cfiCond436
        CFI EndBlock cfiCond437
        CFI EndBlock cfiCond438
        CFI EndBlock cfiCond439
        CFI EndBlock cfiPicker440
        REQUIRE ??Subroutine127_0
        ; // Fall through to label ??Subroutine127_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine127_0:
        CFI Block cfiCond441 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_233
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond442 Using cfiCommon0
        CFI (cfiCond442) NoFunction
        CFI (cfiCond442) Conditional ??CrossCallReturnLabel_234
        CFI (cfiCond442) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond442) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond442) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond442) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond442) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond442) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond442) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond442) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond442) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond442) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond442) CFA_SP SP+0
        CFI (cfiCond442) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond443 Using cfiCommon0
        CFI (cfiCond443) NoFunction
        CFI (cfiCond443) Conditional ??CrossCallReturnLabel_235
        CFI (cfiCond443) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond443) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond443) CFA_SP SP+-5
        CFI (cfiCond443) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond444 Using cfiCommon0
        CFI (cfiCond444) NoFunction
        CFI (cfiCond444) Conditional ??CrossCallReturnLabel_236
        CFI (cfiCond444) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond444) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond444) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond444) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond444) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond444) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond444) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond444) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond444) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond444) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond444) CFA_SP SP+0
        CFI (cfiCond444) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond445 Using cfiCommon0
        CFI (cfiCond445) NoFunction
        CFI (cfiCond445) Conditional ??CrossCallReturnLabel_237
        CFI (cfiCond445) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond445) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond445) CFA_SP SP+-5
        CFI (cfiCond445) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond446 Using cfiCommon0
        CFI (cfiCond446) NoFunction
        CFI (cfiCond446) Conditional ??CrossCallReturnLabel_238
        CFI (cfiCond446) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond446) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond446) CFA_SP SP+-5
        CFI Block cfiPicker447 Using cfiCommon1
        CFI (cfiPicker447) NoFunction
        CFI (cfiPicker447) Picker
        LCALL   ??Subroutine140_0 & 0xFFFF
??CrossCallReturnLabel_315:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond441
        CFI EndBlock cfiCond442
        CFI EndBlock cfiCond443
        CFI EndBlock cfiCond444
        CFI EndBlock cfiCond445
        CFI EndBlock cfiCond446
        CFI EndBlock cfiPicker447

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond448 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond449 Using cfiCommon0
        CFI (cfiCond449) NoFunction
        CFI (cfiCond449) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond449) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond449) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond449) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond449) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond449) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond449) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond449) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond449) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond449) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond449) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond449) CFA_SP SP+0
        CFI (cfiCond449) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond450 Using cfiCommon0
        CFI (cfiCond450) NoFunction
        CFI (cfiCond450) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond450) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond450) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond450) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond450) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond450) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond450) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond450) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond450) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond450) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond450) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond450) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond450) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond450) CFA_SP SP+0
        CFI (cfiCond450) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond451 Using cfiCommon0
        CFI (cfiCond451) NoFunction
        CFI (cfiCond451) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond451) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond451) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond451) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond451) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond451) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond451) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond451) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond451) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond451) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond451) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond451) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond451) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond451) CFA_SP SP+0
        CFI (cfiCond451) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker452 Using cfiCommon1
        CFI (cfiPicker452) NoFunction
        CFI (cfiPicker452) Picker
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        CLR     C
        MOV     A,R6
        SUBB    A,#0x3
        MOV     A,R7
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond448
        CFI EndBlock cfiCond449
        CFI EndBlock cfiCond450
        CFI EndBlock cfiCond451
        CFI EndBlock cfiPicker452

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEstablishKeyCfm:
        CFI Block cfiBlock453 Using cfiCommon0
        CFI Function ZDSecMgrEstablishKeyCfm
        FUNCALL ZDSecMgrEstablishKeyCfm, ZDSecMgrDeviceCtrlUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function ZDSecMgrDeviceCtrlUpdate
        MOV     R1,#0x5
        MOV     A,R2
        ADD     A,#0x2
        INC     R2
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??ZDSecMgrDeviceCtrlUpdate?relay
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock453

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrTCExtAddrCheck:
        CFI Block cfiBlock454 Using cfiCommon0
        CFI Function ZDSecMgrTCExtAddrCheck
        FUNCALL ZDSecMgrTCExtAddrCheck, AddrMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCExtAddrCheck, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,#0x0
        ; Setup parameters for call to function AddrMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??AddrMgrExtAddrLookup?relay
        MOV     A,R1
        JZ      ??ZDSecMgrTCExtAddrCheck_0
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrEqual?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
??ZDSecMgrTCExtAddrCheck_0:
        MOV     R1,?V0 + 0
        MOV     A,#0x8
        LJMP    ??Subroutine123_0 & 0xFFFF
        CFI EndBlock cfiBlock454

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrTCDataLoad:
        CFI Block cfiBlock455 Using cfiCommon0
        CFI Function ZDSecMgrTCDataLoad
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrMasterKeyStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     DPTR,#ZDSecMgrTCDataLoaded
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTCDataLoad_0
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??ZDSecMgrAddrStore?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R1
        JNZ     ??ZDSecMgrTCDataLoad_1
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrTCDataLoad_1
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_187:
        JZ      ??ZDSecMgrTCDataLoad_1
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(ZDSecMgrTCMasterKey & 0xff)
        MOV     ?V0 + 1,#((ZDSecMgrTCMasterKey >> 8) & 0xff)
        MOV     ?V0 + 2,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_191:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
        ; Setup parameters for call to function ZDSecMgrMasterKeyStore
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_90:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
??ZDSecMgrTCDataLoad_1:
        MOV     A,#0x1
        MOV     DPTR,#ZDSecMgrTCDataLoaded
        MOVX    @DPTR,A
??ZDSecMgrTCDataLoad_0:
        MOV     A,#0x14
        LJMP    ?Subroutine96 & 0xFFFF
        CFI EndBlock cfiBlock455

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine57:
        CFI Block cfiCond456 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_89
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond457 Using cfiCommon0
        CFI (cfiCond457) NoFunction
        CFI (cfiCond457) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond457) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond457) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond457) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond457) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond457) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond457) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond457) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond457) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond457) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond457) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond457) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond457) CFA_SP SP+0
        CFI (cfiCond457) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker458 Using cfiCommon1
        CFI (cfiPicker458) NoFunction
        CFI (cfiPicker458) Picker
        LCALL   ?Subroutine77 & 0xFFFF
??CrossCallReturnLabel_297:
        LCALL   ??ZDSecMgrMasterKeyStore?relay
        RET
        CFI EndBlock cfiCond456
        CFI EndBlock cfiCond457
        CFI EndBlock cfiPicker458

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEstablishKeyInd:
        CFI Block cfiBlock459 Using cfiCommon0
        CFI Function ZDSecMgrEstablishKeyInd
        FUNCALL ZDSecMgrEstablishKeyInd, ZDSecMgrTCDataLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKeyInd, ZDSecMgrTCExtAddrCheck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKeyInd, ZDSecMgrDeviceValidateSKKE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKeyInd, APSME_EstablishKeyRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        LCALL   ?Subroutine68 & 0xFFFF
??CrossCallReturnLabel_104:
        ; Setup parameters for call to function ZDSecMgrTCDataLoad
        MOV     R2,?V0 + 0
        MOV     R3,A
        LCALL   ??ZDSecMgrTCDataLoad?relay
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        ; Setup parameters for call to function ZDSecMgrTCExtAddrCheck
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrTCExtAddrCheck?relay
        MOV     A,R1
        JZ      ??ZDSecMgrEstablishKeyInd_0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??ZDSecMgrEstablishKeyInd_1
??ZDSecMgrEstablishKeyInd_0:
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_271:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
??CrossCallReturnLabel_248:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
??ZDSecMgrEstablishKeyInd_1:
        MOVX    @DPTR,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0xe
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_52:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrDeviceValidateSKKE
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrDeviceValidateSKKE?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrEstablishKeyInd_2
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??ZDSecMgrEstablishKeyInd_3
??ZDSecMgrEstablishKeyInd_2:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??ZDSecMgrEstablishKeyInd_3:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_254:
        MOV     A,R6
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
??CrossCallReturnLabel_249:
        MOV     A,R6
        ADD     A,#0xd
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine127_0 & 0xFFFF
??CrossCallReturnLabel_233:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine126_0 & 0xFFFF
??CrossCallReturnLabel_223:
        LCALL   ??APSME_EstablishKeyRsp?relay
        MOV     A,#0x11
        SJMP    ??Subroutine128_0
        CFI EndBlock cfiBlock459

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine86:
        CFI Block cfiBlock460 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x12
        CFI EndBlock cfiBlock460
        REQUIRE ??Subroutine128_0
        ; // Fall through to label ??Subroutine128_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine128_0:
        CFI Block cfiBlock461 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock461
        REQUIRE ??Subroutine129_0
        ; // Fall through to label ??Subroutine129_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine129_0:
        CFI Block cfiBlock462 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock462

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond463 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond464 Using cfiCommon0
        CFI (cfiCond464) NoFunction
        CFI (cfiCond464) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond464) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond464) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond464) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond464) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond464) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond464) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond464) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond464) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond464) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond464) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond464) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond464) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond464) CFA_SP SP+0
        CFI (cfiCond464) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond465 Using cfiCommon0
        CFI (cfiCond465) NoFunction
        CFI (cfiCond465) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond465) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond465) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond465) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond465) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond465) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond465) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond465) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond465) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond465) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond465) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond465) CFA_SP SP+0
        CFI (cfiCond465) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker466 Using cfiCommon1
        CFI (cfiPicker466) NoFunction
        CFI (cfiPicker466) Picker
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond463
        CFI EndBlock cfiCond464
        CFI EndBlock cfiCond465
        CFI EndBlock cfiPicker466

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond467 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_253
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond468 Using cfiCommon0
        CFI (cfiCond468) NoFunction
        CFI (cfiCond468) Conditional ??CrossCallReturnLabel_254
        CFI (cfiCond468) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond468) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond468) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond468) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond468) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond468) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond468) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond468) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond468) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond468) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond468) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond468) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond468) CFA_SP SP+0
        CFI (cfiCond468) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond469 Using cfiCommon0
        CFI (cfiCond469) NoFunction
        CFI (cfiCond469) Conditional ??CrossCallReturnLabel_255
        CFI (cfiCond469) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond469) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond469) CFA_SP SP+-5
        CFI (cfiCond469) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker470 Using cfiCommon1
        CFI (cfiPicker470) NoFunction
        CFI (cfiPicker470) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond467
        CFI EndBlock cfiCond468
        CFI EndBlock cfiCond469
        CFI EndBlock cfiPicker470
        REQUIRE ??Subroutine130_0
        ; // Fall through to label ??Subroutine130_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine130_0:
        CFI Block cfiCond471 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_239
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond472 Using cfiCommon0
        CFI (cfiCond472) NoFunction
        CFI (cfiCond472) Conditional ??CrossCallReturnLabel_240
        CFI (cfiCond472) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond472) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond472) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond472) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond472) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond472) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond472) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond472) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond472) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond472) CFA_SP SP+0
        CFI (cfiCond472) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond473 Using cfiCommon0
        CFI (cfiCond473) NoFunction
        CFI (cfiCond473) Conditional ??CrossCallReturnLabel_241
        CFI (cfiCond473) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond473) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond473) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond473) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond473) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond473) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond473) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond473) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond473) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond473) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond473) CFA_SP SP+0
        CFI (cfiCond473) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond474 Using cfiCommon0
        CFI (cfiCond474) NoFunction
        CFI (cfiCond474) Conditional ??CrossCallReturnLabel_242
        CFI (cfiCond474) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond474) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond474) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond474) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond474) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond474) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond474) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond474) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond474) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond474) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond474) CFA_SP SP+0
        CFI (cfiCond474) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond475 Using cfiCommon0
        CFI (cfiCond475) NoFunction
        CFI (cfiCond475) Conditional ??CrossCallReturnLabel_243
        CFI (cfiCond475) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond475) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond475) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond475) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond475) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond475) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond475) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond475) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond475) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond475) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond475) CFA_SP SP+0
        CFI (cfiCond475) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond476 Using cfiCommon0
        CFI (cfiCond476) NoFunction
        CFI (cfiCond476) Conditional ??CrossCallReturnLabel_244
        CFI (cfiCond476) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond476) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond476) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond476) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond476) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond476) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond476) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond476) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond476) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond476) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond476) CFA_SP SP+0
        CFI (cfiCond476) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond477 Using cfiCommon0
        CFI (cfiCond477) NoFunction
        CFI (cfiCond477) Conditional ??CrossCallReturnLabel_245
        CFI (cfiCond477) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond477) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond477) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond477) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond477) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond477) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond477) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond477) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond477) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond477) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond477) CFA_SP SP+0
        CFI (cfiCond477) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond478 Using cfiCommon0
        CFI (cfiCond478) NoFunction
        CFI (cfiCond478) Conditional ??CrossCallReturnLabel_246
        CFI (cfiCond478) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond478) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond478) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond478) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond478) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond478) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond478) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond478) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond478) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond478) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond478) CFA_SP SP+0
        CFI (cfiCond478) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond479 Using cfiCommon0
        CFI (cfiCond479) NoFunction
        CFI (cfiCond479) Conditional ??CrossCallReturnLabel_247
        CFI (cfiCond479) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond479) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond479) CFA_SP SP+-5
        CFI (cfiCond479) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond480 Using cfiCommon0
        CFI (cfiCond480) NoFunction
        CFI (cfiCond480) Conditional ??CrossCallReturnLabel_248
        CFI (cfiCond480) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond480) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond480) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond480) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond480) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond480) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond480) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond480) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond480) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond480) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond480) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond480) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond480) CFA_SP SP+0
        CFI (cfiCond480) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond481 Using cfiCommon0
        CFI (cfiCond481) NoFunction
        CFI (cfiCond481) Conditional ??CrossCallReturnLabel_249
        CFI (cfiCond481) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond481) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond481) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond481) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond481) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond481) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond481) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond481) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond481) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond481) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond481) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond481) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond481) CFA_SP SP+0
        CFI (cfiCond481) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond482 Using cfiCommon0
        CFI (cfiCond482) NoFunction
        CFI (cfiCond482) Conditional ??CrossCallReturnLabel_250
        CFI (cfiCond482) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond482) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond482) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond482) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond482) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond482) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond482) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond482) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond482) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond482) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond482) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond482) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond482) CFA_SP SP+0
        CFI (cfiCond482) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond483 Using cfiCommon0
        CFI (cfiCond483) NoFunction
        CFI (cfiCond483) Conditional ??CrossCallReturnLabel_251
        CFI (cfiCond483) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond483) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond483) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond483) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond483) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond483) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond483) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond483) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond483) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond483) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond483) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond483) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond483) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond483) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond483) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond483) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond483) CFA_SP SP+0
        CFI (cfiCond483) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond484 Using cfiCommon0
        CFI (cfiCond484) NoFunction
        CFI (cfiCond484) Conditional ??CrossCallReturnLabel_252
        CFI (cfiCond484) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond484) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond484) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond484) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond484) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond484) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond484) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond484) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond484) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond484) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond484) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond484) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond484) CFA_SP SP+0
        CFI (cfiCond484) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond485 Using cfiCommon0
        CFI (cfiCond485) NoFunction
        CFI (cfiCond485) Conditional ??CrossCallReturnLabel_253
        CFI (cfiCond485) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond485) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond485) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond485) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond485) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond485) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond485) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond485) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond485) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond485) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond485) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond485) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond485) CFA_SP SP+0
        CFI (cfiCond485) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond486 Using cfiCommon0
        CFI (cfiCond486) NoFunction
        CFI (cfiCond486) Conditional ??CrossCallReturnLabel_254
        CFI (cfiCond486) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond486) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond486) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond486) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond486) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond486) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond486) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond486) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond486) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond486) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond486) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond486) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond486) CFA_SP SP+0
        CFI (cfiCond486) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond487 Using cfiCommon0
        CFI (cfiCond487) NoFunction
        CFI (cfiCond487) Conditional ??CrossCallReturnLabel_255
        CFI (cfiCond487) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond487) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond487) CFA_SP SP+-5
        CFI (cfiCond487) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker488 Using cfiCommon1
        CFI (cfiPicker488) NoFunction
        CFI (cfiPicker488) Picker
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_265:
        RET
        CFI EndBlock cfiCond471
        CFI EndBlock cfiCond472
        CFI EndBlock cfiCond473
        CFI EndBlock cfiCond474
        CFI EndBlock cfiCond475
        CFI EndBlock cfiCond476
        CFI EndBlock cfiCond477
        CFI EndBlock cfiCond478
        CFI EndBlock cfiCond479
        CFI EndBlock cfiCond480
        CFI EndBlock cfiCond481
        CFI EndBlock cfiCond482
        CFI EndBlock cfiCond483
        CFI EndBlock cfiCond484
        CFI EndBlock cfiCond485
        CFI EndBlock cfiCond486
        CFI EndBlock cfiCond487
        CFI EndBlock cfiPicker488

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine70:
        CFI Block cfiCond489 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_136
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond490 Using cfiCommon0
        CFI (cfiCond490) NoFunction
        CFI (cfiCond490) Conditional ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_137
        CFI (cfiCond490) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond490) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond490) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond490) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond490) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond490) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond490) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond490) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond490) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond490) CFA_SP SP+0
        CFI (cfiCond490) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond491 Using cfiCommon0
        CFI (cfiCond491) NoFunction
        CFI (cfiCond491) Conditional ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_138
        CFI (cfiCond491) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond491) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond491) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond491) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond491) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond491) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond491) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond491) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond491) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond491) CFA_SP SP+0
        CFI (cfiCond491) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond492 Using cfiCommon0
        CFI (cfiCond492) NoFunction
        CFI (cfiCond492) Conditional ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_139
        CFI (cfiCond492) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond492) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond492) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond492) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond492) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond492) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond492) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond492) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond492) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond492) CFA_SP SP+0
        CFI (cfiCond492) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond493 Using cfiCommon0
        CFI (cfiCond493) NoFunction
        CFI (cfiCond493) Conditional ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_140
        CFI (cfiCond493) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond493) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond493) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond493) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond493) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond493) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond493) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond493) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond493) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond493) CFA_SP SP+0
        CFI (cfiCond493) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond494 Using cfiCommon0
        CFI (cfiCond494) NoFunction
        CFI (cfiCond494) Conditional ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_141
        CFI (cfiCond494) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond494) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond494) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond494) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond494) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond494) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond494) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond494) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond494) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond494) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond494) CFA_SP SP+0
        CFI (cfiCond494) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond495 Using cfiCommon0
        CFI (cfiCond495) NoFunction
        CFI (cfiCond495) Conditional ??CrossCallReturnLabel_259, ??CrossCallReturnLabel_30
        CFI (cfiCond495) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond495) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond495) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond495) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond495) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond495) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond495) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond495) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond495) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond495) CFA_SP SP+0
        CFI (cfiCond495) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond496 Using cfiCommon0
        CFI (cfiCond496) NoFunction
        CFI (cfiCond496) Conditional ??CrossCallReturnLabel_259, ??CrossCallReturnLabel_31
        CFI (cfiCond496) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond496) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond496) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond496) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond496) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond496) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond496) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond496) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond496) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond496) CFA_SP SP+0
        CFI (cfiCond496) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond497 Using cfiCommon0
        CFI (cfiCond497) NoFunction
        CFI (cfiCond497) Conditional ??CrossCallReturnLabel_259, ??CrossCallReturnLabel_32
        CFI (cfiCond497) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond497) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond497) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond497) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond497) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond497) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond497) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond497) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond497) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond497) CFA_SP SP+0
        CFI (cfiCond497) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond498 Using cfiCommon0
        CFI (cfiCond498) NoFunction
        CFI (cfiCond498) Conditional ??CrossCallReturnLabel_262, ??CrossCallReturnLabel_167
        CFI (cfiCond498) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond498) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond498) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond498) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond498) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond498) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond498) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond498) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond498) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond498) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond498) CFA_SP SP+0
        CFI (cfiCond498) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond499 Using cfiCommon0
        CFI (cfiCond499) NoFunction
        CFI (cfiCond499) Conditional ??CrossCallReturnLabel_262, ??CrossCallReturnLabel_168
        CFI (cfiCond499) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond499) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond499) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond499) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond499) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond499) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond499) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond499) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond499) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond499) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond499) CFA_SP SP+0
        CFI (cfiCond499) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond500 Using cfiCommon0
        CFI (cfiCond500) NoFunction
        CFI (cfiCond500) Conditional ??CrossCallReturnLabel_262, ??CrossCallReturnLabel_169
        CFI (cfiCond500) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond500) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond500) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond500) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond500) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond500) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond500) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond500) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond500) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond500) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond500) CFA_SP SP+0
        CFI (cfiCond500) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond501 Using cfiCommon0
        CFI (cfiCond501) NoFunction
        CFI (cfiCond501) Conditional ??CrossCallReturnLabel_263, ??CrossCallReturnLabel_182
        CFI (cfiCond501) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond501) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond501) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond501) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond501) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond501) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond501) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond501) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond501) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond501) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond501) CFA_SP SP+0
        CFI (cfiCond501) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond502 Using cfiCommon0
        CFI (cfiCond502) NoFunction
        CFI (cfiCond502) Conditional ??CrossCallReturnLabel_263, ??CrossCallReturnLabel_183
        CFI (cfiCond502) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond502) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond502) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond502) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond502) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond502) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond502) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond502) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond502) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond502) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond502) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond502) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond502) CFA_SP SP+0
        CFI (cfiCond502) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond503 Using cfiCommon0
        CFI (cfiCond503) NoFunction
        CFI (cfiCond503) Conditional ??CrossCallReturnLabel_263, ??CrossCallReturnLabel_184
        CFI (cfiCond503) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond503) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond503) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond503) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond503) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond503) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond503) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond503) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond503) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond503) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond503) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond503) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond503) CFA_SP SP+0
        CFI (cfiCond503) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond504 Using cfiCommon0
        CFI (cfiCond504) NoFunction
        CFI (cfiCond504) Conditional ??CrossCallReturnLabel_260, ??CrossCallReturnLabel_33
        CFI (cfiCond504) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond504) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond504) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond504) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond504) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond504) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond504) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond504) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond504) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond504) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond504) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond504) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond504) CFA_SP SP+0
        CFI (cfiCond504) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond505 Using cfiCommon0
        CFI (cfiCond505) NoFunction
        CFI (cfiCond505) Conditional ??CrossCallReturnLabel_260, ??CrossCallReturnLabel_34
        CFI (cfiCond505) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond505) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond505) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond505) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond505) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond505) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond505) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond505) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond505) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond505) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond505) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond505) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond505) CFA_SP SP+0
        CFI (cfiCond505) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond506 Using cfiCommon0
        CFI (cfiCond506) NoFunction
        CFI (cfiCond506) Conditional ??CrossCallReturnLabel_264, ??CrossCallReturnLabel_203
        CFI (cfiCond506) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond506) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond506) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond506) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond506) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond506) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond506) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond506) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond506) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond506) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond506) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond506) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond506) CFA_SP SP+0
        CFI (cfiCond506) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond507 Using cfiCommon0
        CFI (cfiCond507) NoFunction
        CFI (cfiCond507) Conditional ??CrossCallReturnLabel_264, ??CrossCallReturnLabel_204
        CFI (cfiCond507) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond507) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond507) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond507) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond507) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond507) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond507) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond507) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond507) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond507) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond507) CFA_SP SP+0
        CFI (cfiCond507) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond508 Using cfiCommon0
        CFI (cfiCond508) NoFunction
        CFI (cfiCond508) Conditional ??CrossCallReturnLabel_264, ??CrossCallReturnLabel_205
        CFI (cfiCond508) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond508) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond508) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond508) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond508) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond508) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond508) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond508) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond508) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond508) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond508) CFA_SP SP+0
        CFI (cfiCond508) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond509 Using cfiCommon0
        CFI (cfiCond509) NoFunction
        CFI (cfiCond509) Conditional ??CrossCallReturnLabel_258, ??CrossCallReturnLabel_13
        CFI (cfiCond509) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond509) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond509) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond509) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond509) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond509) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond509) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond509) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond509) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond509) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond509) CFA_SP SP+0
        CFI (cfiCond509) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond510 Using cfiCommon0
        CFI (cfiCond510) NoFunction
        CFI (cfiCond510) Conditional ??CrossCallReturnLabel_258, ??CrossCallReturnLabel_14
        CFI (cfiCond510) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond510) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond510) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond510) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond510) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond510) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond510) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond510) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond510) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond510) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond510) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond510) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond510) CFA_SP SP+0
        CFI (cfiCond510) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond511 Using cfiCommon0
        CFI (cfiCond511) NoFunction
        CFI (cfiCond511) Conditional ??CrossCallReturnLabel_258, ??CrossCallReturnLabel_15
        CFI (cfiCond511) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond511) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond511) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond511) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond511) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond511) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond511) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond511) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond511) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond511) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond511) CFA_SP SP+0
        CFI (cfiCond511) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond512 Using cfiCommon0
        CFI (cfiCond512) NoFunction
        CFI (cfiCond512) Conditional ??CrossCallReturnLabel_258, ??CrossCallReturnLabel_16
        CFI (cfiCond512) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond512) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond512) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond512) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond512) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond512) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond512) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond512) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond512) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond512) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond512) CFA_SP SP+0
        CFI (cfiCond512) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond513 Using cfiCommon0
        CFI (cfiCond513) NoFunction
        CFI (cfiCond513) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_253
        CFI (cfiCond513) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond513) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond513) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond513) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond513) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond513) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond513) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond513) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond513) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond513) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond513) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond513) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond513) CFA_SP SP+0
        CFI (cfiCond513) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond514 Using cfiCommon0
        CFI (cfiCond514) NoFunction
        CFI (cfiCond514) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_254
        CFI (cfiCond514) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond514) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond514) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond514) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond514) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond514) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond514) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond514) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond514) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond514) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond514) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond514) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond514) CFA_SP SP+0
        CFI (cfiCond514) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond515 Using cfiCommon0
        CFI (cfiCond515) NoFunction
        CFI (cfiCond515) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_255
        CFI (cfiCond515) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond515) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond515) CFA_SP SP+-5
        CFI (cfiCond515) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond516 Using cfiCommon0
        CFI (cfiCond516) NoFunction
        CFI (cfiCond516) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_239
        CFI (cfiCond516) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond516) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond516) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond516) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond516) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond516) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond516) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond516) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond516) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond516) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond516) CFA_SP SP+0
        CFI (cfiCond516) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond517 Using cfiCommon0
        CFI (cfiCond517) NoFunction
        CFI (cfiCond517) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_240
        CFI (cfiCond517) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond517) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond517) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond517) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond517) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond517) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond517) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond517) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond517) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond517) CFA_SP SP+0
        CFI (cfiCond517) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond518 Using cfiCommon0
        CFI (cfiCond518) NoFunction
        CFI (cfiCond518) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_241
        CFI (cfiCond518) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond518) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond518) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond518) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond518) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond518) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond518) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond518) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond518) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond518) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond518) CFA_SP SP+0
        CFI (cfiCond518) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond519 Using cfiCommon0
        CFI (cfiCond519) NoFunction
        CFI (cfiCond519) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_242
        CFI (cfiCond519) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond519) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond519) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond519) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond519) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond519) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond519) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond519) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond519) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond519) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond519) CFA_SP SP+0
        CFI (cfiCond519) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond520 Using cfiCommon0
        CFI (cfiCond520) NoFunction
        CFI (cfiCond520) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_243
        CFI (cfiCond520) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond520) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond520) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond520) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond520) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond520) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond520) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond520) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond520) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond520) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond520) CFA_SP SP+0
        CFI (cfiCond520) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond521 Using cfiCommon0
        CFI (cfiCond521) NoFunction
        CFI (cfiCond521) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_244
        CFI (cfiCond521) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond521) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond521) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond521) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond521) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond521) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond521) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond521) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond521) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond521) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond521) CFA_SP SP+0
        CFI (cfiCond521) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond522 Using cfiCommon0
        CFI (cfiCond522) NoFunction
        CFI (cfiCond522) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_245
        CFI (cfiCond522) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond522) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond522) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond522) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond522) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond522) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond522) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond522) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond522) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond522) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond522) CFA_SP SP+0
        CFI (cfiCond522) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond523 Using cfiCommon0
        CFI (cfiCond523) NoFunction
        CFI (cfiCond523) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_246
        CFI (cfiCond523) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond523) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond523) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond523) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond523) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond523) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond523) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond523) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond523) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond523) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond523) CFA_SP SP+0
        CFI (cfiCond523) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond524 Using cfiCommon0
        CFI (cfiCond524) NoFunction
        CFI (cfiCond524) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_247
        CFI (cfiCond524) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond524) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond524) CFA_SP SP+-5
        CFI (cfiCond524) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond525 Using cfiCommon0
        CFI (cfiCond525) NoFunction
        CFI (cfiCond525) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_248
        CFI (cfiCond525) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond525) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond525) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond525) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond525) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond525) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond525) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond525) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond525) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond525) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond525) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond525) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond525) CFA_SP SP+0
        CFI (cfiCond525) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond526 Using cfiCommon0
        CFI (cfiCond526) NoFunction
        CFI (cfiCond526) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_249
        CFI (cfiCond526) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond526) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond526) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond526) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond526) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond526) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond526) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond526) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond526) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond526) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond526) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond526) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond526) CFA_SP SP+0
        CFI (cfiCond526) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond527 Using cfiCommon0
        CFI (cfiCond527) NoFunction
        CFI (cfiCond527) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_250
        CFI (cfiCond527) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond527) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond527) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond527) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond527) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond527) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond527) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond527) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond527) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond527) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond527) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond527) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond527) CFA_SP SP+0
        CFI (cfiCond527) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond528 Using cfiCommon0
        CFI (cfiCond528) NoFunction
        CFI (cfiCond528) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_251
        CFI (cfiCond528) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond528) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond528) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond528) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond528) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond528) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond528) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond528) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond528) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond528) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond528) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond528) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond528) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond528) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond528) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond528) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond528) CFA_SP SP+0
        CFI (cfiCond528) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond529 Using cfiCommon0
        CFI (cfiCond529) NoFunction
        CFI (cfiCond529) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_252
        CFI (cfiCond529) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond529) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond529) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond529) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond529) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond529) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond529) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond529) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond529) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond529) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond529) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond529) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond529) CFA_SP SP+0
        CFI (cfiCond529) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond530 Using cfiCommon0
        CFI (cfiCond530) NoFunction
        CFI (cfiCond530) Conditional ??CrossCallReturnLabel_257, ??CrossCallReturnLabel_2
        CFI (cfiCond530) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond530) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond530) CFA_SP SP+-5
        CFI (cfiCond530) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond531 Using cfiCommon0
        CFI (cfiCond531) NoFunction
        CFI (cfiCond531) Conditional ??CrossCallReturnLabel_257, ??CrossCallReturnLabel_3
        CFI (cfiCond531) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond531) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond531) CFA_SP SP+-5
        CFI (cfiCond531) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond532 Using cfiCommon0
        CFI (cfiCond532) NoFunction
        CFI (cfiCond532) Conditional ??CrossCallReturnLabel_256, ??CrossCallReturnLabel_227
        CFI (cfiCond532) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond532) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond532) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond532) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond532) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond532) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond532) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond532) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond532) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond532) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond532) CFA_SP SP+0
        CFI (cfiCond532) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond533 Using cfiCommon0
        CFI (cfiCond533) NoFunction
        CFI (cfiCond533) Conditional ??CrossCallReturnLabel_256, ??CrossCallReturnLabel_228
        CFI (cfiCond533) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond533) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond533) CFA_SP SP+-5
        CFI (cfiCond533) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond534 Using cfiCommon0
        CFI (cfiCond534) NoFunction
        CFI (cfiCond534) Conditional ??CrossCallReturnLabel_256, ??CrossCallReturnLabel_229
        CFI (cfiCond534) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond534) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond534) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond534) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond534) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond534) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond534) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond534) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond534) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond534) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond534) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond534) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond534) CFA_SP SP+0
        CFI (cfiCond534) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond535 Using cfiCommon0
        CFI (cfiCond535) NoFunction
        CFI (cfiCond535) Conditional ??CrossCallReturnLabel_256, ??CrossCallReturnLabel_230
        CFI (cfiCond535) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond535) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond535) CFA_SP SP+-5
        CFI (cfiCond535) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker536 Using cfiCommon1
        CFI (cfiPicker536) NoFunction
        CFI (cfiPicker536) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond489
        CFI EndBlock cfiCond490
        CFI EndBlock cfiCond491
        CFI EndBlock cfiCond492
        CFI EndBlock cfiCond493
        CFI EndBlock cfiCond494
        CFI EndBlock cfiCond495
        CFI EndBlock cfiCond496
        CFI EndBlock cfiCond497
        CFI EndBlock cfiCond498
        CFI EndBlock cfiCond499
        CFI EndBlock cfiCond500
        CFI EndBlock cfiCond501
        CFI EndBlock cfiCond502
        CFI EndBlock cfiCond503
        CFI EndBlock cfiCond504
        CFI EndBlock cfiCond505
        CFI EndBlock cfiCond506
        CFI EndBlock cfiCond507
        CFI EndBlock cfiCond508
        CFI EndBlock cfiCond509
        CFI EndBlock cfiCond510
        CFI EndBlock cfiCond511
        CFI EndBlock cfiCond512
        CFI EndBlock cfiCond513
        CFI EndBlock cfiCond514
        CFI EndBlock cfiCond515
        CFI EndBlock cfiCond516
        CFI EndBlock cfiCond517
        CFI EndBlock cfiCond518
        CFI EndBlock cfiCond519
        CFI EndBlock cfiCond520
        CFI EndBlock cfiCond521
        CFI EndBlock cfiCond522
        CFI EndBlock cfiCond523
        CFI EndBlock cfiCond524
        CFI EndBlock cfiCond525
        CFI EndBlock cfiCond526
        CFI EndBlock cfiCond527
        CFI EndBlock cfiCond528
        CFI EndBlock cfiCond529
        CFI EndBlock cfiCond530
        CFI EndBlock cfiCond531
        CFI EndBlock cfiCond532
        CFI EndBlock cfiCond533
        CFI EndBlock cfiCond534
        CFI EndBlock cfiCond535
        CFI EndBlock cfiPicker536

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond537 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond538 Using cfiCommon0
        CFI (cfiCond538) NoFunction
        CFI (cfiCond538) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond538) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond538) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond538) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond538) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond538) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond538) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond538) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond538) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond538) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond538) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond538) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond538) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond538) CFA_SP SP+0
        CFI (cfiCond538) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker539 Using cfiCommon1
        CFI (cfiPicker539) NoFunction
        CFI (cfiPicker539) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine112_0 & 0xFFFF
??CrossCallReturnLabel_273:
        RET
        CFI EndBlock cfiCond537
        CFI EndBlock cfiCond538
        CFI EndBlock cfiPicker539

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrTransportKeyInd:
        CFI Block cfiBlock540 Using cfiCommon0
        CFI Function ZDSecMgrTransportKeyInd
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrTCDataLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrReadKeyFromNv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrAuthNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrTCDataLoad
        MOV     A,R6
        ADD     A,#0x16
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??ZDSecMgrTCDataLoad?relay
        MOV     A,R6
        ADD     A,#0x4
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine127_0 & 0xFFFF
??CrossCallReturnLabel_234:
        JNZ     $+5
        LJMP    ??ZDSecMgrTransportKeyInd_0 & 0xFFFF
        XRL     A,#0x1
        JZ      ??ZDSecMgrTransportKeyInd_1
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      ??ZDSecMgrTransportKeyInd_1
        MOVX    A,@DPTR
        XRL     A,#0x5
        JZ      $+5
        LJMP    ??ZDSecMgrTransportKeyInd_0 & 0xFFFF
??ZDSecMgrTransportKeyInd_1:
        MOV     R2,#0x0
??ZDSecMgrTransportKeyInd_2:
        MOV     ?V0 + 0,R2
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine140_0 & 0xFFFF
??CrossCallReturnLabel_311:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_3
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x10
        JC      ??ZDSecMgrTransportKeyInd_2
??ZDSecMgrTransportKeyInd_3:
        MOV     A,#0x10
        XRL     A,R2
        JNZ     ??ZDSecMgrTransportKeyInd_4
        MOV     DPTR,#(_NIB + 61)
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_5
        ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x62
        MOV     R3,#0x0
        LCALL   ??ZDSecMgrReadKeyFromNv?relay
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SSP_UpdateNwkKey?relay
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     R1,#0x0
        LCALL   ??SSP_SwitchNwkKey?relay
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        SJMP    ??ZDSecMgrTransportKeyInd_5
??ZDSecMgrTransportKeyInd_4:
        MOV     A,R6
        ADD     A,#0x5
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??SSP_UpdateNwkKey?relay
        MOV     DPTR,#(_NIB + 61)
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_5
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SSP_SwitchNwkKey?relay
??ZDSecMgrTransportKeyInd_5:
        ; Setup parameters for call to function ZDSecMgrAuthNwkKey
        LCALL   ??ZDSecMgrAuthNwkKey?relay
??ZDSecMgrTransportKeyInd_0:
        MOV     A,#0x10
        LJMP    ??Subroutine115_0 & 0xFFFF
        CFI EndBlock cfiBlock540

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2895 void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
ZDSecMgrUpdateDeviceInd:
        CFI Block cfiBlock541 Using cfiCommon0
        CFI Function ZDSecMgrUpdateDeviceInd
// 2896 {
        FUNCALL ZDSecMgrUpdateDeviceInd, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 2897   ZDSecMgrDevice_t device;
// 2898 
// 2899 
// 2900   device.nwkAddr    = ind->devAddr;
        MOV     A,R2
        ADD     A,#0xc
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_237:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ?Subroutine21 & 0xFFFF
// 2901   device.extAddr    = ind->devExtAddr;
??CrossCallReturnLabel_255:
        MOV     A,R2
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
// 2902   device.parentAddr = ind->srcAddr;
??CrossCallReturnLabel_3:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
// 2903 
// 2904   //if ( ( ind->status == APSME_UD_SECURED_JOIN   ) ||
// 2905   //     ( ind->status == APSME_UD_UNSECURED_JOIN )   )
// 2906   //{
// 2907   //  if ( ind->status == APSME_UD_SECURED_JOIN )
// 2908   //  {
// 2909   //    device.secure = TRUE;
// 2910   //  }
// 2911   //  else
// 2912   //  {
// 2913   //    device.secure = FALSE;
// 2914   //  }
// 2915 
// 2916     // try to join this device
// 2917     ZDSecMgrDeviceJoin( &device );
??CrossCallReturnLabel_228:
        LCALL   ??ZDSecMgrDeviceJoin?relay
// 2918   //}
// 2919 }
        LJMP    ?Subroutine100 & 0xFFFF
        CFI EndBlock cfiBlock541

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond542 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond543 Using cfiCommon0
        CFI (cfiCond543) NoFunction
        CFI (cfiCond543) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond543) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond543) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond543) CFA_SP SP+-5
        CFI (cfiCond543) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker544 Using cfiCommon1
        CFI (cfiPicker544) NoFunction
        CFI (cfiPicker544) Picker
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_257:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine80 & 0xFFFF
??CrossCallReturnLabel_278:
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond542
        CFI EndBlock cfiCond543
        CFI EndBlock cfiPicker544
// 2920 
// 2921 /******************************************************************************
// 2922  * @fn          ZDSecMgrRemoveDeviceInd
// 2923  *
// 2924  * @brief       Process the ZDO_RemoveDeviceInd_t message.
// 2925  *
// 2926  * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
// 2927  *
// 2928  * @return      none
// 2929  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2930 void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
ZDSecMgrRemoveDeviceInd:
        CFI Block cfiBlock545 Using cfiCommon0
        CFI Function ZDSecMgrRemoveDeviceInd
// 2931 {
        FUNCALL ZDSecMgrRemoveDeviceInd, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
// 2932   ZDSecMgrDevice_t device;
// 2933 
// 2934 
// 2935   // only accept from Trust Center
// 2936   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrRemoveDeviceInd_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrRemoveDeviceInd_0:
        JNZ     ??ZDSecMgrRemoveDeviceInd_1
// 2937   {
// 2938     // look up NWK address
// 2939     if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
        MOV     A,R2
        ADD     A,#0x4
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_50:
        JNZ     ??ZDSecMgrRemoveDeviceInd_1
// 2940     {
// 2941       device.parentAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine132_0 & 0xFFFF
// 2942       device.extAddr    = ind->childExtAddr;
// 2943 
// 2944       // remove device
// 2945       ZDSecMgrDeviceRemove( &device );
// 2946     }
// 2947   }
??CrossCallReturnLabel_284:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ??Subroutine126_0 & 0xFFFF
??CrossCallReturnLabel_224:
        LCALL   ??ZDSecMgrDeviceRemove?relay
// 2948 }
??ZDSecMgrRemoveDeviceInd_1:
        MOV     A,#0xa
        LJMP    ??Subroutine123_0 & 0xFFFF
        CFI EndBlock cfiBlock545

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond546 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond547 Using cfiCommon0
        CFI (cfiCond547) NoFunction
        CFI (cfiCond547) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond547) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond547) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond547) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond547) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond547) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond547) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond547) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond547) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond547) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond547) CFA_SP SP+0
        CFI (cfiCond547) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker548 Using cfiCommon1
        CFI (cfiPicker548) NoFunction
        CFI (cfiPicker548) Picker
        MOV     R6,A
        MOV     A,R3
        LCALL   ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_212:
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??APSME_LookupNwkAddr?relay
        MOV     A,R1
        XRL     A,#0x1
        RET
        CFI EndBlock cfiCond546
        CFI EndBlock cfiCond547
        CFI EndBlock cfiPicker548
// 2949 
// 2950 /******************************************************************************
// 2951  * @fn          ZDSecMgrRequestKeyInd
// 2952  *
// 2953  * @brief       Process the ZDO_RequestKeyInd_t message.
// 2954  *
// 2955  * @param       ind - [in] ZDO_RequestKeyInd_t indication
// 2956  *
// 2957  * @return      none
// 2958  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2959 void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
ZDSecMgrRequestKeyInd:
        CFI Block cfiBlock549 Using cfiCommon0
        CFI Function ZDSecMgrRequestKeyInd
// 2960 {
        FUNCALL ZDSecMgrRequestKeyInd, ZDSecMgrAppKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2961   if ( ind->keyType == KEY_TYPE_NWK )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x1
        XRL     A,R4
        JZ      ??ZDSecMgrRequestKeyInd_0
// 2962   {
// 2963   }
// 2964   else if ( ind->keyType == KEY_TYPE_APP_MASTER )
        MOV     A,#0x2
        XRL     A,R4
        JNZ     ??ZDSecMgrRequestKeyInd_0
// 2965   {
// 2966     ZDSecMgrAppKeyReq( ind );
        ; Setup parameters for call to function ZDSecMgrAppKeyReq
        LCALL   ??ZDSecMgrAppKeyReq?relay
// 2967   }
// 2968   else if ( ind->keyType == KEY_TYPE_TC_LINK )
// 2969   {
// 2970   }
// 2971   //else ignore
// 2972 }
??ZDSecMgrRequestKeyInd_0:
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock549
// 2973 
// 2974 /******************************************************************************
// 2975  * @fn          ZDSecMgrSwitchKeyInd
// 2976  *
// 2977  * @brief       Process the ZDO_SwitchKeyInd_t message.
// 2978  *
// 2979  * @param       ind - [in] ZDO_SwitchKeyInd_t indication
// 2980  *
// 2981  * @return      none
// 2982  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2983 void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
ZDSecMgrSwitchKeyInd:
        CFI Block cfiBlock550 Using cfiCommon0
        CFI Function ZDSecMgrSwitchKeyInd
// 2984 {
        FUNCALL ZDSecMgrSwitchKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchKeyInd, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2985   SSP_SwitchNwkKey( ind->keySeqNum );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SSP_SwitchNwkKey?relay
// 2986 
// 2987   // Save if nv
// 2988   ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   ??ZDApp_NVUpdate?relay
// 2989 }
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock550
// 2990 
// 2991 /******************************************************************************
// 2992  * @fn          ZDSecMgrAuthenticateInd
// 2993  *
// 2994  * @brief       Process the ZDO_AuthenticateInd_t message.
// 2995  *
// 2996  * @param       ind - [in] ZDO_AuthenticateInd_t indication
// 2997  *
// 2998  * @return      none
// 2999  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3000 void ZDSecMgrAuthenticateInd( ZDO_AuthenticateInd_t* ind )
ZDSecMgrAuthenticateInd:
        CFI Block cfiBlock551 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticateInd
// 3001 {
        FUNCALL ZDSecMgrAuthenticateInd, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticateInd, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticateInd, APSME_AuthenticateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 3002   APSME_AuthenticateReq_t req;
// 3003   AddrMgrEntry_t          entry;
// 3004 
// 3005 
// 3006   // update the address manager
// 3007   //---------------------------------------------------------------------------
// 3008   // note:
// 3009   // required for EA processing, but ultimately EA logic could also use the
// 3010   // neighbor table to look up addresses -- also(IF using EA) the neighbor
// 3011   // table is supposed to have authentication states for neighbors
// 3012   //---------------------------------------------------------------------------
// 3013   entry.user    = ADDRMGR_USER_SECURITY;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 3014   entry.nwkAddr = ind->aps.initNwkAddr;
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V0 + 2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     DPL,?V0 + 2
        MOV     DPH,A
        LCALL   ??Subroutine131_0 & 0xFFFF
??CrossCallReturnLabel_269:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
// 3015   AddrMgrExtAddrSet( entry.extAddr, ind->aps.initExtAddr );
??CrossCallReturnLabel_250:
        LCALL   ?Subroutine68 & 0xFFFF
??CrossCallReturnLabel_105:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     R4,?V0 + 0
        MOV     R5,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrSet?relay
// 3016 
// 3017   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryUpdate?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrAuthenticateInd_0
// 3018   {
// 3019     // set request fields
// 3020     req.nwkAddr   = ind->aps.initNwkAddr;
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_272:
        LCALL   ?Subroutine19 & 0xFFFF
// 3021     req.extAddr   = ind->aps.initExtAddr;
??CrossCallReturnLabel_183:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
// 3022     req.action    = APSME_EA_ACCEPT;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 3023     req.challenge = ind->aps.challenge;
        MOV     A,R6
        ADD     A,#0xc
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
// 3024 
// 3025     // start EA processing
// 3026     APSME_AuthenticateReq( &req );
// 3027   }
??CrossCallReturnLabel_229:
        LCALL   ??APSME_AuthenticateReq?relay
// 3028 }
??ZDSecMgrAuthenticateInd_0:
        MOV     A,#0x14
        LJMP    ??Subroutine128_0 & 0xFFFF
        CFI EndBlock cfiBlock551

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine68:
        CFI Block cfiCond552 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_104
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond553 Using cfiCommon0
        CFI (cfiCond553) NoFunction
        CFI (cfiCond553) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond553) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond553) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond553) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond553) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond553) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond553) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond553) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond553) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond553) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond553) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond553) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond553) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond553) CFA_SP SP+0
        CFI (cfiCond553) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker554 Using cfiCommon1
        CFI (cfiPicker554) NoFunction
        CFI (cfiPicker554) Picker
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond552
        CFI EndBlock cfiCond553
        CFI EndBlock cfiPicker554

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine53:
        CFI Block cfiCond555 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_271
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond556 Using cfiCommon0
        CFI (cfiCond556) NoFunction
        CFI (cfiCond556) Conditional ??CrossCallReturnLabel_272
        CFI (cfiCond556) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond556) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond556) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond556) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond556) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond556) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond556) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond556) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond556) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond556) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond556) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond556) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond556) CFA_SP SP+0
        CFI (cfiCond556) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker557 Using cfiCommon1
        CFI (cfiPicker557) NoFunction
        CFI (cfiPicker557) Picker
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        CFI EndBlock cfiCond555
        CFI EndBlock cfiCond556
        CFI EndBlock cfiPicker557
        REQUIRE ??Subroutine131_0
        ; // Fall through to label ??Subroutine131_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine131_0:
        CFI Block cfiCond558 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_266
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond559 Using cfiCommon0
        CFI (cfiCond559) NoFunction
        CFI (cfiCond559) Conditional ??CrossCallReturnLabel_267
        CFI (cfiCond559) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond559) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond559) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond559) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond559) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond559) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond559) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond559) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond559) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond559) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond559) CFA_SP SP+0
        CFI (cfiCond559) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond560 Using cfiCommon0
        CFI (cfiCond560) NoFunction
        CFI (cfiCond560) Conditional ??CrossCallReturnLabel_268
        CFI (cfiCond560) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond560) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond560) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond560) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond560) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond560) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond560) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond560) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond560) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond560) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond560) CFA_SP SP+0
        CFI (cfiCond560) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond561 Using cfiCommon0
        CFI (cfiCond561) NoFunction
        CFI (cfiCond561) Conditional ??CrossCallReturnLabel_269
        CFI (cfiCond561) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond561) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond561) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond561) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond561) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond561) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond561) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond561) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond561) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond561) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond561) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond561) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond561) CFA_SP SP+0
        CFI (cfiCond561) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond562 Using cfiCommon0
        CFI (cfiCond562) NoFunction
        CFI (cfiCond562) Conditional ??CrossCallReturnLabel_270
        CFI (cfiCond562) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond562) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond562) CFA_SP SP+-5
        CFI (cfiCond562) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond563 Using cfiCommon0
        CFI (cfiCond563) NoFunction
        CFI (cfiCond563) Conditional ??CrossCallReturnLabel_271
        CFI (cfiCond563) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond563) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond563) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond563) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond563) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond563) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond563) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond563) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond563) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond563) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond563) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond563) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond563) CFA_SP SP+0
        CFI (cfiCond563) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond564 Using cfiCommon0
        CFI (cfiCond564) NoFunction
        CFI (cfiCond564) Conditional ??CrossCallReturnLabel_272
        CFI (cfiCond564) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond564) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond564) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond564) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond564) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond564) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond564) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond564) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond564) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond564) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond564) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond564) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond564) CFA_SP SP+0
        CFI (cfiCond564) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker565 Using cfiCommon1
        CFI (cfiPicker565) NoFunction
        CFI (cfiPicker565) Picker
        LCALL   ??Subroutine112_0 & 0xFFFF
??CrossCallReturnLabel_281:
        RET
        CFI EndBlock cfiCond558
        CFI EndBlock cfiCond559
        CFI EndBlock cfiCond560
        CFI EndBlock cfiCond561
        CFI EndBlock cfiCond562
        CFI EndBlock cfiCond563
        CFI EndBlock cfiCond564
        CFI EndBlock cfiPicker565

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond566 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_227
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond567 Using cfiCommon0
        CFI (cfiCond567) NoFunction
        CFI (cfiCond567) Conditional ??CrossCallReturnLabel_228
        CFI (cfiCond567) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond567) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond567) CFA_SP SP+-5
        CFI (cfiCond567) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond568 Using cfiCommon0
        CFI (cfiCond568) NoFunction
        CFI (cfiCond568) Conditional ??CrossCallReturnLabel_229
        CFI (cfiCond568) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond568) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond568) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond568) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond568) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond568) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond568) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond568) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond568) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond568) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond568) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond568) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond568) CFA_SP SP+0
        CFI (cfiCond568) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond569 Using cfiCommon0
        CFI (cfiCond569) NoFunction
        CFI (cfiCond569) Conditional ??CrossCallReturnLabel_230
        CFI (cfiCond569) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond569) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond569) CFA_SP SP+-5
        CFI (cfiCond569) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker570 Using cfiCommon1
        CFI (cfiPicker570) NoFunction
        CFI (cfiPicker570) Picker
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_256:
        ; Setup parameters for call to function ZDSecMgrDeviceCtrlHandler
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        ; Setup parameters for call to function APSME_AuthenticateReq
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        LJMP    ?Subroutine87 & 0xFFFF
        CFI EndBlock cfiCond566
        CFI EndBlock cfiCond567
        CFI EndBlock cfiCond568
        CFI EndBlock cfiCond569
        CFI EndBlock cfiPicker570
// 3029 
// 3030 /******************************************************************************
// 3031  * @fn          ZDSecMgrAuthenticateCfm
// 3032  *
// 3033  * @brief       Process the ZDO_AuthenticateCfm_t message.
// 3034  *
// 3035  * @param       cfm - [in] ZDO_AuthenticateCfm_t confirmation
// 3036  *
// 3037  * @return      none
// 3038  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3039 void ZDSecMgrAuthenticateCfm( ZDO_AuthenticateCfm_t* cfm )
ZDSecMgrAuthenticateCfm:
        CFI Block cfiBlock571 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticateCfm
// 3040 {
        FUNCALL ZDSecMgrAuthenticateCfm, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3041   if ( cfm->aps.status == ZSuccess )
        MOV     A,R2
        ADD     A,#0xb
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_238:
        JNZ     ??ZDSecMgrAuthenticateCfm_0
// 3042   {
// 3043     if ( ( cfm->aps.initiator == TRUE ) && ( devState == DEV_END_DEVICE_UNAUTH ) )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrAuthenticateCfm_0
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDSecMgrAuthenticateCfm_0
// 3044     {
// 3045       // inform ZDO that device has been authenticated
// 3046       osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
// 3047     }
// 3048   }
// 3049 }
??ZDSecMgrAuthenticateCfm_0:
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock571
// 3050 
// 3051 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 3052 /******************************************************************************
// 3053  * @fn          ZDSecMgrUpdateNwkKey
// 3054  *
// 3055  * @brief       Load a new NWK key and trigger a network wide update.
// 3056  *
// 3057  * @param       key       - [in] new NWK key
// 3058  * @param       keySeqNum - [in] new NWK key sequence number
// 3059  *
// 3060  * @return      ZStatus_t
// 3061  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3062 ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
ZDSecMgrUpdateNwkKey:
        CFI Block cfiBlock572 Using cfiCommon0
        CFI Function ZDSecMgrUpdateNwkKey
// 3063 {
        FUNCALL ZDSecMgrUpdateNwkKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateNwkKey, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateNwkKey, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R1
// 3064   ZStatus_t               status;
// 3065   APSME_TransportKeyReq_t req;
// 3066 
// 3067   // initialize common elements of local variables
// 3068   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 3069     req.keyType   = KEY_TYPE_NWK_HIGH;
// 3070   else
// 3071     req.keyType   = KEY_TYPE_NWK;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        LCALL   ?Subroutine13 & 0xFFFF
// 3072 
// 3073   req.dstAddr   = dstAddr;
??CrossCallReturnLabel_20:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 3074   req.keySeqNum = keySeqNum;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 3075   req.key       = key;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 3076   req.extAddr   = NULL;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 3077   req.nwkSecure = TRUE;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 3078   req.apsSecure = TRUE;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 3079   req.tunnel    = NULL;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ??Subroutine126_0 & 0xFFFF
// 3080 
// 3081   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 3082   {
// 3083     ZDSecMgrEntry_t*        entry;
// 3084     uint16                  index;
// 3085     AddrMgrEntry_t          addrEntry;
// 3086 
// 3087     addrEntry.user = ADDRMGR_USER_SECURITY;
// 3088 
// 3089     status = ZFailure;
// 3090 
// 3091     // verify data is available
// 3092     if ( ZDSecMgrEntries != NULL )
// 3093     {
// 3094       // find available entry
// 3095       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
// 3096       {
// 3097         if ( ZDSecMgrEntries[index].ami != INVALID_NODE_ADDR )
// 3098         {
// 3099           // return successful result
// 3100           entry = &ZDSecMgrEntries[index];
// 3101 
// 3102           // get NWK address
// 3103           addrEntry.index = entry->ami;
// 3104           if ( AddrMgrEntryGet( &addrEntry ) == TRUE )
// 3105           {
// 3106             req.dstAddr = addrEntry.nwkAddr;
// 3107             req.extAddr = addrEntry.extAddr;
// 3108             status = APSME_TransportKeyReq( &req );
// 3109           }
// 3110         }
// 3111       }
// 3112     }
// 3113   }
// 3114   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 3115   {
// 3116     status = APSME_TransportKeyReq( &req );
??CrossCallReturnLabel_225:
        LCALL   ??APSME_TransportKeyReq?relay
        MOV     A,R1
        MOV     ?V0 + 1,A
// 3117   }
// 3118 
// 3119   SSP_UpdateNwkKey( key, keySeqNum );
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     R1,?V0 + 0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??SSP_UpdateNwkKey?relay
// 3120 
// 3121   // Save if nv
// 3122   ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   ??ZDApp_NVUpdate?relay
// 3123 
// 3124   return status;
        MOV     R1,?V0 + 1
        MOV     A,#0xd
        LJMP    ??Subroutine115_0 & 0xFFFF
        CFI EndBlock cfiBlock572
// 3125 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond573 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond574 Using cfiCommon0
        CFI (cfiCond574) NoFunction
        CFI (cfiCond574) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond574) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond574) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond574) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond574) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond574) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond574) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond574) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond574) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond574) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond574) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond574) CFA_SP SP+0
        CFI (cfiCond574) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond575 Using cfiCommon0
        CFI (cfiCond575) NoFunction
        CFI (cfiCond575) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond575) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond575) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond575) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond575) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond575) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond575) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond575) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond575) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond575) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond575) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond575) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond575) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond575) CFA_SP SP+0
        CFI (cfiCond575) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker576 Using cfiCommon1
        CFI (cfiPicker576) NoFunction
        CFI (cfiPicker576) Picker
        LCALL   ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_210:
        RET
        CFI EndBlock cfiCond573
        CFI EndBlock cfiCond574
        CFI EndBlock cfiCond575
        CFI EndBlock cfiPicker576

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine71:
        CFI Block cfiCond577 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond578 Using cfiCommon0
        CFI (cfiCond578) NoFunction
        CFI (cfiCond578) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_9
        CFI (cfiCond578) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond578) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond578) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond578) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond578) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond578) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond578) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond578) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond578) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond578) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond578) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond578) CFA_SP SP+0
        CFI (cfiCond578) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond579 Using cfiCommon0
        CFI (cfiCond579) NoFunction
        CFI (cfiCond579) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_215
        CFI (cfiCond579) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond579) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond579) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond579) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond579) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond579) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond579) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond579) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond579) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond579) CFA_SP SP+0
        CFI (cfiCond579) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond580 Using cfiCommon0
        CFI (cfiCond580) NoFunction
        CFI (cfiCond580) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_216
        CFI (cfiCond580) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond580) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond580) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond580) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond580) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond580) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond580) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond580) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond580) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond580) CFA_SP SP+0
        CFI (cfiCond580) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond581 Using cfiCommon0
        CFI (cfiCond581) NoFunction
        CFI (cfiCond581) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_217
        CFI (cfiCond581) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond581) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond581) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond581) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond581) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond581) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond581) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond581) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond581) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond581) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond581) CFA_SP SP+0
        CFI (cfiCond581) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond582 Using cfiCommon0
        CFI (cfiCond582) NoFunction
        CFI (cfiCond582) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_218
        CFI (cfiCond582) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond582) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond582) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond582) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond582) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond582) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond582) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond582) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond582) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond582) CFA_SP SP+0
        CFI (cfiCond582) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond583 Using cfiCommon0
        CFI (cfiCond583) NoFunction
        CFI (cfiCond583) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_219
        CFI (cfiCond583) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond583) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond583) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond583) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond583) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond583) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond583) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond583) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond583) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond583) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond583) CFA_SP SP+0
        CFI (cfiCond583) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond584 Using cfiCommon0
        CFI (cfiCond584) NoFunction
        CFI (cfiCond584) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_220
        CFI (cfiCond584) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond584) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond584) CFA_SP SP+-5
        CFI (cfiCond584) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond585 Using cfiCommon0
        CFI (cfiCond585) NoFunction
        CFI (cfiCond585) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_221
        CFI (cfiCond585) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond585) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond585) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond585) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond585) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond585) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond585) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond585) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond585) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond585) CFA_SP SP+0
        CFI (cfiCond585) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond586 Using cfiCommon0
        CFI (cfiCond586) NoFunction
        CFI (cfiCond586) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_222
        CFI (cfiCond586) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond586) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond586) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond586) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond586) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond586) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond586) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond586) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond586) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond586) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond586) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond586) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond586) CFA_SP SP+0
        CFI (cfiCond586) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond587 Using cfiCommon0
        CFI (cfiCond587) NoFunction
        CFI (cfiCond587) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_223
        CFI (cfiCond587) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond587) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond587) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond587) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond587) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond587) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond587) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond587) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond587) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond587) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond587) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond587) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond587) CFA_SP SP+0
        CFI (cfiCond587) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond588 Using cfiCommon0
        CFI (cfiCond588) NoFunction
        CFI (cfiCond588) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_224
        CFI (cfiCond588) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond588) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond588) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond588) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond588) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond588) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond588) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond588) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond588) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond588) CFA_SP SP+0
        CFI (cfiCond588) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond589 Using cfiCommon0
        CFI (cfiCond589) NoFunction
        CFI (cfiCond589) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_225
        CFI (cfiCond589) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond589) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond589) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond589) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond589) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond589) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond589) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond589) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond589) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond589) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond589) CFA_SP SP+0
        CFI (cfiCond589) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond590 Using cfiCommon0
        CFI (cfiCond590) NoFunction
        CFI (cfiCond590) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_226
        CFI (cfiCond590) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond590) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond590) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond590) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond590) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond590) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond590) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond590) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond590) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond590) CFA_SP SP+0
        CFI (cfiCond590) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond591 Using cfiCommon0
        CFI (cfiCond591) NoFunction
        CFI (cfiCond591) Conditional ??CrossCallReturnLabel_210, ??CrossCallReturnLabel_19
        CFI (cfiCond591) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond591) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond591) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond591) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond591) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond591) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond591) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond591) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond591) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond591) CFA_SP SP+0
        CFI (cfiCond591) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond592 Using cfiCommon0
        CFI (cfiCond592) NoFunction
        CFI (cfiCond592) Conditional ??CrossCallReturnLabel_210, ??CrossCallReturnLabel_20
        CFI (cfiCond592) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond592) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond592) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond592) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond592) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond592) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond592) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond592) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond592) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond592) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond592) CFA_SP SP+0
        CFI (cfiCond592) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond593 Using cfiCommon0
        CFI (cfiCond593) NoFunction
        CFI (cfiCond593) Conditional ??CrossCallReturnLabel_210, ??CrossCallReturnLabel_21
        CFI (cfiCond593) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond593) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond593) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond593) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond593) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond593) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond593) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond593) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond593) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond593) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond593) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond593) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond593) CFA_SP SP+0
        CFI (cfiCond593) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker594 Using cfiCommon1
        CFI (cfiPicker594) NoFunction
        CFI (cfiPicker594) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        ; Setup parameters for call to function ZDSecMgrEntryLookup
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function APSME_EstablishKeyReq
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function NLME_LeaveReq
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        ; Setup parameters for call to function APSME_AuthenticateReq
        ; Setup parameters for call to function ZDSecMgrDeviceNew
        ; Setup parameters for call to function APSME_EstablishKeyRsp
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        ; Setup parameters for call to function APSME_TransportKeyReq
        ; Setup parameters for call to function APSME_SwitchKeyReq
        ; Setup parameters for call to function osal_nv_write
        LJMP    ?Subroutine88 & 0xFFFF
        CFI EndBlock cfiCond577
        CFI EndBlock cfiCond578
        CFI EndBlock cfiCond579
        CFI EndBlock cfiCond580
        CFI EndBlock cfiCond581
        CFI EndBlock cfiCond582
        CFI EndBlock cfiCond583
        CFI EndBlock cfiCond584
        CFI EndBlock cfiCond585
        CFI EndBlock cfiCond586
        CFI EndBlock cfiCond587
        CFI EndBlock cfiCond588
        CFI EndBlock cfiCond589
        CFI EndBlock cfiCond590
        CFI EndBlock cfiCond591
        CFI EndBlock cfiCond592
        CFI EndBlock cfiCond593
        CFI EndBlock cfiPicker594
// 3126 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 3127 
// 3128 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 3129 /******************************************************************************
// 3130  * @fn          ZDSecMgrSwitchNwkKey
// 3131  *
// 3132  * @brief       Causes the NWK key to switch via a network wide command.
// 3133  *
// 3134  * @param       keySeqNum - [in] new NWK key sequence number
// 3135  *
// 3136  * @return      ZStatus_t
// 3137  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3138 ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
ZDSecMgrSwitchNwkKey:
        CFI Block cfiBlock595 Using cfiCommon0
        CFI Function ZDSecMgrSwitchNwkKey
// 3139 {
        FUNCALL ZDSecMgrSwitchNwkKey, APSME_SwitchKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchNwkKey, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchNwkKey, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        MOV     R6,A
// 3140   ZStatus_t            status;
// 3141   APSME_SwitchKeyReq_t req;
// 3142 
// 3143   // initialize common elements of local variables
// 3144   req.dstAddr = dstAddr;
        LCALL   ?Subroutine14 & 0xFFFF
// 3145   req.keySeqNum = keySeqNum;
??CrossCallReturnLabel_282:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        LCALL   ??Subroutine126_0 & 0xFFFF
// 3146 
// 3147   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 3148   {
// 3149     ZDSecMgrEntry_t*     entry;
// 3150     uint16               index;
// 3151     AddrMgrEntry_t       addrEntry;
// 3152 
// 3153     addrEntry.user = ADDRMGR_USER_SECURITY;
// 3154 
// 3155     status = ZFailure;
// 3156 
// 3157     // verify data is available
// 3158     if ( ZDSecMgrEntries != NULL )
// 3159     {
// 3160       // find available entry
// 3161       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
// 3162       {
// 3163         if ( ZDSecMgrEntries[index].ami != INVALID_NODE_ADDR )
// 3164         {
// 3165           // return successful result
// 3166           entry = &ZDSecMgrEntries[index];
// 3167 
// 3168           // get NWK address
// 3169           addrEntry.index = entry->ami;
// 3170 
// 3171           if ( AddrMgrEntryGet( &addrEntry ) == TRUE )
// 3172           {
// 3173             req.dstAddr = addrEntry.nwkAddr;
// 3174             status = APSME_SwitchKeyReq( &req );
// 3175           }
// 3176         }
// 3177       }
// 3178     }
// 3179   }
// 3180   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 3181   {
// 3182     status = APSME_SwitchKeyReq( &req );
??CrossCallReturnLabel_226:
        LCALL   ??APSME_SwitchKeyReq?relay
        MOV     A,R1
        MOV     R7,A
// 3183   }
// 3184 
// 3185   SSP_SwitchNwkKey( keySeqNum );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     A,R6
        MOV     R1,A
        LCALL   ??SSP_SwitchNwkKey?relay
// 3186 
// 3187   // Save if nv
// 3188   ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   ??ZDApp_NVUpdate?relay
// 3189 
// 3190   return status;
        MOV     A,R7
        MOV     R1,A
        MOV     A,#0x3
        LJMP    ??Subroutine123_0 & 0xFFFF
        CFI EndBlock cfiBlock595
// 3191 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond596 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_282
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond597 Using cfiCommon0
        CFI (cfiCond597) NoFunction
        CFI (cfiCond597) Conditional ??CrossCallReturnLabel_283
        CFI (cfiCond597) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond597) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond597) CFA_SP SP+-5
        CFI (cfiCond597) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker598 Using cfiCommon1
        CFI (cfiPicker598) NoFunction
        CFI (cfiPicker598) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond596
        CFI EndBlock cfiCond597
        CFI EndBlock cfiPicker598
        REQUIRE ??Subroutine132_0
        ; // Fall through to label ??Subroutine132_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine132_0:
        CFI Block cfiCond599 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_284
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond600 Using cfiCommon0
        CFI (cfiCond600) NoFunction
        CFI (cfiCond600) Conditional ??CrossCallReturnLabel_282
        CFI (cfiCond600) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond600) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond600) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond600) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond600) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond600) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond600) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond600) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond600) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond600) CFA_SP SP+0
        CFI (cfiCond600) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond601 Using cfiCommon0
        CFI (cfiCond601) NoFunction
        CFI (cfiCond601) Conditional ??CrossCallReturnLabel_283
        CFI (cfiCond601) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond601) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond601) CFA_SP SP+-5
        CFI (cfiCond601) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker602 Using cfiCommon1
        CFI (cfiPicker602) NoFunction
        CFI (cfiPicker602) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond599
        CFI EndBlock cfiCond600
        CFI EndBlock cfiCond601
        CFI EndBlock cfiPicker602
// 3192 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 3193 
// 3194 #if ( ZG_BUILD_JOINING_TYPE )
// 3195 /******************************************************************************
// 3196  * @fn          ZDSecMgrRequestAppKey
// 3197  *
// 3198  * @brief       Request an application key with partner.
// 3199  *
// 3200  * @param       partNwkAddr - [in] partner network address
// 3201  *
// 3202  * @return      ZStatus_t
// 3203  */
// 3204 ZStatus_t ZDSecMgrRequestAppKey( uint16 partNwkAddr )
// 3205 {
// 3206   ZStatus_t             status;
// 3207   APSME_RequestKeyReq_t req;
// 3208   uint8                 partExtAddr[Z_EXTADDR_LEN];
// 3209 
// 3210 
// 3211   if ( AddrMgrExtAddrLookup( partNwkAddr, partExtAddr ) )
// 3212   {
// 3213     req.dstAddr = 0;
// 3214     req.keyType = KEY_TYPE_APP_MASTER;
// 3215     req.partExtAddr = partExtAddr;
// 3216     status = APSME_RequestKeyReq( &req );
// 3217   }
// 3218   else
// 3219   {
// 3220     status = ZFailure;
// 3221   }
// 3222 
// 3223   return status;
// 3224 }
// 3225 #endif // ( ZG_BUILD_JOINING_TYPE )
// 3226 
// 3227 #if ( ZG_BUILD_JOINING_TYPE )
// 3228 /******************************************************************************
// 3229  * @fn          ZDSecMgrSetupPartner
// 3230  *
// 3231  * @brief       Setup for application key partner.
// 3232  *
// 3233  * @param       partNwkAddr - [in] partner network address
// 3234  *
// 3235  * @return      ZStatus_t
// 3236  */
// 3237 ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
// 3238 {
// 3239   AddrMgrEntry_t entry;
// 3240   ZStatus_t      status;
// 3241 
// 3242   status = ZFailure;
// 3243 
// 3244   // update the address manager
// 3245   entry.user    = ADDRMGR_USER_SECURITY;
// 3246   entry.nwkAddr = partNwkAddr;
// 3247   AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
// 3248 
// 3249   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
// 3250   {
// 3251     status = ZSuccess;
// 3252 
// 3253     // check for address discovery
// 3254     if ( partNwkAddr == INVALID_NODE_ADDR )
// 3255     {
// 3256       status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 3257     }
// 3258     else if ( !AddrMgrExtAddrValid( partExtAddr ) )
// 3259     {
// 3260       status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 3261     }
// 3262   }
// 3263 
// 3264   return status;
// 3265 }
// 3266 #endif // ( ZG_BUILD_JOINING_TYPE )
// 3267 
// 3268 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 3269 /******************************************************************************
// 3270  * @fn          ZDSecMgrAppKeyTypeSet
// 3271  *
// 3272  * @brief       Set application key type.
// 3273  *
// 3274  * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
// 3275  *                                                   KEY_TYPE_APP_LINK@3
// 3276  *
// 3277  * @return      ZStatus_t
// 3278  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3279 ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
ZDSecMgrAppKeyTypeSet:
        CFI Block cfiBlock603 Using cfiCommon0
        CFI Function ZDSecMgrAppKeyTypeSet
// 3280 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3281   if ( keyType == KEY_TYPE_APP_LINK )
        MOV     A,#0x3
        XRL     A,R1
        JNZ     ??ZDSecMgrAppKeyTypeSet_0
// 3282   {
// 3283     ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
        MOV     A,#0x3
        SJMP    ??ZDSecMgrAppKeyTypeSet_1
// 3284   }
// 3285   else
// 3286   {
// 3287     ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
??ZDSecMgrAppKeyTypeSet_0:
        MOV     A,#0x2
??ZDSecMgrAppKeyTypeSet_1:
        MOV     DPTR,#ZDSecMgrAppKeyType
        MOVX    @DPTR,A
// 3288   }
// 3289 
// 3290   return ZSuccess;
        MOV     R1,#0x0
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock603
// 3291 }
// 3292 #endif
// 3293 
// 3294 /******************************************************************************
// 3295  * ZigBee Device Security Manager - Stub Implementations
// 3296  */
// 3297 /******************************************************************************
// 3298  * @fn          ZDSecMgrMasterKeyGet (stubs APSME_MasterKeyGet)
// 3299  *
// 3300  * @brief       Get MASTER key for specified EXT address.
// 3301  *
// 3302  * @param       extAddr - [in] EXT address
// 3303  * @param       pKeyNvId - [out] MASTER key NV ID
// 3304  *
// 3305  * @return      ZStatus_t
// 3306  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3307 ZStatus_t ZDSecMgrMasterKeyGet( uint8* extAddr, uint16* pKeyNvId )
APSME_MasterKeyGet:
        CFI Block cfiBlock604 Using cfiCommon0
        CFI Function APSME_MasterKeyGet
// 3308 {
        FUNCALL APSME_MasterKeyGet, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_MasterKeyGet, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 3309   ZStatus_t status;
// 3310   uint16 ami;
// 3311 
// 3312 
// 3313   // lookup entry for specified EXT address
// 3314   status = ZDSecMgrExtAddrLookup( extAddr, &ami );
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
// 3315 
// 3316   if ( status == ZSuccess )
        JNZ     ??APSME_MasterKeyGet_0
// 3317   {
// 3318     ZDSecMgrMasterKeyLookup( ami, pKeyNvId );
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine120_0 & 0xFFFF
// 3319   }
??CrossCallReturnLabel_200:
        LCALL   ??ZDSecMgrMasterKeyLookup?relay
        SJMP    ??APSME_MasterKeyGet_1
// 3320   else
// 3321   {
// 3322     *pKeyNvId = SEC_NO_KEY_NV_ID;
??APSME_MasterKeyGet_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 3323   }
// 3324 
// 3325   return status;
??APSME_MasterKeyGet_1:
        LJMP    ?Subroutine92 & 0xFFFF
        CFI EndBlock cfiBlock604
// 3326 }
// 3327 
// 3328 /******************************************************************************
// 3329  * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
// 3330  *
// 3331  * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
// 3332  *
// 3333  * @param       extAddr - [in] EXT address
// 3334  * @param       data    - [in] APSME_LinkKeyData_t
// 3335  *
// 3336  * @return      ZStatus_t
// 3337  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3338 ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
APSME_LinkKeySet:
        CFI Block cfiBlock605 Using cfiCommon0
        CFI Function APSME_LinkKeySet
// 3339 {
        FUNCALL APSME_LinkKeySet, ZDSecMgrEntryLookupExtGetIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 3340   ZStatus_t status;
// 3341   ZDSecMgrEntry_t* entry;
// 3342   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 3343   uint16 Index;
// 3344 
// 3345   // lookup entry index for specified EXT address
// 3346   status = ZDSecMgrEntryLookupExtGetIndex( extAddr, &entry, &Index ); 
        ; Setup parameters for call to function ZDSecMgrEntryLookupExtGetIndex
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExtGetIndex?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R1
        MOV     ?V0 + 0,A
// 3347 
// 3348   if ( status == ZSuccess )
        JZ      $+5
        LJMP    ??APSME_LinkKeySet_0 & 0xFFFF
// 3349   {
// 3350     // point to NV item
// 3351     entry->keyNvId = ZCD_NV_APS_LINK_KEY_DATA_START + Index;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x2
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_95:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine130_0 & 0xFFFF
// 3352 
// 3353     pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
??CrossCallReturnLabel_251:
        ; Setup parameters for call to function osal_mem_alloc
        LCALL   ?Subroutine66 & 0xFFFF
// 3354 
// 3355     if (pApsLinkKey != NULL)
??CrossCallReturnLabel_100:
        JNZ     ??APSME_LinkKeySet_1
        MOV     A,R3
??APSME_LinkKeySet_1:
        JNZ     $+5
        LJMP    ??APSME_LinkKeySet_0 & 0xFFFF
// 3356     {
// 3357       // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
// 3358       osal_nv_read( entry->keyNvId, 0, 
// 3359                    sizeof(APSME_LinkKeyData_t), pApsLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 4,#0x18
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine135_0 & 0xFFFF
??CrossCallReturnLabel_286:
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_128:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 3360       
// 3361       // set new values of the key 
// 3362       osal_memcpy( pApsLinkKey->key, key, SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??Subroutine119_0 & 0xFFFF
??CrossCallReturnLabel_193:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 3363       pApsLinkKey->rxFrmCntr = 0;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 2
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 3
        LCALL   ??Subroutine139_0 & 0xFFFF
??CrossCallReturnLabel_305:
        LCALL   ?L_MOV_TO_X
// 3364       pApsLinkKey->txFrmCntr = 0;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 2
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,?V0 + 3
        LCALL   ??Subroutine139_0 & 0xFFFF
??CrossCallReturnLabel_306:
        LCALL   ?L_MOV_TO_X
// 3365       
// 3366       osal_nv_write( entry->keyNvId, 0, 
// 3367                     sizeof(APSME_LinkKeyData_t), pApsLinkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 4,#0x18
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL   ??Subroutine107_0 & 0xFFFF
??CrossCallReturnLabel_157:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 3368       
// 3369       // clear copy of key in RAM 
// 3370       osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_memset?relay
// 3371       
// 3372       osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_288:
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_181:
        MOV     B,#0x9
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x9
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#(ApsLinkKeyFrmCntr & 0xff)
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#((ApsLinkKeyFrmCntr >> 8) & 0xff)
        MOV     R3,A
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,R2
        ADD     A,#-0x9
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#-0x13
        MOV     DPH,A
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 3373       
// 3374       // set initial values for counters in RAM
// 3375       ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr = 0;
// 3376       ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr = 0;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,R2
        ADD     A,#-0x5
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#-0x13
        MOV     DPH,A
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 3377     }
// 3378   }
// 3379 
// 3380   return status;
??APSME_LinkKeySet_0:
        MOV     R1,?V0 + 0
        MOV     A,#0x4
        SJMP    ??Subroutine133_0
        CFI EndBlock cfiBlock605
// 3381 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine93:
        CFI Block cfiBlock606 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x12
        CFI EndBlock cfiBlock606
        REQUIRE ??Subroutine133_0
        ; // Fall through to label ??Subroutine133_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine133_0:
        CFI Block cfiBlock607 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock607
        REQUIRE ??Subroutine134_0
        ; // Fall through to label ??Subroutine134_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine134_0:
        CFI Block cfiBlock608 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock608

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine66:
        CFI Block cfiCond609 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_99
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond610 Using cfiCommon0
        CFI (cfiCond610) NoFunction
        CFI (cfiCond610) Conditional ??CrossCallReturnLabel_100
        CFI (cfiCond610) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond610) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond610) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond610) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond610) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond610) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond610) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond610) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond610) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond610) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond610) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond610) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond610) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond610) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond610) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond610) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond610) CFA_SP SP+0
        CFI (cfiCond610) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker611 Using cfiCommon1
        CFI (cfiPicker611) NoFunction
        CFI (cfiPicker611) Picker
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R2
        RET
        CFI EndBlock cfiCond609
        CFI EndBlock cfiCond610
        CFI EndBlock cfiPicker611

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine50:
        CFI Block cfiCond612 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_287
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond613 Using cfiCommon0
        CFI (cfiCond613) NoFunction
        CFI (cfiCond613) Conditional ??CrossCallReturnLabel_288
        CFI (cfiCond613) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond613) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond613) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond613) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond613) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond613) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond613) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond613) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond613) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond613) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond613) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond613) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond613) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond613) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond613) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond613) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond613) CFA_SP SP+0
        CFI (cfiCond613) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker614 Using cfiCommon1
        CFI (cfiPicker614) NoFunction
        CFI (cfiPicker614) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond612
        CFI EndBlock cfiCond613
        CFI EndBlock cfiPicker614
        REQUIRE ??Subroutine135_0
        ; // Fall through to label ??Subroutine135_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine135_0:
        CFI Block cfiCond615 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_285
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond616 Using cfiCommon0
        CFI (cfiCond616) NoFunction
        CFI (cfiCond616) Conditional ??CrossCallReturnLabel_286
        CFI (cfiCond616) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond616) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond616) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond616) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond616) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond616) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond616) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond616) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond616) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond616) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond616) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond616) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond616) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond616) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond616) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond616) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond616) CFA_SP SP+0
        CFI (cfiCond616) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond617 Using cfiCommon0
        CFI (cfiCond617) NoFunction
        CFI (cfiCond617) Conditional ??CrossCallReturnLabel_287
        CFI (cfiCond617) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond617) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond617) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond617) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond617) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond617) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond617) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond617) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond617) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond617) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond617) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond617) CFA_SP SP+0
        CFI (cfiCond617) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond618 Using cfiCommon0
        CFI (cfiCond618) NoFunction
        CFI (cfiCond618) Conditional ??CrossCallReturnLabel_288
        CFI (cfiCond618) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond618) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond618) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond618) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond618) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond618) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond618) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond618) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond618) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond618) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond618) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond618) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond618) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond618) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond618) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond618) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond618) CFA_SP SP+0
        CFI (cfiCond618) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker619 Using cfiCommon1
        CFI (cfiPicker619) NoFunction
        CFI (cfiPicker619) Picker
        LCALL   ?Subroutine83 & 0xFFFF
??CrossCallReturnLabel_290:
        RET
        CFI EndBlock cfiCond615
        CFI EndBlock cfiCond616
        CFI EndBlock cfiCond617
        CFI EndBlock cfiCond618
        CFI EndBlock cfiPicker619

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine83:
        CFI Block cfiCond620 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_289, ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond621 Using cfiCommon0
        CFI (cfiCond621) NoFunction
        CFI (cfiCond621) Conditional ??CrossCallReturnLabel_289, ??CrossCallReturnLabel_75
        CFI (cfiCond621) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond621) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond621) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond621) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond621) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond621) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond621) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond621) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond621) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond621) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond621) CFA_SP SP+0
        CFI (cfiCond621) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond622 Using cfiCommon0
        CFI (cfiCond622) NoFunction
        CFI (cfiCond622) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_287
        CFI (cfiCond622) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond622) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond622) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond622) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond622) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond622) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond622) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond622) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond622) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond622) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond622) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond622) CFA_SP SP+0
        CFI (cfiCond622) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond623 Using cfiCommon0
        CFI (cfiCond623) NoFunction
        CFI (cfiCond623) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_288
        CFI (cfiCond623) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond623) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond623) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond623) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond623) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond623) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond623) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond623) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond623) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond623) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond623) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond623) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond623) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond623) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond623) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond623) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond623) CFA_SP SP+0
        CFI (cfiCond623) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond624 Using cfiCommon0
        CFI (cfiCond624) NoFunction
        CFI (cfiCond624) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_285
        CFI (cfiCond624) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond624) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond624) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond624) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond624) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond624) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond624) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond624) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond624) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond624) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond624) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond624) CFA_SP SP+0
        CFI (cfiCond624) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond625 Using cfiCommon0
        CFI (cfiCond625) NoFunction
        CFI (cfiCond625) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_286
        CFI (cfiCond625) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond625) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond625) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond625) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond625) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond625) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond625) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond625) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond625) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond625) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond625) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond625) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond625) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond625) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond625) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond625) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond625) CFA_SP SP+0
        CFI (cfiCond625) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker626 Using cfiCommon1
        CFI (cfiPicker626) NoFunction
        CFI (cfiPicker626) Picker
        LCALL   ?Subroutine85 & 0xFFFF
??CrossCallReturnLabel_292:
        RET
        CFI EndBlock cfiCond620
        CFI EndBlock cfiCond621
        CFI EndBlock cfiCond622
        CFI EndBlock cfiCond623
        CFI EndBlock cfiCond624
        CFI EndBlock cfiCond625
        CFI EndBlock cfiPicker626

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine85:
        CFI Block cfiCond627 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_292, ??CrossCallReturnLabel_289, ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond628 Using cfiCommon0
        CFI (cfiCond628) NoFunction
        CFI (cfiCond628) Conditional ??CrossCallReturnLabel_292, ??CrossCallReturnLabel_289, ??CrossCallReturnLabel_75
        CFI (cfiCond628) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond628) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond628) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond628) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond628) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond628) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond628) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond628) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond628) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond628) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond628) CFA_SP SP+0
        CFI (cfiCond628) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond629 Using cfiCommon0
        CFI (cfiCond629) NoFunction
        CFI (cfiCond629) Conditional ??CrossCallReturnLabel_292, ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_287
        CFI (cfiCond629) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond629) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond629) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond629) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond629) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond629) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond629) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond629) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond629) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond629) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond629) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond629) CFA_SP SP+0
        CFI (cfiCond629) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond630 Using cfiCommon0
        CFI (cfiCond630) NoFunction
        CFI (cfiCond630) Conditional ??CrossCallReturnLabel_292, ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_288
        CFI (cfiCond630) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond630) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond630) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond630) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond630) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond630) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond630) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond630) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond630) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond630) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond630) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond630) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond630) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond630) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond630) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond630) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond630) CFA_SP SP+0
        CFI (cfiCond630) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond631 Using cfiCommon0
        CFI (cfiCond631) NoFunction
        CFI (cfiCond631) Conditional ??CrossCallReturnLabel_292, ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_285
        CFI (cfiCond631) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond631) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond631) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond631) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond631) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond631) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond631) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond631) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond631) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond631) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond631) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond631) CFA_SP SP+0
        CFI (cfiCond631) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond632 Using cfiCommon0
        CFI (cfiCond632) NoFunction
        CFI (cfiCond632) Conditional ??CrossCallReturnLabel_292, ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_286
        CFI (cfiCond632) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond632) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond632) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond632) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond632) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond632) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond632) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond632) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond632) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond632) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond632) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond632) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond632) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond632) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond632) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond632) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond632) CFA_SP SP+0
        CFI (cfiCond632) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond633 Using cfiCommon0
        CFI (cfiCond633) NoFunction
        CFI (cfiCond633) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_76
        CFI (cfiCond633) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond633) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond633) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond633) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond633) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond633) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond633) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond633) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond633) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond633) CFA_SP SP+0
        CFI (cfiCond633) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond634 Using cfiCommon0
        CFI (cfiCond634) NoFunction
        CFI (cfiCond634) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_77
        CFI (cfiCond634) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond634) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond634) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond634) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond634) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond634) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond634) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond634) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond634) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond634) CFA_SP SP+0
        CFI (cfiCond634) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond635 Using cfiCommon0
        CFI (cfiCond635) NoFunction
        CFI (cfiCond635) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_117, ??CrossCallReturnLabel_70
        CFI (cfiCond635) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond635) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond635) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond635) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond635) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond635) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond635) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond635) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond635) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond635) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond635) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond635) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond635) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond635) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond635) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond635) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond635) CFA_SP SP+0
        CFI (cfiCond635) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond636 Using cfiCommon0
        CFI (cfiCond636) NoFunction
        CFI (cfiCond636) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_117, ??CrossCallReturnLabel_71
        CFI (cfiCond636) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond636) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond636) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond636) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond636) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond636) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond636) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond636) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond636) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond636) CFA_SP SP+0
        CFI (cfiCond636) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker637 Using cfiCommon1
        CFI (cfiPicker637) NoFunction
        CFI (cfiPicker637) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond627
        CFI EndBlock cfiCond628
        CFI EndBlock cfiCond629
        CFI EndBlock cfiCond630
        CFI EndBlock cfiCond631
        CFI EndBlock cfiCond632
        CFI EndBlock cfiCond633
        CFI EndBlock cfiCond634
        CFI EndBlock cfiCond635
        CFI EndBlock cfiCond636
        CFI EndBlock cfiPicker637

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiCond638 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_127
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond639 Using cfiCommon0
        CFI (cfiCond639) NoFunction
        CFI (cfiCond639) Conditional ??CrossCallReturnLabel_128
        CFI (cfiCond639) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond639) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond639) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond639) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond639) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond639) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond639) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond639) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond639) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond639) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond639) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond639) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond639) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond639) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond639) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond639) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond639) CFA_SP SP+0
        CFI (cfiCond639) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond640 Using cfiCommon0
        CFI (cfiCond640) NoFunction
        CFI (cfiCond640) Conditional ??CrossCallReturnLabel_129
        CFI (cfiCond640) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond640) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond640) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond640) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond640) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond640) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond640) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond640) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond640) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond640) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond640) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond640) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond640) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond640) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond640) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond640) CFA_SP SP+0
        CFI (cfiCond640) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker641 Using cfiCommon1
        CFI (cfiPicker641) NoFunction
        CFI (cfiPicker641) Picker
        LCALL   ??Subroutine136_0 & 0xFFFF
        CFI EndBlock cfiCond638
        CFI EndBlock cfiCond639
        CFI EndBlock cfiCond640
        CFI EndBlock cfiPicker641
??CrossCallReturnLabel_294:
        REQUIRE ?Subroutine90
        ; // Fall through to label ?Subroutine90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine90:
        CFI Block cfiCond642 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_127
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond643 Using cfiCommon0
        CFI (cfiCond643) NoFunction
        CFI (cfiCond643) Conditional ??CrossCallReturnLabel_128
        CFI (cfiCond643) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond643) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond643) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond643) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond643) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond643) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond643) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond643) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond643) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond643) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond643) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond643) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond643) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond643) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond643) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond643) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond643) CFA_SP SP+0
        CFI (cfiCond643) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond644 Using cfiCommon0
        CFI (cfiCond644) NoFunction
        CFI (cfiCond644) Conditional ??CrossCallReturnLabel_129
        CFI (cfiCond644) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond644) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond644) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond644) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond644) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond644) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond644) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond644) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond644) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond644) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond644) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond644) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond644) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond644) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond644) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond644) CFA_SP SP+0
        CFI (cfiCond644) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond645 Using cfiCommon0
        CFI (cfiCond645) NoFunction
        CFI (cfiCond645) Conditional ??CrossCallReturnLabel_119
        CFI (cfiCond645) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond645) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond645) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond645) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond645) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond645) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond645) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond645) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond645) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond645) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond645) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond645) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond645) CFA_SP SP+0
        CFI (cfiCond645) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond646 Using cfiCommon0
        CFI (cfiCond646) NoFunction
        CFI (cfiCond646) Conditional ??CrossCallReturnLabel_120
        CFI (cfiCond646) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond646) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond646) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond646) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond646) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond646) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond646) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond646) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond646) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond646) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond646) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond646) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond646) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond646) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond646) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond646) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond646) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond646) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond646) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond646) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond646) CFA_SP SP+0
        CFI (cfiCond646) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond647 Using cfiCommon0
        CFI (cfiCond647) NoFunction
        CFI (cfiCond647) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond647) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond647) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond647) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond647) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond647) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond647) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond647) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond647) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond647) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond647) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond647) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond647) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond647) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond647) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond647) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond647) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond647) CFA_SP SP+0
        CFI (cfiCond647) CFA_XSP16 add(XSP16, 65)
        CFI Block cfiCond648 Using cfiCommon0
        CFI (cfiCond648) NoFunction
        CFI (cfiCond648) Conditional ??CrossCallReturnLabel_122
        CFI (cfiCond648) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond648) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond648) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond648) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond648) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond648) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond648) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond648) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond648) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond648) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond648) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond648) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond648) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond648) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond648) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond648) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond648) CFA_SP SP+0
        CFI (cfiCond648) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond649 Using cfiCommon0
        CFI (cfiCond649) NoFunction
        CFI (cfiCond649) Conditional ??CrossCallReturnLabel_123
        CFI (cfiCond649) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond649) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond649) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond649) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond649) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond649) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond649) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond649) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond649) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond649) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond649) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond649) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond649) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond649) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond649) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond649) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond649) CFA_SP SP+0
        CFI (cfiCond649) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond650 Using cfiCommon0
        CFI (cfiCond650) NoFunction
        CFI (cfiCond650) Conditional ??CrossCallReturnLabel_124
        CFI (cfiCond650) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond650) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond650) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond650) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond650) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond650) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond650) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond650) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond650) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond650) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond650) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond650) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond650) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond650) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond650) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond650) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond650) CFA_SP SP+0
        CFI (cfiCond650) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond651 Using cfiCommon0
        CFI (cfiCond651) NoFunction
        CFI (cfiCond651) Conditional ??CrossCallReturnLabel_125
        CFI (cfiCond651) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond651) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond651) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond651) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond651) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond651) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond651) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond651) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond651) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond651) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond651) CFA_SP SP+0
        CFI (cfiCond651) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond652 Using cfiCommon0
        CFI (cfiCond652) NoFunction
        CFI (cfiCond652) Conditional ??CrossCallReturnLabel_126
        CFI (cfiCond652) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond652) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond652) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond652) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond652) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond652) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond652) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond652) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond652) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond652) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond652) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond652) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond652) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond652) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond652) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond652) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond652) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond652) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond652) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond652) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond652) CFA_SP SP+0
        CFI (cfiCond652) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker653 Using cfiCommon1
        CFI (cfiPicker653) NoFunction
        CFI (cfiPicker653) Picker
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond642
        CFI EndBlock cfiCond643
        CFI EndBlock cfiCond644
        CFI EndBlock cfiCond645
        CFI EndBlock cfiCond646
        CFI EndBlock cfiCond647
        CFI EndBlock cfiCond648
        CFI EndBlock cfiCond649
        CFI EndBlock cfiCond650
        CFI EndBlock cfiCond651
        CFI EndBlock cfiCond652
        CFI EndBlock cfiPicker653
// 3382 
// 3383 /******************************************************************************
// 3384  * @fn          ZDSecMgrAuthenticationSet
// 3385  *
// 3386  * @brief       Mark the specific device as authenticated or not
// 3387  *
// 3388  * @param       extAddr - [in] EXT address
// 3389  * @param       option  - [in] authenticated or not
// 3390  *
// 3391  * @return      ZStatus_t
// 3392  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3393 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
ZDSecMgrAuthenticationSet:
        CFI Block cfiBlock654 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticationSet
// 3394 {
        FUNCALL ZDSecMgrAuthenticationSet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
// 3395   ZStatus_t        status;
// 3396   ZDSecMgrEntry_t* entry;
// 3397 
// 3398 
// 3399   // lookup entry index for specified EXT address
// 3400   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
// 3401 
// 3402   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrAuthenticationSet_0
// 3403   {
// 3404     entry->authenticateOption = option;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine49 & 0xFFFF
// 3405   }
??CrossCallReturnLabel_77:
        MOV     A,R6
        MOVX    @DPTR,A
// 3406 
// 3407   return status;
??ZDSecMgrAuthenticationSet_0:
        LJMP    ??Subroutine122_0 & 0xFFFF
        CFI EndBlock cfiBlock654
// 3408 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine49:
        CFI Block cfiCond655 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond656 Using cfiCommon0
        CFI (cfiCond656) NoFunction
        CFI (cfiCond656) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond656) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond656) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond656) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond656) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond656) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond656) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond656) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond656) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond656) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond656) CFA_SP SP+0
        CFI (cfiCond656) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker657 Using cfiCommon1
        CFI (cfiPicker657) NoFunction
        CFI (cfiPicker657) Picker
        LCALL   ?Subroutine82 & 0xFFFF
??CrossCallReturnLabel_118:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond655
        CFI EndBlock cfiCond656
        CFI EndBlock cfiPicker657
// 3409 
// 3410 /******************************************************************************
// 3411  * @fn          ZDSecMgrAuthenticationCheck
// 3412  *
// 3413  * @brief       Check if the specific device has been authenticated or not
// 3414  *              For non-trust center device, always return true
// 3415  *
// 3416  * @param       shortAddr - [in] short address
// 3417  *
// 3418  * @return      TRUE @ authenticated with CBKE
// 3419  *              FALSE @ not authenticated
// 3420  */
// 3421 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3422 uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
ZDSecMgrAuthenticationCheck:
        CFI Block cfiBlock658 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticationCheck
// 3423 {
        ; Saved register size: 0
        ; Auto size: 0
// 3424 #if defined (TC_LINKKEY_JOIN)
// 3425 
// 3426   ZDSecMgrEntry_t* entry;
// 3427   uint8 extAddr[Z_EXTADDR_LEN];
// 3428 
// 3429   // If the local device is not the trust center, always return TRUE
// 3430   if ( NLME_GetShortAddr() != TCshortAddr )
// 3431   {
// 3432     return TRUE;
// 3433   }
// 3434   // Otherwise, check the authentication option
// 3435   else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
// 3436   {
// 3437     // lookup entry index for specified EXT address
// 3438     if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
// 3439     {
// 3440       if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
// 3441       {
// 3442         return TRUE;
// 3443       }
// 3444       else
// 3445       {
// 3446         return FALSE;
// 3447       }
// 3448     }
// 3449   }
// 3450   return FALSE;
// 3451 
// 3452 #else
// 3453   (void)shortAddr;  // Intentionally unreferenced parameter
// 3454   
// 3455   // For non AMI/SE Profile, perform no check and always return true.
// 3456   return TRUE;
        MOV     R1,#0x1
        LJMP    ?BRET
        CFI EndBlock cfiBlock658
// 3457 
// 3458 #endif // TC_LINKKEY_JOIN
// 3459 }
// 3460 
// 3461 
// 3462 /******************************************************************************
// 3463  * @fn          ZDSecMgrLinkKeyNVIdGet (stubs APSME_LinkKeyNVIdGet)
// 3464  *
// 3465  * @brief       Get Key NV ID for specified NWK address.
// 3466  *
// 3467  * @param       extAddr - [in] EXT address
// 3468  * @param       keyNvId - [out] NV ID
// 3469  *
// 3470  * @return      ZStatus_t
// 3471  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3472 ZStatus_t ZDSecMgrLinkKeyNVIdGet(uint8* extAddr, uint16 *pKeyNvId)
APSME_LinkKeyNVIdGet:
        CFI Block cfiBlock659 Using cfiCommon0
        CFI Function APSME_LinkKeyNVIdGet
// 3473 {
        FUNCALL APSME_LinkKeyNVIdGet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 3474   ZStatus_t status;
// 3475   ZDSecMgrEntry_t* entry;
// 3476 
// 3477   // lookup entry index for specified NWK address
// 3478   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
// 3479 
// 3480   if ( status == ZSuccess )
        JNZ     ??APSME_LinkKeyNVIdGet_0
// 3481   {
// 3482     // return the index to the NV table
// 3483     *pKeyNvId = entry->keyNvId;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine45 & 0xFFFF
// 3484   }
??CrossCallReturnLabel_71:
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??APSME_LinkKeyNVIdGet_1
// 3485   else
// 3486   {
// 3487     *pKeyNvId = SEC_NO_KEY_NV_ID;
??APSME_LinkKeyNVIdGet_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??APSME_LinkKeyNVIdGet_1:
        MOVX    @DPTR,A
// 3488   }
// 3489 
// 3490   return status;
        LJMP    ??Subroutine122_0 & 0xFFFF
        CFI EndBlock cfiBlock659
// 3491 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
        CFI Block cfiCond660 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_70
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond661 Using cfiCommon0
        CFI (cfiCond661) NoFunction
        CFI (cfiCond661) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond661) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond661) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond661) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond661) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond661) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond661) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond661) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond661) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond661) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond661) CFA_SP SP+0
        CFI (cfiCond661) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker662 Using cfiCommon1
        CFI (cfiPicker662) NoFunction
        CFI (cfiPicker662) Picker
        LCALL   ?Subroutine82 & 0xFFFF
??CrossCallReturnLabel_117:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond660
        CFI EndBlock cfiCond661
        CFI EndBlock cfiPicker662

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine82:
        CFI Block cfiCond663 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond664 Using cfiCommon0
        CFI (cfiCond664) NoFunction
        CFI (cfiCond664) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_77
        CFI (cfiCond664) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond664) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond664) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond664) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond664) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond664) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond664) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond664) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond664) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond664) CFA_SP SP+0
        CFI (cfiCond664) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond665 Using cfiCommon0
        CFI (cfiCond665) NoFunction
        CFI (cfiCond665) Conditional ??CrossCallReturnLabel_117, ??CrossCallReturnLabel_70
        CFI (cfiCond665) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond665) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond665) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond665) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond665) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond665) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond665) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond665) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond665) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond665) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond665) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond665) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond665) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond665) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond665) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond665) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond665) CFA_SP SP+0
        CFI (cfiCond665) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond666 Using cfiCommon0
        CFI (cfiCond666) NoFunction
        CFI (cfiCond666) Conditional ??CrossCallReturnLabel_117, ??CrossCallReturnLabel_71
        CFI (cfiCond666) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond666) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond666) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond666) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond666) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond666) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond666) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond666) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond666) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond666) CFA_SP SP+0
        CFI (cfiCond666) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker667 Using cfiCommon1
        CFI (cfiPicker667) NoFunction
        CFI (cfiPicker667) Picker
        LCALL   ?Subroutine85 & 0xFFFF
??CrossCallReturnLabel_291:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond663
        CFI EndBlock cfiCond664
        CFI EndBlock cfiCond665
        CFI EndBlock cfiCond666
        CFI EndBlock cfiPicker667
// 3492 
// 3493 /******************************************************************************
// 3494  * @fn          ZDSecMgrIsLinkKeyValid (stubs APSME_IsLinkKeyValid)
// 3495  *
// 3496  * @brief       Verifies if Link Key in NV has been set.
// 3497  *
// 3498  * @param       extAddr - [in] EXT address
// 3499  *
// 3500  * @return      TRUE - Link Key has been established
// 3501  *              FALSE - Link Key in NV has default value.
// 3502  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3503 uint8 ZDSecMgrIsLinkKeyValid(uint8* extAddr)
APSME_IsLinkKeyValid:
        CFI Block cfiBlock668 Using cfiCommon0
        CFI Function APSME_IsLinkKeyValid
// 3504 {
        FUNCALL APSME_IsLinkKeyValid, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, APSME_LinkKeyNVIdGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 3505   APSME_LinkKeyData_t *pKeyData = NULL;
// 3506   uint16 apsLinkKeyNvId;
// 3507   uint8 nullKey[SEC_KEY_LEN];
// 3508   uint8 status = FALSE;
        MOV     ?V0 + 2,#0x0
// 3509 
// 3510   // initialize default vealue to compare to
// 3511   osal_memset(nullKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
// 3512 
// 3513   // check for APS link NV ID
// 3514   APSME_LinkKeyNVIdGet( extAddr, &apsLinkKeyNvId );
??CrossCallReturnLabel_206:
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??APSME_LinkKeyNVIdGet?relay
// 3515 
// 3516   if (apsLinkKeyNvId != SEC_NO_KEY_NV_ID )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??APSME_IsLinkKeyValid_0
        INC     DPTR
        MOVX    A,@DPTR
??APSME_IsLinkKeyValid_0:
        JZ      ??APSME_IsLinkKeyValid_1
// 3517   {
// 3518     pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        LCALL   ?Subroutine63 & 0xFFFF
// 3519     
// 3520     if (pKeyData != NULL)
??CrossCallReturnLabel_301:
        JNZ     ??APSME_IsLinkKeyValid_2
        MOV     A,R3
??APSME_IsLinkKeyValid_2:
        JZ      ??APSME_IsLinkKeyValid_1
// 3521     {
// 3522       // retrieve key from NV
// 3523       if ( osal_nv_read( apsLinkKeyNvId, 0, 
// 3524                         sizeof(APSME_LinkKeyData_t), pKeyData) == ZSUCCESS)
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 4,#0x18
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_129:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
        JNZ     ??APSME_IsLinkKeyValid_1
// 3525       {
// 3526         // if stored key is different than default value, then a key has been established
// 3527         if (!osal_memcmp(pKeyData, nullKey, SEC_KEY_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,R2
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   ??osal_memcmp?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
        JNZ     ??APSME_IsLinkKeyValid_1
// 3528         {
// 3529           status = TRUE;
        MOV     ?V0 + 2,#0x1
// 3530         }
// 3531       }
// 3532     }
// 3533   }
// 3534 
// 3535   return status;
??APSME_IsLinkKeyValid_1:
        MOV     R1,?V0 + 2
        MOV     A,#0x12
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock668
// 3536 }
// 3537 
// 3538 /******************************************************************************
// 3539  * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
// 3540  *
// 3541  * @brief       Verify and process key transportation to child.
// 3542  *
// 3543  * @param       ind - [in] APSME_TransportKeyInd_t
// 3544  *
// 3545  * @return      uint8 - success(TRUE:FALSE)
// 3546  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3547 uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
APSME_KeyFwdToChild:
        CFI Block cfiBlock669 Using cfiCommon0
        CFI Function APSME_KeyFwdToChild
// 3548 {
        FUNCALL APSME_KeyFwdToChild, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_KeyFwdToChild, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 3549   uint8 success;
// 3550 
// 3551   success = FALSE;
        MOV     R6,#0x0
// 3552 
// 3553   // verify from Trust Center
// 3554   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??APSME_KeyFwdToChild_0
        INC     DPTR
        MOVX    A,@DPTR
??APSME_KeyFwdToChild_0:
        JNZ     ??APSME_KeyFwdToChild_1
// 3555   {
// 3556     success = TRUE;
        INC     R6
// 3557 
// 3558     // check for initial NWK key
// 3559     if ( ( ind->keyType == KEY_TYPE_NWK      ) ||
// 3560          ( ind->keyType == 6                 ) ||
// 3561          ( ind->keyType == KEY_TYPE_NWK_HIGH )    )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R6
        XRL     A,R4
        JZ      ??APSME_KeyFwdToChild_2
        MOV     A,#0x6
        XRL     A,R4
        JZ      ??APSME_KeyFwdToChild_2
        MOV     A,#0x5
        XRL     A,R4
        JNZ     ??APSME_KeyFwdToChild_1
// 3562     {
// 3563       // set association status to authenticated
// 3564       ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
??APSME_KeyFwdToChild_2:
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        ; Setup parameters for call to function AssocGetWithExt
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine59 & 0xFFFF
// 3565     }
// 3566   }
??CrossCallReturnLabel_94:
        LCALL   ??ZDSecMgrAssocDeviceAuth?relay
// 3567 
// 3568   return success;
??APSME_KeyFwdToChild_1:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine124_0 & 0xFFFF
        CFI EndBlock cfiBlock669
// 3569 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine59:
        CFI Block cfiCond670 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_93
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond671 Using cfiCommon0
        CFI (cfiCond671) NoFunction
        CFI (cfiCond671) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond671) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond671) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond671) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond671) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond671) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond671) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond671) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond671) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond671) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond671) CFA_SP SP+0
        CFI (cfiCond671) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker672 Using cfiCommon1
        CFI (cfiPicker672) NoFunction
        CFI (cfiPicker672) Picker
        LCALL   ??Subroutine136_0 & 0xFFFF
??CrossCallReturnLabel_296:
        LCALL   ??AssocGetWithExt?relay
        RET
        CFI EndBlock cfiCond670
        CFI EndBlock cfiCond671
        CFI EndBlock cfiPicker672

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine77:
        CFI Block cfiCond673 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_91
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond674 Using cfiCommon0
        CFI (cfiCond674) NoFunction
        CFI (cfiCond674) Conditional ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_92
        CFI (cfiCond674) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond674) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond674) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond674) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond674) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond674) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond674) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond674) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond674) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond674) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond674) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond674) CFA_SP SP+0
        CFI (cfiCond674) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond675 Using cfiCommon0
        CFI (cfiCond675) NoFunction
        CFI (cfiCond675) Conditional ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_89
        CFI (cfiCond675) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond675) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond675) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond675) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond675) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond675) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond675) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond675) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond675) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond675) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond675) CFA_SP SP+0
        CFI (cfiCond675) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond676 Using cfiCommon0
        CFI (cfiCond676) NoFunction
        CFI (cfiCond676) Conditional ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_90
        CFI (cfiCond676) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond676) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond676) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond676) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond676) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond676) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond676) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond676) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond676) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond676) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond676) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond676) CFA_SP SP+0
        CFI (cfiCond676) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker677 Using cfiCommon1
        CFI (cfiPicker677) NoFunction
        CFI (cfiPicker677) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond673
        CFI EndBlock cfiCond674
        CFI EndBlock cfiCond675
        CFI EndBlock cfiCond676
        CFI EndBlock cfiPicker677
        REQUIRE ??Subroutine136_0
        ; // Fall through to label ??Subroutine136_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine136_0:
        CFI Block cfiCond678 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_299, ??CrossCallReturnLabel_185
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond679 Using cfiCommon0
        CFI (cfiCond679) NoFunction
        CFI (cfiCond679) Conditional ??CrossCallReturnLabel_299, ??CrossCallReturnLabel_186
        CFI (cfiCond679) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond679) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond679) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond679) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond679) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond679) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond679) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond679) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond679) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond679) CFA_SP SP+0
        CFI (cfiCond679) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond680 Using cfiCommon0
        CFI (cfiCond680) NoFunction
        CFI (cfiCond680) Conditional ??CrossCallReturnLabel_299, ??CrossCallReturnLabel_187
        CFI (cfiCond680) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond680) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond680) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond680) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond680) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond680) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond680) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond680) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond680) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond680) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond680) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond680) CFA_SP SP+0
        CFI (cfiCond680) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond681 Using cfiCommon0
        CFI (cfiCond681) NoFunction
        CFI (cfiCond681) Conditional ??CrossCallReturnLabel_299, ??CrossCallReturnLabel_188
        CFI (cfiCond681) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond681) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond681) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond681) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond681) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond681) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond681) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond681) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond681) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond681) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond681) CFA_SP SP+0
        CFI (cfiCond681) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond682 Using cfiCommon0
        CFI (cfiCond682) NoFunction
        CFI (cfiCond682) Conditional ??CrossCallReturnLabel_293, ??CrossCallReturnLabel_60
        CFI (cfiCond682) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond682) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond682) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond682) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond682) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond682) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond682) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond682) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond682) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond682) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond682) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond682) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond682) CFA_SP SP+0
        CFI (cfiCond682) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond683 Using cfiCommon0
        CFI (cfiCond683) NoFunction
        CFI (cfiCond683) Conditional ??CrossCallReturnLabel_293, ??CrossCallReturnLabel_61
        CFI (cfiCond683) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond683) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond683) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond683) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond683) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond683) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond683) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond683) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond683) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond683) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond683) CFA_SP SP+0
        CFI (cfiCond683) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond684 Using cfiCommon0
        CFI (cfiCond684) NoFunction
        CFI (cfiCond684) Conditional ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_201
        CFI (cfiCond684) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond684) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond684) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond684) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond684) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond684) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond684) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond684) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond684) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond684) CFA_SP SP+0
        CFI (cfiCond684) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond685 Using cfiCommon0
        CFI (cfiCond685) NoFunction
        CFI (cfiCond685) Conditional ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_202
        CFI (cfiCond685) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond685) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond685) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond685) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond685) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond685) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond685) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond685) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond685) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond685) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond685) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond685) CFA_SP SP+0
        CFI (cfiCond685) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond686 Using cfiCommon0
        CFI (cfiCond686) NoFunction
        CFI (cfiCond686) Conditional ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_194
        CFI (cfiCond686) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond686) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond686) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond686) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond686) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond686) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond686) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond686) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond686) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond686) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond686) CFA_SP SP+0
        CFI (cfiCond686) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond687 Using cfiCommon0
        CFI (cfiCond687) NoFunction
        CFI (cfiCond687) Conditional ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_195
        CFI (cfiCond687) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond687) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond687) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond687) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond687) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond687) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond687) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond687) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond687) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond687) CFA_SP SP+0
        CFI (cfiCond687) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond688 Using cfiCommon0
        CFI (cfiCond688) NoFunction
        CFI (cfiCond688) Conditional ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_196
        CFI (cfiCond688) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond688) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond688) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond688) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond688) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond688) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond688) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond688) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond688) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond688) CFA_SP SP+0
        CFI (cfiCond688) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond689 Using cfiCommon0
        CFI (cfiCond689) NoFunction
        CFI (cfiCond689) Conditional ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_197
        CFI (cfiCond689) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond689) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond689) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond689) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond689) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond689) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond689) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond689) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond689) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond689) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond689) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond689) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond689) CFA_SP SP+0
        CFI (cfiCond689) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond690 Using cfiCommon0
        CFI (cfiCond690) NoFunction
        CFI (cfiCond690) Conditional ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_198
        CFI (cfiCond690) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond690) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond690) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond690) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond690) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond690) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond690) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond690) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond690) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond690) CFA_SP SP+0
        CFI (cfiCond690) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond691 Using cfiCommon0
        CFI (cfiCond691) NoFunction
        CFI (cfiCond691) Conditional ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_199
        CFI (cfiCond691) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond691) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond691) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond691) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond691) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond691) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond691) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond691) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond691) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond691) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond691) CFA_SP SP+0
        CFI (cfiCond691) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond692 Using cfiCommon0
        CFI (cfiCond692) NoFunction
        CFI (cfiCond692) Conditional ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_200
        CFI (cfiCond692) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond692) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond692) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond692) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond692) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond692) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond692) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond692) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond692) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond692) CFA_SP SP+0
        CFI (cfiCond692) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond693 Using cfiCommon0
        CFI (cfiCond693) NoFunction
        CFI (cfiCond693) Conditional ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_127
        CFI (cfiCond693) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond693) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond693) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond693) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond693) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond693) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond693) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond693) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond693) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond693) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond693) CFA_SP SP+0
        CFI (cfiCond693) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond694 Using cfiCommon0
        CFI (cfiCond694) NoFunction
        CFI (cfiCond694) Conditional ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_128
        CFI (cfiCond694) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond694) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond694) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond694) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond694) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond694) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond694) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond694) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond694) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond694) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond694) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond694) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond694) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond694) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond694) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond694) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond694) CFA_SP SP+0
        CFI (cfiCond694) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond695 Using cfiCommon0
        CFI (cfiCond695) NoFunction
        CFI (cfiCond695) Conditional ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_129
        CFI (cfiCond695) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond695) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond695) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond695) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond695) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond695) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond695) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond695) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond695) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond695) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond695) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond695) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond695) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond695) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond695) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond695) CFA_SP SP+0
        CFI (cfiCond695) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond696 Using cfiCommon0
        CFI (cfiCond696) NoFunction
        CFI (cfiCond696) Conditional ??CrossCallReturnLabel_296, ??CrossCallReturnLabel_93
        CFI (cfiCond696) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond696) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond696) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond696) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond696) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond696) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond696) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond696) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond696) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond696) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond696) CFA_SP SP+0
        CFI (cfiCond696) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond697 Using cfiCommon0
        CFI (cfiCond697) NoFunction
        CFI (cfiCond697) Conditional ??CrossCallReturnLabel_296, ??CrossCallReturnLabel_94
        CFI (cfiCond697) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond697) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond697) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond697) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond697) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond697) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond697) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond697) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond697) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond697) CFA_SP SP+0
        CFI (cfiCond697) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond698 Using cfiCommon0
        CFI (cfiCond698) NoFunction
        CFI (cfiCond698) Conditional ??CrossCallReturnLabel_295, ??CrossCallReturnLabel_87
        CFI (cfiCond698) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond698) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond698) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond698) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond698) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond698) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond698) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond698) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond698) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond698) CFA_SP SP+0
        CFI (cfiCond698) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond699 Using cfiCommon0
        CFI (cfiCond699) NoFunction
        CFI (cfiCond699) Conditional ??CrossCallReturnLabel_295, ??CrossCallReturnLabel_88
        CFI (cfiCond699) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond699) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond699) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond699) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond699) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond699) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond699) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond699) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond699) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond699) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond699) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond699) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond699) CFA_SP SP+0
        CFI (cfiCond699) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond700 Using cfiCommon0
        CFI (cfiCond700) NoFunction
        CFI (cfiCond700) Conditional ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_91
        CFI (cfiCond700) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond700) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond700) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond700) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond700) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond700) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond700) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond700) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond700) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond700) CFA_SP SP+0
        CFI (cfiCond700) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond701 Using cfiCommon0
        CFI (cfiCond701) NoFunction
        CFI (cfiCond701) Conditional ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_92
        CFI (cfiCond701) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond701) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond701) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond701) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond701) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond701) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond701) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond701) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond701) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond701) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond701) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond701) CFA_SP SP+0
        CFI (cfiCond701) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond702 Using cfiCommon0
        CFI (cfiCond702) NoFunction
        CFI (cfiCond702) Conditional ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_89
        CFI (cfiCond702) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond702) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond702) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond702) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond702) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond702) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond702) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond702) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond702) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond702) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond702) CFA_SP SP+0
        CFI (cfiCond702) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond703 Using cfiCommon0
        CFI (cfiCond703) NoFunction
        CFI (cfiCond703) Conditional ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_90
        CFI (cfiCond703) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond703) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond703) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond703) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond703) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond703) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond703) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond703) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond703) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond703) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond703) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond703) CFA_SP SP+0
        CFI (cfiCond703) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker704 Using cfiCommon1
        CFI (cfiPicker704) NoFunction
        CFI (cfiPicker704) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond678
        CFI EndBlock cfiCond679
        CFI EndBlock cfiCond680
        CFI EndBlock cfiCond681
        CFI EndBlock cfiCond682
        CFI EndBlock cfiCond683
        CFI EndBlock cfiCond684
        CFI EndBlock cfiCond685
        CFI EndBlock cfiCond686
        CFI EndBlock cfiCond687
        CFI EndBlock cfiCond688
        CFI EndBlock cfiCond689
        CFI EndBlock cfiCond690
        CFI EndBlock cfiCond691
        CFI EndBlock cfiCond692
        CFI EndBlock cfiCond693
        CFI EndBlock cfiCond694
        CFI EndBlock cfiCond695
        CFI EndBlock cfiCond696
        CFI EndBlock cfiCond697
        CFI EndBlock cfiCond698
        CFI EndBlock cfiCond699
        CFI EndBlock cfiCond700
        CFI EndBlock cfiCond701
        CFI EndBlock cfiCond702
        CFI EndBlock cfiCond703
        CFI EndBlock cfiPicker704
// 3570 
// 3571 /******************************************************************************
// 3572  * @fn          ZDSecMgrAddLinkKey
// 3573  *
// 3574  * @brief       Add the application link key to ZDSecMgr. Also mark the device
// 3575  *              as authenticated in the authenticateOption. Note that this function
// 3576  *              is hardwared to CBKE right now.
// 3577  *
// 3578  * @param       shortAddr - short address of the partner device
// 3579  * @param       extAddr - extended address of the partner device
// 3580  * @param       key - link key
// 3581  *
// 3582  * @return      ZStatus_t
// 3583  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3584 ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
ZDSecMgrAddLinkKey:
        CFI Block cfiBlock705 Using cfiCommon0
        CFI Function ZDSecMgrAddLinkKey
// 3585 {
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, APSME_LinkKeySet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine51 & 0xFFFF
// 3586   uint16           ami;
// 3587   ZDSecMgrEntry_t* entry;
// 3588 
// 3589   /* Store the device address in the addr manager */
// 3590   if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
??CrossCallReturnLabel_80:
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ??ZDSecMgrAddrStore?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        JZ      ??ZDSecMgrAddLinkKey_0
// 3591   {
// 3592     /* Adding to Addr Manager fails */
// 3593     return ZFailure;
        MOV     R1,#0x1
        SJMP    ??ZDSecMgrAddLinkKey_1
// 3594   }
// 3595 
// 3596   /* Lookup entry using specified address index */
// 3597   ZDSecMgrEntryLookupAMI( ami, &entry );
??ZDSecMgrAddLinkKey_0:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine56 & 0xFFFF
// 3598 
// 3599   // If no existing entry, create one
// 3600   if ( entry == NULL )
??CrossCallReturnLabel_88:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrAddLinkKey_2
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrAddLinkKey_2:
        JNZ     ??CrossCallReturnLabel_252
// 3601   {
// 3602     if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrEntryNew
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrEntryNew?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrAddLinkKey_3
// 3603     {
// 3604       entry->ami = ami;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine52 & 0xFFFF
// 3605     }
??CrossCallReturnLabel_82:
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL   ??Subroutine130_0 & 0xFFFF
// 3606     else
// 3607     {
// 3608       /* Security Manager full */
// 3609       return ZBufferFull;
// 3610     }
// 3611   }
// 3612   // Write the link key
// 3613   APSME_LinkKeySet( extAddr, key );
??CrossCallReturnLabel_252:
        ; Setup parameters for call to function APSME_LinkKeySet
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??APSME_LinkKeySet?relay
// 3614 
// 3615 #if defined (TC_LINKKEY_JOIN)
// 3616   // Mark the device as authenticated.
// 3617   ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
// 3618 #endif
// 3619 
// 3620 #if defined NV_RESTORE
// 3621   ZDSecMgrWriteNV();  // Write the new established link key to NV.
// 3622 #endif
// 3623   
// 3624   return ZSuccess;
        MOV     R1,#0x0
??ZDSecMgrAddLinkKey_1:
        MOV     A,#0x4
        LJMP    ??Subroutine128_0 & 0xFFFF
??ZDSecMgrAddLinkKey_3:
        MOV     R1,#0x11
        SJMP    ??ZDSecMgrAddLinkKey_1
        CFI EndBlock cfiBlock705
// 3625 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine61:
        CFI Block cfiCond706 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_95
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond707 Using cfiCommon0
        CFI (cfiCond707) NoFunction
        CFI (cfiCond707) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond707) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond707) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond707) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond707) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond707) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond707) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond707) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond707) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond707) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond707) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond707) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond707) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond707) CFA_SP SP+0
        CFI (cfiCond707) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker708 Using cfiCommon1
        CFI (cfiPicker708) NoFunction
        CFI (cfiPicker708) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        RET
        CFI EndBlock cfiCond706
        CFI EndBlock cfiCond707
        CFI EndBlock cfiPicker708

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine56:
        CFI Block cfiCond709 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_87
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond710 Using cfiCommon0
        CFI (cfiCond710) NoFunction
        CFI (cfiCond710) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond710) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond710) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond710) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond710) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond710) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond710) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond710) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond710) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond710) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond710) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond710) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond710) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond710) CFA_SP SP+0
        CFI (cfiCond710) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker711 Using cfiCommon1
        CFI (cfiPicker711) NoFunction
        CFI (cfiPicker711) Picker
        LCALL   ??Subroutine136_0 & 0xFFFF
??CrossCallReturnLabel_295:
        LCALL   ??ZDSecMgrEntryLookupAMI?relay
        RET
        CFI EndBlock cfiCond709
        CFI EndBlock cfiCond710
        CFI EndBlock cfiPicker711

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine52:
        CFI Block cfiCond712 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_81
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond713 Using cfiCommon0
        CFI (cfiCond713) NoFunction
        CFI (cfiCond713) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond713) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond713) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond713) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond713) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond713) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond713) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond713) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond713) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond713) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond713) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond713) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond713) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond713) CFA_SP SP+0
        CFI (cfiCond713) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker714 Using cfiCommon1
        CFI (cfiPicker714) NoFunction
        CFI (cfiPicker714) Picker
        LCALL   ?Subroutine79 & 0xFFFF
??CrossCallReturnLabel_214:
        RET
        CFI EndBlock cfiCond712
        CFI EndBlock cfiCond713
        CFI EndBlock cfiPicker714

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine79:
        CFI Block cfiCond715 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_213, ??CrossCallReturnLabel_203
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond716 Using cfiCommon0
        CFI (cfiCond716) NoFunction
        CFI (cfiCond716) Conditional ??CrossCallReturnLabel_213, ??CrossCallReturnLabel_204
        CFI (cfiCond716) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond716) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond716) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond716) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond716) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond716) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond716) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond716) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond716) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond716) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond716) CFA_SP SP+0
        CFI (cfiCond716) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond717 Using cfiCommon0
        CFI (cfiCond717) NoFunction
        CFI (cfiCond717) Conditional ??CrossCallReturnLabel_214, ??CrossCallReturnLabel_81
        CFI (cfiCond717) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond717) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond717) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond717) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond717) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond717) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond717) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond717) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond717) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond717) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond717) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond717) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond717) CFA_SP SP+0
        CFI (cfiCond717) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond718 Using cfiCommon0
        CFI (cfiCond718) NoFunction
        CFI (cfiCond718) Conditional ??CrossCallReturnLabel_214, ??CrossCallReturnLabel_82
        CFI (cfiCond718) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond718) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond718) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond718) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond718) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond718) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond718) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond718) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond718) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond718) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond718) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond718) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond718) CFA_SP SP+0
        CFI (cfiCond718) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker719 Using cfiCommon1
        CFI (cfiPicker719) NoFunction
        CFI (cfiPicker719) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LJMP    ?Subroutine88 & 0xFFFF
        CFI EndBlock cfiCond715
        CFI EndBlock cfiCond716
        CFI EndBlock cfiCond717
        CFI EndBlock cfiCond718
        CFI EndBlock cfiPicker719
// 3626 
// 3627 #if defined ( NV_RESTORE )
// 3628 /******************************************************************************
// 3629  * @fn          ZDSecMgrInitNV
// 3630  *
// 3631  * @brief       Initialize the SecMgr entry data in NV with all values set to 0
// 3632  *
// 3633  * @param       none
// 3634  *
// 3635  * @return      uint8 - <osal_nv_item_init> return codes
// 3636  */
// 3637 uint8 ZDSecMgrInitNV(void)
// 3638 {
// 3639   
// 3640   uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE, 
// 3641                 (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
// 3642   
// 3643   // If the item does not already exist, set all values to 0 
// 3644   if (rtrn != SUCCESS)  
// 3645   {
// 3646     nvDeviceListHdr_t hdr;
// 3647     hdr.numRecs = 0;
// 3648     osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
// 3649   }
// 3650 
// 3651   return rtrn;
// 3652 }
// 3653 #endif // NV_RESTORE
// 3654 
// 3655 #if defined ( NV_RESTORE )
// 3656 /*********************************************************************
// 3657  * @fn      ZDSecMgrWriteNV()
// 3658  *
// 3659  * @brief   Save off the APS link key list to NV
// 3660  *
// 3661  * @param   none
// 3662  *
// 3663  * @return  none
// 3664  */
// 3665 static void ZDSecMgrWriteNV( void )
// 3666 {
// 3667   uint16 i;
// 3668   nvDeviceListHdr_t hdr;
// 3669 
// 3670   hdr.numRecs = 0;
// 3671 
// 3672   if (ZDSecMgrEntries != NULL)
// 3673   {
// 3674     for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
// 3675     {
// 3676       if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
// 3677       {
// 3678         // Save off the record
// 3679         osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 3680                 (uint16)((sizeof(nvDeviceListHdr_t)) + (hdr.numRecs * sizeof(ZDSecMgrEntry_t))),
// 3681                         sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
// 3682         hdr.numRecs++;
// 3683       }
// 3684     }
// 3685   }
// 3686 
// 3687   // Save off the header
// 3688   osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
// 3689 }
// 3690 #endif // NV_RESTORE
// 3691 
// 3692 #if defined ( NV_RESTORE )
// 3693 /******************************************************************************
// 3694  * @fn          ZDSecMgrRestoreFromNV
// 3695  *
// 3696  * @brief       Restore the APS Link Key entry data from NV. It does not restore
// 3697  *              the key data itself as they remain in NV until they are used. 
// 3698  *              Only list data is restored.
// 3699  *
// 3700  * @param       none
// 3701  *
// 3702  * @return      None.
// 3703  */
// 3704 static void ZDSecMgrRestoreFromNV( void )
// 3705 {
// 3706   nvDeviceListHdr_t hdr;
// 3707   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 3708   
// 3709   if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
// 3710       (hdr.numRecs <= ZDSECMGR_ENTRY_MAX))
// 3711   {
// 3712     uint8 x;
// 3713 
// 3714     pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
// 3715     
// 3716     for (x = 0; x < hdr.numRecs; x++)
// 3717     {
// 3718       if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
// 3719                         (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
// 3720                         sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == SUCCESS )
// 3721       {
// 3722         // update data only for valid entries 
// 3723         if ( ZDSecMgrEntries[x].ami != INVALID_NODE_ADDR )
// 3724         {
// 3725           if (pApsLinkKey != NULL)
// 3726           {
// 3727             // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
// 3728             osal_nv_read( ZDSecMgrEntries[x].keyNvId, 0, 
// 3729                          sizeof(APSME_LinkKeyData_t), pApsLinkKey );
// 3730             
// 3731             // set new values for the counter 
// 3732             pApsLinkKey->txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
// 3733 
// 3734             // restore values for counters in RAM
// 3735             ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr = 
// 3736                                             pApsLinkKey->txFrmCntr;
// 3737 
// 3738             ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr = 
// 3739                                             pApsLinkKey->rxFrmCntr;
// 3740             
// 3741             osal_nv_write( ZDSecMgrEntries[x].keyNvId, 0, 
// 3742                           sizeof(APSME_LinkKeyData_t), pApsLinkKey );
// 3743             
// 3744             // clear copy of key in RAM 
// 3745             osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
// 3746           }
// 3747         }
// 3748       }
// 3749     }
// 3750     
// 3751     if (pApsLinkKey != NULL)
// 3752     {
// 3753       osal_mem_free(pApsLinkKey);
// 3754     }    
// 3755   }
// 3756 }
// 3757 #endif // NV_RESTORE
// 3758 
// 3759 /*********************************************************************
// 3760  * @fn          ZDSecMgrSetDefaultNV
// 3761  *
// 3762  * @brief       Write the defaults to NV for Entry table and for APS key data table
// 3763  *
// 3764  * @param       none
// 3765  *
// 3766  * @return      none
// 3767  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3768 void ZDSecMgrSetDefaultNV( void )
ZDSecMgrSetDefaultNV:
        CFI Block cfiBlock720 Using cfiCommon0
        CFI Function ZDSecMgrSetDefaultNV
// 3769 {
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
// 3770   uint16 i;
// 3771   nvDeviceListHdr_t hdr;
// 3772   ZDSecMgrEntry_t secMgrEntry;
// 3773   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 3774     
// 3775   // Initialize the header
// 3776   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine13 & 0xFFFF
// 3777 
// 3778   // clear the header
// 3779   osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
??CrossCallReturnLabel_21:
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   ??Subroutine108_0 & 0xFFFF
??CrossCallReturnLabel_160:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
// 3780   
// 3781   osal_memset( &secMgrEntry, 0x00, sizeof(ZDSecMgrEntry_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 3782 
// 3783   for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
// 3784   {
// 3785     // Clear the record
// 3786     osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 3787                 (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
// 3788                         sizeof(ZDSecMgrEntry_t), &secMgrEntry );
??ZDSecMgrSetDefaultNV_0:
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x5
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#0x2
        ADD     A,R0
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   ??Subroutine108_0 & 0xFFFF
// 3789   }
??CrossCallReturnLabel_161:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_41:
        JC      ??ZDSecMgrSetDefaultNV_0
// 3790 
// 3791   pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        LCALL   ?Subroutine63 & 0xFFFF
// 3792 
// 3793   if (pApsLinkKey != NULL)
??CrossCallReturnLabel_302:
        JNZ     ??ZDSecMgrSetDefaultNV_1
        MOV     A,R3
??ZDSecMgrSetDefaultNV_1:
        JZ      ??ZDSecMgrSetDefaultNV_2
// 3794   {
// 3795     osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??osal_memset?relay
// 3796 
// 3797     for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
// 3798     {
// 3799       // Clear the record
// 3800       osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
// 3801                     sizeof(APSME_LinkKeyData_t), pApsLinkKey);
??ZDSecMgrSetDefaultNV_3:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 2,#0x18
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x1
        ADD     A,R6
        MOV     R2,A
        MOV     A,#0x2
        ADDC    A,R7
        LCALL   ??Subroutine107_0 & 0xFFFF
// 3802     }
??CrossCallReturnLabel_158:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_42:
        JC      ??ZDSecMgrSetDefaultNV_3
// 3803     
// 3804     osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
// 3805   }
// 3806 }
??ZDSecMgrSetDefaultNV_2:
        MOV     A,#0x7
        LJMP    ??Subroutine128_0 & 0xFFFF
        CFI EndBlock cfiBlock720

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine63:
        CFI Block cfiCond721 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_301
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond722 Using cfiCommon0
        CFI (cfiCond722) NoFunction
        CFI (cfiCond722) Conditional ??CrossCallReturnLabel_302
        CFI (cfiCond722) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond722) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond722) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond722) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond722) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond722) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond722) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond722) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond722) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond722) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond722) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond722) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond722) CFA_SP SP+0
        CFI (cfiCond722) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond723 Using cfiCommon0
        CFI (cfiCond723) NoFunction
        CFI (cfiCond723) Conditional ??CrossCallReturnLabel_303
        CFI (cfiCond723) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond723) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond723) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond723) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond723) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond723) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond723) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond723) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond723) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond723) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond723) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond723) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond723) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond723) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond723) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond723) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond723) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond723) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond723) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond723) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond723) CFA_SP SP+0
        CFI (cfiCond723) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker724 Using cfiCommon1
        CFI (cfiPicker724) NoFunction
        CFI (cfiPicker724) Picker
        MOV     R2,#0x18
        CFI EndBlock cfiCond721
        CFI EndBlock cfiCond722
        CFI EndBlock cfiCond723
        CFI EndBlock cfiPicker724
        REQUIRE ??Subroutine137_0
        ; // Fall through to label ??Subroutine137_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine137_0:
        CFI Block cfiCond725 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_304
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond726 Using cfiCommon0
        CFI (cfiCond726) NoFunction
        CFI (cfiCond726) Conditional ??CrossCallReturnLabel_301
        CFI (cfiCond726) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond726) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond726) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond726) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond726) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond726) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond726) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond726) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond726) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond726) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond726) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond726) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond726) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond726) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond726) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond726) CFA_SP SP+0
        CFI (cfiCond726) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond727 Using cfiCommon0
        CFI (cfiCond727) NoFunction
        CFI (cfiCond727) Conditional ??CrossCallReturnLabel_302
        CFI (cfiCond727) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond727) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond727) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond727) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond727) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond727) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond727) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond727) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond727) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond727) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond727) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond727) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond727) CFA_SP SP+0
        CFI (cfiCond727) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond728 Using cfiCommon0
        CFI (cfiCond728) NoFunction
        CFI (cfiCond728) Conditional ??CrossCallReturnLabel_303
        CFI (cfiCond728) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond728) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond728) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond728) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond728) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond728) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond728) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond728) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond728) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond728) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond728) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond728) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond728) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond728) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond728) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond728) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond728) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond728) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond728) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond728) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond728) CFA_SP SP+0
        CFI (cfiCond728) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker729 Using cfiCommon1
        CFI (cfiPicker729) NoFunction
        CFI (cfiPicker729) Picker
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        RET
        CFI EndBlock cfiCond725
        CFI EndBlock cfiCond726
        CFI EndBlock cfiCond727
        CFI EndBlock cfiCond728
        CFI EndBlock cfiPicker729
// 3807 
// 3808 /******************************************************************************
// 3809  * @fn          ZDSecMgrAPSRemove
// 3810  *
// 3811  * @brief       Remove device from network.
// 3812  *
// 3813  * @param       nwkAddr - device's NWK address
// 3814  * @param       extAddr - device's Extended address
// 3815  * @param       parentAddr - parent's NWK address
// 3816  *
// 3817  * @return      ZStatus_t
// 3818  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3819 ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
ZDSecMgrAPSRemove:
        CFI Block cfiBlock730 Using cfiCommon0
        CFI Function ZDSecMgrAPSRemove
// 3820 {
        FUNCALL ZDSecMgrAPSRemove, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine131_0 & 0xFFFF
// 3821   ZDSecMgrDevice_t device;
// 3822 
// 3823   if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
// 3824        ( extAddr == NULL )              ||
// 3825        ( parentAddr == INVALID_NODE_ADDR ) )
??CrossCallReturnLabel_270:
        MOV     A,#-0x2
        XRL     A,R2
        JNZ     ??ZDSecMgrAPSRemove_0
        MOV     A,#-0x1
        XRL     A,R3
??ZDSecMgrAPSRemove_0:
        JZ      ??ZDSecMgrAPSRemove_1
        MOV     A,R4
        JNZ     ??ZDSecMgrAPSRemove_2
        MOV     A,R5
??ZDSecMgrAPSRemove_2:
        JZ      ??ZDSecMgrAPSRemove_1
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??ZDSecMgrAPSRemove_3
        MOV     A,#-0x1
        XRL     A,R1
??ZDSecMgrAPSRemove_3:
        JNZ     ??ZDSecMgrAPSRemove_4
// 3826   {
// 3827     return ( ZFailure );
??ZDSecMgrAPSRemove_1:
        MOV     R1,#0x1
        SJMP    ??ZDSecMgrAPSRemove_5
// 3828   }
// 3829 
// 3830   device.nwkAddr = nwkAddr;
??ZDSecMgrAPSRemove_4:
        LCALL   ?Subroutine14 & 0xFFFF
// 3831   device.extAddr = extAddr;
??CrossCallReturnLabel_283:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 3832   device.parentAddr = parentAddr;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
// 3833 
// 3834   // remove device
// 3835   ZDSecMgrDeviceRemove( &device );
??CrossCallReturnLabel_230:
        LCALL   ??ZDSecMgrDeviceRemove?relay
// 3836 
// 3837   return ( ZSuccess );
        MOV     R1,#0x0
??ZDSecMgrAPSRemove_5:
        LJMP    ?Subroutine100 & 0xFFFF
        CFI EndBlock cfiBlock730
// 3838 }
// 3839 
// 3840 /******************************************************************************
// 3841  * @fn          APSME_TCLinkKeyInit
// 3842  *
// 3843  * @brief       Initialize the NV table for preconfigured TC link key
// 3844  *               
// 3845  *              When zgUseDefaultTCL is set to TRUE, the default preconfig
// 3846  *              Trust Center Link Key is written to NV. A single tclk is used   
// 3847  *              by all devices joining the network.
// 3848  *              
// 3849  * @param       setDefault - TRUE to set default values
// 3850  *
// 3851  * @return      none
// 3852  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3853 void APSME_TCLinkKeyInit(uint8 setDefault)
APSME_TCLinkKeyInit:
        CFI Block cfiBlock731 Using cfiCommon0
        CFI Function APSME_TCLinkKeyInit
// 3854 {
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
// 3855   uint8             i;
// 3856   APSME_TCLinkKey_t tcLinkKey;
// 3857   uint8             rtrn;
// 3858   
// 3859   // Initialize all NV items for preconfigured TCLK 
// 3860   for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 3861   {
// 3862     // Making sure data is cleared for every key all the time
// 3863     osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 3864 
// 3865     // Initialize first element of the table with the default TCLK
// 3866     if((i == 0) && ( zgUseDefaultTCLK == TRUE ))
        MOV     DPTR,#zgUseDefaultTCLK
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??APSME_TCLinkKeyInit_0
// 3867     {
// 3868       osal_memset( tcLinkKey.extAddr, 0xFF, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 3869       osal_memcpy( tcLinkKey.key, defaultTCLinkKey, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(defaultTCLinkKey & 0xff)
        MOV     ?V0 + 1,#((defaultTCLinkKey >> 8) & 0xff)
        MOV     ?V0 + 2,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine65 & 0xFFFF
// 3870     }
??CrossCallReturnLabel_192:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
// 3871 
// 3872     // If the item doesn't exist in NV memory, create and initialize
// 3873     // it with the default value passed in, either defaultTCLK or 0
// 3874     rtrn = osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i), 
// 3875                                sizeof(APSME_TCLinkKey_t), &tcLinkKey);
// 3876      
// 3877     if (rtrn == SUCCESS)
??APSME_TCLinkKeyInit_0:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_132:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R1
        JZ      $+5
        LJMP    ??APSME_TCLinkKeyInit_1 & 0xFFFF
// 3878     {
// 3879       // set the Frame counters to 0 to existing keys in NV
// 3880       osal_nv_read( ( ZCD_NV_TCLK_TABLE_START + i), 0, 
// 3881                      sizeof(APSME_TCLinkKey_t), &tcLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0 + 0,#0x20
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_119:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
// 3882       
// 3883 #if defined ( NV_RESTORE )
// 3884       if (setDefault == TRUE)
// 3885       {
// 3886         // clear the value stored in NV  
// 3887         tcLinkKey.txFrmCntr = 0;
// 3888       }
// 3889       else
// 3890       {
// 3891         // increase the value stored in NV  
// 3892         tcLinkKey.txFrmCntr += ( MAX_TCLK_FRAMECOUNTER_CHANGES + 1 );
// 3893       }
// 3894 #else      
// 3895       // Clear the counters if NV_RESTORE is not enabled and this NV item
// 3896       // already existed in the NV memory
// 3897       tcLinkKey.txFrmCntr = 0;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
// 3898       tcLinkKey.rxFrmCntr = 0;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
// 3899 #endif  // NV_RESTORE
// 3900 
// 3901       osal_nv_write( ( ZCD_NV_TCLK_TABLE_START + i), 0,
// 3902                       sizeof(APSME_TCLinkKey_t), &tcLinkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0 + 0,#0x20
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??Subroutine108_0 & 0xFFFF
??CrossCallReturnLabel_162:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
// 3903       
// 3904       // set initial values for counters in RAM
// 3905       TCLinkKeyFrmCntr[i].txFrmCntr = tcLinkKey.txFrmCntr;
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#TCLinkKeyFrmCntr
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
// 3906       TCLinkKeyFrmCntr[i].rxFrmCntr = tcLinkKey.rxFrmCntr;    
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#(TCLinkKeyFrmCntr + 4)
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
// 3907     }
// 3908   }
// 3909     
// 3910   // clear copy of key in RAM
// 3911   osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
??APSME_TCLinkKeyInit_1:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 3912 
// 3913 }
        MOV     A,#0x20
        LJMP    ??Subroutine128_0 & 0xFFFF
        CFI EndBlock cfiBlock731

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine64:
        CFI Block cfiCond732 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_119
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond733 Using cfiCommon0
        CFI (cfiCond733) NoFunction
        CFI (cfiCond733) Conditional ??CrossCallReturnLabel_120
        CFI (cfiCond733) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond733) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond733) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond733) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond733) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond733) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond733) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond733) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond733) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond733) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond733) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond733) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond733) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond733) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond733) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond733) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond733) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond733) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond733) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond733) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond733) CFA_SP SP+0
        CFI (cfiCond733) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond734 Using cfiCommon0
        CFI (cfiCond734) NoFunction
        CFI (cfiCond734) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond734) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond734) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond734) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond734) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond734) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond734) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond734) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond734) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond734) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond734) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond734) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond734) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond734) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond734) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond734) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond734) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond734) CFA_SP SP+0
        CFI (cfiCond734) CFA_XSP16 add(XSP16, 65)
        CFI Block cfiCond735 Using cfiCommon0
        CFI (cfiCond735) NoFunction
        CFI (cfiCond735) Conditional ??CrossCallReturnLabel_122
        CFI (cfiCond735) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond735) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond735) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond735) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond735) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond735) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond735) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond735) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond735) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond735) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond735) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond735) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond735) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond735) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond735) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond735) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond735) CFA_SP SP+0
        CFI (cfiCond735) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker736 Using cfiCommon1
        CFI (cfiPicker736) NoFunction
        CFI (cfiPicker736) Picker
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LJMP    ?Subroutine90 & 0xFFFF
        CFI EndBlock cfiCond732
        CFI EndBlock cfiCond733
        CFI EndBlock cfiCond734
        CFI EndBlock cfiCond735
        CFI EndBlock cfiPicker736
// 3914 
// 3915 /******************************************************************************
// 3916  * @fn          APSME_TCLinkKeySync
// 3917  *
// 3918  * @brief       Sync Trust Center LINK key data.
// 3919  *
// 3920  * @param       srcAddr - [in] srcAddr
// 3921  * @param       si      - [in, out] SSP_Info_t
// 3922  *
// 3923  * @return      ZStatus_t
// 3924  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3925 ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
APSME_TCLinkKeySync:
        CFI Block cfiBlock737 Using cfiCommon0
        CFI Function APSME_TCLinkKeySync
// 3926 {
        FUNCALL APSME_TCLinkKeySync, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, APSME_IsDefaultTCLK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 52)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
// 3927   ZStatus_t status = ZSecNoKey;
// 3928   uint8 i;
// 3929   APSME_TCLinkKey_t tcLinkKey;       
// 3930   uint32 *tclkRxFrmCntr;
// 3931   
// 3932   // Look up the IEEE address of the trust center if it's available
// 3933   if ( AddrMgrExtAddrValid( si->extAddr ) == false )
        LCALL   ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_106:
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AddrMgrExtAddrValid?relay
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeySync_0
// 3934   {
// 3935     APSME_LookupExtAddr( srcAddr, si->extAddr );
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??APSME_LookupExtAddr?relay
// 3936   }
// 3937   
// 3938   // Look up the TC link key associated with the device
// 3939   // or the default TC link key (extAddr is all FFs), whichever is found
// 3940   for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 3941   {
// 3942     // Read entry i of the TC link key table from NV
// 3943     osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0, 
// 3944                  sizeof(APSME_TCLinkKey_t), &tcLinkKey );
??APSME_TCLinkKeySync_0:
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 54)
        MOV     ?V0 + 2,#0x20
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 56)
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_120:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 52)
// 3945     
// 3946     if( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) || 
// 3947         APSME_IsDefaultTCLK(tcLinkKey.extAddr))
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AddrMgrExtAddrEqual?relay
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeySync_1
        ; Setup parameters for call to function APSME_IsDefaultTCLK
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_IsDefaultTCLK?relay
        MOV     A,R1
        JZ      ??APSME_TCLinkKeySync_2
// 3948     {
// 3949       tclkRxFrmCntr = &TCLinkKeyFrmCntr[i].rxFrmCntr;
// 3950 
// 3951       // verify that the incoming frame counter is valid
// 3952       if ( si->frmCntr >= *tclkRxFrmCntr )
??APSME_TCLinkKeySync_1:
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_309:
        LCALL   ?L_MOV_X
        MOV     DPTR,#(TCLinkKeyFrmCntr + 4)
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?UL_GT
        JC      ??APSME_TCLinkKeySync_3
// 3953       {
// 3954         // set the keyNvId to use
// 3955         si->keyNvId = (ZCD_NV_TCLK_TABLE_START + i);
        LCALL   ?Subroutine36 & 0xFFFF
// 3956         
// 3957         // update the rx frame counter
// 3958         *tclkRxFrmCntr = si->frmCntr + 1;
??CrossCallReturnLabel_56:
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 4
        LCALL   ?L_ADD_X
        MOV     DPTR,#(TCLinkKeyFrmCntr + 4)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 3959         
// 3960         status = ZSuccess;
        MOV     R1,#0x0
        SJMP    ??APSME_TCLinkKeySync_4
// 3961       }
// 3962       else
// 3963       {
// 3964         status = ZSecOldFrmCount;
??APSME_TCLinkKeySync_3:
        MOV     R1,#-0x5e
// 3965       }
// 3966       
// 3967       return status;
        SJMP    ??APSME_TCLinkKeySync_4
// 3968     }
// 3969   }
// 3970   
// 3971   // clear copy of key in RAM 
// 3972   osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
??APSME_TCLinkKeySync_2:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 3973   
// 3974   return status;
        MOV     R1,#-0x5f
??APSME_TCLinkKeySync_4:
        MOV     A,#0x20
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock737
        REQUIRE ?Subroutine97
        ; // Fall through to label ?Subroutine97
// 3975 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine97:
        CFI Block cfiBlock738 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock738

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond739 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_309
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 52)
        CFI Block cfiCond740 Using cfiCommon0
        CFI (cfiCond740) NoFunction
        CFI (cfiCond740) Conditional ??CrossCallReturnLabel_310
        CFI (cfiCond740) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond740) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond740) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond740) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond740) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond740) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond740) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond740) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond740) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond740) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond740) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond740) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond740) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond740) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond740) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond740) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond740) CFA_SP SP+0
        CFI (cfiCond740) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker741 Using cfiCommon1
        CFI (cfiPicker741) NoFunction
        CFI (cfiPicker741) Picker
        MOV     A,?V0 + 0
        ADD     A,#0x12
        CFI EndBlock cfiCond739
        CFI EndBlock cfiCond740
        CFI EndBlock cfiPicker741
        REQUIRE ??Subroutine138_0
        ; // Fall through to label ??Subroutine138_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine138_0:
        CFI Block cfiCond742 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_307
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond743 Using cfiCommon0
        CFI (cfiCond743) NoFunction
        CFI (cfiCond743) Conditional ??CrossCallReturnLabel_308
        CFI (cfiCond743) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond743) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond743) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond743) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond743) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond743) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond743) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond743) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond743) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond743) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond743) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond743) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond743) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond743) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond743) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond743) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond743) CFA_SP SP+0
        CFI (cfiCond743) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond744 Using cfiCommon0
        CFI (cfiCond744) NoFunction
        CFI (cfiCond744) Conditional ??CrossCallReturnLabel_309
        CFI (cfiCond744) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond744) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond744) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond744) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond744) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond744) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond744) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond744) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond744) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond744) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond744) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond744) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond744) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond744) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond744) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond744) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond744) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond744) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond744) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond744) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond744) CFA_SP SP+0
        CFI (cfiCond744) CFA_XSP16 add(XSP16, 52)
        CFI Block cfiCond745 Using cfiCommon0
        CFI (cfiCond745) NoFunction
        CFI (cfiCond745) Conditional ??CrossCallReturnLabel_310
        CFI (cfiCond745) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond745) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond745) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond745) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond745) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond745) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond745) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond745) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond745) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond745) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond745) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond745) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond745) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond745) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond745) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond745) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond745) CFA_SP SP+0
        CFI (cfiCond745) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker746 Using cfiCommon1
        CFI (cfiPicker746) NoFunction
        CFI (cfiPicker746) Picker
        MOV     DPL,A
        MOV     A,?V0 + 1
        CFI EndBlock cfiCond742
        CFI EndBlock cfiCond743
        CFI EndBlock cfiCond744
        CFI EndBlock cfiCond745
        CFI EndBlock cfiPicker746
        REQUIRE ??Subroutine139_0
        ; // Fall through to label ??Subroutine139_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine139_0:
        CFI Block cfiCond747 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_305
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond748 Using cfiCommon0
        CFI (cfiCond748) NoFunction
        CFI (cfiCond748) Conditional ??CrossCallReturnLabel_306
        CFI (cfiCond748) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond748) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond748) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond748) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond748) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond748) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond748) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond748) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond748) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond748) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond748) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond748) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond748) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond748) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond748) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond748) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond748) CFA_SP SP+0
        CFI (cfiCond748) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond749 Using cfiCommon0
        CFI (cfiCond749) NoFunction
        CFI (cfiCond749) Conditional ??CrossCallReturnLabel_307
        CFI (cfiCond749) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond749) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond749) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond749) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond749) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond749) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond749) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond749) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond749) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond749) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond749) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond749) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond749) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond749) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond749) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond749) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond749) CFA_SP SP+0
        CFI (cfiCond749) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond750 Using cfiCommon0
        CFI (cfiCond750) NoFunction
        CFI (cfiCond750) Conditional ??CrossCallReturnLabel_308
        CFI (cfiCond750) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond750) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond750) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond750) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond750) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond750) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond750) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond750) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond750) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond750) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond750) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond750) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond750) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond750) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond750) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond750) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond750) CFA_SP SP+0
        CFI (cfiCond750) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond751 Using cfiCommon0
        CFI (cfiCond751) NoFunction
        CFI (cfiCond751) Conditional ??CrossCallReturnLabel_309
        CFI (cfiCond751) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond751) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond751) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond751) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond751) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond751) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond751) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond751) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond751) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond751) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond751) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond751) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond751) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond751) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond751) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond751) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond751) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond751) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond751) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond751) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond751) CFA_SP SP+0
        CFI (cfiCond751) CFA_XSP16 add(XSP16, 52)
        CFI Block cfiCond752 Using cfiCommon0
        CFI (cfiCond752) NoFunction
        CFI (cfiCond752) Conditional ??CrossCallReturnLabel_310
        CFI (cfiCond752) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond752) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond752) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond752) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond752) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond752) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond752) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond752) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond752) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond752) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond752) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond752) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond752) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond752) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond752) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond752) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond752) CFA_SP SP+0
        CFI (cfiCond752) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker753 Using cfiCommon1
        CFI (cfiPicker753) NoFunction
        CFI (cfiPicker753) Picker
        LCALL   ??Subroutine140_0 & 0xFFFF
??CrossCallReturnLabel_316:
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond747
        CFI EndBlock cfiCond748
        CFI EndBlock cfiCond749
        CFI EndBlock cfiCond750
        CFI EndBlock cfiCond751
        CFI EndBlock cfiCond752
        CFI EndBlock cfiPicker753
// 3976 
// 3977 /******************************************************************************
// 3978  * @fn          APSME_TCLinkKeyLoad
// 3979  *
// 3980  * @brief       Load Trust Center LINK key data.
// 3981  *
// 3982  * @param       dstAddr - [in] dstAddr
// 3983  * @param       si      - [in, out] SSP_Info_t
// 3984  *
// 3985  * @return      ZStatus_t
// 3986  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3987 ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
APSME_TCLinkKeyLoad:
        CFI Block cfiBlock754 Using cfiCommon0
        CFI Function APSME_TCLinkKeyLoad
// 3988 {
        FUNCALL APSME_TCLinkKeyLoad, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, APSME_IsDefaultTCLK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrEntryRelease
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 45
        MOV     A,#-0x2d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
// 3989   uint8              i;
// 3990   APSME_TCLinkKey_t  tcLinkKey;
// 3991   AddrMgrEntry_t     addrEntry;  
// 3992   uint32 *tclkTxFrmCntr;
// 3993   
// 3994   // Look up the ami of the srcAddr if available
// 3995   addrEntry.user    = ADDRMGR_USER_DEFAULT;
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 3996   addrEntry.nwkAddr = dstAddr;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
// 3997 
// 3998   APSME_LookupExtAddr( dstAddr, si->extAddr );
??CrossCallReturnLabel_29:
        LCALL   ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_107:
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??APSME_LookupExtAddr?relay
// 3999 
// 4000   if ( AddrMgrExtAddrValid( si->extAddr ) == TRUE )
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AddrMgrExtAddrValid?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??APSME_TCLinkKeyLoad_0
// 4001   {
// 4002     // Look up the TC link key associated with the device
// 4003     // or the master TC link key (ami = 0xFFFF), whichever is found
// 4004     for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 4005     {
// 4006       // Read entry i of the TC link key table from NV
// 4007       osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0, 
// 4008                    sizeof(APSME_TCLinkKey_t), &tcLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 63)
        MOV     ?V0 + 2,#0x20
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 65)
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_121:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 61)
// 4009       
// 4010       if( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) || 
// 4011          APSME_IsDefaultTCLK(tcLinkKey.extAddr))
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AddrMgrExtAddrEqual?relay
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeyLoad_1
        ; Setup parameters for call to function APSME_IsDefaultTCLK
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_IsDefaultTCLK?relay
        MOV     A,R1
        JZ      ??APSME_TCLinkKeyLoad_0
// 4012       {
// 4013         tclkTxFrmCntr = &TCLinkKeyFrmCntr[i].txFrmCntr;
// 4014         
// 4015         // set the keyNvId to use
// 4016         si->keyNvId = (ZCD_NV_TCLK_TABLE_START + i);
??APSME_TCLinkKeyLoad_1:
        LCALL   ?Subroutine36 & 0xFFFF
// 4017         
// 4018         // update link key related fields
// 4019         si->keyID   = SEC_KEYID_LINK;
??CrossCallReturnLabel_57:
        MOV     A,?V0 + 0
        ADD     A,#0xe
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_312:
        CLR     A
        MOVX    @DPTR,A
// 4020         si->frmCntr = *tclkTxFrmCntr;
        MOV     DPTR,#TCLinkKeyFrmCntr
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_310:
        LCALL   ?L_MOV_TO_X
// 4021       
// 4022         // update outgoing frame counter
// 4023         (*tclkTxFrmCntr)++;
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#TCLinkKeyFrmCntr
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
// 4024         
// 4025 #if defined ( NV_RESTORE )
// 4026         // write periodically to NV
// 4027         if ( !(*tclkTxFrmCntr % MAX_TCLK_FRAMECOUNTER_CHANGES) )
// 4028         {
// 4029           // set the flag to write key to NV
// 4030           TCLinkKeyFrmCntr[i].pendingFlag = TRUE;
// 4031           
// 4032           // Notify the ZDApp that the frame counter has changed.
// 4033           osal_set_event( ZDAppTaskID, ZDO_TCLK_FRAMECOUNTER_CHANGE );
// 4034         }        
// 4035 #endif
// 4036         
// 4037         return ZSuccess;
        MOV     R1,#0x0
        SJMP    ??APSME_TCLinkKeyLoad_2
// 4038       }
// 4039     }
// 4040   }
// 4041     
// 4042   // If no TC link key found, remove the device from the address manager
// 4043   if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
??APSME_TCLinkKeyLoad_0:
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryLookupNwk?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??APSME_TCLinkKeyLoad_3
// 4044   {
// 4045     AddrMgrEntryRelease( &addrEntry );
        ; Setup parameters for call to function AddrMgrEntryRelease
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryRelease?relay
// 4046   }
// 4047   
// 4048     // clear copy of key in RAM 
// 4049   osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
??APSME_TCLinkKeyLoad_3:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 4050 
// 4051   return ZSecNoKey;
        MOV     R1,#-0x5f
??APSME_TCLinkKeyLoad_2:
        MOV     A,#0x2d
        LJMP    ??Subroutine133_0 & 0xFFFF
        CFI EndBlock cfiBlock754
// 4052 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine76:
        CFI Block cfiCond755 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_312
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond756 Using cfiCommon0
        CFI (cfiCond756) NoFunction
        CFI (cfiCond756) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_56
        CFI (cfiCond756) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond756) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond756) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond756) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond756) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond756) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond756) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond756) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond756) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond756) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond756) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond756) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond756) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond756) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond756) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond756) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond756) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond756) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond756) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond756) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond756) CFA_SP SP+0
        CFI (cfiCond756) CFA_XSP16 add(XSP16, 52)
        CFI Block cfiCond757 Using cfiCommon0
        CFI (cfiCond757) NoFunction
        CFI (cfiCond757) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_57
        CFI (cfiCond757) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond757) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond757) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond757) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond757) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond757) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond757) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond757) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond757) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond757) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond757) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond757) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond757) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond757) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond757) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond757) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond757) CFA_SP SP+0
        CFI (cfiCond757) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond758 Using cfiCommon0
        CFI (cfiCond758) NoFunction
        CFI (cfiCond758) Conditional ??CrossCallReturnLabel_313, ??CrossCallReturnLabel_6
        CFI (cfiCond758) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond758) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond758) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond758) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond758) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond758) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond758) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond758) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond758) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond758) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond758) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond758) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond758) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond758) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond758) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond758) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond758) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond758) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond758) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond758) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond758) CFA_SP SP+0
        CFI (cfiCond758) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond759 Using cfiCommon0
        CFI (cfiCond759) NoFunction
        CFI (cfiCond759) Conditional ??CrossCallReturnLabel_313, ??CrossCallReturnLabel_7
        CFI (cfiCond759) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond759) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond759) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond759) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond759) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond759) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond759) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond759) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond759) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond759) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond759) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond759) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond759) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond759) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond759) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond759) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond759) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond759) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond759) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond759) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond759) CFA_SP SP+0
        CFI (cfiCond759) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker760 Using cfiCommon1
        CFI (cfiPicker760) NoFunction
        CFI (cfiPicker760) Picker
        MOV     DPL,A
        MOV     A,?V0 + 1
        CFI EndBlock cfiCond755
        CFI EndBlock cfiCond756
        CFI EndBlock cfiCond757
        CFI EndBlock cfiCond758
        CFI EndBlock cfiCond759
        CFI EndBlock cfiPicker760
        REQUIRE ??Subroutine140_0
        ; // Fall through to label ??Subroutine140_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine140_0:
        CFI Block cfiCond761 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_315, ??CrossCallReturnLabel_235
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond762 Using cfiCommon0
        CFI (cfiCond762) NoFunction
        CFI (cfiCond762) Conditional ??CrossCallReturnLabel_315, ??CrossCallReturnLabel_236
        CFI (cfiCond762) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond762) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond762) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond762) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond762) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond762) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond762) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond762) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond762) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond762) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond762) CFA_SP SP+0
        CFI (cfiCond762) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond763 Using cfiCommon0
        CFI (cfiCond763) NoFunction
        CFI (cfiCond763) Conditional ??CrossCallReturnLabel_315, ??CrossCallReturnLabel_237
        CFI (cfiCond763) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond763) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond763) CFA_SP SP+-5
        CFI (cfiCond763) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond764 Using cfiCommon0
        CFI (cfiCond764) NoFunction
        CFI (cfiCond764) Conditional ??CrossCallReturnLabel_315, ??CrossCallReturnLabel_238
        CFI (cfiCond764) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond764) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond764) CFA_SP SP+-5
        CFI Block cfiCond765 Using cfiCommon0
        CFI (cfiCond765) NoFunction
        CFI (cfiCond765) Conditional ??CrossCallReturnLabel_315, ??CrossCallReturnLabel_233
        CFI (cfiCond765) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond765) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond765) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond765) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond765) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond765) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond765) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond765) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond765) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond765) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond765) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond765) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond765) CFA_SP SP+0
        CFI (cfiCond765) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond766 Using cfiCommon0
        CFI (cfiCond766) NoFunction
        CFI (cfiCond766) Conditional ??CrossCallReturnLabel_315, ??CrossCallReturnLabel_234
        CFI (cfiCond766) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond766) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond766) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond766) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond766) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond766) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond766) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond766) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond766) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond766) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond766) CFA_SP SP+0
        CFI (cfiCond766) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond767 Using cfiCommon0
        CFI (cfiCond767) NoFunction
        CFI (cfiCond767) Conditional ??CrossCallReturnLabel_311
        CFI (cfiCond767) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond767) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond767) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond767) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond767) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond767) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond767) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond767) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond767) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond767) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond767) CFA_SP SP+0
        CFI (cfiCond767) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond768 Using cfiCommon0
        CFI (cfiCond768) NoFunction
        CFI (cfiCond768) Conditional ??CrossCallReturnLabel_316, ??CrossCallReturnLabel_309
        CFI (cfiCond768) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond768) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond768) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond768) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond768) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond768) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond768) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond768) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond768) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond768) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond768) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond768) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond768) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond768) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond768) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond768) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond768) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond768) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond768) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond768) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond768) CFA_SP SP+0
        CFI (cfiCond768) CFA_XSP16 add(XSP16, 52)
        CFI Block cfiCond769 Using cfiCommon0
        CFI (cfiCond769) NoFunction
        CFI (cfiCond769) Conditional ??CrossCallReturnLabel_316, ??CrossCallReturnLabel_310
        CFI (cfiCond769) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond769) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond769) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond769) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond769) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond769) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond769) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond769) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond769) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond769) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond769) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond769) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond769) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond769) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond769) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond769) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond769) CFA_SP SP+0
        CFI (cfiCond769) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond770 Using cfiCommon0
        CFI (cfiCond770) NoFunction
        CFI (cfiCond770) Conditional ??CrossCallReturnLabel_316, ??CrossCallReturnLabel_307
        CFI (cfiCond770) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond770) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond770) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond770) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond770) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond770) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond770) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond770) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond770) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond770) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond770) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond770) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond770) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond770) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond770) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond770) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond770) CFA_SP SP+0
        CFI (cfiCond770) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond771 Using cfiCommon0
        CFI (cfiCond771) NoFunction
        CFI (cfiCond771) Conditional ??CrossCallReturnLabel_316, ??CrossCallReturnLabel_308
        CFI (cfiCond771) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond771) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond771) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond771) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond771) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond771) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond771) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond771) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond771) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond771) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond771) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond771) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond771) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond771) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond771) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond771) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond771) CFA_SP SP+0
        CFI (cfiCond771) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond772 Using cfiCommon0
        CFI (cfiCond772) NoFunction
        CFI (cfiCond772) Conditional ??CrossCallReturnLabel_316, ??CrossCallReturnLabel_305
        CFI (cfiCond772) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond772) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond772) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond772) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond772) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond772) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond772) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond772) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond772) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond772) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond772) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond772) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond772) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond772) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond772) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond772) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond772) CFA_SP SP+0
        CFI (cfiCond772) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond773 Using cfiCommon0
        CFI (cfiCond773) NoFunction
        CFI (cfiCond773) Conditional ??CrossCallReturnLabel_316, ??CrossCallReturnLabel_306
        CFI (cfiCond773) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond773) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond773) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond773) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond773) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond773) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond773) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond773) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond773) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond773) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond773) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond773) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond773) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond773) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond773) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond773) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond773) CFA_SP SP+0
        CFI (cfiCond773) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond774 Using cfiCommon0
        CFI (cfiCond774) NoFunction
        CFI (cfiCond774) Conditional ??CrossCallReturnLabel_312
        CFI (cfiCond774) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond774) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond774) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond774) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond774) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond774) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond774) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond774) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond774) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond774) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond774) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond774) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond774) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond774) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond774) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond774) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond774) CFA_SP SP+0
        CFI (cfiCond774) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond775 Using cfiCommon0
        CFI (cfiCond775) NoFunction
        CFI (cfiCond775) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_56
        CFI (cfiCond775) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond775) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond775) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond775) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond775) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond775) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond775) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond775) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond775) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond775) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond775) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond775) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond775) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond775) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond775) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond775) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond775) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond775) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond775) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond775) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond775) CFA_SP SP+0
        CFI (cfiCond775) CFA_XSP16 add(XSP16, 52)
        CFI Block cfiCond776 Using cfiCommon0
        CFI (cfiCond776) NoFunction
        CFI (cfiCond776) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_57
        CFI (cfiCond776) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond776) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond776) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond776) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond776) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond776) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond776) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond776) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond776) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond776) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond776) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond776) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond776) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond776) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond776) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond776) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond776) CFA_SP SP+0
        CFI (cfiCond776) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond777 Using cfiCommon0
        CFI (cfiCond777) NoFunction
        CFI (cfiCond777) Conditional ??CrossCallReturnLabel_313, ??CrossCallReturnLabel_6
        CFI (cfiCond777) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond777) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond777) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond777) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond777) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond777) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond777) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond777) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond777) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond777) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond777) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond777) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond777) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond777) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond777) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond777) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond777) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond777) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond777) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond777) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond777) CFA_SP SP+0
        CFI (cfiCond777) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond778 Using cfiCommon0
        CFI (cfiCond778) NoFunction
        CFI (cfiCond778) Conditional ??CrossCallReturnLabel_313, ??CrossCallReturnLabel_7
        CFI (cfiCond778) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond778) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond778) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond778) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond778) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond778) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond778) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond778) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond778) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond778) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond778) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond778) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond778) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond778) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond778) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond778) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond778) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond778) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond778) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond778) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond778) CFA_SP SP+0
        CFI (cfiCond778) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker779 Using cfiCommon1
        CFI (cfiPicker779) NoFunction
        CFI (cfiPicker779) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond761
        CFI EndBlock cfiCond762
        CFI EndBlock cfiCond763
        CFI EndBlock cfiCond764
        CFI EndBlock cfiCond765
        CFI EndBlock cfiCond766
        CFI EndBlock cfiCond767
        CFI EndBlock cfiCond768
        CFI EndBlock cfiCond769
        CFI EndBlock cfiCond770
        CFI EndBlock cfiCond771
        CFI EndBlock cfiCond772
        CFI EndBlock cfiCond773
        CFI EndBlock cfiCond774
        CFI EndBlock cfiCond775
        CFI EndBlock cfiCond776
        CFI EndBlock cfiCond777
        CFI EndBlock cfiCond778
        CFI EndBlock cfiPicker779

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine69:
        CFI Block cfiCond780 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_106
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 52)
        CFI Block cfiCond781 Using cfiCommon0
        CFI (cfiCond781) NoFunction
        CFI (cfiCond781) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond781) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond781) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond781) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond781) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond781) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond781) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond781) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond781) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond781) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond781) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond781) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond781) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond781) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond781) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond781) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond781) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond781) CFA_SP SP+0
        CFI (cfiCond781) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker782 Using cfiCommon1
        CFI (cfiPicker782) NoFunction
        CFI (cfiPicker782) Picker
        MOV     A,R4
        ADD     A,#0x6
        MOV     R6,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R7,A
        ; Setup parameters for call to function AddrMgrExtAddrValid
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,R6
        RET
        CFI EndBlock cfiCond780
        CFI EndBlock cfiCond781
        CFI EndBlock cfiPicker782

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond783 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 52)
        CFI Block cfiCond784 Using cfiCommon0
        CFI (cfiCond784) NoFunction
        CFI (cfiCond784) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond784) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond784) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond784) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond784) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond784) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond784) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond784) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond784) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond784) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond784) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond784) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond784) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond784) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond784) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond784) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond784) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond784) CFA_SP SP+0
        CFI (cfiCond784) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker785 Using cfiCommon1
        CFI (cfiPicker785) NoFunction
        CFI (cfiPicker785) Picker
        MOV     A,?V0 + 0
        ADD     A,#0xf
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_314:
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond783
        CFI EndBlock cfiCond784
        CFI EndBlock cfiPicker785
// 4053 
// 4054 /******************************************************************************
// 4055  * @fn          APSME_IsDefaultTCLK
// 4056  *
// 4057  * @brief       Return true or false based on the extended address.  If the 
// 4058  *              input ext address is all FFs, it means the trust center link
// 4059  *              assoiciated with the address is the default trust center link key
// 4060  *
// 4061  * @param       extAddr - [in] extended address
// 4062  *
// 4063  * @return      uint8 TRUE/FALSE
// 4064  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4065 uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
APSME_IsDefaultTCLK:
        CFI Block cfiBlock786 Using cfiCommon0
        CFI Function APSME_IsDefaultTCLK
// 4066 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 4067   uint8 i = 0;
        MOV     R4,#0x0
// 4068   
// 4069   if( extAddr == NULL )
        MOV     A,R2
        JNZ     ??APSME_IsDefaultTCLK_0
        MOV     A,R3
??APSME_IsDefaultTCLK_0:
        JNZ     ??APSME_IsDefaultTCLK_1
// 4070   {
// 4071     return FALSE;
??APSME_IsDefaultTCLK_2:
        MOV     R1,#0x0
        SJMP    ??APSME_IsDefaultTCLK_3
// 4072   }
// 4073   
// 4074   while( i++ < Z_EXTADDR_LEN )
// 4075   {
// 4076     if( *extAddr++ != 0xFF )
??APSME_IsDefaultTCLK_4:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??APSME_IsDefaultTCLK_2
// 4077     {
// 4078       return FALSE;
// 4079     }
// 4080   }
??APSME_IsDefaultTCLK_1:
        MOV     A,R4
        INC     R4
        CLR     C
        SUBB    A,#0x8
        JC      ??APSME_IsDefaultTCLK_4
// 4081   
// 4082   return TRUE;
        MOV     R1,#0x1
??APSME_IsDefaultTCLK_3:
        LJMP    ??Subroutine121_0 & 0xFFFF
        CFI EndBlock cfiBlock786
// 4083 }
// 4084 
// 4085 /******************************************************************************
// 4086  * @fn          ZDSecMgrNwkKeyInit
// 4087  *
// 4088  * @brief       Initialize the NV items for 
// 4089  *                  ZCD_NV_NWKKEY, 
// 4090  *                  ZCD_NV_NWK_ACTIVE_KEY_INFO and 
// 4091  *                  ZCD_NV_NWK_ALTERN_KEY_INFO 
// 4092  *               
// 4093  * @param       setDefault
// 4094  *
// 4095  * @return      none
// 4096  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4097 void ZDSecMgrNwkKeyInit(uint8 setDefault)
ZDSecMgrNwkKeyInit:
        CFI Block cfiBlock787 Using cfiCommon0
        CFI Function ZDSecMgrNwkKeyInit
// 4098 {
        FUNCALL ZDSecMgrNwkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 38
        MOV     A,#-0x26
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
// 4099   uint8 status;
// 4100   nwkKeyDesc nwkKey;
// 4101 
// 4102   // Initialize NV items for NWK key, this structure contains the frame counter
// 4103   // and is only used when NV_RESTORE is enabled
// 4104   nwkActiveKeyItems keyItems;  
// 4105     
// 4106   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 4107   
// 4108   status = osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
// 4109 
// 4110 #if defined ( NV_RESTORE )
// 4111   // reset the values of NV items if NV_RESTORE is not enabled
// 4112   if ((status == SUCCESS) && (setDefault == TRUE))
// 4113   {
// 4114     // clear NV data to default values
// 4115     osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
// 4116   }
// 4117 #else
// 4118   (void)setDefault;   // to eliminate compiler warning
// 4119   
// 4120   // reset the values of NV items if NV_RESTORE is not enabled
// 4121   if (status == SUCCESS)
        ; Setup parameters for call to function osal_nv_item_init
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_133:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JNZ     ??ZDSecMgrNwkKeyInit_0
// 4122   {
// 4123     osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   ??Subroutine108_0 & 0xFFFF
// 4124   }
??CrossCallReturnLabel_163:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
// 4125 #endif // defined (NV_RESTORE)    
// 4126 
// 4127   // Initialize NV items for NWK Active and Alternate keys. These items are used 
// 4128   // all the time, independently of NV_RESTORE being set or not
// 4129   osal_memset( &nwkKey, 0x00, sizeof(nwkKey) );
??ZDSecMgrNwkKeyInit_0:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine29 & 0xFFFF
// 4130 
// 4131   status = osal_nv_item_init( ZCD_NV_NWK_ACTIVE_KEY_INFO, sizeof(nwkKey), &nwkKey);
// 4132   
// 4133 #if defined ( NV_RESTORE )
// 4134   // reset the values of NV items if NV_RESTORE is not enabled
// 4135   if ((status == SUCCESS) && (setDefault == TRUE))
// 4136   {
// 4137     // clear NV data to default values
// 4138     osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
// 4139   }
// 4140 #else
// 4141   // reset the values of NV items if NV_RESTORE is not enabled
// 4142   if (status == SUCCESS)
??CrossCallReturnLabel_207:
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#0x3a
        MOV     R3,#0x0
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_134:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JNZ     ??ZDSecMgrNwkKeyInit_1
// 4143   {
// 4144     osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 0,#0x11
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3a
        MOV     R3,#0x0
        LCALL   ??Subroutine108_0 & 0xFFFF
// 4145   }
??CrossCallReturnLabel_164:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
// 4146 #endif // defined (NV_RESTORE)    
// 4147   
// 4148   status = osal_nv_item_init( ZCD_NV_NWK_ALTERN_KEY_INFO, sizeof(nwkKey), &nwkKey );
// 4149   
// 4150 #if defined ( NV_RESTORE )
// 4151   // reset the values of NV items if NV_RESTORE is not enabled
// 4152   if ((status == SUCCESS) && (setDefault == TRUE))
// 4153   {
// 4154     // clear NV data to default values
// 4155     osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
// 4156   }
// 4157 #else
// 4158   // reset the values of NV items if NV_RESTORE is not enabled
// 4159   if (status == SUCCESS)
??ZDSecMgrNwkKeyInit_1:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#0x3b
        MOV     R3,#0x0
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_135:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JNZ     ??ZDSecMgrNwkKeyInit_2
// 4160   {
// 4161     osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 0,#0x11
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3b
        MOV     R3,#0x0
        LCALL   ??Subroutine108_0 & 0xFFFF
// 4162   }
??CrossCallReturnLabel_165:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
// 4163 #endif // defined (NV_RESTORE)
// 4164 
// 4165 }
??ZDSecMgrNwkKeyInit_2:
        MOV     A,#0x26
        LJMP    ??Subroutine115_0 & 0xFFFF
        CFI EndBlock cfiBlock787

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond788 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_206
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond789 Using cfiCommon0
        CFI (cfiCond789) NoFunction
        CFI (cfiCond789) Conditional ??CrossCallReturnLabel_207
        CFI (cfiCond789) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond789) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond789) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond789) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond789) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond789) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond789) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond789) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond789) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond789) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond789) CFA_SP SP+0
        CFI (cfiCond789) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiPicker790 Using cfiCommon1
        CFI (cfiPicker790) NoFunction
        CFI (cfiPicker790) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        CFI EndBlock cfiCond788
        CFI EndBlock cfiCond789
        CFI EndBlock cfiPicker790
        ; Setup parameters for call to function APSME_LinkKeyNVIdGet
        ; Setup parameters for call to function osal_nv_item_init
        REQUIRE ?Subroutine88
        ; // Fall through to label ?Subroutine88

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine88:
        CFI Block cfiCond791 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond792 Using cfiCommon0
        CFI (cfiCond792) NoFunction
        CFI (cfiCond792) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_9
        CFI (cfiCond792) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond792) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond792) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond792) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond792) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond792) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond792) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond792) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond792) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond792) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond792) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond792) CFA_SP SP+0
        CFI (cfiCond792) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond793 Using cfiCommon0
        CFI (cfiCond793) NoFunction
        CFI (cfiCond793) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_215
        CFI (cfiCond793) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond793) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond793) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond793) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond793) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond793) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond793) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond793) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond793) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond793) CFA_SP SP+0
        CFI (cfiCond793) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond794 Using cfiCommon0
        CFI (cfiCond794) NoFunction
        CFI (cfiCond794) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_216
        CFI (cfiCond794) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond794) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond794) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond794) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond794) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond794) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond794) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond794) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond794) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond794) CFA_SP SP+0
        CFI (cfiCond794) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond795 Using cfiCommon0
        CFI (cfiCond795) NoFunction
        CFI (cfiCond795) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_217
        CFI (cfiCond795) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond795) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond795) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond795) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond795) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond795) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond795) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond795) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond795) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond795) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond795) CFA_SP SP+0
        CFI (cfiCond795) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond796 Using cfiCommon0
        CFI (cfiCond796) NoFunction
        CFI (cfiCond796) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_218
        CFI (cfiCond796) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond796) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond796) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond796) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond796) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond796) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond796) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond796) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond796) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond796) CFA_SP SP+0
        CFI (cfiCond796) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond797 Using cfiCommon0
        CFI (cfiCond797) NoFunction
        CFI (cfiCond797) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_219
        CFI (cfiCond797) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond797) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond797) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond797) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond797) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond797) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond797) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond797) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond797) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond797) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond797) CFA_SP SP+0
        CFI (cfiCond797) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond798 Using cfiCommon0
        CFI (cfiCond798) NoFunction
        CFI (cfiCond798) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_220
        CFI (cfiCond798) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond798) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond798) CFA_SP SP+-5
        CFI (cfiCond798) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond799 Using cfiCommon0
        CFI (cfiCond799) NoFunction
        CFI (cfiCond799) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_221
        CFI (cfiCond799) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond799) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond799) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond799) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond799) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond799) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond799) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond799) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond799) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond799) CFA_SP SP+0
        CFI (cfiCond799) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond800 Using cfiCommon0
        CFI (cfiCond800) NoFunction
        CFI (cfiCond800) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_222
        CFI (cfiCond800) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond800) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond800) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond800) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond800) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond800) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond800) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond800) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond800) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond800) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond800) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond800) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond800) CFA_SP SP+0
        CFI (cfiCond800) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond801 Using cfiCommon0
        CFI (cfiCond801) NoFunction
        CFI (cfiCond801) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_223
        CFI (cfiCond801) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond801) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond801) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond801) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond801) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond801) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond801) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond801) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond801) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond801) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond801) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond801) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond801) CFA_SP SP+0
        CFI (cfiCond801) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond802 Using cfiCommon0
        CFI (cfiCond802) NoFunction
        CFI (cfiCond802) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_224
        CFI (cfiCond802) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond802) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond802) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond802) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond802) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond802) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond802) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond802) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond802) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond802) CFA_SP SP+0
        CFI (cfiCond802) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond803 Using cfiCommon0
        CFI (cfiCond803) NoFunction
        CFI (cfiCond803) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_225
        CFI (cfiCond803) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond803) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond803) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond803) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond803) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond803) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond803) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond803) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond803) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond803) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond803) CFA_SP SP+0
        CFI (cfiCond803) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond804 Using cfiCommon0
        CFI (cfiCond804) NoFunction
        CFI (cfiCond804) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_226
        CFI (cfiCond804) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond804) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond804) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond804) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond804) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond804) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond804) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond804) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond804) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond804) CFA_SP SP+0
        CFI (cfiCond804) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond805 Using cfiCommon0
        CFI (cfiCond805) NoFunction
        CFI (cfiCond805) Conditional ??CrossCallReturnLabel_210, ??CrossCallReturnLabel_19
        CFI (cfiCond805) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond805) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond805) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond805) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond805) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond805) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond805) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond805) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond805) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond805) CFA_SP SP+0
        CFI (cfiCond805) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond806 Using cfiCommon0
        CFI (cfiCond806) NoFunction
        CFI (cfiCond806) Conditional ??CrossCallReturnLabel_210, ??CrossCallReturnLabel_20
        CFI (cfiCond806) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond806) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond806) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond806) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond806) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond806) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond806) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond806) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond806) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond806) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond806) CFA_SP SP+0
        CFI (cfiCond806) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond807 Using cfiCommon0
        CFI (cfiCond807) NoFunction
        CFI (cfiCond807) Conditional ??CrossCallReturnLabel_210, ??CrossCallReturnLabel_21
        CFI (cfiCond807) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond807) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond807) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond807) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond807) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond807) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond807) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond807) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond807) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond807) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond807) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond807) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond807) CFA_SP SP+0
        CFI (cfiCond807) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond808 Using cfiCommon0
        CFI (cfiCond808) NoFunction
        CFI (cfiCond808) Conditional ??CrossCallReturnLabel_213, ??CrossCallReturnLabel_203
        CFI (cfiCond808) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond808) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond808) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond808) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond808) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond808) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond808) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond808) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond808) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond808) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond808) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond808) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond808) CFA_SP SP+0
        CFI (cfiCond808) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond809 Using cfiCommon0
        CFI (cfiCond809) NoFunction
        CFI (cfiCond809) Conditional ??CrossCallReturnLabel_213, ??CrossCallReturnLabel_204
        CFI (cfiCond809) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond809) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond809) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond809) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond809) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond809) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond809) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond809) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond809) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond809) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond809) CFA_SP SP+0
        CFI (cfiCond809) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond810 Using cfiCommon0
        CFI (cfiCond810) NoFunction
        CFI (cfiCond810) Conditional ??CrossCallReturnLabel_214, ??CrossCallReturnLabel_81
        CFI (cfiCond810) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond810) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond810) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond810) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond810) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond810) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond810) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond810) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond810) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond810) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond810) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond810) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond810) CFA_SP SP+0
        CFI (cfiCond810) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond811 Using cfiCommon0
        CFI (cfiCond811) NoFunction
        CFI (cfiCond811) Conditional ??CrossCallReturnLabel_214, ??CrossCallReturnLabel_82
        CFI (cfiCond811) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond811) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond811) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond811) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond811) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond811) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond811) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond811) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond811) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond811) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond811) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond811) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond811) CFA_SP SP+0
        CFI (cfiCond811) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond812 Using cfiCommon0
        CFI (cfiCond812) NoFunction
        CFI (cfiCond812) Conditional ??CrossCallReturnLabel_206
        CFI (cfiCond812) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond812) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond812) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond812) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond812) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond812) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond812) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond812) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond812) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond812) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond812) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond812) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond812) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond812) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond812) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond812) CFA_SP SP+0
        CFI (cfiCond812) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond813 Using cfiCommon0
        CFI (cfiCond813) NoFunction
        CFI (cfiCond813) Conditional ??CrossCallReturnLabel_207
        CFI (cfiCond813) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond813) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond813) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond813) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond813) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond813) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond813) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond813) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond813) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond813) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond813) CFA_SP SP+0
        CFI (cfiCond813) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond814 Using cfiCommon0
        CFI (cfiCond814) NoFunction
        CFI (cfiCond814) Conditional ??CrossCallReturnLabel_212, ??CrossCallReturnLabel_49
        CFI (cfiCond814) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond814) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond814) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond814) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond814) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond814) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond814) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond814) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond814) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond814) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond814) CFA_SP SP+0
        CFI (cfiCond814) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond815 Using cfiCommon0
        CFI (cfiCond815) NoFunction
        CFI (cfiCond815) Conditional ??CrossCallReturnLabel_212, ??CrossCallReturnLabel_50
        CFI (cfiCond815) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond815) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond815) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond815) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond815) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond815) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond815) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond815) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond815) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond815) CFA_SP SP+0
        CFI (cfiCond815) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond816 Using cfiCommon0
        CFI (cfiCond816) NoFunction
        CFI (cfiCond816) Conditional ??CrossCallReturnLabel_211
        CFI (cfiCond816) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond816) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond816) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond816) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond816) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond816) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond816) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond816) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond816) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond816) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond816) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond816) CFA_SP SP+0
        CFI (cfiCond816) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker817 Using cfiCommon1
        CFI (cfiPicker817) NoFunction
        CFI (cfiPicker817) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond791
        CFI EndBlock cfiCond792
        CFI EndBlock cfiCond793
        CFI EndBlock cfiCond794
        CFI EndBlock cfiCond795
        CFI EndBlock cfiCond796
        CFI EndBlock cfiCond797
        CFI EndBlock cfiCond798
        CFI EndBlock cfiCond799
        CFI EndBlock cfiCond800
        CFI EndBlock cfiCond801
        CFI EndBlock cfiCond802
        CFI EndBlock cfiCond803
        CFI EndBlock cfiCond804
        CFI EndBlock cfiCond805
        CFI EndBlock cfiCond806
        CFI EndBlock cfiCond807
        CFI EndBlock cfiCond808
        CFI EndBlock cfiCond809
        CFI EndBlock cfiCond810
        CFI EndBlock cfiCond811
        CFI EndBlock cfiCond812
        CFI EndBlock cfiCond813
        CFI EndBlock cfiCond814
        CFI EndBlock cfiCond815
        CFI EndBlock cfiCond816
        CFI EndBlock cfiPicker817
// 4166 
// 4167 /*********************************************************************
// 4168  * @fn          ZDSecMgrReadKeyFromNv
// 4169  *
// 4170  * @brief       Looks for a specific key in NV based on Index value
// 4171  *
// 4172  * @param   keyNvId - Index of key to look in NV
// 4173  *                    valid values are:
// 4174  *                    ZCD_NV_NWK_ACTIVE_KEY_INFO    
// 4175  *                    ZCD_NV_NWK_ALTERN_KEY_INFO 
// 4176  *                    ZCD_NV_TCLK_TABLE_START + <offset_in_table>
// 4177  *                    ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
// 4178  *                    ZCD_NV_MASTER_KEY_DATA_START + <offset_in_table>
// 4179  *                    ZCD_NV_PRECFGKEY
// 4180  *
// 4181  * @param  *keyinfo - Data is read into this buffer.
// 4182  *
// 4183  * @return  SUCCESS if NV data was copied to the keyinfo parameter .
// 4184  *          Otherwise, NV_OPER_FAILED for failure.
// 4185  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4186 ZStatus_t ZDSecMgrReadKeyFromNv(uint16 keyNvId, void *keyinfo)
ZDSecMgrReadKeyFromNv:
        CFI Block cfiBlock818 Using cfiCommon0
        CFI Function ZDSecMgrReadKeyFromNv
// 4187 {
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 4188   if ((keyNvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
// 4189       (keyNvId == ZCD_NV_NWK_ALTERN_KEY_INFO))
        MOV     A,#0x3a
        XRL     A,R2
        JNZ     ??ZDSecMgrReadKeyFromNv_0
        MOV     A,R3
??ZDSecMgrReadKeyFromNv_0:
        JZ      ??ZDSecMgrReadKeyFromNv_1
        MOV     A,#0x3b
        XRL     A,R2
        JNZ     ??ZDSecMgrReadKeyFromNv_2
        MOV     A,R3
??ZDSecMgrReadKeyFromNv_2:
        JNZ     ??ZDSecMgrReadKeyFromNv_3
// 4190   {
// 4191     // get NWK active or alternate key from NV
// 4192     return (osal_nv_read(keyNvId, 
// 4193                          osal_offsetof(nwkKeyDesc, key), 
// 4194                          SEC_KEY_LEN, 
// 4195                          keyinfo));
??ZDSecMgrReadKeyFromNv_1:
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x1
??ZDSecMgrReadKeyFromNv_4:
        MOV     R5,#0x0
// 4196   }
??ZDSecMgrReadKeyFromNv_5:
        LCALL   ?Subroutine90 & 0xFFFF
??CrossCallReturnLabel_125:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ??ZDSecMgrReadKeyFromNv_6 & 0xFFFF
// 4197   else if ((keyNvId >= ZCD_NV_TCLK_TABLE_START) &&
// 4198            (keyNvId < (ZCD_NV_TCLK_TABLE_START + ZDSECMGR_TC_DEVICE_MAX)))
??ZDSecMgrReadKeyFromNv_3:
        CLR     C
        MOV     A,R2
        SUBB    A,#0x1
        MOV     A,R3
        SUBB    A,#0x1
        JC      ??ZDSecMgrReadKeyFromNv_7
        CLR     C
        MOV     A,R2
        SUBB    A,#0x2
        MOV     A,R3
        SUBB    A,#0x1
        JNC     ??ZDSecMgrReadKeyFromNv_7
// 4199   {
// 4200     // Read entry keyNvId of the TC link key table from NV. keyNvId should be
// 4201     // ZCD_NV_TCLK_TABLE_START + <offset_in_table>
// 4202     return (osal_nv_read(keyNvId, 
// 4203                          osal_offsetof(APSME_TCLinkKey_t, key), 
// 4204                          SEC_KEY_LEN, 
// 4205                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x8
        SJMP    ??ZDSecMgrReadKeyFromNv_4
        CFI CFA_XSP16 add(XSP16, 10)
// 4206   }
// 4207   else if ((keyNvId >= ZCD_NV_APS_LINK_KEY_DATA_START) &&
// 4208            (keyNvId < (ZCD_NV_APS_LINK_KEY_DATA_START + ZDSECMGR_ENTRY_MAX)))
??ZDSecMgrReadKeyFromNv_7:
        CLR     C
        MOV     A,R2
        SUBB    A,#0x1
        MOV     A,R3
        SUBB    A,#0x2
        JC      ??ZDSecMgrReadKeyFromNv_8
        CLR     C
        MOV     A,R2
        SUBB    A,#0x4
        MOV     A,R3
        SUBB    A,#0x2
        JNC     ??ZDSecMgrReadKeyFromNv_8
// 4209   {
// 4210     // Read entry keyNvId of the APS link key table from NV. keyNvId should be
// 4211     // ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
// 4212     return (osal_nv_read(keyNvId, 
// 4213                          osal_offsetof(APSME_LinkKeyData_t, key), 
// 4214                          SEC_KEY_LEN, 
// 4215                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
??ZDSecMgrReadKeyFromNv_9:
        SJMP    ??ZDSecMgrReadKeyFromNv_5
        CFI CFA_XSP16 add(XSP16, 10)
// 4216   }
// 4217   else if ((keyNvId >= ZCD_NV_MASTER_KEY_DATA_START) &&
// 4218            (keyNvId < (ZCD_NV_MASTER_KEY_DATA_START + ZDSECMGR_MASTERKEY_MAX)))
??ZDSecMgrReadKeyFromNv_8:
        CLR     C
        MOV     A,R2
        SUBB    A,#0x1
        MOV     A,R3
        SUBB    A,#0x3
        JC      ??ZDSecMgrReadKeyFromNv_10
        CLR     C
        MOV     A,R2
        SUBB    A,#0x4
        MOV     A,R3
        SUBB    A,#0x3
        JNC     ??ZDSecMgrReadKeyFromNv_10
// 4219   {
// 4220     // Read entry keyNvId of the MASTER key table from NV. keyNvId should be
// 4221     // ZCD_NV_MASTER_KEY_DATA_START + <offset_in_table>
// 4222     return (osal_nv_read(keyNvId, 
// 4223                          osal_offsetof(ZDSecMgrMasterKeyData_t, key), 
// 4224                          SEC_KEY_LEN, 
// 4225                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x2
        LJMP    ??ZDSecMgrReadKeyFromNv_4 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 10)
// 4226   }
// 4227   else if (keyNvId == ZCD_NV_PRECFGKEY)
??ZDSecMgrReadKeyFromNv_10:
        MOV     A,#0x62
        XRL     A,R2
        JNZ     ??ZDSecMgrReadKeyFromNv_11
        MOV     A,R3
??ZDSecMgrReadKeyFromNv_11:
        JNZ     ??ZDSecMgrReadKeyFromNv_12
// 4228   {
// 4229     // Read entry keyNvId of the Preconfig key from NV. 
// 4230     return (osal_nv_read(keyNvId, 
// 4231                          0, 
// 4232                          SEC_KEY_LEN, 
// 4233                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x62
        MOV     R3,#0x0
        SJMP    ??ZDSecMgrReadKeyFromNv_9
        CFI CFA_XSP16 add(XSP16, 10)
// 4234   }
// 4235   
// 4236   return NV_OPER_FAILED;
??ZDSecMgrReadKeyFromNv_12:
        MOV     R1,#0xa
??ZDSecMgrReadKeyFromNv_6:
        LJMP    ??Subroutine116_0 & 0xFFFF
        CFI EndBlock cfiBlock818
// 4237 }
// 4238 
// 4239 /******************************************************************************
// 4240  * @fn          ZDSecMgrApsLinkKeyInit
// 4241  *
// 4242  * @brief       Initialize the NV table for Application link keys
// 4243  *           
// 4244  * @param       none
// 4245  *
// 4246  * @return      none
// 4247  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4248 void ZDSecMgrApsLinkKeyInit(void)
ZDSecMgrApsLinkKeyInit:
        CFI Block cfiBlock819 Using cfiCommon0
        CFI Function ZDSecMgrApsLinkKeyInit
// 4249 {
        FUNCALL ZDSecMgrApsLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrApsLinkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrApsLinkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 24
        MOV     A,#-0x18
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
// 4250   APSME_LinkKeyData_t pApsLinkKey;
// 4251   uint8 i;
// 4252   uint8 status;
// 4253   
// 4254   // Initialize all NV items for APS link key, if not exist already.
// 4255   osal_memset( &pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 4256   
// 4257   for( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV     ?V0 + 2,#0x0
// 4258   {
// 4259     status = osal_nv_item_init( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 
// 4260                                sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
// 4261     
// 4262 #if defined ( NV_RESTORE )
// 4263     (void)status;   // to eliminate compiler warning
// 4264 #else
// 4265     // reset the values of NV items if NV_RESTORE is not enabled
// 4266     if (status == SUCCESS)
??ZDSecMgrApsLinkKeyInit_0:
        MOV     ?V0 + 0,?V0 + 2
        MOV     A,#0x1
        ADD     A,?V0 + 0
        MOV     R6,A
        MOV     A,#0x2
        LCALL   ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_211:
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R4,#0x18
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_131:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,R1
        JNZ     ??ZDSecMgrApsLinkKeyInit_1
// 4267     {
// 4268       osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0, 
// 4269                     sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     ?V0 + 0,#0x18
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        LCALL   ?Subroutine24 & 0xFFFF
// 4270       
// 4271     }
// 4272 #endif // defined (NV_RESTORE)
// 4273   }
??CrossCallReturnLabel_153:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
??ZDSecMgrApsLinkKeyInit_1:
        INC     ?V0 + 2
        MOV     A,R6
        CLR     C
        SUBB    A,#0x3
        JC      ??ZDSecMgrApsLinkKeyInit_0
// 4274 }
        MOV     A,#0x18
        CFI EndBlock cfiBlock819
        REQUIRE ?Subroutine96
        ; // Fall through to label ?Subroutine96

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine96:
        CFI Block cfiBlock820 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock820
        REQUIRE ??Subroutine141_0
        ; // Fall through to label ??Subroutine141_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine141_0:
        CFI Block cfiBlock821 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock821

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine75:
        CFI Block cfiCond822 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_212, ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond823 Using cfiCommon0
        CFI (cfiCond823) NoFunction
        CFI (cfiCond823) Conditional ??CrossCallReturnLabel_212, ??CrossCallReturnLabel_50
        CFI (cfiCond823) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond823) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond823) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond823) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond823) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond823) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond823) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond823) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond823) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond823) CFA_SP SP+0
        CFI (cfiCond823) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond824 Using cfiCommon0
        CFI (cfiCond824) NoFunction
        CFI (cfiCond824) Conditional ??CrossCallReturnLabel_211
        CFI (cfiCond824) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond824) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond824) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond824) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond824) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond824) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond824) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond824) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond824) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond824) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond824) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond824) CFA_SP SP+0
        CFI (cfiCond824) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker825 Using cfiCommon1
        CFI (cfiPicker825) NoFunction
        CFI (cfiPicker825) Picker
        ADDC    A,#0x0
        MOV     R7,A
        ; Setup parameters for call to function APSME_LookupNwkAddr
        ; Setup parameters for call to function APSME_LookupNwkAddr
        ; Setup parameters for call to function osal_nv_item_init
        LJMP    ?Subroutine88 & 0xFFFF
        CFI EndBlock cfiCond822
        CFI EndBlock cfiCond823
        CFI EndBlock cfiCond824
        CFI EndBlock cfiPicker825
// 4275 
// 4276 /******************************************************************************
// 4277  * @fn          ZDSecMgrInitNVKeyTables
// 4278  *
// 4279  * @brief       Initialize the NV table for All keys: NWK, Master, TCLK and APS
// 4280  *           
// 4281  * @param       setDefault - TRUE to set default values 
// 4282  *
// 4283  * @return      none
// 4284  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4285 void ZDSecMgrInitNVKeyTables(uint8 setDefault)
ZDSecMgrInitNVKeyTables:
        CFI Block cfiBlock826 Using cfiCommon0
        CFI Function ZDSecMgrInitNVKeyTables
// 4286 {
        FUNCALL ZDSecMgrInitNVKeyTables, ZDSecMgrNwkKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNVKeyTables, ZDSecMgrMasterKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNVKeyTables, ZDSecMgrApsLinkKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNVKeyTables, APSME_TCLinkKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 4287   ZDSecMgrNwkKeyInit(setDefault);
        ; Setup parameters for call to function ZDSecMgrNwkKeyInit
        LCALL   ??ZDSecMgrNwkKeyInit?relay
// 4288   ZDSecMgrMasterKeyInit();
        ; Setup parameters for call to function ZDSecMgrMasterKeyInit
        LCALL   ??ZDSecMgrMasterKeyInit?relay
// 4289   ZDSecMgrApsLinkKeyInit();
        ; Setup parameters for call to function ZDSecMgrApsLinkKeyInit
        LCALL   ??ZDSecMgrApsLinkKeyInit?relay
// 4290   APSME_TCLinkKeyInit(setDefault);
        ; Setup parameters for call to function APSME_TCLinkKeyInit
        MOV     A,R6
        MOV     R1,A
        LCALL   ??APSME_TCLinkKeyInit?relay
// 4291 }
        LJMP    ??Subroutine124_0 & 0xFFFF
        CFI EndBlock cfiBlock826
// 4292 
// 4293 /******************************************************************************
// 4294  * @fn          ZDSecMgrSaveApsLinkKey
// 4295  *
// 4296  * @brief       Save APS Link Key to NV. It will loop through all the keys  
// 4297  *              to see which one to save.
// 4298  *           
// 4299  * @param       none
// 4300  *
// 4301  * @return      none
// 4302  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4303 void ZDSecMgrSaveApsLinkKey(void)
ZDSecMgrSaveApsLinkKey:
        CFI Block cfiBlock827 Using cfiCommon0
        CFI Function ZDSecMgrSaveApsLinkKey
// 4304 {
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
// 4305   APSME_LinkKeyData_t *pKeyData = NULL;
// 4306   int i;
// 4307   
// 4308   pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        LCALL   ?Subroutine63 & 0xFFFF
// 4309   
// 4310   if (pKeyData != NULL)
??CrossCallReturnLabel_303:
        JNZ     ??ZDSecMgrSaveApsLinkKey_0
        MOV     A,R3
??ZDSecMgrSaveApsLinkKey_0:
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_47 & 0xFFFF
// 4311   {          
// 4312     // checks all pending flags to know which one to save
// 4313     for (i = 0; i < ZDSECMGR_ENTRY_MAX; i++)
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
// 4314     {
// 4315       if (ApsLinkKeyFrmCntr[i].pendingFlag == TRUE)
??ZDSecMgrSaveApsLinkKey_1:
        MOV     A,?V0 + 2
        MOV     B,#0x9
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x9
        MOV     A,?V0 + 3
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#(ApsLinkKeyFrmCntr & 0xff)
        MOV     ?V0 + 8,A
        MOV     A,R1
        ADDC    A,#((ApsLinkKeyFrmCntr >> 8) & 0xff)
        MOV     ?V0 + 9,A
        MOV     A,?V0 + 8
        ADD     A,#0x8
        MOV     ?V0 + 10,A
        MOV     A,?V0 + 9
        ADDC    A,#0x0
        MOV     ?V0 + 11,A
        MOV     DPL,?V0 + 10
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrSaveApsLinkKey_2
        MOV     A,#0x1
        ADD     A,?V0 + 2
        MOV     R6,A
        MOV     A,#0x2
        ADDC    A,?V0 + 3
        MOV     R7,A
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 4,#0x18
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ?Subroutine90 & 0xFFFF
??CrossCallReturnLabel_126:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R1
        JNZ     ??ZDSecMgrSaveApsLinkKey_2
// 4316       {
// 4317         // retrieve key from NV
// 4318         if (osal_nv_read(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0, 
// 4319                          sizeof(APSME_LinkKeyData_t), pKeyData) == SUCCESS)
// 4320         {                
// 4321           pKeyData->txFrmCntr = ApsLinkKeyFrmCntr[i].txFrmCntr;
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 0
        ADD     A,#0x10
        LCALL   ?Subroutine7 & 0xFFFF
// 4322           pKeyData->rxFrmCntr = ApsLinkKeyFrmCntr[i].rxFrmCntr;
??CrossCallReturnLabel_6:
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 0
        ADD     A,#0x14
        LCALL   ?Subroutine7 & 0xFFFF
// 4323           
// 4324           // Write the APS link key back to the NV
// 4325           osal_nv_write(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0, 
// 4326                         sizeof(APSME_LinkKeyData_t), pKeyData);
??CrossCallReturnLabel_7:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 4,#0x18
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_154:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 4327           
// 4328           // clear the pending write flag
// 4329           ApsLinkKeyFrmCntr[i].pendingFlag = FALSE;
        CLR     A
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        MOVX    @DPTR,A
// 4330         }
// 4331       }
// 4332     }
??ZDSecMgrSaveApsLinkKey_2:
        MOV     A,?V0 + 2
        ADD     A,#0x1
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,#0x3
        MOV     A,?V0 + 3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??ZDSecMgrSaveApsLinkKey_1 & 0xFFFF
// 4333     
// 4334     // clear copy of key in RAM 
// 4335     osal_memset( pKeyData, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        LCALL   ?Subroutine28 & 0xFFFF
// 4336     
// 4337     osal_mem_free(pKeyData);
// 4338   }  
// 4339 }
??CrossCallReturnLabel_47:
        LJMP    ?Subroutine97 & 0xFFFF
        CFI EndBlock cfiBlock827

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond828 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond829 Using cfiCommon0
        CFI (cfiCond829) NoFunction
        CFI (cfiCond829) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond829) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond829) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond829) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond829) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond829) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond829) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond829) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond829) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond829) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond829) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond829) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond829) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond829) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond829) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond829) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond829) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond829) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond829) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond829) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond829) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond829) CFA_SP SP+0
        CFI (cfiCond829) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker830 Using cfiCommon1
        CFI (cfiPicker830) NoFunction
        CFI (cfiPicker830) Picker
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_313:
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond828
        CFI EndBlock cfiCond829
        CFI EndBlock cfiPicker830
// 4340 
// 4341 /******************************************************************************
// 4342  * @fn          ZDSecMgrSaveTCLinkKey
// 4343  *
// 4344  * @brief       Save TC Link Key to NV. It will loop through all the keys 
// 4345  *              to see which one to save.
// 4346  *           
// 4347  * @param       none
// 4348  *
// 4349  * @return      none
// 4350  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4351 void ZDSecMgrSaveTCLinkKey(void)
ZDSecMgrSaveTCLinkKey:
        CFI Block cfiBlock831 Using cfiCommon0
        CFI Function ZDSecMgrSaveTCLinkKey
// 4352 {
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
// 4353   APSME_TCLinkKey_t *pKeyData = NULL;
// 4354   int i;
// 4355   
// 4356   pKeyData = (APSME_TCLinkKey_t *)osal_mem_alloc(sizeof(APSME_TCLinkKey_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x20
        LCALL   ??Subroutine137_0 & 0xFFFF
// 4357   
// 4358   if (pKeyData != NULL)
??CrossCallReturnLabel_304:
        JNZ     ??ZDSecMgrSaveTCLinkKey_0
        MOV     A,R3
??ZDSecMgrSaveTCLinkKey_0:
        JZ      ??CrossCallReturnLabel_48
// 4359   {          
// 4360     for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 4361     {
// 4362       if (TCLinkKeyFrmCntr[i].pendingFlag == TRUE)
        MOV     DPTR,#(TCLinkKeyFrmCntr + 8)
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrSaveTCLinkKey_1
// 4363       {
// 4364         if (osal_nv_read(ZCD_NV_TCLK_TABLE_START + i, 0, 
// 4365                          sizeof(APSME_TCLinkKey_t), pKeyData) == SUCCESS)
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 2,#0x20
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_122:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        JNZ     ??ZDSecMgrSaveTCLinkKey_1
// 4366         {                
// 4367           pKeyData->txFrmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
        MOV     DPTR,#TCLinkKeyFrmCntr
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 0
        ADD     A,#0x18
        LCALL   ??Subroutine138_0 & 0xFFFF
??CrossCallReturnLabel_307:
        LCALL   ?L_MOV_TO_X
// 4368           pKeyData->rxFrmCntr = TCLinkKeyFrmCntr[i].rxFrmCntr;
        MOV     DPTR,#(TCLinkKeyFrmCntr + 4)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 0
        ADD     A,#0x1c
        LCALL   ??Subroutine138_0 & 0xFFFF
??CrossCallReturnLabel_308:
        LCALL   ?L_MOV_TO_X
// 4369           
// 4370           // Write the TC link key back to the NV
// 4371           osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0, 
// 4372                         sizeof(APSME_TCLinkKey_t), pKeyData);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??Subroutine108_0 & 0xFFFF
??CrossCallReturnLabel_166:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
// 4373           
// 4374           // clear the pending write flag
// 4375           TCLinkKeyFrmCntr[i].pendingFlag = FALSE;
        CLR     A
        MOV     DPTR,#(TCLinkKeyFrmCntr + 8)
        MOVX    @DPTR,A
// 4376         }
// 4377       }
// 4378     }
// 4379       // clear copy of key in RAM 
// 4380     osal_memset( pKeyData, 0x00, sizeof(APSME_TCLinkKey_t) );
??ZDSecMgrSaveTCLinkKey_1:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        LCALL   ?Subroutine28 & 0xFFFF
// 4381     
// 4382     osal_mem_free(pKeyData);
// 4383   }
// 4384 }
??CrossCallReturnLabel_48:
        LJMP    ??Subroutine134_0 & 0xFFFF
        CFI EndBlock cfiBlock831

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond832 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond833 Using cfiCommon0
        CFI (cfiCond833) NoFunction
        CFI (cfiCond833) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond833) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond833) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond833) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond833) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond833) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond833) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond833) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond833) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond833) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond833) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond833) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond833) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond833) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond833) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond833) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond833) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond833) CFA_SP SP+0
        CFI (cfiCond833) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker834 Using cfiCommon1
        CFI (cfiPicker834) NoFunction
        CFI (cfiPicker834) Picker
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_memset?relay
        ; Setup parameters for call to function osal_mem_free
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
        RET
        CFI EndBlock cfiCond832
        CFI EndBlock cfiCond833
        CFI EndBlock cfiPicker834

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ZDSecMgrAppKeyType>`:
        DB 3

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_1:
        DD 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddrStore?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrExtAddrStore?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrExtAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrExtAddrLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrExtAddrLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyStore?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookupAMI?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookupAMI

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookupExt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookupExt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookupExtGetIndex?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookupExtGetIndex

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryFree?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryFree

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryNew?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlRelease?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlRelease

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlAdd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlAdd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlTerm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlTerm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyLoad?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAppKeyGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAppKeyGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAppKeyReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAppKeyReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEstablishKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEstablishKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSendMasterKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSendMasterKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSendNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSendNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceEntryRemove?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceEntryRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceRemoveByExtAddr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceRemoveByExtAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddrMgrUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddrMgrUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceEntryAdd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceEntryAdd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceCtrlHandler?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceCtrlHandler

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceCtrlSetup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceCtrlSetup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceCtrlUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceCtrlUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_SKA_TimerExpired?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_SKA_TimerExpired

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceRemove?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidateSKKE?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidateSKKE

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidateRM?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidateRM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidateCM?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidateCM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceJoin?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceJoinDirect?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceJoinDirect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceJoinFwd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceJoinFwd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceNew?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAssocDeviceAuth?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAssocDeviceAuth

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthInitiate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthInitiate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrConfig?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrPermitJoining?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrPermitJoining

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrPermitJoiningTimeout?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrPermitJoiningTimeout

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrNewDeviceEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrNewDeviceEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEstablishKeyCfm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEstablishKeyCfm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrTCExtAddrCheck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrTCExtAddrCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrTCDataLoad?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrTCDataLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEstablishKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEstablishKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrTransportKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrTransportKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrUpdateDeviceInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrUpdateDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrRemoveDeviceInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrRemoveDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrRequestKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrRequestKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSwitchKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSwitchKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticateInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticateInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticateCfm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticateCfm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrUpdateNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrUpdateNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSwitchNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSwitchNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAppKeyTypeSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAppKeyTypeSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_MasterKeyGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_MasterKeyGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_LinkKeySet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_LinkKeySet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticationSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticationSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticationCheck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticationCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_LinkKeyNVIdGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_LinkKeyNVIdGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_IsLinkKeyValid?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_IsLinkKeyValid

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_KeyFwdToChild?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_KeyFwdToChild

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddLinkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSetDefaultNV?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSetDefaultNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAPSRemove?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAPSRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_TCLinkKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_TCLinkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_TCLinkKeySync?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_TCLinkKeySync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_TCLinkKeyLoad?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_TCLinkKeyLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_IsDefaultTCLK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_IsDefaultTCLK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrNwkKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrNwkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrReadKeyFromNv?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrReadKeyFromNv

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrApsLinkKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrApsLinkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrInitNVKeyTables?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrInitNVKeyTables

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSaveApsLinkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSaveApsLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSaveTCLinkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSaveTCLinkKey

        END
// 4385 
// 4386 #if defined ( NV_RESTORE )
// 4387 /******************************************************************************
// 4388  * @fn          ZDSecMgrClearNVKeyValues
// 4389  *
// 4390  * @brief       If NV_RESTORE is enabled and the status of the network needs 
// 4391  *              default values this fuction clears ZCD_NV_NWKKEY, 
// 4392  *              ZCD_NV_NWK_ACTIVE_KEY_INFO and ZCD_NV_NWK_ALTERN_KEY_INFO link 
// 4393  *           
// 4394  * @param       none
// 4395  *
// 4396  * @return      none
// 4397  */
// 4398 void ZDSecMgrClearNVKeyValues(void)
// 4399 {
// 4400   nwkActiveKeyItems keyItems;
// 4401   nwkKeyDesc nwkKey;
// 4402 
// 4403   osal_memset(&keyItems, 0x00, sizeof(nwkActiveKeyItems));
// 4404 
// 4405   osal_nv_write(ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems);
// 4406 
// 4407   // Initialize NV items for NWK Active and Alternate keys. 
// 4408   osal_memset( &nwkKey, 0x00, sizeof(nwkKeyDesc) );
// 4409 
// 4410   osal_nv_write(ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
// 4411 
// 4412   osal_nv_write(ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
// 4413 }
// 4414 #endif // defined ( NV_RESTORE )
// 4415 
// 4416 /******************************************************************************
// 4417 ******************************************************************************/
// 4418 
// 
// 9 797 bytes in segment BANKED_CODE
//   516 bytes in segment BANK_RELAYS
//    16 bytes in segment CODE_C
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//     8 bytes in segment XDATA_ROM_C
//    84 bytes in segment XDATA_Z
// 
// 10 330 bytes of CODE  memory
//      0 bytes of CONST memory (+ 8 bytes shared)
//     85 bytes of XDATA memory
//
//Errors: none
//Warnings: none
