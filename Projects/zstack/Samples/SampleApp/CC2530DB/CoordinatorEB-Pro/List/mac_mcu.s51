///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               15/Aug/2011  15:27:17 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Components\mac\low_level\srf04\single_chip\m /
//                          ac_mcu.c                                          /
//    Command line       =  -f C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4. /
//                          0ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\Tools\CC2530DB\f8wCoord.cfg            /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4. /
//                          0ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\Tools\CC2530DB\f8wConfig.cfg           /
//                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR     /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x11FF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\zhoufei\Desktop\Z /
//                          igBee³ÌÐò\ZStack1.4.0ÐÞ¸Äºó\Components\mac\low_le /
//                          vel\srf04\single_chip\mac_mcu.c -D ZIGBEEPRO -D   /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D HAL_UART=TRUE -D                   /
//                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED=DEBUG -lC      /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\C /
//                          oordinatorEB-Pro\List\ -lA                        /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\C /
//                          oordinatorEB-Pro\List\ --diag_suppress            /
//                          Pe001,Pa010 -o C:\Users\zhoufei\Desktop\ZigBee³ÌÐ /
//                          ò\ZStack1.4.0ÐÞ¸Äºó\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\CoordinatorEB-Pro\Obj\ -e           /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\  /
//                          -I C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4. /
//                          0ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\SOURCE\ -I C:\Users\zhoufei\Desktop\ZigBee³Ì /
//                          Ðò\ZStack1.4.0ÐÞ¸Äºó\Projects\zstack\Samples\Samp /
//                          leApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I        /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\MT\ -I                   /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I          /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I  /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I       /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I         /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\STACK\AF\ -I             /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\STACK\NWK\ -I            /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\STACK\SEC\ -I            /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\STACK\SAPI\ -I           /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\STACK\SYS\ -I            /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\STACK\ZDO\ -I            /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I             /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\ZMAC\ -I                 /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I       /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I       /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I          /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I       /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I  /
//                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SING /
//                          LE_CHIP\ -I D:\IAR\8051\INC\ -I                   /
//                          D:\IAR\8051\INC\CLIB\ -Ohz                        /
//    List file          =  C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ /
//                          ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\C /
//                          oordinatorEB-Pro\List\mac_mcu.s51                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME mac_mcu

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??macMcuOverflowCount?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_AND_X
        EXTERN ?L_EQ_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SUB_FROM_X
        EXTERN ?POP_BIT_ISP
        EXTERN ?UL_GT_X
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??MAC_SetRandomSeedCB?relay
        FUNCTION ??MAC_SetRandomSeedCB?relay,0203H
        PUBLIC ??macMcuInit?relay
        FUNCTION ??macMcuInit?relay,0203H
        PUBLIC ??macMcuOverflowCapture?relay
        FUNCTION ??macMcuOverflowCapture?relay,0203H
        PUBLIC ??macMcuOverflowCount?relay
        FUNCTION ??macMcuOverflowCount?relay,0203H
        PUBLIC ??macMcuOverflowSetCompare?relay
        FUNCTION ??macMcuOverflowSetCompare?relay,0203H
        PUBLIC ??macMcuOverflowSetCount?relay
        FUNCTION ??macMcuOverflowSetCount?relay,0203H
        PUBLIC ??macMcuPrecisionCount?relay
        FUNCTION ??macMcuPrecisionCount?relay,0203H
        PUBLIC ??macMcuRandomByte?relay
        FUNCTION ??macMcuRandomByte?relay,0203H
        PUBLIC ??macMcuRandomWord?relay
        FUNCTION ??macMcuRandomWord?relay,0203H
        PUBLIC ??macMcuRecordMaxRssiStart?relay
        FUNCTION ??macMcuRecordMaxRssiStart?relay,0203H
        PUBLIC ??macMcuRecordMaxRssiStop?relay
        FUNCTION ??macMcuRecordMaxRssiStop?relay,0203H
        PUBWEAK `??macMcuRfErrIsr??INTVEC 3`
        PUBWEAK `??macMcuRfIsr??INTVEC 131`
        PUBWEAK `??macMcuTimer2Isr??INTVEC 83`
        PUBLIC ??macMcuTimer2OverflowWorkaround?relay
        FUNCTION ??macMcuTimer2OverflowWorkaround?relay,0203H
        PUBLIC ??macMcuTimerCapture?relay
        FUNCTION ??macMcuTimerCapture?relay,0203H
        PUBLIC ??macMcuTimerForceDelay?relay
        FUNCTION ??macMcuTimerForceDelay?relay,0203H
        PUBWEAK ADCCON1
        PUBWEAK CLKCONSTA
        PUBWEAK IEN2
        PUBWEAK IP0
        PUBWEAK IP1
        PUBLIC MAC_SetRandomSeedCB
        FUNCTION MAC_SetRandomSeedCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK RFERRF
        PUBWEAK RFIRQF0
        PUBWEAK RFIRQF1
        PUBWEAK RNDH
        PUBWEAK RNDL
        PUBWEAK S1CON
        PUBWEAK T2CTRL
        PUBWEAK T2IRQF
        PUBWEAK T2IRQM
        PUBWEAK T2M0
        PUBWEAK T2M1
        PUBWEAK T2MOVF0
        PUBWEAK T2MOVF1
        PUBWEAK T2MOVF2
        PUBWEAK T2MSEL
        PUBWEAK _A_IEN0
        PUBWEAK _A_IEN1
        PUBWEAK __Constant_0
        PUBWEAK __Constant_ff000000
        PUBLIC macChipVersion
        PUBLIC macMcuInit
        FUNCTION macMcuInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC macMcuOverflowCapture
        FUNCTION macMcuOverflowCapture,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC macMcuOverflowCount
        FUNCTION macMcuOverflowCount,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC macMcuOverflowSetCompare
        FUNCTION macMcuOverflowSetCompare,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC macMcuOverflowSetCount
        FUNCTION macMcuOverflowSetCount,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC macMcuPrecisionCount
        FUNCTION macMcuPrecisionCount,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC macMcuRandomByte
        FUNCTION macMcuRandomByte,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC macMcuRandomWord
        FUNCTION macMcuRandomWord,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macMcuRecordMaxRssiStart
        FUNCTION macMcuRecordMaxRssiStart,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macMcuRecordMaxRssiStop
        FUNCTION macMcuRecordMaxRssiStop,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macMcuRfErrIsr
        FUNCTION macMcuRfErrIsr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 15, STACK
        PUBLIC macMcuRfIsr
        FUNCTION macMcuRfIsr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 16, STACK
        PUBLIC macMcuTimer2Isr
        FUNCTION macMcuTimer2Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 16, STACK
        PUBLIC macMcuTimer2OverflowWorkaround
        FUNCTION macMcuTimer2OverflowWorkaround,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC macMcuTimerCapture
        FUNCTION macMcuTimerCapture,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macMcuTimerForceDelay
        FUNCTION macMcuTimerForceDelay,0203H
        ARGFRAME XSTACK, 0, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
macRxOn             SYMBOL "macRxOn"
macRxOff            SYMBOL "macRxOff"
halAssertHandler    SYMBOL "halAssertHandler"
macBackoffTimerCompareIsr SYMBOL "macBackoffTimerCompareIsr"
macCspTxIntIsr      SYMBOL "macCspTxIntIsr"
macCspTxStopIsr     SYMBOL "macCspTxStopIsr"
macRxAckTxDoneCallback SYMBOL "macRxAckTxDoneCallback"
macRxThresholdIsr   SYMBOL "macRxThresholdIsr"
macRxFifoOverflowIsr SYMBOL "macRxFifoOverflowIsr"
??halAssertHandler?relay SYMBOL "?relay", halAssertHandler
??macBackoffTimerCompareIsr?relay SYMBOL "?relay", macBackoffTimerCompareIsr
??macCspTxIntIsr?relay SYMBOL "?relay", macCspTxIntIsr
??macCspTxStopIsr?relay SYMBOL "?relay", macCspTxStopIsr
??macRxAckTxDoneCallback?relay SYMBOL "?relay", macRxAckTxDoneCallback
??macRxFifoOverflowIsr?relay SYMBOL "?relay", macRxFifoOverflowIsr
??macRxOff?relay    SYMBOL "?relay", macRxOff
??macRxOn?relay     SYMBOL "?relay", macRxOn
??macRxThresholdIsr?relay SYMBOL "?relay", macRxThresholdIsr
MAC_SetRandomSeedCB SYMBOL "MAC_SetRandomSeedCB"
??MAC_SetRandomSeedCB?relay SYMBOL "?relay", MAC_SetRandomSeedCB
macMcuInit          SYMBOL "macMcuInit"
??macMcuInit?relay  SYMBOL "?relay", macMcuInit
macMcuOverflowCapture SYMBOL "macMcuOverflowCapture"
??macMcuOverflowCapture?relay SYMBOL "?relay", macMcuOverflowCapture
macMcuOverflowCount SYMBOL "macMcuOverflowCount"
??macMcuOverflowCount?relay SYMBOL "?relay", macMcuOverflowCount
macMcuOverflowSetCompare SYMBOL "macMcuOverflowSetCompare"
??macMcuOverflowSetCompare?relay SYMBOL "?relay", macMcuOverflowSetCompare
macMcuOverflowSetCount SYMBOL "macMcuOverflowSetCount"
??macMcuOverflowSetCount?relay SYMBOL "?relay", macMcuOverflowSetCount
macMcuPrecisionCount SYMBOL "macMcuPrecisionCount"
??macMcuPrecisionCount?relay SYMBOL "?relay", macMcuPrecisionCount
macMcuRandomByte    SYMBOL "macMcuRandomByte"
??macMcuRandomByte?relay SYMBOL "?relay", macMcuRandomByte
macMcuRandomWord    SYMBOL "macMcuRandomWord"
??macMcuRandomWord?relay SYMBOL "?relay", macMcuRandomWord
macMcuRecordMaxRssiStart SYMBOL "macMcuRecordMaxRssiStart"
??macMcuRecordMaxRssiStart?relay SYMBOL "?relay", macMcuRecordMaxRssiStart
macMcuRecordMaxRssiStop SYMBOL "macMcuRecordMaxRssiStop"
??macMcuRecordMaxRssiStop?relay SYMBOL "?relay", macMcuRecordMaxRssiStop
macMcuRfErrIsr      SYMBOL "macMcuRfErrIsr"
`??macMcuRfErrIsr??INTVEC 3` SYMBOL "??INTVEC 3", macMcuRfErrIsr
macMcuRfIsr         SYMBOL "macMcuRfIsr"
`??macMcuRfIsr??INTVEC 131` SYMBOL "??INTVEC 131", macMcuRfIsr
macMcuTimer2Isr     SYMBOL "macMcuTimer2Isr"
`??macMcuTimer2Isr??INTVEC 83` SYMBOL "??INTVEC 83", macMcuTimer2Isr
macMcuTimer2OverflowWorkaround SYMBOL "macMcuTimer2OverflowWorkaround"
??macMcuTimer2OverflowWorkaround?relay SYMBOL "?relay", macMcuTimer2OverflowWorkaround
macMcuTimerCapture  SYMBOL "macMcuTimerCapture"
??macMcuTimerCapture?relay SYMBOL "?relay", macMcuTimerCapture
macMcuTimerForceDelay SYMBOL "macMcuTimerForceDelay"
??macMcuTimerForceDelay?relay SYMBOL "?relay", macMcuTimerForceDelay

        EXTERN macRxOn
        FUNCTION macRxOn,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxOff
        FUNCTION macRxOff,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halAssertHandler
        FUNCTION halAssertHandler,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macBackoffTimerCompareIsr
        FUNCTION macBackoffTimerCompareIsr,0202H
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macCspTxIntIsr
        FUNCTION macCspTxIntIsr,0202H
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macCspTxStopIsr
        FUNCTION macCspTxStopIsr,0202H
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxAckTxDoneCallback
        FUNCTION macRxAckTxDoneCallback,0202H
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxThresholdIsr
        FUNCTION macRxThresholdIsr,0202H
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxFifoOverflowIsr
        FUNCTION macRxFifoOverflowIsr,0202H
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??halAssertHandler?relay
        FUNCTION ??halAssertHandler?relay,00H
        EXTERN ??macBackoffTimerCompareIsr?relay
        FUNCTION ??macBackoffTimerCompareIsr?relay,00H
        EXTERN ??macCspTxIntIsr?relay
        FUNCTION ??macCspTxIntIsr?relay,00H
        EXTERN ??macCspTxStopIsr?relay
        FUNCTION ??macCspTxStopIsr?relay,00H
        EXTERN ??macRxAckTxDoneCallback?relay
        FUNCTION ??macRxAckTxDoneCallback?relay,00H
        EXTERN ??macRxFifoOverflowIsr?relay
        FUNCTION ??macRxFifoOverflowIsr?relay,00H
        EXTERN ??macRxOff?relay
        FUNCTION ??macRxOff?relay,00H
        EXTERN ??macRxOn?relay
        FUNCTION ??macRxOn?relay,00H
        EXTERN ??macRxThresholdIsr?relay
        FUNCTION ??macRxThresholdIsr?relay,00H

// C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸Äºó\Components\mac\low_level\srf04\single_chip\mac_mcu.c
//    1 /**************************************************************************************************
//    2   Filename:       mac_mcu.c
//    3   Revised:        $Date: 2010-07-22 09:47:19 -0700 (Thu, 22 Jul 2010) $
//    4   Revision:       $Revision: 23100 $
//    5 
//    6   Description:    Describe the purpose and contents of the file.
//    7 
//    8 
//    9   Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /* ------------------------------------------------------------------------------------------------
//   41  *                                          Includes
//   42  * ------------------------------------------------------------------------------------------------
//   43  */
//   44 
//   45 /* hal */
//   46 #include "hal_defs.h"
//   47 #include "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,091H
// unsigned char volatile __sfr RFIRQF1
RFIRQF1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,094H
// unsigned char volatile __sfr T2CTRL
T2CTRL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09aH
// unsigned char volatile __sfr IEN2
IEN2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09bH
// unsigned char volatile __sfr S1CON
S1CON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09eH
// unsigned char volatile __sfr CLKCONSTA
CLKCONSTA:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a1H
// unsigned char volatile __sfr T2IRQF
T2IRQF:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a2H
// unsigned char volatile __sfr T2M0
T2M0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a3H
// unsigned char volatile __sfr T2M1
T2M1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a4H
// unsigned char volatile __sfr T2MOVF0
T2MOVF0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a5H
// unsigned char volatile __sfr T2MOVF1
T2MOVF1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a6H
// unsigned char volatile __sfr T2MOVF2
T2MOVF2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a7H
// unsigned char volatile __sfr T2IRQM
T2IRQM:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a9H
// unsigned char volatile __sfr IP0
IP0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b9H
// unsigned char volatile __sfr IP1
IP1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bcH
// unsigned char volatile __sfr RNDL
RNDL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bdH
// unsigned char volatile __sfr RNDH
RNDH:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bfH
// unsigned char volatile __sfr RFERRF
RFERRF:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c3H
// unsigned char volatile __sfr T2MSEL
T2MSEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e9H
// unsigned char volatile __sfr RFIRQF0
RFIRQF0:
        DS 1
//   48 
//   49 /* low-level specific */
//   50 #include "mac_rx.h"
//   51 #include "mac_tx.h"
//   52 #include "mac_backoff_timer.h"
//   53 #include "mac_csp_tx.h"
//   54 #include "mac_rx_onoff.h"
//   55 #include "mac_low_level.h"
//   56 
//   57 /* target specific */
//   58 #include "mac_mcu.h"
//   59 #include "mac_radio_defs.h"
//   60 
//   61 /* debug */
//   62 #include "mac_assert.h"
//   63 
//   64 
//   65 /* ------------------------------------------------------------------------------------------------
//   66  *                                           Defines
//   67  * ------------------------------------------------------------------------------------------------
//   68  */
//   69 
//   70 #if !defined (OSC32K_CRYSTAL_INSTALLED) || (defined (OSC32K_CRYSTAL_INSTALLED) && (OSC32K_CRYSTAL_INSTALLED == TRUE))
//   71 #define T2CNF_BASE_VALUE    (RUN | SYNC)
//   72 #else
//   73 #define T2CNF_BASE_VALUE     RUN
//   74 #endif
//   75 
//   76 /* for optimized indexing of uint32's */
//   77 #if HAL_MCU_LITTLE_ENDIAN()
//   78 #define UINT32_NDX0   0
//   79 #define UINT32_NDX1   1
//   80 #define UINT32_NDX2   2
//   81 #define UINT32_NDX3   3
//   82 #else
//   83 #define UINT32_NDX0   3
//   84 #define UINT32_NDX1   2
//   85 #define UINT32_NDX2   1
//   86 #define UINT32_NDX3   0
//   87 #endif
//   88 
//   89 /* ------------------------------------------------------------------------------------------------
//   90  *                                        Local Variables
//   91  * ------------------------------------------------------------------------------------------------
//   92  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   93 uint8       macChipVersion = 0;
macChipVersion:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   94 static int8 maxRssi;
maxRssi:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   95 
//   96 
//   97 /*
//   98  *  This number is used to calculate the precision count for OSAL timer update. In Beacon mode,
//   99  *  the overflow count may be initialized to zero or to a constant. The "skip" in overflow count
//  100  *  needs to be accounted for in this variable.
//  101  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  102 static uint32 accumulatedOverflowCount = 0;
accumulatedOverflowCount:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  103 
//  104 /* Function pointer for the random seed callback */

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  105 static macRNGFcn_t pRandomSeedCB = NULL;
pRandomSeedCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  106 /* ------------------------------------------------------------------------------------------------
//  107  *                                       Local Prototypes
//  108  * ------------------------------------------------------------------------------------------------
//  109  */
//  110 static void mcuRecordMaxRssiIsr(void);
//  111 static uint32 macMcuOverflowGetCompare(void);
//  112 
//  113 void MAC_SetRandomSeedCB(macRNGFcn_t pCBFcn);
//  114 
//  115 /**************************************************************************************************
//  116  * @fn          MAC_SetRandomSeedCB
//  117  *
//  118  * @brief       Set the function pointer for the random seed callback.
//  119  *
//  120  * @param       pCBFcn - function pointer of the random seed callback
//  121  *
//  122  * @return      none
//  123  **************************************************************************************************
//  124  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  125 void MAC_SetRandomSeedCB(macRNGFcn_t pCBFcn)
MAC_SetRandomSeedCB:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function MAC_SetRandomSeedCB
//  126 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  127   pRandomSeedCB = pCBFcn;
        MOV     DPTR,#pRandomSeedCB
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock0
//  128 }
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  129 
//  130 /**************************************************************************************************
//  131  * @fn          macMcuInit
//  132  *
//  133  * @brief       Initialize the MCU.
//  134  *
//  135  * @param       none
//  136  *
//  137  * @return      none
//  138  **************************************************************************************************
//  139  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  140 MAC_INTERNAL_API void macMcuInit(void)
macMcuInit:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function macMcuInit
//  141 {
        FUNCALL macMcuInit, macRxOn
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macMcuInit, macRxOff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
//  142   halIntState_t  s;
//  143 
//  144   /* This CORR_THR value should be changed to 0x14 before attempting RX. Testing has shown that
//  145    * too many false frames are received if the reset value is used. Make it more likely to detect
//  146    * sync by removing the requirement that both symbols in the SFD must have a correlation value
//  147    * above the correlation threshold, and make sync word detection less likely by raising the
//  148    * correlation threshold.
//  149    */
//  150   MDMCTRL1 = CORR_THR;
        MOV     A,#0x14
        MOV     DPTR,#0x61a9
        MOVX    @DPTR,A
//  151 
//  152   /* tuning adjustments for optimal radio performance; details available in datasheet */
//  153   RXCTRL = 0x3F;
        MOV     A,#0x3f
        MOV     DPTR,#0x61ab
        MOVX    @DPTR,A
//  154 
//  155   /* Raises the CCA threshold from about -108dBm to about -80 dBm input level.
//  156    */
//  157   CCACTRL0 = CCA_THR;
        MOV     A,#-0x8
        MOV     DPTR,#0x6196
        MOVX    @DPTR,A
//  158 
//  159   /* Makes sync word detection less likely by requiring two zero symbols before the sync word.
//  160    * details available in datasheet.
//  161    */
//  162   MDMCTRL0 = 0x85;
        MOV     A,#-0x7b
        MOV     DPTR,#0x61a8
        MOVX    @DPTR,A
//  163 
//  164   /* Adjust current in synthesizer; details available in datasheet. */
//  165   FSCTRL = 0x5A;
        MOV     A,#0x5a
        MOV     DPTR,#0x61ac
        MOVX    @DPTR,A
//  166 
//  167   /* Adjust current in VCO; details available in datasheet. */
//  168   FSCAL1 = 0x00;
        CLR     A
        MOV     DPTR,#0x61ae
        MOVX    @DPTR,A
//  169 
//  170   /* Adjust target value for AGC control loop; details available in datasheet. */
//  171   AGCCTRL1 = 0x15;
        MOV     A,#0x15
        MOV     DPTR,#0x61b2
        MOVX    @DPTR,A
//  172 
//  173   /* Disable source address matching an autopend for now */
//  174   SRCMATCH = 0;
        CLR     A
        MOV     DPTR,#0x6182
        MOVX    @DPTR,A
//  175 
//  176   /* Tune ADC performance, details available in datasheet. */
//  177   ADCTEST0 = 0x10;
        MOV     A,#0x10
        MOV     DPTR,#0x61b5
        MOVX    @DPTR,A
//  178   ADCTEST1 = 0x0E;
        MOV     A,#0xe
        MOV     DPTR,#0x61b6
        MOVX    @DPTR,A
//  179   ADCTEST2 = 0x03;
        MOV     A,#0x3
        MOV     DPTR,#0x61b7
        MOVX    @DPTR,A
//  180 
//  181   /* Sets TX anti-aliasing filter to appropriate bandwidth.
//  182    * Reduces spurious emissions close to signal.
//  183    */
//  184   TXFILTCFG = TXFILTCFG_RESET_VALUE;
        MOV     A,#0x9
        MOV     DPTR,#0x61fa
        MOVX    @DPTR,A
//  185 
//  186   /* disable the CSPT register compare function */
//  187   CSPT = 0xFF;
        MOV     A,#-0x1
        MOV     DPTR,#0x61e5
        MOVX    @DPTR,A
//  188 
//  189   /* enable general RF interrupts */
//  190   IEN2 |= RFIE;
        ORL     0x9a,#0x1
//  191 
//  192   /* enable general REERR interrupts */
//  193   IEN0 |= RFERRIE;
        SETB    0xa8.0
//  194 
//  195   /* set RF interrupts one notch above lowest priority (four levels available) */
//  196   IP0 |=  IP_RFERR_RF_DMA_BV;
        ORL     0xa9,#0x1
//  197   IP1 &= ~IP_RFERR_RF_DMA_BV;
        ANL     0xb9,#0xfe
//  198 
//  199   /* set T2 interrupts one notch above lowest priority (four levels available)
//  200    * This effectively turned off nested interrupt between T2 and RF.
//  201    */
//  202   IP0 |=  IP_RXTX0_T2_BV;
        ORL     0xa9,#0x4
//  203   IP1 &= ~IP_RXTX0_T2_BV;
        ANL     0xb9,#0xfb
//  204 
//  205   /* read chip version */
//  206   macChipVersion = CHVER;
        MOV     DPTR,#0x6249
        MOVX    A,@DPTR
        MOV     DPTR,#macChipVersion
        MOVX    @DPTR,A
//  207 
//  208   /*-------------------------------------------------------------------------------
//  209    *  Initialize MAC timer.
//  210    */
//  211 
//  212   /* set timer rollover */
//  213   HAL_ENTER_CRITICAL_SECTION(s);
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        CLR     0xa8.7
//  214   MAC_MCU_T2_ACCESS_PERIOD_VALUE();
        MOV     0xc3,#0x2
//  215   T2M0 = MAC_RADIO_TIMER_TICKS_PER_BACKOFF() & 0xFF;
        MOV     0xa2,#0x0
//  216   T2M1 = MAC_RADIO_TIMER_TICKS_PER_BACKOFF() >> 8;
        MOV     0xa3,#0x28
//  217   HAL_EXIT_CRITICAL_SECTION(s);
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  218 
//  219   /* start timer */
//  220   MAC_RADIO_TIMER_WAKE_UP();
??macMcuInit_0:
        MOV     A,0x9e
        JNZ     ??macMcuInit_0
        ORL     0x94,#0x1
??macMcuInit_1:
        MOV     A,0x94
        MOV     C,0xE0 /* A   */.2
        JNC     ??macMcuInit_1
//  221 
//  222   /* Enable latch mode */
//  223   T2CTRL |= LATCH_MODE;
        ORL     0x94,#0x8
//  224 
//  225   /* enable timer interrupts */
//  226   T2IE = 1;
        SETB    0xb8.2
//  227 
//  228  /*----------------------------------------------------------------------------------------------
//  229   *  Initialize random seed value.
//  230   */
//  231 
//  232   /*
//  233    *  Set radio for infinite reception.  Once radio reaches this state,
//  234    *  it will stay in receive mode regardless RF activity.
//  235    */
//  236   FRMCTRL0 = FRMCTRL0_RESET_VALUE | RX_MODE_INFINITE_RECEPTION;
        MOV     A,#0x48
        MOV     DPTR,#0x6189
        MOVX    @DPTR,A
//  237 
//  238   /* turn on the receiver */
//  239   macRxOn();
        ; Setup parameters for call to function macRxOn
        LCALL   ??macRxOn?relay
//  240 
//  241   /*
//  242    *  Wait for radio to reach infinite reception state by checking RSSI valid flag.
//  243    *  Once it does, the least significant bit of ADTSTH should be pretty random.
//  244    */
//  245   while (!(RSSISTAT & 0x01));
??macMcuInit_2:
        MOV     DPTR,#0x6199
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??macMcuInit_2
//  246 
//  247   /* put 16 random bits into the seed value */
//  248   {
//  249     uint16 rndSeed;
//  250     uint8  i;
//  251 
//  252     rndSeed = 0;
        MOV     R0,#0x0
        MOV     R1,#0x0
//  253 
//  254     for(i=0; i<16; i++)
        MOV     R4,#0x10
//  255     {
//  256       /* use most random bit of analog to digital receive conversion to populate the random seed */
//  257       rndSeed = (rndSeed << 1) | (RFRND & 0x01);
??macMcuInit_3:
        MOV     A,R0
        CLR     C
        RLC     A
        MOV     R0,A
        MOV     A,R1
        RLC     A
        MOV     R1,A
        MOV     DPTR,#0x61a7
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        CLR     A
        MOV     0xE0 /* A   */.0,C
        ORL     A,R0
        MOV     R0,A
//  258     }
        DEC     R4
        MOV     A,R4
        JNZ     ??macMcuInit_3
//  259 
//  260     /*
//  261      *  The seed value must not be zero or 0x0380 (0x8003 in the polynomial).  If it is, the psuedo
//  262      *  random sequence wont be random.  There is an extremely small chance this seed could randomly
//  263      *  be zero or 0x0380.  The following check makes sure this does not happen.
//  264      */
//  265     if (rndSeed == 0x0000 || rndSeed == 0x0380)
        MOV     A,R0
        JNZ     ??macMcuInit_4
        MOV     A,R1
??macMcuInit_4:
        JZ      ??macMcuInit_5
        MOV     A,#-0x80
        XRL     A,R0
        JNZ     ??macMcuInit_6
        MOV     A,#0x3
        XRL     A,R1
??macMcuInit_6:
        JNZ     ??macMcuInit_7
//  266     {
//  267       rndSeed = 0xBABE; /* completely arbitrary "random" value */
??macMcuInit_5:
        MOV     R0,#-0x42
        MOV     R1,#-0x46
//  268     }
//  269 
//  270     /*
//  271      *  Two writes to RNDL will set the random seed.  A write to RNDL copies current contents
//  272      *  of RNDL to RNDH before writing new the value to RNDL.
//  273      */
//  274     RNDL = rndSeed & 0xFF;
??macMcuInit_7:
        MOV     A,R0
        MOV     0xbc,A
//  275     RNDL = rndSeed >> 8;
        MOV     A,R1
        MOV     0xbc,A
//  276   }
//  277 
//  278   /* Read 16*8 random bits and store them in flash for future use in random
//  279      key generation for CBKE key establishment */
//  280   if( pRandomSeedCB )
        MOV     DPTR,#pRandomSeedCB
        MOVX    A,@DPTR
        JNZ     ??macMcuInit_8
        INC     DPTR
        MOVX    A,@DPTR
??macMcuInit_8:
        JZ      ??macMcuInit_9
//  281   {
//  282     uint8 randomSeed[MAC_RANDOM_SEED_LEN];
//  283     uint8 i,j;
//  284 
//  285     for(i = 0; i < 16; i++)
        MOV     R4,#0x0
//  286     {
//  287       uint8 rndByte = 0;
??macMcuInit_10:
        MOV     R2,#0x0
//  288       for(j = 0; j < 8; j++)
        MOV     R3,#0x8
//  289       {
//  290         /* use most random bit of analog to digital receive conversion to
//  291            populate the random seed */
//  292         rndByte = (rndByte << 1) | (RFRND & 0x01);
??macMcuInit_11:
        MOV     DPTR,#0x61a7
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        CLR     A
        MOV     0xE0 /* A   */.0,C
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R2,A
        POP     A
        CFI CFA_SP SP+0
        ORL     A,R2
        MOV     R2,A
//  293       }
        DEC     R3
        MOV     A,R3
        JNZ     ??macMcuInit_11
//  294       randomSeed[i] = rndByte;
        MOV     ?V0 + 0,R4
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
//  295 
//  296     }
        INC     R4
        MOV     A,R4
        CLR     C
        SUBB    A,#0x10
        JC      ??macMcuInit_10
//  297     pRandomSeedCB( randomSeed );
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPTR,#pRandomSeedCB
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  298   }
//  299 
//  300   /* turn off the receiver */
//  301   macRxOff();
??macMcuInit_9:
        ; Setup parameters for call to function macRxOff
        LCALL   ??macRxOff?relay
//  302 
//  303   /* take receiver out of infinite reception mode; set back to normal operation */
//  304   FRMCTRL0 = FRMCTRL0_RESET_VALUE | RX_MODE_NORMAL_OPERATION;
        MOV     A,#0x40
        MOV     DPTR,#0x6189
        MOVX    @DPTR,A
//  305 
//  306   /* Turn on autoack */
//  307   MAC_RADIO_TURN_ON_AUTO_ACK();
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.5
        MOVX    @DPTR,A
//  308 
//  309   /* Initialize SRCEXTPENDEN and SRCSHORTPENDEN to zeros */
//  310   MAC_RADIO_SRC_MATCH_INIT_EXTPENDEN();
        CLR     A
        MOV     DPTR,#0x6164
        MOVX    @DPTR,A
        MOV     DPTR,#0x6165
        MOVX    @DPTR,A
        MOV     DPTR,#0x6166
        MOVX    @DPTR,A
//  311   MAC_RADIO_SRC_MATCH_INIT_SHORTPENDEN();
        MOV     DPTR,#0x6167
        MOVX    @DPTR,A
        MOV     DPTR,#0x6168
        MOVX    @DPTR,A
        MOV     DPTR,#0x6169
        MOVX    @DPTR,A
//  312 }
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
        REQUIRE T2CTRL
        REQUIRE IEN2
        REQUIRE CLKCONSTA
        REQUIRE T2M0
        REQUIRE T2M1
        REQUIRE _A_IEN0
        REQUIRE IP0
        REQUIRE _A_IEN1
        REQUIRE IP1
        REQUIRE RNDL
        REQUIRE T2MSEL
//  313 
//  314 
//  315 /**************************************************************************************************
//  316  * @fn          macMcuRandomByte
//  317  *
//  318  * @brief       Returns a random byte using a special hardware feature that generates new
//  319  *              random values based on the truly random seed set earlier.
//  320  *
//  321  * @param       none
//  322  *
//  323  * @return      a random byte
//  324  **************************************************************************************************
//  325  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  326 MAC_INTERNAL_API uint8 macMcuRandomByte(void)
macMcuRandomByte:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function macMcuRandomByte
//  327 {
        ; Saved register size: 0
        ; Auto size: 0
//  328   /* clock the random generator to get a new random value */
//  329   ADCCON1 = (ADCCON1 & ~RCTRL_BITS) | RCTRL_CLOCK_LFSR;
        MOV     A,#-0xd
        ANL     A,0xb4
        ORL     A,#0x4
        MOV     0xb4,A
//  330 
//  331   /* return new randomized value from hardware */
//  332   return(RNDH);
        MOV     R1,0xbd
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
        REQUIRE ADCCON1
        REQUIRE RNDH
//  333 }
//  334 
//  335 
//  336 /**************************************************************************************************
//  337  * @fn          macMcuRandomWord
//  338  *
//  339  * @brief       Returns a random word using a special hardware feature that generates new
//  340  *              random values based on the truly random seed set earlier.
//  341  *
//  342  * @param       none
//  343  *
//  344  * @return      a random word
//  345  **************************************************************************************************
//  346  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  347 MAC_INTERNAL_API uint16 macMcuRandomWord(void)
macMcuRandomWord:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function macMcuRandomWord
//  348 {
        ; Saved register size: 2
        ; Auto size: 0
//  349   uint16 random_word;
//  350 
//  351   /* clock the random generator to get a new random value */
//  352   ADCCON1 = (ADCCON1 & ~RCTRL_BITS) | RCTRL_CLOCK_LFSR;
        MOV     A,#-0xd
        ANL     A,0xb4
        ORL     A,#0x4
        MOV     0xb4,A
//  353 
//  354   /* read random word */
//  355   random_word  = (RNDH << 8);
        MOV     A,0xbd
        MOV     R3,A
//  356   random_word +=  RNDL;
        MOV     A,0xbc
        MOV     R2,A
//  357 
//  358   /* return new randomized value from hardware */
//  359   return(random_word);
        LJMP    ?BRET
        CFI EndBlock cfiBlock4
        REQUIRE ADCCON1
        REQUIRE RNDL
        REQUIRE RNDH
//  360 }
//  361 
//  362 
//  363 /**************************************************************************************************
//  364  * @fn          macMcuTimerForceDelay
//  365  *
//  366  * @brief       Delay the timer by the requested number of ticks.
//  367  *
//  368  * @param       none
//  369  *
//  370  * @return      none
//  371  **************************************************************************************************
//  372  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  373 MAC_INTERNAL_API void macMcuTimerForceDelay(uint16 x)
macMcuTimerForceDelay:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function macMcuTimerForceDelay
//  374 {
        ; Saved register size: 0
        ; Auto size: 0
//  375   halIntState_t  s;
//  376 
//  377   HAL_ENTER_CRITICAL_SECTION(s);
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R4,A
        CLR     0xa8.7
//  378   MAC_MCU_T2_ACCESS_COUNT_VALUE();
        MOV     0xc3,#0x0
//  379   T2M0 = (x) & 0xFF;
        MOV     A,R2
        MOV     0xa2,A
//  380   T2M1 = (x) >> 8;
        MOV     A,R3
        MOV     0xa3,A
        CFI EndBlock cfiBlock5
//  381   HAL_EXIT_CRITICAL_SECTION(s);
        REQUIRE ?Subroutine5
        REQUIRE T2M0
        REQUIRE T2M1
        REQUIRE _A_IEN0
        REQUIRE T2MSEL
        ; // Fall through to label ?Subroutine5
//  382 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        MOV     A,R4
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
        LJMP    ?BRET
        CFI EndBlock cfiBlock6
//  383 
//  384 /**************************************************************************************************
//  385  * @fn          macMcuTimerCapture
//  386  *
//  387  * @brief       Returns the last timer capture.  This capture should have occurred at the
//  388  *              receive time of the last frame (the last time SFD transitioned to active).
//  389  *
//  390  * @param       none
//  391  *
//  392  * @return      last capture of hardware timer (full 16-bit value)
//  393  **************************************************************************************************
//  394  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  395 MAC_INTERNAL_API uint16 macMcuTimerCapture(void)
macMcuTimerCapture:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function macMcuTimerCapture
//  396 {
        ; Saved register size: 2
        ; Auto size: 0
//  397   uint16         timerCapture;
//  398   halIntState_t  s;
//  399 
//  400   HAL_ENTER_CRITICAL_SECTION(s);
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R4,A
        CLR     0xa8.7
//  401   MAC_MCU_T2_ACCESS_CAPTURE_VALUE();
        MOV     0xc3,#0x1
//  402   timerCapture = T2M1 << 8;
        MOV     A,0xa3
        MOV     R3,A
//  403   timerCapture |= T2M0;
        MOV     A,0xa2
        MOV     R2,A
//  404   HAL_EXIT_CRITICAL_SECTION(s);
        SJMP    ?Subroutine5
        CFI EndBlock cfiBlock7
        REQUIRE T2M0
        REQUIRE T2M1
        REQUIRE _A_IEN0
        REQUIRE T2MSEL
//  405 
//  406   return (timerCapture);
//  407 }
//  408 
//  409 
//  410 /**************************************************************************************************
//  411  * @fn          macMcuOverflowCount
//  412  *
//  413  * @brief       Returns the value of the overflow counter which is a special hardware feature.
//  414  *              The overflow count actually is 24 bits of information.
//  415  *
//  416  * @param       none
//  417  *
//  418  * @return      value of overflow counter
//  419  **************************************************************************************************
//  420  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  421 MAC_INTERNAL_API uint32 macMcuOverflowCount(void)
macMcuOverflowCount:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function macMcuOverflowCount
//  422 {
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  423   uint32         overflowCount;
//  424   halIntState_t  s;
//  425 
//  426   /* for efficiency, the 32-bit value is encoded using endian abstracted indexing */
//  427 
//  428   HAL_ENTER_CRITICAL_SECTION(s);
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R2,A
        CLR     0xa8.7
//  429 
//  430   /* This T2 access macro allows accessing both T2MOVFx and T2Mx */
//  431   MAC_MCU_T2_ACCESS_OVF_COUNT_VALUE();
        MOV     0xc3,#0x0
//  432 
//  433   /* Latch the entire T2MOVFx first by reading T2M0. */
//  434   T2M0;
        MOV     A,0xa2
//  435   ((uint8 *)&overflowCount)[UINT32_NDX0] = T2MOVF0;
        LJMP    ?Subroutine7 & 0xFFFF
        CFI EndBlock cfiBlock8
        REQUIRE T2M0
        REQUIRE T2MOVF0
        REQUIRE T2MOVF1
        REQUIRE T2MOVF2
        REQUIRE _A_IEN0
        REQUIRE T2MSEL
//  436   ((uint8 *)&overflowCount)[UINT32_NDX1] = T2MOVF1;
//  437   ((uint8 *)&overflowCount)[UINT32_NDX2] = T2MOVF2;
//  438   ((uint8 *)&overflowCount)[UINT32_NDX3] = 0;
//  439   HAL_EXIT_CRITICAL_SECTION(s);
//  440 
//  441   return (overflowCount);
//  442 }
//  443 
//  444 
//  445 /**************************************************************************************************
//  446  * @fn          macMcuOverflowCapture
//  447  *
//  448  * @brief       Returns the last capture of the overflow counter.  A special hardware feature
//  449  *              captures the overflow counter when the regular hardware timer is captured.
//  450  *
//  451  * @param       none
//  452  *
//  453  * @return      last capture of overflow count
//  454  **************************************************************************************************
//  455  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  456 MAC_INTERNAL_API uint32 macMcuOverflowCapture(void)
macMcuOverflowCapture:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function macMcuOverflowCapture
//  457 {
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  458   uint32         overflowCapture;
//  459   halIntState_t  s;
//  460 
//  461   /* for efficiency, the 32-bit value is encoded using endian abstracted indexing */
//  462   HAL_ENTER_CRITICAL_SECTION(s);
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R2,A
        CLR     0xa8.7
//  463   MAC_MCU_T2_ACCESS_OVF_CAPTURE_VALUE();
        MOV     0xc3,#0x10
//  464   ((uint8 *)&overflowCapture)[UINT32_NDX0] = T2MOVF0;
        LJMP    ?Subroutine7 & 0xFFFF
        CFI EndBlock cfiBlock9
        REQUIRE T2MOVF0
        REQUIRE T2MOVF1
        REQUIRE T2MOVF2
        REQUIRE _A_IEN0
        REQUIRE T2MSEL
//  465   ((uint8 *)&overflowCapture)[UINT32_NDX1] = T2MOVF1;
//  466   ((uint8 *)&overflowCapture)[UINT32_NDX2] = T2MOVF2;
//  467   ((uint8 *)&overflowCapture)[UINT32_NDX3] = 0;
//  468   HAL_EXIT_CRITICAL_SECTION(s);
//  469 
//  470   return (overflowCapture);
//  471 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        CLR     A
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//  472 
//  473 
//  474 /**************************************************************************************************
//  475  * @fn          macMcuOverflowSetCount
//  476  *
//  477  * @brief       Sets the value of the hardware overflow counter.
//  478  *
//  479  * @param       count - new overflow count value
//  480  *
//  481  * @return      none
//  482  **************************************************************************************************
//  483  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  484 MAC_INTERNAL_API void macMcuOverflowSetCount(uint32 count)
macMcuOverflowSetCount:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function macMcuOverflowSetCount
//  485 {
        FUNCALL macMcuOverflowSetCount, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macMcuOverflowSetCount, macMcuOverflowCount
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        LCALL   ?Subroutine3 & 0xFFFF
//  486   halIntState_t  s;
//  487 
//  488   MAC_ASSERT(! (count >> 24) );   /* illegal count value */
??CrossCallReturnLabel_4:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#__Constant_ff000000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 0
        LCALL   ?L_AND_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JZ      ??macMcuOverflowSetCount_0
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
//  489 
//  490   /* save the current overflow count */
//  491   accumulatedOverflowCount += macMcuOverflowCount();
??macMcuOverflowSetCount_0:
        ; Setup parameters for call to function macMcuOverflowCount
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     DPTR,#accumulatedOverflowCount
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
//  492 
//  493   /* deduct the initial count */
//  494   accumulatedOverflowCount -= count;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#accumulatedOverflowCount
        MOV     R0,#?V0 + 0
        LCALL   ?L_SUB_FROM_X
//  495 
//  496   HAL_ENTER_CRITICAL_SECTION(s);
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R2,A
        CLR     0xa8.7
//  497   MAC_MCU_T2_ACCESS_OVF_COUNT_VALUE();
        MOV     0xc3,#0x0
//  498 
//  499   /* for efficiency, the 32-bit value is decoded using endian abstracted indexing */
//  500   /* T2OF2 must be written last */
//  501   T2MOVF0 = ((uint8 *)&count)[UINT32_NDX0];
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     0xa4,A
//  502   T2MOVF1 = ((uint8 *)&count)[UINT32_NDX1];
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     0xa5,A
//  503   T2MOVF2 = ((uint8 *)&count)[UINT32_NDX2];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     0xa6,A
        CFI EndBlock cfiBlock13
//  504   HAL_EXIT_CRITICAL_SECTION(s);
        REQUIRE ?Subroutine9
        REQUIRE T2MOVF0
        REQUIRE T2MOVF1
        REQUIRE T2MOVF2
        REQUIRE _A_IEN0
        REQUIRE T2MSEL
        ; // Fall through to label ?Subroutine9
//  505 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
        LJMP    ??Subroutine10_0 & 0xFFFF
        CFI EndBlock cfiBlock14
//  506 
//  507 
//  508 /**************************************************************************************************
//  509  * @fn          macMcuOverflowSetCompare
//  510  *
//  511  * @brief       Set overflow count compare value.  An interrupt is triggered when the overflow
//  512  *              count equals this compare value.
//  513  *
//  514  * @param       count - overflow count compare value
//  515  *
//  516  * @return      none
//  517  **************************************************************************************************
//  518  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  519 MAC_INTERNAL_API void macMcuOverflowSetCompare(uint32 count)
macMcuOverflowSetCompare:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function macMcuOverflowSetCompare
//  520 {
        FUNCALL macMcuOverflowSetCompare, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        LCALL   ?Subroutine3 & 0xFFFF
//  521   halIntState_t  s;
//  522   uint8 enableCompareInt = 0;
??CrossCallReturnLabel_5:
        MOV     R6,#0x0
//  523 
//  524   MAC_ASSERT( !(count >> 24) );   /* illegal count value */
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#__Constant_ff000000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 0
        LCALL   ?L_AND_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JZ      ??macMcuOverflowSetCompare_0
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
//  525 
//  526   HAL_ENTER_CRITICAL_SECTION(s);
??macMcuOverflowSetCompare_0:
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R2,A
        CLR     0xa8.7
//  527 
//  528   /*  Disable overflow compare interrupts. */
//  529   if (T2IRQM & TIMER2_OVF_COMPARE1M)
        MOV     A,0xa7
        MOV     C,0xE0 /* A   */.4
        JNC     ??macMcuOverflowSetCompare_1
//  530   {
//  531     enableCompareInt = 1;
        INC     R6
//  532     T2IRQM &= ~TIMER2_OVF_COMPARE1M;
        ANL     0xa7,#0xef
//  533   }
//  534 
//  535   MAC_MCU_T2_ACCESS_OVF_CMP1_VALUE();
??macMcuOverflowSetCompare_1:
        MOV     0xc3,#0x30
//  536 
//  537   /* for efficiency, the 32-bit value is decoded using endian abstracted indexing */
//  538   T2MOVF0 = ((uint8 *)&count)[UINT32_NDX0];
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     0xa4,A
//  539   T2MOVF1 = ((uint8 *)&count)[UINT32_NDX1];
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     0xa5,A
//  540   T2MOVF2 = ((uint8 *)&count)[UINT32_NDX2];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     0xa6,A
//  541 
//  542   /*
//  543    *  Now that new compare value is stored, clear the interrupt flag.  This is important just
//  544    *  in case a false match was generated as the multi-byte compare value was written.
//  545    */
//  546   T2IRQF = ~TIMER2_OVF_COMPARE1F;
        MOV     0xa1,#-0x11
//  547 
//  548   /* re-enable overflow compare interrupts if they were previously enabled */
//  549   if (enableCompareInt)
        MOV     A,R6
        JZ      ??macMcuOverflowSetCompare_2
//  550   {
//  551     T2IRQM |= TIMER2_OVF_COMPARE1M;
        ORL     0xa7,#0x10
//  552   }
//  553 
//  554   HAL_EXIT_CRITICAL_SECTION(s);
??macMcuOverflowSetCompare_2:
        SJMP    ?Subroutine9
        CFI EndBlock cfiBlock15
        REQUIRE T2IRQF
        REQUIRE T2MOVF0
        REQUIRE T2MOVF1
        REQUIRE T2MOVF2
        REQUIRE T2IRQM
        REQUIRE _A_IEN0
        REQUIRE T2MSEL
//  555 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,0xa4
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,0xa5
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,0xa6
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        CFI EndBlock cfiBlock16
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine10_0:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        CFI EndBlock cfiBlock17
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Valid
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21
//  556 
//  557 
//  558 /**************************************************************************************************
//  559  * @fn          macMcuOverflowGetCompare
//  560  *
//  561  * @brief       Get overflow count compare value.
//  562  *
//  563  * @param       none
//  564  *
//  565  * @return      overflow count compare value
//  566  **************************************************************************************************
//  567  */
//  568 MAC_INTERNAL_API uint32 macMcuOverflowGetCompare(void)
//  569 {
//  570   halIntState_t  s;
//  571   uint32         compare;
//  572 
//  573   HAL_ENTER_CRITICAL_SECTION(s);
//  574 
//  575   MAC_MCU_T2_ACCESS_OVF_CMP1_VALUE();
//  576 
//  577   /* for efficiency, the 32-bit value is decoded using endian abstracted indexing */
//  578   ((uint8 *)&compare)[UINT32_NDX0] = T2MOVF0;
//  579   ((uint8 *)&compare)[UINT32_NDX1] = T2MOVF1;
//  580   ((uint8 *)&compare)[UINT32_NDX2] = T2MOVF2;
//  581   ((uint8 *)&compare)[UINT32_NDX3] = 0;
//  582 
//  583   HAL_EXIT_CRITICAL_SECTION(s);
//  584 
//  585   return(compare);
//  586 }
//  587 
//  588 
//  589 /**************************************************************************************************
//  590  * @fn          macMcuTimer2Isr
//  591  *
//  592  * @brief       Interrupt service routine for timer2, the MAC timer.
//  593  *
//  594  * @param       none
//  595  *
//  596  * @return      none
//  597  **************************************************************************************************
//  598  */

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  599 HAL_ISR_FUNCTION( macMcuTimer2Isr, T2_VECTOR )
macMcuTimer2Isr:
        CFI Block cfiBlock22 Using cfiCommon1
        CFI Function macMcuTimer2Isr
//  600 {
        FUNCALL macMcuTimer2Isr, macBackoffTimerCompareIsr
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  601   uint8 t2irqm;
//  602   uint8 t2irqf;
//  603   
//  604   HAL_ENTER_ISR();
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R6,A
        SETB    0xa8.7
//  605 
//  606   t2irqm = T2IRQM;
        MOV     A,0xa7
        MOV     R2,A
//  607   t2irqf = T2IRQF;
        MOV     A,0xa1
        MOV     R3,A
//  608 
//  609   /*------------------------------------------------------------------------------------------------
//  610    *  Overflow compare interrupt - triggers when then overflow counter is
//  611    *  equal to the overflow compare register.
//  612    */
//  613   if ((t2irqf & TIMER2_OVF_COMPARE1F) & t2irqm)
        MOV     A,R2
        ANL     A,R3
        ANL     A,#0x10
        JZ      ??macMcuTimer2Isr_0
//  614   {
//  615 
//  616     /* call function for dealing with the timer compare interrupt */
//  617     macBackoffTimerCompareIsr();
        ; Setup parameters for call to function macBackoffTimerCompareIsr
        LCALL   ??macBackoffTimerCompareIsr?relay
//  618 
//  619     /* clear overflow compare interrupt flag */
//  620     T2IRQF = ~TIMER2_OVF_COMPARE1F;
        MOV     0xa1,#-0x11
        SJMP    ??macMcuTimer2Isr_1
//  621   }
//  622 
//  623   /*------------------------------------------------------------------------------------------------
//  624    *  Overflow interrupt - triggers when the hardware timer rolls over.
//  625    */
//  626   else if ((t2irqf & TIMER2_PERF) & t2irqm)
??macMcuTimer2Isr_0:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        PUSH    PSW
        CFI CFA_SP SP+-4
        MOV     A,R3
        MOV     C,0xE0 /* A   */.0
        MOV     B.0,C
        LCALL   ?POP_BIT_ISP
        DEC     SP
        CFI CFA_SP SP+-3
        ANL     C,B.0
        JNC     ??macMcuTimer2Isr_1
//  627   {
//  628     /* call energy detect interrupt function, this interrupt not used for any other functionality */
//  629     mcuRecordMaxRssiIsr();
        MOV     DPTR,#0x6198
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#maxRssi
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R2
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??macMcuTimer2Isr_2
        MOV     A,R2
        MOVX    @DPTR,A
//  630 
//  631     /* clear the interrupt flag */
//  632     T2IRQF = ~TIMER2_PERF;
??macMcuTimer2Isr_2:
        MOV     0xa1,#-0x2
        CFI EndBlock cfiBlock22
//  633   }
//  634   
//  635   CLEAR_SLEEP_MODE();
//  636   HAL_EXIT_ISR();  
??macMcuTimer2Isr_1:
        REQUIRE ?Subroutine8
        REQUIRE T2IRQF
        REQUIRE T2IRQM
        REQUIRE _A_IEN0
        ; // Fall through to label ?Subroutine8
//  637 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiBlock23 Using cfiCommon1
        CFI NoFunction
        CFI CFA_SP SP+-3
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI A Frame(CFA_SP, 3)
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
        MOV     R7,#0x1
        LJMP    ?INTERRUPT_LEAVE_XSP
        CFI EndBlock cfiBlock23
//  638 
//  639 
//  640 /**************************************************************************************************
//  641  * @fn          macMcuTimer2OverflowWorkaround
//  642  *
//  643  * @brief       For CC2530, T2 interrupt wont be generated when the current count is greater than
//  644  *              the comparator. The interrupt is only generated when the current count is equal to
//  645  *              the comparator. When the CC2530 is waking up from sleep, there is a small window
//  646  *              that the count may be grater than the comparator, therefore, missing the interrupt.
//  647  *              This workaround will call the T2 ISR when the current T2 count is greater than the
//  648  *              comparator.
//  649  *
//  650  * @param       none
//  651  *
//  652  * @return      none
//  653  **************************************************************************************************
//  654  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  655 void macMcuTimer2OverflowWorkaround(void)
macMcuTimer2OverflowWorkaround:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function macMcuTimer2OverflowWorkaround
//  656 {
        FUNCALL macMcuTimer2OverflowWorkaround, macMcuOverflowCount
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macMcuTimer2OverflowWorkaround, macBackoffTimerCompareIsr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  657   if (T2IRQM & TIMER2_OVF_COMPARE1F)
        MOV     A,0xa7
        MOV     C,0xE0 /* A   */.4
        JNC     ??macMcuTimer2OverflowWorkaround_0
//  658   {
//  659     /* T2 comapre 1 interrupt is enabled but T2 compare 1 intererrupt is not generated */
//  660     if (!(T2IRQF & TIMER2_OVF_COMPARE1F))
        MOV     A,0xa1
        MOV     C,0xE0 /* A   */.4
        JC      ??macMcuTimer2OverflowWorkaround_0
//  661     {
//  662       if (MAC_RADIO_BACKOFF_COUNT() > macMcuOverflowGetCompare())
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R2,A
        CLR     0xa8.7
        MOV     0xc3,#0x30
        MOV     A,0xa4
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,0xa5
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,0xa6
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        ; Setup parameters for call to function macMcuOverflowCount
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 0
        LCALL   ?UL_GT_X
        JNC     ??macMcuTimer2OverflowWorkaround_0
//  663       {
//  664         /* Set the flag to trigger the timer compare interrupt */
//  665         macBackoffTimerCompareIsr();
        ; Setup parameters for call to function macBackoffTimerCompareIsr
        LCALL   ??macBackoffTimerCompareIsr?relay
//  666         T2IRQF = ~TIMER2_OVF_COMPARE1F;
        MOV     0xa1,#-0x11
//  667       }
//  668     }
//  669   }
//  670 }
??macMcuTimer2OverflowWorkaround_0:
        LJMP    ??Subroutine10_0 & 0xFFFF
        CFI EndBlock cfiBlock24
        REQUIRE T2IRQF
        REQUIRE T2IRQM
        REQUIRE T2MOVF0
        REQUIRE T2MOVF1
        REQUIRE T2MOVF2
        REQUIRE _A_IEN0
        REQUIRE T2MSEL

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+-2
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        LCALL   ??macMcuOverflowCount?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27
//  671 
//  672 
//  673 /**************************************************************************************************
//  674  * @fn          macMcuPrecisionCount
//  675  *
//  676  * @brief       This function is used by higher layer to read a free running counter driven by
//  677  *              MAC timer.
//  678  *
//  679  * @param       none
//  680  *
//  681  * @return      overflowCount
//  682  **************************************************************************************************
//  683  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  684 uint16 macMcuPrecisionCount(void)
macMcuPrecisionCount:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI Function macMcuPrecisionCount
//  685 {
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  686   uint16         overflowCount;
//  687   halIntState_t  s;
//  688 
//  689   HAL_ENTER_CRITICAL_SECTION(s);
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R2,A
        CLR     0xa8.7
//  690 
//  691   /* This T2 access macro allows accessing both T2MOVFx and T2Mx */
//  692   MAC_MCU_T2_ACCESS_OVF_COUNT_VALUE();
        MOV     0xc3,#0x0
//  693 
//  694   /* Latch the entire T2MOVFx first by reading T2M0.
//  695    * T2M0 and T2MOVF2 are discarded.
//  696    */
//  697   T2M0;
        MOV     A,0xa2
//  698   ((uint8 *)&overflowCount)[UINT32_NDX0] = T2MOVF0;
        MOV     A,0xa4
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  699   ((uint8 *)&overflowCount)[UINT32_NDX1] = T2MOVF1;
        MOV     A,0xa5
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine1 & 0xFFFF
//  700   HAL_EXIT_CRITICAL_SECTION(s);
//  701 
//  702   /* the overflowCount needs to account for the accumulated overflow count in Beacon mode.
//  703    * It's okay to let it overflow since only LSBs are used.
//  704    */
//  705   overflowCount += (uint16)accumulatedOverflowCount;
//  706 
//  707   return(overflowCount);
??CrossCallReturnLabel_1:
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#accumulatedOverflowCount
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOVX    A,@DPTR
        ADD     A,?V0 + 0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 1
        MOV     R3,A
        MOV     A,#0x2
        LJMP    ??Subroutine11_0 & 0xFFFF
        CFI EndBlock cfiBlock28
        REQUIRE T2M0
        REQUIRE T2MOVF0
        REQUIRE T2MOVF1
        REQUIRE _A_IEN0
        REQUIRE T2MSEL
//  708 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_6
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_0
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_1
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOVX    @DPTR,A
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36
//  709 
//  710 
//  711 /**************************************************************************************************
//  712  * @fn          macMcuRfIsr
//  713  *
//  714  * @brief       Interrupt service routine that handles all RF interrupts.  There are a number
//  715  *              of conditions "ganged" onto this one ISR so each condition must be tested for.
//  716  *
//  717  * @param       none
//  718  *
//  719  * @return      none
//  720  **************************************************************************************************
//  721  */

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  722 HAL_ISR_FUNCTION( macMcuRfIsr, RF_VECTOR )
macMcuRfIsr:
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function macMcuRfIsr
//  723 {
        FUNCALL macMcuRfIsr, macCspTxIntIsr
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macMcuRfIsr, macCspTxStopIsr
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macMcuRfIsr, macRxAckTxDoneCallback
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macMcuRfIsr, macRxThresholdIsr
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  724   uint8 rfim;
//  725   
//  726   HAL_ENTER_ISR();
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R6,A
        SETB    0xa8.7
//  727 
//  728   rfim = RFIRQM1;
        MOV     DPTR,#0x61a4
        MOVX    A,@DPTR
        MOV     R2,A
//  729 
//  730   /*  The CPU level RF interrupt flag must be cleared here (before clearing RFIRQFx).
//  731    *  to allow the interrupts to be nested.
//  732    */
//  733   S1CON = 0x00;
        MOV     0x9b,#0x0
//  734 
//  735   if ((RFIRQF1 & IRQ_CSP_MANINT) & rfim)
        MOV     A,0x91
        ANL     A,R2
        ANL     A,#0x8
        JZ      ??macMcuRfIsr_0
//  736   {
//  737     /*
//  738      *  Important!  Because of how the CSP programs are written, CSP_INT interrupts should
//  739      *  be processed before CSP_STOP interrupts.  This becomes an issue when there are
//  740      *  long critical sections.
//  741      */
//  742     /* clear flag */
//  743     RFIRQF1 = ~IRQ_CSP_MANINT;
        MOV     0x91,#-0x9
//  744     macCspTxIntIsr();
        ; Setup parameters for call to function macCspTxIntIsr
        LCALL   ??macCspTxIntIsr?relay
        SJMP    ??macMcuRfIsr_1
//  745   }
//  746   else if ((RFIRQF1 & IRQ_CSP_STOP) & rfim)
??macMcuRfIsr_0:
        MOV     A,0x91
        ANL     A,R2
        ANL     A,#0x10
        JZ      ??macMcuRfIsr_2
//  747   {
//  748     /* clear flag */
//  749     RFIRQF1 = ~IRQ_CSP_STOP;
        MOV     0x91,#-0x11
//  750     macCspTxStopIsr();
        ; Setup parameters for call to function macCspTxStopIsr
        LCALL   ??macCspTxStopIsr?relay
        SJMP    ??macMcuRfIsr_1
//  751   }
//  752   else if ((RFIRQF1 & IRQ_TXACKDONE) & rfim)
??macMcuRfIsr_2:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        PUSH    PSW
        CFI CFA_SP SP+-4
        MOV     A,0x91
        MOV     C,0xE0 /* A   */.0
        MOV     B.0,C
        LCALL   ?POP_BIT_ISP
        DEC     SP
        CFI CFA_SP SP+-3
        ANL     C,B.0
        JNC     ??macMcuRfIsr_1
//  753   {
//  754     /* disable interrupt - set up is for "one shot" operation */
//  755     RFIRQM1 &= ~IM_TXACKDONE;
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
        MOVX    @DPTR,A
//  756     macRxAckTxDoneCallback();
        ; Setup parameters for call to function macRxAckTxDoneCallback
        LCALL   ??macRxAckTxDoneCallback?relay
//  757   }
//  758 
//  759   rfim = RFIRQM0;
??macMcuRfIsr_1:
        MOV     DPTR,#0x61a3
        MOVX    A,@DPTR
        MOV     R2,A
//  760 
//  761   /* process RFIRQF0 next */
//  762   if ((RFIRQF0 & IRQ_FIFOP) & rfim)
        MOV     A,0xe9
        ANL     A,R2
        ANL     A,#0x4
        JZ      ??macMcuRfIsr_3
//  763   {
//  764     /* continue to execute interrupt handler as long as FIFOP is active */
//  765     do
//  766     {
//  767       macRxThresholdIsr();
??macMcuRfIsr_4:
        ; Setup parameters for call to function macRxThresholdIsr
        LCALL   ??macRxThresholdIsr?relay
//  768       RFIRQF0 = ~IRQ_FIFOP;
        MOV     0xe9,#-0x5
//  769     } while (FSMSTAT1 & FIFOP);
        MOV     DPTR,#0x6193
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??macMcuRfIsr_4
//  770   }
//  771   
//  772   CLEAR_SLEEP_MODE();
//  773   HAL_EXIT_ISR();  
??macMcuRfIsr_3:
        SJMP    ?Subroutine8
        CFI EndBlock cfiBlock37
        REQUIRE RFIRQF1
        REQUIRE S1CON
        REQUIRE _A_IEN0
        REQUIRE RFIRQF0
//  774 }
//  775 
//  776 
//  777 /**************************************************************************************************
//  778  * @fn          macMcuRfErrIsr
//  779  *
//  780  * @brief       Interrupt service routine that handles all RF Error interrupts.  Only the RX FIFO
//  781  *              overflow condition is handled.
//  782  *
//  783  * @param       none
//  784  *
//  785  * @return      none
//  786  **************************************************************************************************
//  787  */

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  788 HAL_ISR_FUNCTION( macMcuRfErrIsr, RFERR_VECTOR )
macMcuRfErrIsr:
        CFI Block cfiBlock38 Using cfiCommon1
        CFI Function macMcuRfErrIsr
//  789 {
        FUNCALL macMcuRfErrIsr, macRxFifoOverflowIsr
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  790   uint8 rferrm;
//  791   
//  792   HAL_ENTER_ISR();
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R6,A
        SETB    0xa8.7
//  793   
//  794   rferrm = RFERRM;
        MOV     DPTR,#0x61a5
        MOVX    A,@DPTR
        MOV     R2,A
//  795 
//  796   if ((RFERRF & RFERR_RXOVERF) & rferrm)
        MOV     A,0xbf
        ANL     A,R2
        ANL     A,#0x4
        JZ      ??macMcuRfErrIsr_0
//  797   {
//  798     RFERRF = ~RFERR_RXOVERF;
        MOV     0xbf,#-0x5
//  799     macRxFifoOverflowIsr();
        ; Setup parameters for call to function macRxFifoOverflowIsr
        LCALL   ??macRxFifoOverflowIsr?relay
//  800   }
//  801 
//  802   CLEAR_SLEEP_MODE();
//  803   HAL_EXIT_ISR();  
??macMcuRfErrIsr_0:
        LJMP    ?Subroutine8
        CFI EndBlock cfiBlock38
        REQUIRE _A_IEN0
        REQUIRE RFERRF
//  804 }
//  805 
//  806 
//  807 /**************************************************************************************************
//  808  * @fn          macMcuRecordMaxRssiStart
//  809  *
//  810  * @brief       Starts recording of the maximum received RSSI value.
//  811  *
//  812  * @param       none
//  813  *
//  814  * @return      none
//  815  **************************************************************************************************
//  816  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  817 MAC_INTERNAL_API void macMcuRecordMaxRssiStart(void)
macMcuRecordMaxRssiStart:
        CFI Block cfiBlock39 Using cfiCommon0
        CFI Function macMcuRecordMaxRssiStart
//  818 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  819   /* start maximum recorded value at the lowest possible value */
//  820   maxRssi = -128;
        MOV     A,#-0x80
        MOV     DPTR,#maxRssi
        MOVX    @DPTR,A
//  821 
//  822   /* enable timer overflow interrupt */
//  823   T2IRQM |= TIMER2_PERM;
        ORL     0xa7,#0x1
//  824 }
        LJMP    ?Subroutine6 & 0xFFFF
        CFI EndBlock cfiBlock39
        REQUIRE T2IRQM
//  825 
//  826 
//  827 /**************************************************************************************************
//  828  * @fn          macMcuRecordMaxRssiStop
//  829  *
//  830  * @brief       Stops recording of the maximum received RSSI.  It returns the maximum value
//  831  *              received since starting the recording.
//  832  *
//  833  * @param       none
//  834  *
//  835  * @return      maximum received RSSI value
//  836  **************************************************************************************************
//  837  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  838 MAC_INTERNAL_API int8 macMcuRecordMaxRssiStop(void)
macMcuRecordMaxRssiStop:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI Function macMcuRecordMaxRssiStop
//  839 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  840   /* disable timer overflow interrupt */
//  841   T2IRQM &= ~TIMER2_PERM;
        ANL     0xa7,#0xfe
//  842 
//  843   return(maxRssi);
        MOV     DPTR,#maxRssi
        MOVX    A,@DPTR
        MOV     R1,A
        LJMP    ?Subroutine6 & 0xFFFF
        CFI EndBlock cfiBlock40
        REQUIRE T2IRQM
//  844 }

        COMMON INTVEC:CODE:ROOT(0)
        ORG 3
`??macMcuRfErrIsr??INTVEC 3`:
        LJMP       (macMcuRfErrIsr)

        COMMON INTVEC:CODE:ROOT(0)
        ORG 83
`??macMcuTimer2Isr??INTVEC 83`:
        LJMP       (macMcuTimer2Isr)

        COMMON INTVEC:CODE:ROOT(0)
        ORG 131
`??macMcuRfIsr??INTVEC 131`:
        LJMP       (macMcuRfIsr)

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_ff000000:
        DD 4278190080

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_0:
        DD 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SetRandomSeedCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SetRandomSeedCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macMcuInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macMcuInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macMcuRandomByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macMcuRandomByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macMcuRandomWord?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macMcuRandomWord

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macMcuTimerForceDelay?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macMcuTimerForceDelay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macMcuTimerCapture?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macMcuTimerCapture

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macMcuOverflowCount?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macMcuOverflowCount

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macMcuOverflowCapture?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macMcuOverflowCapture

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macMcuOverflowSetCount?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macMcuOverflowSetCount

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macMcuOverflowSetCompare?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macMcuOverflowSetCompare

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macMcuTimer2OverflowWorkaround?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macMcuTimer2OverflowWorkaround

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macMcuPrecisionCount?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macMcuPrecisionCount

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macMcuRecordMaxRssiStart?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macMcuRecordMaxRssiStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macMcuRecordMaxRssiStop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macMcuRecordMaxRssiStop

        END
//  845 
//  846 
//  847 /*=================================================================================================
//  848  * @fn          macMcuRecordMaxRssiIsr
//  849  *
//  850  * @brief       Interrupt service routine called during recording of max RSSI value.
//  851  *
//  852  * @param       none
//  853  *
//  854  * @return      none
//  855  *=================================================================================================
//  856  */
//  857 static void mcuRecordMaxRssiIsr(void)
//  858 {
//  859   int8 rssi;
//  860 
//  861   /* read latest RSSI value */
//  862   rssi = RSSI;
//  863 
//  864   /* if new RSSI value is greater than the maximum already received, it is the new maximum */
//  865   if (rssi > maxRssi)
//  866   {
//  867     maxRssi = rssi;
//  868   }
//  869 }
//  870 
//  871 
//  872 /**************************************************************************************************
//  873  *                                  Compile Time Integrity Checks
//  874  **************************************************************************************************
//  875  */
//  876 #if ((IRQ_SFD != IM_SFD) || (IRQ_FIFOP != IM_FIFOP) || (IRQ_TXACKDONE != IM_TXACKDONE))
//  877 #error "ERROR: Compile time error with RFIRQFx vs RFIRQMx register defines."
//  878 #endif
//  879 
//  880 /**************************************************************************************************
//  881 */
// 
// 1 067 bytes in segment BANKED_CODE
//    84 bytes in segment BANK_RELAYS
//     9 bytes in segment INTVEC
//   231 bytes in segment NEAR_CODE
//    22 bytes in segment SFR_AN
//     8 bytes in segment XDATA_ROM_C
//     8 bytes in segment XDATA_Z
// 
// 1 382 bytes of CODE  memory (+  9 bytes shared)
//     0 bytes of CONST memory (+  8 bytes shared)
//     0 bytes of DATA  memory (+ 22 bytes shared)
//     8 bytes of XDATA memory
//
//Errors: none
//Warnings: none
