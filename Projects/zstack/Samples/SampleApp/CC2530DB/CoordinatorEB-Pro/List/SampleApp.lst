###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                15/Aug/2011  15:27:00 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\Source\Sampl #
#                          eApp.c                                             #
#    Command line       =  -f C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0 #
#                          ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ   #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0 #
#                          ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0  #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x11FF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\zhoufei\Desktop\Zi #
#                          gBee³ÌÐò\ZStack1.4.0ÐÞ¸Äºó\Projects\zstack\Samples #
#                          \SampleApp\Source\SampleApp.c -D ZIGBEEPRO -D      #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D           #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\zhoufei\Desktop\Z #
#                          igBee³ÌÐò\ZStack1.4.0ÐÞ¸Äºó\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\CoordinatorEB-Pro\List\ -lA   #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\Coo #
#                          rdinatorEB-Pro\List\ --diag_suppress Pe001,Pa010   #
#                          -o C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0 #
#                          ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          CoordinatorEB-Pro\Obj\ -e --require_prototypes     #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0 #
#                          ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                           -I C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4. #
#                          0ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\SOURCE\ -I C:\Users\zhoufei\Desktop\ZigBee³ÌÐò #
#                          \ZStack1.4.0ÐÞ¸Äºó\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I            #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MT\ -I                      #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I             #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I     #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I          #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I            #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\AF\ -I                #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I               #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I               #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I              #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I               #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I               #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I                #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\ZMAC\ -I                    #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I          #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I          #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I             #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I          #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I     #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_ #
#                          CHIP\ -I D:\IAR\8051\INC\ -I                       #
#                          D:\IAR\8051\INC\CLIB\ -Ohz                         #
#    List file          =  C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\Coo #
#                          rdinatorEB-Pro\List\SampleApp.lst                  #
#    Object file        =  C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\Coo #
#                          rdinatorEB-Pro\Obj\SampleApp.r51                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          **************************************************************************************************/
      8          
      9          /*********************************************************************
     10            This application isn't intended to do anything useful, it is
     11            intended to be a simple example of an application's structure.
     12          
     13            This application sends it's messages either as broadcast or
     14            broadcast filtered group messages.  The other (more normal)
     15            message addressing is unicast.  Most of the other sample
     16            applications are written to support the unicast message model.
     17          
     18            Key control:
     19              SW1:  Sends a flash command to all devices in Group 1.
     20              SW2:  Adds/Removes (toggles) this device in and out
     21                    of Group 1.  This will enable and disable the
     22                    reception of the flash command.
     23          *********************************************************************/
     24          
     25          /*********************************************************************
     26           * INCLUDES
     27           */
     28          #include "OSAL.h"
     29          #include "ZGlobals.h"
     30          #include "AF.h"
     31          #include "aps_groups.h"
     32          #include "ZDApp.h"
     33          
     34          #include "SampleApp.h"
     35          #include "SampleAppHw.h"
     36          
     37          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x88
   \   union <unnamed> volatile __sfr _A_TCON
   \                     _A_TCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     38          
     39          /* HAL */
     40          #include "hal_lcd.h"
     41          #include "hal_led.h"
     42          #include "hal_key.h"
     43          #include "OSAL_Nv.h"
     44          #include "ZDObject.h"
     45          /*********************************************************************
     46           * MACROS
     47           */
     48          
     49          /*********************************************************************
     50           * CONSTANTS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * GLOBAL VARIABLES
     59           */
     60          
     61          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     62          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   01000200     DW 1, 2
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
     63          {
     64            SAMPLEAPP_PERIODIC_CLUSTERID,
     65            SAMPLEAPP_FLASH_CLUSTERID
     66          };
     67          

   \                                 In  segment XDATA_ROM_C, align 1
     68          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F0100     DW 3848, 1
   \   000005   000A         DB 0, 10
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   0A           DB 10
   \   00000A   ....         DW SampleApp_ClusterList
     69          {
     70            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
     71            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
     72            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     73            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     74            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
     75            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     76            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
     77            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     78            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
     79          };
     80          
     81          // This is the Endpoint/Interface description.  It is defined here, but
     82          // filled-in in SampleApp_Init().  Another way to go would be to fill
     83          // in the structure here and make it a "const" (in code space).  The
     84          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     86          
     87          /*********************************************************************
     88           * EXTERNAL VARIABLES
     89           */
     90          
     91          /*********************************************************************
     92           * EXTERNAL FUNCTIONS
     93           */
     94          
     95          /*********************************************************************
     96           * LOCAL VARIABLES
     97           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     99                                    // This variable will be received when
    100                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    104          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          afAddrType_t SampleApp_SPI_SendData_DstAddr;
   \                     SampleApp_SPI_SendData_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          afAddrType_t SampleApp_TestID_DstAddr;
   \                     SampleApp_TestID_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    110          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          uint16 short_test;
   \                     short_test:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    114          
    115          extern uint8* rbuf;  //½ÓÊÕÊý¾ÝÖ¸Õë
    116          extern uint8  rxlen;    //½ÓÊÕÊý¾Ý³¤¶È
    117          extern uint8 buflen;
    118          extern devStartModes_t devStartMode;
    119          extern uint8 IDbuf[5];  //ID
    120          extern uint8 pIDbuf[5];
    121          extern void readbuf(void);
    122          /*********************************************************************
    123           * LOCAL FUNCTIONS
    124           */
    125          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    126          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    127          void SampleApp_SendPeriodicMessage( void );
    128          void SampleApp_SendFlashMessage( uint16 flashTime );
    129          
    130          void SampleApp_SPI(void);
    131          uint8 hextoword2(uint8 t);
    132          uint8 hextoword1(uint8 t);
    133          void Set_Panid(uint16 u16NewPaind);
    134          void comparebuf(uint8 *dat);
    135          void ReadPanidbuf(uint8 *dat);
    136          void SampleApp_SPI_SendData( uint8 *buf, uint8 len );
    137          void SampleApp_UART_EVT(void);
    138          
    139          //IDÀà
    140          void ReadID(uint8 *dat);
    141          void Set_id(uint16 u16NewPaind);
    142          void CompforID(uint8 *dat);
    143          
    144          //TESTÀà
    145          void Set_Test(uint8 u16NewPaind);
    146          void CheckToSetTest(uint8 *dat);
    147          
    148          //IDÀà
    149          void ID_Set(uint8 u16NewPaind);
    150          void IDISUSE(uint8 *dat);
    151          
    152          //Í³¼Æ¹¦ÄÜ
    153          void CompforTestID(uint8 *dat);
    154          void SampleApp_Broadcast_ForTest(void);
    155          
    156          //Í³¼Æ»ØÓ¦
    157          void SampleApp_SendTestMessage(void);
    158          
    159          //Ä¬ÈÏÇé¿ö
    160          void Init_IDandTest(void);
    161          
    162          //µçÑ¹¼ì²â
    163          uint8 myApp_ReadBattery( void );
    164          void Read_Battery(void);
    165          void SampleApp_Send_VDD_Message(void);
    166          void SampleApp_Broadcast_Vdd(void);
    167          void CompForVdd(uint8 *dat);
    168          
    169          //²âÊÔ½ÚµãID
    170          void CompforTESTID(uint8 *dat);
    171          void SampleApp_Broadcast_TEST_ID(void);
    172          void SampleApp_Send_TestID_Message(void);
    173          
    174          //²âÊÔ½ÚµãBATTERY
    175          void SampleApp_Send_TestBATTERY_Message(void);
    176          void SampleApp_Broadcast_TEST_BATTERY(void);
    177          void CompforTEST_BATTERY(uint8 *dat);
    178          
    179          /*********************************************************************
    180           * NETWORK LAYER CALLBACKS
    181           */
    182          
    183          /*********************************************************************
    184           * PUBLIC FUNCTIONS
    185           */
    186          
    187          /*********************************************************************
    188           * @fn      SampleApp_Init
    189           *
    190           * @brief   Initialization function for the Generic App Task.
    191           *          This is called during initialization and should contain
    192           *          any application specific initialization (ie. hardware
    193           *          initialization/setup, table initialization, power up
    194           *          notificaiton ... ).
    195           *
    196           * @param   task_id - the ID assigned by OSAL.  This ID should be
    197           *                    used to send messages and set timers.
    198           *
    199           * @return  none
    200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    201          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    202          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    203            SampleApp_TaskID = task_id;
   \   000005   E9           MOV     A,R1
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    204            SampleApp_NwkState = DEV_INIT;
   \   00000A   7401         MOV     A,#0x1
   \   00000C   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000F   F0           MOVX    @DPTR,A
    205            SampleApp_TransID = 0;
   \   000010   E4           CLR     A
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   F0           MOVX    @DPTR,A
    206          
    207            // Device hardware initialization can be added here or in main() (Zmain.c).
    208            // If the hardware is application specific - add it here.
    209            // If the hardware is other parts of the device add it in main().
    210          
    211           /*#if defined ( BUILD_ALL_DEVICES )
    212            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    213            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    214            // together - if they are - we will start up a coordinator. Otherwise,
    215            // the device will start as a router.
    216            if ( readCoordinatorJumper() )
    217              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    218            else
    219              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    220          #endif // BUILD_ALL_DEVICES*/
    221          
    222          #if defined ( HOLD_AUTO_START )
    223            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    224            //  from starting the device and wait for the application to
    225            //  start the device.
    226            ZDOInitDevice(0);
    227          #endif
    228          
    229            // Setup for the periodic message's destination address
    230            // TEST¹¦ÄÜ£¬ÓÃµ¥²¥£¬¹ã²¥Õ¼´ø¿í£¡£¡
    231            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000015   7402         MOV     A,#0x2
   \   000017   90....       MOV     DPTR,#(SampleApp_Periodic_DstAddr + 8)
   \   00001A   F0           MOVX    @DPTR,A
    232            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00001B   7414         MOV     A,#0x14
   \   00001D   90....       MOV     DPTR,#(SampleApp_Periodic_DstAddr + 9)
   \   000020   F0           MOVX    @DPTR,A
    233            SampleApp_Periodic_DstAddr.addr.shortAddr = 0x0000;
   \   000021   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000024   E4           CLR     A
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   F0           MOVX    @DPTR,A
    234          
    235            // Setup for the flash command's destination address - Group 1
    236            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000028   7401         MOV     A,#0x1
   \   00002A   90....       MOV     DPTR,#(SampleApp_Flash_DstAddr + 8)
   \   00002D   F0           MOVX    @DPTR,A
    237            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002E   7414         MOV     A,#0x14
   \   000030   90....       MOV     DPTR,#(SampleApp_Flash_DstAddr + 9)
   \   000033   F0           MOVX    @DPTR,A
    238            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000034   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000037   7401         MOV     A,#0x1
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   E4           CLR     A
   \   00003C   F0           MOVX    @DPTR,A
    239          
    240            // Fill out the endpoint description.
    241            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003D   7414         MOV     A,#0x14
   \   00003F   90....       MOV     DPTR,#SampleApp_epDesc
   \   000042   F0           MOVX    @DPTR,A
    242            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000043   90....       MOV     DPTR,#(SampleApp_epDesc + 1)
   \   000046   74..         MOV     A,#(SampleApp_TaskID & 0xff)
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   74..         MOV     A,#((SampleApp_TaskID >> 8) & 0xff)
   \   00004C   F0           MOVX    @DPTR,A
    243            SampleApp_epDesc.simpleDesc
    244                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00004D   90....       MOV     DPTR,#(SampleApp_epDesc + 3)
   \   000050   74..         MOV     A,#(SampleApp_SimpleDesc & 0xff)
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   74..         MOV     A,#((SampleApp_SimpleDesc >> 8) & 0xff)
   \   000056   F0           MOVX    @DPTR,A
    245            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000057   E4           CLR     A
   \   000058   90....       MOV     DPTR,#(SampleApp_epDesc + 5)
   \   00005B   F0           MOVX    @DPTR,A
    246          
    247            // Register the endpoint description with the AF
    248            afRegister( &SampleApp_epDesc );
   \   00005C                ; Setup parameters for call to function afRegister
   \   00005C   7A..         MOV     R2,#(SampleApp_epDesc & 0xff)
   \   00005E   7B..         MOV     R3,#((SampleApp_epDesc >> 8) & 0xff)
   \   000060   12....       LCALL   ??afRegister?relay
    249          
    250            // Register for all key events - This app will handle all key events
    251            RegisterForKeys( SampleApp_TaskID );
   \   000063                ; Setup parameters for call to function RegisterForKeys
   \   000063   90....       MOV     DPTR,#SampleApp_TaskID
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   ??RegisterForKeys?relay
    252          
    253            // By default, all devices start out in Group 1
    254            SampleApp_Group.ID = 0x0001;
   \   00006B   90....       MOV     DPTR,#SampleApp_Group
   \   00006E   7401         MOV     A,#0x1
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   E4           CLR     A
   \   000073   F0           MOVX    @DPTR,A
    255            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   000074                ; Setup parameters for call to function osal_memcpy
   \   000074   75....       MOV     ?V0 + 0,#(`?<Constant "Group 1">` & 0xff)
   \   000077   75....       MOV     ?V0 + 1,#((`?<Constant "Group 1">` >> 8) & 0xff)
   \   00007A   F5..         MOV     ?V0 + 2,A
   \   00007C   78..         MOV     R0,#?V0 + 0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000081   7C07         MOV     R4,#0x7
   \   000083   7D00         MOV     R5,#0x0
   \   000085   7A..         MOV     R2,#((SampleApp_Group + 2) & 0xff)
   \   000087   7B..         MOV     R3,#(((SampleApp_Group + 2) >> 8) & 0xff)
   \   000089   12....       LCALL   ??osal_memcpy?relay
   \   00008C   7403         MOV     A,#0x3
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
    256            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   000091                ; Setup parameters for call to function aps_AddGroup
   \   000091   7A..         MOV     R2,#(SampleApp_Group & 0xff)
   \   000093   7B..         MOV     R3,#((SampleApp_Group >> 8) & 0xff)
   \   000095   7914         MOV     R1,#0x14
   \   000097   12....       LCALL   ??aps_AddGroup?relay
    257          
    258          #if defined ( LCD_SUPPORTED )
    259            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   00009A                ; Setup parameters for call to function HalLcdWriteString
   \   00009A   7901         MOV     R1,#0x1
   \   00009C   7A..         MOV     R2,#(`?<Constant "SampleApp">` & 0xff)
   \   00009E   7B..         MOV     R3,#((`?<Constant "SampleApp">` >> 8) & 0xff)
   \   0000A0   12....       LCALL   ??HalLcdWriteString?relay
    260          #endif
    261            
    262            readbuf();//³õÊ¼»¯£¬»ñÈ¡IDÖµ
   \   0000A3                ; Setup parameters for call to function readbuf
   \   0000A3   12....       LCALL   ??readbuf?relay
    263            Init_IDandTest();//ÉèÖÃÄ¬ÈÏÆôÓÃIDºÍTEST¹¦ÄÜ
   \   0000A6                ; Setup parameters for call to function Init_IDandTest
   \   0000A6   12....       LCALL   ??Init_IDandTest?relay
    264          }
   \   0000A9   7F03         MOV     R7,#0x3
   \   0000AB   02....       LJMP    ?BANKED_LEAVE_XDATA
    265          
    266          /*********************************************************************
    267           * @fn      SampleApp_ProcessEvent
    268           *
    269           * @brief   Generic Application Task event processor.  This function
    270           *          is called to process all events for the task.  Events
    271           *          include timers, messages and any other user defined events.
    272           *
    273           * @param   task_id  - The OSAL assigned task ID.
    274           * @param   events - events to process.  This is a bit map and can
    275           *                   contain more than one event.
    276           *
    277           * @return  none
    278           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    279          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    280          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    281            afIncomingMSGPacket_t *MSGpkt;
    282            (void)task_id;  // Intentionally unreferenced parameter
    283          
    284            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??SampleApp_ProcessEvent_0
   \   000010   E9           MOV     A,R1
   \                     ??SampleApp_ProcessEvent_0:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??SampleApp_ProcessEvent_1 & 0xFFFF
    285            {
    286              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000016                ; Setup parameters for call to function osal_msg_receive
   \   000016   8033         SJMP    ??SampleApp_ProcessEvent_2
    287              while ( MSGpkt )
    288              {
    289                switch ( MSGpkt->hdr.event )
    290                {
    291                  // Received when a key is pressed
    292                  case KEY_CHANGE:
    293                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    294                    break;
    295          
    296                  // Received when a messages is received (OTA) for this endpoint
    297                  case AF_INCOMING_MSG_CMD:
    298                    SampleApp_MessageMSGCB( MSGpkt );
    299                    break;
    300          
    301                  // Received whenever the device changes state in the network
    302                  case ZDO_STATE_CHANGE:
    303                    
    304                    HAL_TURN_ON_LED2();//¸Ä±äLED1µÄ×´Ì¬
   \                     ??SampleApp_ProcessEvent_3:
   \   000018   C292         CLR     0x90.2
    305                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \   00001A   85..82       MOV     DPL,?V0 + 0
   \   00001D   85..83       MOV     DPH,?V0 + 1
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   90....       MOV     DPTR,#SampleApp_NwkState
   \   000025   F0           MOVX    @DPTR,A
    306                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    307                        || (SampleApp_NwkState == DEV_ROUTER)
    308                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000026   6409         XRL     A,#0x9
   \   000028   600A         JZ      ??SampleApp_ProcessEvent_4
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6407         XRL     A,#0x7
   \   00002D   6005         JZ      ??SampleApp_ProcessEvent_4
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6406         XRL     A,#0x6
   \   000032   7010         JNZ     ??SampleApp_ProcessEvent_5
    309                    {
    310                      // Start sending the periodic message in a regular interval.
    311                      /*osal_start_timerEx( SampleApp_TaskID,
    312                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    313                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );*/
    314                      //osal_start_timerEx( SampleApp_TaskID,
    315                       //                  UART_RX_CB_EVT ,
    316                       //                 SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    317                       osal_start_timerEx( SampleApp_TaskID, 
    318                                        SAMPLEAPP_SEND_UART_MSG_EVT,
    319                                        SAMPLEAPP_SEND_UART_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_4:
   \   000034                ; Setup parameters for call to function osal_start_timerEx
   \   000034   7CE8         MOV     R4,#-0x18
   \   000036   7D03         MOV     R5,#0x3
   \   000038   7A10         MOV     R2,#0x10
   \   00003A   7B00         MOV     R3,#0x0
   \   00003C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   12....       LCALL   ??osal_start_timerEx?relay
    320                    }
    321                    else
    322                    {
    323                      // Device is no longer in the network
    324                    }
    325                    break;
    326          
    327                  default:
    328                    break;
    329                }
    330          
    331                // Release the memory
    332                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_5:
   \   000044                ; Setup parameters for call to function osal_msg_deallocate
   \   000044   AA..         MOV     R2,?V0 + 0
   \   000046   AB..         MOV     R3,?V0 + 1
   \   000048   12....       LCALL   ??osal_msg_deallocate?relay
    333          
    334                // Next - if one is available
    335                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00004B                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_2:
   \   00004B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   ??osal_msg_receive?relay
   \   000053   8A..         MOV     ?V0 + 0,R2
   \   000055   8B..         MOV     ?V0 + 1,R3
   \   000057   E5..         MOV     A,?V0 + 0
   \   000059   7002         JNZ     ??SampleApp_ProcessEvent_6
   \   00005B   E5..         MOV     A,?V0 + 1
   \                     ??SampleApp_ProcessEvent_6:
   \   00005D   603A         JZ      ??SampleApp_ProcessEvent_7
   \   00005F   85..82       MOV     DPL,?V0 + 0
   \   000062   85..83       MOV     DPH,?V0 + 1
   \   000065   E0           MOVX    A,@DPTR
   \   000066   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for SampleApp_ProcessEvent>_0`:
   \   000069   00           DB        0
   \   00006A   03           DB        3
   \   00006B   1A           DB        26
   \   00006C   ....         DW        ??SampleApp_ProcessEvent_8
   \   00006E   C0           DB        192
   \   00006F   ....         DW        ??SampleApp_ProcessEvent_9
   \   000071   D1           DB        209
   \   000072   ....         DW        ??SampleApp_ProcessEvent_3
   \   000074   ....         DW        ??SampleApp_ProcessEvent_5
   \                     ??SampleApp_ProcessEvent_9:
   \   000076                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000076   85..82       MOV     DPL,?V0 + 0
   \   000079   85..83       MOV     DPH,?V0 + 1
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   FA           MOV     R2,A
   \   000081   85..82       MOV     DPL,?V0 + 0
   \   000084   85..83       MOV     DPH,?V0 + 1
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00008E   80B4         SJMP    ??SampleApp_ProcessEvent_5
   \                     ??SampleApp_ProcessEvent_8:
   \   000090                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000090   AA..         MOV     R2,?V0 + 0
   \   000092   AB..         MOV     R3,?V0 + 1
   \   000094   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000097   80AB         SJMP    ??SampleApp_ProcessEvent_5
    336              }
    337          
    338              // return unprocessed events
    339              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_7:
   \   000099   EE           MOV     A,R6
   \   00009A   FA           MOV     R2,A
   \   00009B   7480         MOV     A,#-0x80
   \   00009D   6F           XRL     A,R7
   \                     ??SampleApp_ProcessEvent_10:
   \   00009E   FB           MOV     R3,A
   \   00009F   8052         SJMP    ??SampleApp_ProcessEvent_11
    340            }
    341          
    342            // Send a message out - This event is generated by a timer
    343            //  (setup in SampleApp_Init()).
    344            if ( events & UART_RX_CB_EVT)
   \                     ??SampleApp_ProcessEvent_1:
   \   0000A1   EE           MOV     A,R6
   \   0000A2   5402         ANL     A,#0x2
   \   0000A4   600A         JZ      ??SampleApp_ProcessEvent_12
    345            {
    346          
    347              SampleApp_UART_EVT();
   \   0000A6                ; Setup parameters for call to function SampleApp_UART_EVT
   \   0000A6   12....       LCALL   ??SampleApp_UART_EVT?relay
    348              return (events ^ UART_RX_CB_EVT);
   \   0000A9   7402         MOV     A,#0x2
   \                     ??SampleApp_ProcessEvent_13:
   \   0000AB   6E           XRL     A,R6
   \   0000AC   FA           MOV     R2,A
   \   0000AD   EF           MOV     A,R7
   \   0000AE   80EE         SJMP    ??SampleApp_ProcessEvent_10
    349            }
    350            
    351            if(events&SAMPLEAPP_SEND_UART_MSG_EVT)
   \                     ??SampleApp_ProcessEvent_12:
   \   0000B0   EE           MOV     A,R6
   \   0000B1   5410         ANL     A,#0x10
   \   0000B3   600A         JZ      ??SampleApp_ProcessEvent_14
    352            {
    353               SampleApp_SPI();
   \   0000B5                ; Setup parameters for call to function SampleApp_SPI
   \   0000B5   12....       LCALL   ??SampleApp_SPI?relay
    354               Read_Battery();
   \   0000B8                ; Setup parameters for call to function Read_Battery
   \   0000B8   12....       LCALL   ??Read_Battery?relay
    355               
    356               return (events ^ SAMPLEAPP_SEND_UART_MSG_EVT);
   \   0000BB   7410         MOV     A,#0x10
   \   0000BD   80EC         SJMP    ??SampleApp_ProcessEvent_13
    357            }
    358            
    359              if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
    360            {
    361              // Send the periodic message
    362              /*SampleApp_SendPeriodicMessage();
    363          
    364              // Setup to send message again in normal period (+ a little jitter)
    365              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    366                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
    367          
    368              // return unprocessed events
    369              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);*/
    370            }
    371            
    372            if(events&SAMPLEAPP_SEND_TEST_MSG_EVT)
   \                     ??SampleApp_ProcessEvent_14:
   \   0000BF   EE           MOV     A,R6
   \   0000C0   5404         ANL     A,#0x4
   \   0000C2   6007         JZ      ??SampleApp_ProcessEvent_15
    373            {
    374               SampleApp_SendTestMessage();
   \   0000C4                ; Setup parameters for call to function SampleApp_SendTestMessage
   \   0000C4   12....       LCALL   ??SampleApp_SendTestMessage?relay
    375               return (events ^ SAMPLEAPP_SEND_TEST_MSG_EVT);
   \   0000C7   7404         MOV     A,#0x4
   \   0000C9   80E0         SJMP    ??SampleApp_ProcessEvent_13
    376            }
    377            
    378            if(events&SAMPLEAPP_SEND_VDD_MSG_EVT)
   \                     ??SampleApp_ProcessEvent_15:
   \   0000CB   EE           MOV     A,R6
   \   0000CC   5408         ANL     A,#0x8
   \   0000CE   6007         JZ      ??SampleApp_ProcessEvent_16
    379            {
    380               SampleApp_Send_VDD_Message();
   \   0000D0                ; Setup parameters for call to function SampleApp_Send_VDD_Message
   \   0000D0   12....       LCALL   ??SampleApp_Send_VDD_Message?relay
    381               return (events ^ SAMPLEAPP_SEND_VDD_MSG_EVT);
   \   0000D3   7408         MOV     A,#0x8
   \   0000D5   80D4         SJMP    ??SampleApp_ProcessEvent_13
    382            }
    383            
    384              if(events & SAMLPEAPP_TESTID_MSG_EVT)
   \                     ??SampleApp_ProcessEvent_16:
   \   0000D7   EE           MOV     A,R6
   \   0000D8   5420         ANL     A,#0x20
   \   0000DA   6007         JZ      ??SampleApp_ProcessEvent_17
    385            {
    386               //´¦Àí²âÊÔ½ÚµãÇëÇóIDÊÂ¼þ
    387               SampleApp_Send_TestID_Message();
   \   0000DC                ; Setup parameters for call to function SampleApp_Send_TestID_Message
   \   0000DC   12....       LCALL   ??SampleApp_Send_TestID_Message?relay
    388               return (events ^ SAMLPEAPP_TESTID_MSG_EVT);
   \   0000DF   7420         MOV     A,#0x20
   \   0000E1   80C8         SJMP    ??SampleApp_ProcessEvent_13
    389            } 
    390            
    391              
    392            if(events & SAMLPEAPP_TESTBATTERY_MSG_EVT)
   \                     ??SampleApp_ProcessEvent_17:
   \   0000E3   EE           MOV     A,R6
   \   0000E4   5440         ANL     A,#0x40
   \   0000E6   6007         JZ      ??SampleApp_ProcessEvent_18
    393            {
    394               //´¦Àí²âÊÔ½ÚµãÇëÇóBATTERYÊÂ¼þ
    395               SampleApp_Send_TestBATTERY_Message();
   \   0000E8                ; Setup parameters for call to function SampleApp_Send_TestBATTERY_Message
   \   0000E8   12....       LCALL   ??SampleApp_Send_TestBATTERY_Message?relay
    396               return (events ^ SAMLPEAPP_TESTBATTERY_MSG_EVT);
   \   0000EB   7440         MOV     A,#0x40
   \   0000ED   80BC         SJMP    ??SampleApp_ProcessEvent_13
    397            } 
    398            // Discard unknown events
    399            return 0;
   \                     ??SampleApp_ProcessEvent_18:
   \   0000EF   7A00         MOV     R2,#0x0
   \   0000F1   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_11:
   \   0000F3   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   \   0000F6                REQUIRE _A_P1
    400          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    401          
    402          /*********************************************************************
    403           * Event Generation Functions
    404           */
    405          /*********************************************************************
    406           * @fn      SampleApp_HandleKeys
    407           *
    408           * @brief   Handles all key events for this device.
    409           *
    410           * @param   shift - true if in shift/alt.
    411           * @param   keys - bit field for key events. Valid entries:
    412           *                 HAL_KEY_SW_2
    413           *                 HAL_KEY_SW_1
    414           *
    415           * @return  none
    416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    418          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    419            (void)shift;  // Intentionally unreferenced parameter
    420            
    421            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   500A         JNC     ??SampleApp_HandleKeys_0
    422            {
    423              /* This key sends the Flash Command is sent to Group 1.
    424               * This device will not receive the Flash Command from this
    425               * device (even if it belongs to group 1).
    426               */
    427              osal_mem_free( rbuf ); 
   \   00000B                ; Setup parameters for call to function osal_mem_free
   \   00000B   12....       LCALL   ?Subroutine17 & 0xFFFF
    428              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \                     ??CrossCallReturnLabel_31:
   \   00000E                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000E   7AE8         MOV     R2,#-0x18
   \   000010   7B03         MOV     R3,#0x3
   \   000012   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    429            }
    430          
    431            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000015   EE           MOV     A,R6
   \   000016   A2E1         MOV     C,0xE0 /* A   */.1
   \   000018   5023         JNC     ??SampleApp_HandleKeys_1
    432            {
    433              /* The Flashr Command is sent to Group 1.
    434               * This key toggles this device in and out of group 1.
    435               * If this device doesn't belong to group 1, this application
    436               * will not receive the Flash command sent to group 1.
    437               */
    438              aps_Group_t *grp;
    439              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    440              if ( grp )
   \   00001A                ; Setup parameters for call to function aps_FindGroup
   \   00001A   7A01         MOV     R2,#0x1
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   7914         MOV     R1,#0x14
   \   000020   12....       LCALL   ??aps_FindGroup?relay
   \   000023   EA           MOV     A,R2
   \   000024   7001         JNZ     ??SampleApp_HandleKeys_2
   \   000026   EB           MOV     A,R3
   \                     ??SampleApp_HandleKeys_2:
   \   000027   600B         JZ      ??SampleApp_HandleKeys_3
    441              {
    442                // Remove from the group
    443                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000029                ; Setup parameters for call to function aps_RemoveGroup
   \   000029   7A01         MOV     R2,#0x1
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   7914         MOV     R1,#0x14
   \   00002F   12....       LCALL   ??aps_RemoveGroup?relay
   \   000032   8009         SJMP    ??SampleApp_HandleKeys_1
    444              }
    445              else
    446              {
    447                // Add to the flash group
    448                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_3:
   \   000034                ; Setup parameters for call to function aps_AddGroup
   \   000034   7A..         MOV     R2,#(SampleApp_Group & 0xff)
   \   000036   7B..         MOV     R3,#((SampleApp_Group >> 8) & 0xff)
   \   000038   7914         MOV     R1,#0x14
   \   00003A   12....       LCALL   ??aps_AddGroup?relay
    449              }
    450            }
    451          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003D   02....       LJMP    ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   90....       MOV     DPTR,#rbuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   12....       LCALL   ??osal_mem_free?relay
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    452          
    453          /*********************************************************************
    454           * LOCAL FUNCTIONS
    455           */
    456          
    457          /*********************************************************************
    458           * @fn      SampleApp_MessageMSGCB
    459           *
    460           * @brief   Data message processor callback.  This function processes
    461           *          any incoming data - probably from other devices.  So, based
    462           *          on cluster ID, perform the intended action.
    463           *
    464           * @param   none
    465           *
    466           * @return  none
    467           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    468          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    469          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    470            //uint8 shortadd1[1];
    471            uint8 *pointer1;  
    472            uint8 shortadd[5];
    473            uint8 checktest;
    474            uint8 u16NewPaind;
    475            switch ( pkt->clusterId )
   \   00000A   EA           MOV     A,R2
   \   00000B   2421         ADD     A,#0x21
   \   00000D   F8           MOV     R0,A
   \   00000E   EB           MOV     A,R3
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   FE           MOV     R6,A
   \   000014   E9           MOV     A,R1
   \   000015   FF           MOV     R7,A
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 1,A
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00002A   0100         DW        1
   \   00002C   09           DB        9
   \   00002D   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00002F   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000031   ....         DW        ??SampleApp_MessageMSGCB_2
   \   000033   ....         DW        ??SampleApp_MessageMSGCB_3
   \   000035   ....         DW        ??SampleApp_MessageMSGCB_4
   \   000037   ....         DW        ??SampleApp_MessageMSGCB_5
   \   000039   ....         DW        ??SampleApp_MessageMSGCB_6
   \   00003B   ....         DW        ??SampleApp_MessageMSGCB_7
   \   00003D   ....         DW        ??SampleApp_MessageMSGCB_3
   \   00003F   ....         DW        ??SampleApp_MessageMSGCB_8
   \   000041   ....         DW        ??SampleApp_MessageMSGCB_5
    476            {
    477              case SAMPLEAPP_PERIODIC_CLUSTERID:   //Õâ¸öÊÇÖÜÆÚÐÅÏ¢ÓÃÓÚ²âÊÔ£¬Ö÷ÒªÊÇÉè±¸ID
    478                
    479                shortadd[0]=pkt->cmd.Data[0];
   \                     ??SampleApp_MessageMSGCB_1:
   \   000043   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000046   E0           MOVX    A,@DPTR
   \   000047   C0E0         PUSH    A
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   D0E0         POP     A
   \   000050   12....       LCALL   ?Subroutine7 & 0xFFFF
    480                shortadd[1]=pkt->cmd.Data[1];
   \                     ??CrossCallReturnLabel_11:
   \   000053   E0           MOVX    A,@DPTR
   \   000054   C0E0         PUSH    A
   \   000056   7403         MOV     A,#0x3
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   D0E0         POP     A
   \   00005D   12....       LCALL   ?Subroutine7 & 0xFFFF
    481                shortadd[2]=pkt->cmd.Data[2];
   \                     ??CrossCallReturnLabel_12:
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   C0E0         PUSH    A
   \   000064   7404         MOV     A,#0x4
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   D0E0         POP     A
   \   00006B   12....       LCALL   ?Subroutine5 & 0xFFFF
    482                shortadd[3]=pkt->cmd.Data[3];
   \                     ??CrossCallReturnLabel_7:
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   C0E0         PUSH    A
   \   000071   7405         MOV     A,#0x5
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   D0E0         POP     A
   \   000078   12....       LCALL   ?Subroutine5 & 0xFFFF
    483                shortadd[4]=pkt->cmd.Data[4];
   \                     ??CrossCallReturnLabel_8:
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   C0E0         PUSH    A
   \   00007F   7406         MOV     A,#0x6
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   D0E0         POP     A
   \   000086   F0           MOVX    @DPTR,A
    484                HAL_TOGGLE_LED1();   
   \   000087   A291         MOV     C,0x90.1
   \   000089   5004         JNC     ??SampleApp_MessageMSGCB_9
   \   00008B   C291         CLR     0x90.1
   \   00008D   8002         SJMP    ??SampleApp_MessageMSGCB_10
   \                     ??SampleApp_MessageMSGCB_9:
   \   00008F   D291         SETB    0x90.1
    485                
    486              //ÕâÀïÔÚÐ­µ÷Æ÷¶Ë×îÖÕ¾ö¶¨ÊÇ·ñÆôÓÃTEST¹¦ÄÜ  
    487              if ( osal_nv_item_init( ZCD_NV_TEST,8,&checktest ) == ZSUCCESS )  
   \                     ??SampleApp_MessageMSGCB_10:
   \   000091                ; Setup parameters for call to function osal_nv_item_init
   \   000091   7401         MOV     A,#0x1
   \   000093   12....       LCALL   ?XSTACK_DISP0_8
   \   000096   8582..       MOV     ?V0 + 0,DPL
   \   000099   8583..       MOV     ?V0 + 1,DPH
   \   00009C   78..         MOV     R0,#?V0 + 0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   7C08         MOV     R4,#0x8
   \   0000A3   7D00         MOV     R5,#0x0
   \   0000A5   7A86         MOV     R2,#-0x7a
   \   0000A7   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0000AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AD   E9           MOV     A,R1
   \   0000AE   6003         JZ      $+5
   \   0000B0   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    488                {
    489                  osal_nv_read(ZCD_NV_TEST,0,1,&checktest);
   \   0000B3                ; Setup parameters for call to function osal_nv_read
   \   0000B3   78..         MOV     R0,#?V0 + 0
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   75..01       MOV     ?V0 + 0,#0x1
   \   0000BB   75..00       MOV     ?V0 + 1,#0x0
   \   0000BE   78..         MOV     R0,#?V0 + 0
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C3   7C00         MOV     R4,#0x0
   \   0000C5   7D00         MOV     R5,#0x0
   \   0000C7   7A86         MOV     R2,#-0x7a
   \   0000C9   7B04         MOV     R3,#0x4
   \   0000CB   12....       LCALL   ??osal_nv_read?relay
   \   0000CE   7404         MOV     A,#0x4
   \   0000D0   12....       LCALL   ?DEALLOC_XSTACK8
    490                  if(checktest==1)//Èç¹û¶ÁÈ¡µÄÊÇ1ÔòÆôÓÃTEST¹¦ÄÜ£¬Èç¹ûÊÇ0Ôò½ûÓÃTEST¹¦ÄÜ
   \   0000D3   7401         MOV     A,#0x1
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   6401         XRL     A,#0x1
   \   0000DB   6003         JZ      $+5
   \   0000DD   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    491                  {
    492                    HalUARTWrite(0,&shortadd[0],5);
   \   0000E0                ; Setup parameters for call to function HalUARTWrite
   \   0000E0   7C05         MOV     R4,#0x5
   \   0000E2   7D00         MOV     R5,#0x0
   \   0000E4   7402         MOV     A,#0x2
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \                     ??SampleApp_MessageMSGCB_11:
   \   0000E9   AA82         MOV     R2,DPL
   \   0000EB   AB83         MOV     R3,DPH
   \                     ??SampleApp_MessageMSGCB_12:
   \   0000ED   7900         MOV     R1,#0x0
   \   0000EF   12....       LCALL   ??HalUARTWrite?relay
   \   0000F2   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    493                  }
    494                } 
    495                
    496                break;
    497          
    498              case SAMPLEAPP_FLASH_CLUSTERID:      
    499                //shortadd1[0]='\n';       
    500                
    501              if ( osal_nv_item_init( ZCD_NV_IDSET,1,&u16NewPaind ) == ZSUCCESS )  
   \                     ??SampleApp_MessageMSGCB_2:
   \   0000F5                ; Setup parameters for call to function osal_nv_item_init
   \   0000F5   85..82       MOV     DPL,?XSP + 0
   \   0000F8   85..83       MOV     DPH,?XSP + 1
   \   0000FB   8582..       MOV     ?V0 + 0,DPL
   \   0000FE   8583..       MOV     ?V0 + 1,DPH
   \   000101   78..         MOV     R0,#?V0 + 0
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000109   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010C   E9           MOV     A,R1
   \   00010D   7020         JNZ     ??SampleApp_MessageMSGCB_13
    502                {
    503                   osal_nv_read(ZCD_NV_IDSET,0,1,&u16NewPaind);
   \   00010F                ; Setup parameters for call to function osal_nv_read
   \   00010F   78..         MOV     R0,#?V0 + 0
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000114   75..01       MOV     ?V0 + 0,#0x1
   \   000117   75..00       MOV     ?V0 + 1,#0x0
   \   00011A   78..         MOV     R0,#?V0 + 0
   \   00011C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011F   7C00         MOV     R4,#0x0
   \   000121   7D00         MOV     R5,#0x0
   \   000123   7A87         MOV     R2,#-0x79
   \   000125   7B04         MOV     R3,#0x4
   \   000127   12....       LCALL   ??osal_nv_read?relay
   \   00012A   7404         MOV     A,#0x4
   \   00012C   12....       LCALL   ?DEALLOC_XSTACK8
    504                }  
    505                if(u16NewPaind==1)//´øID
   \                     ??SampleApp_MessageMSGCB_13:
   \   00012F   85..82       MOV     DPL,?XSP + 0
   \   000132   85..83       MOV     DPH,?XSP + 1
   \   000135   E0           MOVX    A,@DPTR
   \   000136   6401         XRL     A,#0x1
   \   000138   7009         JNZ     ??SampleApp_MessageMSGCB_14
    506                {
    507                  pointer1=&pkt->cmd.Data[1];  //½ÓÊÕÊý¾ÝÖ¸Õë,Ö¸ÏòÊý¾Ý
    508                  HalUARTWrite(0,pointer1,pkt->cmd.Data[0]);//cmd.Data[0]ÊÇÊý¾ÝµÄ´óÐ¡
   \                     ??SampleApp_MessageMSGCB_5:
   \   00013A   12....       LCALL   ?Subroutine15 & 0xFFFF
    509                 // HalUARTWrite(0,&shortadd1[0],1);//Õâ¸öÓÃÀ´ÏÔÊ¾µÄ»»ÐÐ
    510                }
   \                     ??CrossCallReturnLabel_27:
   \   00013D   FC           MOV     R4,A
   \   00013E   7D00         MOV     R5,#0x0
   \   000140   A3           INC     DPTR
   \   000141   80A6         SJMP    ??SampleApp_MessageMSGCB_11
    511                else
    512                {
    513                  pointer1=&pkt->cmd.Data[9];  //½ÓÊÕÊý¾ÝÖ¸Õë,Ö¸ÏòÊý¾Ý
    514                  HalUARTWrite(SERIAL_APP_PORT,pointer1,pkt->cmd.Data[0]-8);//cmd.Data[0]ÊÇÊý¾ÝµÄ´óÐ¡
   \                     ??SampleApp_MessageMSGCB_14:
   \   000143   12....       LCALL   ?Subroutine15 & 0xFFFF
    515                 // while(Delay--);
    516                 // HalUARTWrite(SERIAL_APP_PORT,&shortadd1[0],1);//Õâ¸öÓÃÀ´ÏÔÊ¾µÄ»»ÐÐ
    517                }
   \                     ??CrossCallReturnLabel_28:
   \   000146   F8           MOV     R0,A
   \   000147   74F8         MOV     A,#-0x8
   \   000149   28           ADD     A,R0
   \   00014A   FC           MOV     R4,A
   \   00014B   74FF         MOV     A,#-0x1
   \   00014D   3400         ADDC    A,#0x0
   \   00014F   FD           MOV     R5,A
   \   000150   E582         MOV     A,DPL
   \   000152   2409         ADD     A,#0x9
   \   000154   FA           MOV     R2,A
   \   000155   E583         MOV     A,DPH
   \   000157   3400         ADDC    A,#0x0
   \                     ??SampleApp_MessageMSGCB_15:
   \   000159   FB           MOV     R3,A
   \   00015A   8091         SJMP    ??SampleApp_MessageMSGCB_12
    518                break;
    519              
    520                case SAMPLEAPP_BROADCAST_CLUSTERID:
    521                    osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_TEST_MSG_EVT,
    522                  ((osal_rand() & 0x00FF)) );
   \                     ??SampleApp_MessageMSGCB_4:
   \   00015C                ; Setup parameters for call to function osal_rand
   \   00015C   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00015F   7A04         MOV     R2,#0x4
   \   000161   8021         SJMP    ??SampleApp_MessageMSGCB_16
    523                break;
    524                
    525                case SAMPLEAPP_TEST_CLUSTERID:
    526                HalUARTWrite(SERIAL_APP_PORT,&pkt->cmd.Data[0],4);
   \                     ??SampleApp_MessageMSGCB_3:
   \   000163                ; Setup parameters for call to function HalUARTWrite
   \   000163   7C04         MOV     R4,#0x4
   \   000165   7D00         MOV     R5,#0x0
   \   000167   8E82         MOV     DPL,R6
   \   000169   8F83         MOV     DPH,R7
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   FA           MOV     R2,A
   \   00016D   A3           INC     DPTR
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   80E8         SJMP    ??SampleApp_MessageMSGCB_15
    527                break;
    528                
    529                //ÏòÐ­µ÷Æ÷·¢ËÍµçÑ¹Öµ
    530                case SAMPLEAPP_BROADCAST_VDD_CLUSTERID:
    531                          osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_VDD_MSG_EVT,
    532                  ((osal_rand() & 0x00FF)) );
   \                     ??SampleApp_MessageMSGCB_6:
   \   000171                ; Setup parameters for call to function osal_rand
   \   000171   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000174   7A08         MOV     R2,#0x8
   \   000176   800C         SJMP    ??SampleApp_MessageMSGCB_16
    533                break;  
    534                
    535                //Ð­µ÷Æ÷½«µçÑ¹ÖµÐ´ÈëPC  
    536                case SAMPLEAPP_VDD_CLUSTERID:
    537                HalUARTWrite(SERIAL_APP_PORT,&pkt->cmd.Data[1],pkt->cmd.Data[0]);
    538                break;  
    539          
    540                case SAMPLEAPP_TEST_ID_CLUSTERID:
    541                  
    542                  //×é×°²âÊÔ½ÚµãµÄ¶ÌµØÖ·
    543                  short_test=(uint16)(pkt->cmd.Data[0]);
    544                  short_test=short_test<<8;
   \                     ??SampleApp_MessageMSGCB_7:
   \   000178   12....       LCALL   ?Subroutine1 & 0xFFFF
    545                  short_test=short_test|pkt->cmd.Data[1];
    546                 
    547                   osal_start_timerEx( SampleApp_TaskID, SAMLPEAPP_TESTID_MSG_EVT,
    548                  ((osal_rand() & 0x00FF)) );        
   \                     ??CrossCallReturnLabel_0:
   \   00017B   7A20         MOV     R2,#0x20
   \   00017D   8005         SJMP    ??SampleApp_MessageMSGCB_16
    549                break;
    550                
    551               case SAMPLEAPP_TEST_ID_BACK_CLUSTERID://»ØÏÔID£¬²»´ø»»ÐÐ·ûµÈÈÎºÎÆäËûµÄ¶«Î÷
    552                 
    553                 HalUARTWrite(0,&pkt->cmd.Data[0],4);
    554               break;
    555               
    556               //½ÓÊÕµ½²âÊÔ½ÚµãµÄBATTERTÇëÇó
    557              case SAMPLEAPP_TEST_BATTERY_CLUSTERID:
    558                
    559                        //×é×°²âÊÔ½ÚµãµÄ¶ÌµØÖ·
    560                  short_test=(uint16)(pkt->cmd.Data[0]);
    561                  short_test=short_test<<8;
   \                     ??SampleApp_MessageMSGCB_8:
   \   00017F   12....       LCALL   ?Subroutine1 & 0xFFFF
    562                  short_test=short_test|pkt->cmd.Data[1];
    563                 
    564                   osal_start_timerEx( SampleApp_TaskID, SAMLPEAPP_TESTBATTERY_MSG_EVT,
    565                  ((osal_rand() & 0x00FF)) );   
    566              break;
    567              
    568              //²âÊÔ½ÚµãÊÕµ½»ØÓ¦
    569              case SAMPLEAPP_TEST_BATTERY_BACK_CLUSTERID:
    570                
    571              HalUARTWrite(0,&pkt->cmd.Data[1],pkt->cmd.Data[0]);
    572              break;      
    573            }
   \                     ??CrossCallReturnLabel_1:
   \   000182   7A40         MOV     R2,#0x40
   \                     ??SampleApp_MessageMSGCB_16:
   \   000184   7B00         MOV     R3,#0x0
   \   000186   90....       MOV     DPTR,#SampleApp_TaskID
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   F9           MOV     R1,A
   \   00018B   12....       LCALL   ??osal_start_timerEx?relay
    574          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   00018E   7407         MOV     A,#0x7
   \   000190   02....       LJMP    ??Subroutine60_0 & 0xFFFF
   \   000193                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D                ; Setup parameters for call to function HalUARTWrite
   \   00000D                ; Setup parameters for call to function HalUARTWrite
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8882         MOV     DPL,R0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   FB           MOV     R3,A
   \   000004   90....       MOV     DPTR,#short_test
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   EB           MOV     A,R3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   90....       MOV     DPTR,#short_test
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F0           MOVX    @DPTR,A
   \   000019                ; Setup parameters for call to function osal_rand
   \   000019                ; Setup parameters for call to function osal_rand
   \   000019   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ??osal_rand?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   A8..         MOV     R0,?V0 + 0
   \   000007                ; Setup parameters for call to function osal_start_timerEx
   \   000007                ; Setup parameters for call to function osal_start_timerEx
   \   000007                ; Setup parameters for call to function osal_start_timerEx
   \   000007                ; Setup parameters for call to function osal_start_timerEx
   \   000007   74FF         MOV     A,#-0x1
   \   000009   58           ANL     A,R0
   \   00000A   FC           MOV     R4,A
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   7C01         MOV     R4,#0x1
   \   000002   7D00         MOV     R5,#0x0
   \   000004   7A87         MOV     R2,#-0x79
   \   000006                REQUIRE ??Subroutine57_0
   \   000006                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   7B04         MOV     R3,#0x4
   \   000002                REQUIRE ??Subroutine58_0
   \   000002                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   12....       LCALL   ??osal_nv_item_init?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine61_0
   \   000003                ; // Fall through to label ??Subroutine61_0
    575          
    576          /*********************************************************************
    577           * @fn      SampleApp_SendPeriodicMessage  ·¢ËÍÊý¾Ýº¯Êý
    578           *
    579           * @brief   Send the periodic message.
    580                      ·¢ËÍÖÜÆÚÐÅÏ¢¸øÐ­µ÷Æ÷£¬Ð­µ÷Æ÷¿ÉÒÔÖªµÀÄÇ¸öÉè±¸¼ÓÈëÍøÂç£¬ÄÇ¸öÉè±¸Àë¿ªÍøÂç
    581           *
    582           * @param   none
    583           *
    584           * @return  none
    585           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    586          void SampleApp_SendPeriodicMessage( void )//ÖÜÆÚº¯ÊýÕâÀïÓÃ×÷TEST
   \                     SampleApp_SendPeriodicMessage:
    587          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    588            
    589            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, 
    590                                 &SampleApp_epDesc,
    591                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    592                                 5,
    593                                 &pIDbuf[0],
    594                                 &SampleApp_TransID,
    595                                 AF_DISCV_ROUTE,
    596                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000010   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#(pIDbuf & 0xff)
   \   00001B   75....       MOV     ?V0 + 1,#((pIDbuf >> 8) & 0xff)
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..05       MOV     ?V0 + 0,#0x5
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..01       MOV     ?V0 + 0,#0x1
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7920         MOV     R1,#0x20
   \   000038   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   00003A   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   00003C   7A..         MOV     R2,#(SampleApp_Periodic_DstAddr & 0xff)
   \   00003E   7B..         MOV     R3,#((SampleApp_Periodic_DstAddr >> 8) & 0xff)
   \   000040   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000043   02....       LJMP    ??Subroutine60_0 & 0xFFFF
    597            
    598            {
    599              //Successfully requested to be sent    
    600            }
    601            else
    602            {
    603              // Error occurred in request to send.
    604            }
    605          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET
    606          
    607          /*********************************************************************
    608           * @fn      SampleApp_SendFlashMessage
    609           *
    610           * @brief   Send the flash message to group 1.
    611           *
    612           * @param   flashTime - in milliseconds
    613           *
    614           * @return  none
    615           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    616          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    617          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    618            uint8 buffer[3];
    619            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    620            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    621            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   12....       LCALL   ?Subroutine47 & 0xFFFF
    622          
    623            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    624                                 SAMPLEAPP_FLASH_CLUSTERID,
    625                                 3,
    626                                 buffer,
    627                                 &SampleApp_TransID,
    628                                 AF_DISCV_ROUTE,
    629                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_143:
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002E   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000031   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7403         MOV     A,#0x3
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   8582..       MOV     ?V0 + 0,DPL
   \   000041   8583..       MOV     ?V0 + 1,DPH
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   75..03       MOV     ?V0 + 0,#0x3
   \   00004C   75..00       MOV     ?V0 + 1,#0x0
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   75..02       MOV     ?V0 + 0,#0x2
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   7920         MOV     R1,#0x20
   \   00005E   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   000060   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   000062   7A..         MOV     R2,#(SampleApp_Flash_DstAddr & 0xff)
   \   000064   7B..         MOV     R3,#((SampleApp_Flash_DstAddr >> 8) & 0xff)
   \   000066   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
    630            {
    631            }
    632            else
    633            {
    634              // Error occurred in request to send.
    635            }
    636          }
   \   00006C   7403         MOV     A,#0x3
   \   00006E   02....       LJMP    ??Subroutine60_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001   75..1E       MOV     ?V0 + 0,#0x1e
   \   000004   78..         MOV     R0,#?V0 + 0
   \   000006   22           RET
    637          
    638          /*********************************************************************
    639          *********************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    640          uint8 rbuf_Free_Flag;
   \                     rbuf_Free_Flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    641          void SampleApp_UART_EVT(void)
   \                     SampleApp_UART_EVT:
    642          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    643              rbuf_Free_Flag=0;
   \   000004   E4           CLR     A
   \   000005   90....       MOV     DPTR,#rbuf_Free_Flag
   \   000008   F0           MOVX    @DPTR,A
    644              ReadPanidbuf(rbuf);
   \   000009                ; Setup parameters for call to function ReadPanidbuf
   \   000009   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00000C   12....       LCALL   ??ReadPanidbuf?relay
    645              
    646              if(rbuf_Free_Flag==0)
   \   00000F   90....       MOV     DPTR,#rbuf_Free_Flag
   \   000012   E0           MOVX    A,@DPTR
   \   000013   7006         JNZ     ??SampleApp_UART_EVT_0
    647              {
    648                comparebuf(rbuf);
   \   000015                ; Setup parameters for call to function comparebuf
   \   000015   12....       LCALL   ?Subroutine18 & 0xFFFF
    649              }
   \                     ??CrossCallReturnLabel_34:
   \   000018   12....       LCALL   ??comparebuf?relay
    650              if(rbuf_Free_Flag==0)
   \                     ??SampleApp_UART_EVT_0:
   \   00001B   90....       MOV     DPTR,#rbuf_Free_Flag
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   7006         JNZ     ??SampleApp_UART_EVT_1
    651              {
    652                ReadID(rbuf);
   \   000021                ; Setup parameters for call to function ReadID
   \   000021   12....       LCALL   ?Subroutine18 & 0xFFFF
    653              } 
   \                     ??CrossCallReturnLabel_35:
   \   000024   12....       LCALL   ??ReadID?relay
    654              if(rbuf_Free_Flag==0)
   \                     ??SampleApp_UART_EVT_1:
   \   000027   90....       MOV     DPTR,#rbuf_Free_Flag
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   7006         JNZ     ??SampleApp_UART_EVT_2
    655              {
    656               CompforID(rbuf);
   \   00002D                ; Setup parameters for call to function CompforID
   \   00002D   12....       LCALL   ?Subroutine18 & 0xFFFF
    657              }
   \                     ??CrossCallReturnLabel_36:
   \   000030   12....       LCALL   ??CompforID?relay
    658              
    659              if(rbuf_Free_Flag==0)
   \                     ??SampleApp_UART_EVT_2:
   \   000033   90....       MOV     DPTR,#rbuf_Free_Flag
   \   000036   E0           MOVX    A,@DPTR
   \   000037   7006         JNZ     ??SampleApp_UART_EVT_3
    660              {
    661               CheckToSetTest(rbuf);
   \   000039                ; Setup parameters for call to function CheckToSetTest
   \   000039   12....       LCALL   ?Subroutine18 & 0xFFFF
    662              } 
   \                     ??CrossCallReturnLabel_37:
   \   00003C   12....       LCALL   ??CheckToSetTest?relay
    663              
    664              if(rbuf_Free_Flag==0)
   \                     ??SampleApp_UART_EVT_3:
   \   00003F   90....       MOV     DPTR,#rbuf_Free_Flag
   \   000042   E0           MOVX    A,@DPTR
   \   000043   7006         JNZ     ??SampleApp_UART_EVT_4
    665              {
    666                IDISUSE(rbuf);
   \   000045                ; Setup parameters for call to function IDISUSE
   \   000045   12....       LCALL   ?Subroutine18 & 0xFFFF
    667              } 
   \                     ??CrossCallReturnLabel_38:
   \   000048   12....       LCALL   ??IDISUSE?relay
    668              
    669              if(rbuf_Free_Flag==0)
   \                     ??SampleApp_UART_EVT_4:
   \   00004B   90....       MOV     DPTR,#rbuf_Free_Flag
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   7006         JNZ     ??SampleApp_UART_EVT_5
    670              {
    671                CompforTestID(rbuf);
   \   000051                ; Setup parameters for call to function CompforTestID
   \   000051   12....       LCALL   ?Subroutine18 & 0xFFFF
    672              } 
   \                     ??CrossCallReturnLabel_39:
   \   000054   12....       LCALL   ??CompforTestID?relay
    673              
    674              if(rbuf_Free_Flag==0)
   \                     ??SampleApp_UART_EVT_5:
   \   000057   90....       MOV     DPTR,#rbuf_Free_Flag
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   7006         JNZ     ??SampleApp_UART_EVT_6
    675              {
    676                CompForVdd(rbuf);
   \   00005D                ; Setup parameters for call to function CompForVdd
   \   00005D   12....       LCALL   ?Subroutine18 & 0xFFFF
    677              } 
   \                     ??CrossCallReturnLabel_40:
   \   000060   12....       LCALL   ??CompForVdd?relay
    678              if(rbuf_Free_Flag==0)
   \                     ??SampleApp_UART_EVT_6:
   \   000063   90....       MOV     DPTR,#rbuf_Free_Flag
   \   000066   E0           MOVX    A,@DPTR
   \   000067   7006         JNZ     ??SampleApp_UART_EVT_7
    679              {
    680                CompforTESTID(rbuf);
   \   000069                ; Setup parameters for call to function CompforTESTID
   \   000069   12....       LCALL   ?Subroutine18 & 0xFFFF
    681              } 
   \                     ??CrossCallReturnLabel_41:
   \   00006C   12....       LCALL   ??CompforTESTID?relay
    682              
    683              if(rbuf_Free_Flag==0)
   \                     ??SampleApp_UART_EVT_7:
   \   00006F   90....       MOV     DPTR,#rbuf_Free_Flag
   \   000072   E0           MOVX    A,@DPTR
   \   000073   7006         JNZ     ??SampleApp_UART_EVT_8
    684              {
    685                CompforTEST_BATTERY(rbuf);
   \   000075                ; Setup parameters for call to function CompforTEST_BATTERY
   \   000075   12....       LCALL   ?Subroutine18 & 0xFFFF
    686              } 
   \                     ??CrossCallReturnLabel_42:
   \   000078   12....       LCALL   ??CompforTEST_BATTERY?relay
    687              
    688              if(rbuf_Free_Flag==0)
   \                     ??SampleApp_UART_EVT_8:
   \   00007B   90....       MOV     DPTR,#rbuf_Free_Flag
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   700B         JNZ     ??SampleApp_UART_EVT_9
    689              {
    690                SampleApp_SPI_SendData( rbuf, buflen); 
   \   000081                ; Setup parameters for call to function SampleApp_SPI_SendData
   \   000081   90....       MOV     DPTR,#buflen
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   12....       LCALL   ?Subroutine18 & 0xFFFF
    691              }
   \                     ??CrossCallReturnLabel_43:
   \   000089   12....       LCALL   ??SampleApp_SPI_SendData?relay
    692          }
   \                     ??SampleApp_UART_EVT_9:
   \   00008C                REQUIRE ?Subroutine48
   \   00008C                ; // Fall through to label ?Subroutine48

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#rbuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   22           RET
    693          /*********************************************************************
    694           * @fn      SampleApp_SPI
    695           *
    696           * @brief   Get shortaddr and sent to UART
    697                      Õâ¸öº¯ÊýÖ÷ÒªÊÇÉè±¸Æô¶¯Ê±ÏÔÊ¾×Ô¼ºµÄ¶ÌµØÖ·
    698           *
    699           * @param   none
    700           *
    701           * @return  none
    702           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    703          void SampleApp_SPI(void)
   \                     SampleApp_SPI:
    704          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV     A,#-0x1c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    705            uint8 str_1[ ]="my short address is:";
   \   00000A   7407         MOV     A,#0x7
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   AC82         MOV     R4,DPL
   \   000011   AD83         MOV     R5,DPH
   \   000013   7583..       MOV     DPH,#((`?<Constant "my short address is:">` >> 8) & 0xff)
   \   000016   7582..       MOV     DPL,#(`?<Constant "my short address is:">` & 0xff)
   \   000019   7415         MOV     A,#0x15
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    706            HalUARTWrite(SERIAL_APP_PORT,&str_1[0],20);
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C14         MOV     R4,#0x14
   \   000020   FD           MOV     R5,A
   \   000021   7407         MOV     A,#0x7
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   AA82         MOV     R2,DPL
   \   000028   AB83         MOV     R3,DPH
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   12....       LCALL   ??HalUARTWrite?relay
    707            //HalUARTWriteISR(&str_1[0], 20);  
    708            uint16 short_ddr;
    709            uint8 short_ddr_H;
    710            uint8 short_ddr_L;
    711            uint8 shortaddr[7];
    712            uint8 *pointer1;
    713          
    714            short_ddr=NLME_GetShortAddr();
   \   00002F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00002F   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000032   8B..         MOV     ?V0 + 1,R3
    715            short_ddr_H=(uint8)((short_ddr&0xff00)>>8);
   \   000034   AE..         MOV     R6,?V0 + 1
    716            short_ddr_L=(uint8)short_ddr;
   \   000036   EA           MOV     A,R2
   \   000037   FF           MOV     R7,A
    717          
    718            shortaddr[0]=48;
   \   000038   7430         MOV     A,#0x30
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   F0           MOVX    @DPTR,A
    719            shortaddr[1]=120;
   \   000041   7401         MOV     A,#0x1
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   7478         MOV     A,#0x78
   \   000048   F0           MOVX    @DPTR,A
    720            shortaddr[2]=hextoword1(short_ddr_H);
   \   000049                ; Setup parameters for call to function hextoword1
   \   000049   EE           MOV     A,R6
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   ??hextoword1?relay
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E9           MOV     A,R1
   \   000054   F0           MOVX    @DPTR,A
    721            shortaddr[3]=hextoword2(short_ddr_H);
   \   000055                ; Setup parameters for call to function hextoword2
   \   000055   EE           MOV     A,R6
   \   000056   F9           MOV     R1,A
   \   000057   12....       LCALL   ??hextoword2?relay
   \   00005A   7403         MOV     A,#0x3
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E9           MOV     A,R1
   \   000060   F0           MOVX    @DPTR,A
    722            shortaddr[4]=hextoword1(short_ddr_L);
   \   000061                ; Setup parameters for call to function hextoword1
   \   000061   EF           MOV     A,R7
   \   000062   F9           MOV     R1,A
   \   000063   12....       LCALL   ??hextoword1?relay
   \   000066   7404         MOV     A,#0x4
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   E9           MOV     A,R1
   \   00006C   F0           MOVX    @DPTR,A
    723            shortaddr[5]=hextoword2(short_ddr_L);
   \   00006D                ; Setup parameters for call to function hextoword2
   \   00006D   EF           MOV     A,R7
   \   00006E   F9           MOV     R1,A
   \   00006F   12....       LCALL   ??hextoword2?relay
   \   000072   7405         MOV     A,#0x5
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E9           MOV     A,R1
   \   000078   F0           MOVX    @DPTR,A
    724            shortaddr[6]='\n';
   \   000079   7406         MOV     A,#0x6
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   740A         MOV     A,#0xa
   \   000080   F0           MOVX    @DPTR,A
    725            pointer1=&shortaddr[0];
    726            HalUARTWrite(SERIAL_APP_PORT,pointer1,7);
   \   000081                ; Setup parameters for call to function HalUARTWrite
   \   000081   7C07         MOV     R4,#0x7
   \   000083   7D00         MOV     R5,#0x0
   \   000085   85..82       MOV     DPL,?XSP + 0
   \   000088   85..83       MOV     DPH,?XSP + 1
   \   00008B   AA82         MOV     R2,DPL
   \   00008D   AB83         MOV     R3,DPH
   \   00008F   7900         MOV     R1,#0x0
   \   000091   12....       LCALL   ??HalUARTWrite?relay
    727          }
   \   000094   741C         MOV     A,#0x1c
   \   000096   02....       LJMP    ??Subroutine60_0 & 0xFFFF
    728          
    729          /*********************************************************************
    730           * @fn      hextoword
    731           *
    732           * @brief   Ê®Áù½øÖÆ×ª×Ö·ûº¯Êý (SampleApp.c)  ÕâÁ½¸öº¯ÊýÓÉÍøÓÑÌá¹©.
    733           *
    734           * @param   none
    735           *
    736           * @return  none
    737           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    738          uint8 hextoword1(uint8 t )
   \                     hextoword1:
    739          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    740            uint8 abc;
    741            uint8 cba;
    742            uint8 xx1;
    743            abc=t;
    744            cba=0xf0;
    745            abc=(abc&cba)>>4;
   \   000000   E9           MOV     A,R1
   \   000001   C4           SWAP    A
   \   000002   540F         ANL     A,#0xf
   \   000004   FA           MOV     R2,A
    746            if(abc<10)
   \   000005   C3           CLR     C
   \   000006   940A         SUBB    A,#0xa
   \   000008   5004         JNC     ??hextoword1_0
    747            {
    748              xx1=abc+48;
   \   00000A   7430         MOV     A,#0x30
   \   00000C   8002         SJMP    ??hextoword1_1
    749            }
    750            else
    751            {
    752              xx1=abc+55;
   \                     ??hextoword1_0:
   \   00000E   7437         MOV     A,#0x37
    753            }
   \                     ??hextoword1_1:
   \   000010                REQUIRE ?Subroutine49
   \   000010                ; // Fall through to label ?Subroutine49
    754            return xx1;
    755          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   2A           ADD     A,R2
   \   000001   F9           MOV     R1,A
   \   000002   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    756          uint8 hextoword2(uint8 t)
   \                     hextoword2:
    757          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    758            uint8 abc;
    759            uint8 cba;
    760            uint8 xx2;
    761            abc=t;
    762            cba=0x0f;
    763            abc=abc&cba;
   \   000000   740F         MOV     A,#0xf
   \   000002   59           ANL     A,R1
   \   000003   FA           MOV     R2,A
    764            if(abc<10)
   \   000004   C3           CLR     C
   \   000005   940A         SUBB    A,#0xa
   \   000007   5004         JNC     ??hextoword2_0
    765            {
    766              xx2=abc+48;
   \   000009   7430         MOV     A,#0x30
   \   00000B   8002         SJMP    ??hextoword2_1
    767            }
    768            else
    769            {
    770              xx2=abc+55;
   \                     ??hextoword2_0:
   \   00000D   7437         MOV     A,#0x37
    771            }
   \                     ??hextoword2_1:
   \   00000F   80..         SJMP    ?Subroutine49
    772            return xx2;
    773          }
    774          
    775          
    776          /*********************************************************************
    777           * @fn      comparebuf(uint8 *dat)
    778           *
    779           * @brief   Æ¥Åä×Ö·û£¬²¢ÇÒÌáÈ¡ËÄÎ»×÷ÎªPANID
    780           *
    781           * @param   *dat   
    782                       the data from uart
    783           *
    784           * @return  none
    785           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    786          void comparebuf(uint8 *dat)
   \                     comparebuf:
    787          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    788            uint8 predict[3]={103,97,111};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#((`?<Constant {103, 97, 111}>` >> 8) & 0xff)
   \   000017   7582..       MOV     DPL,#(`?<Constant {103, 97, 111}>` & 0xff)
   \   00001A   7403         MOV     A,#0x3
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    789            uint8 *ppredict=&predict[0];
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   A882         MOV     R0,DPL
   \   000027   A983         MOV     R1,DPH
    790            uint8 i; 
    791            //uint8 7;
    792            if(rxlen!=7)//±È½Ï´ÓÉÏÎ»»úÀ´µÄÊý¾Ý³¤¶È£¡£¡
   \   000029   90....       MOV     DPTR,#rxlen
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6407         XRL     A,#0x7
   \   00002F   705F         JNZ     ??CrossCallReturnLabel_115
    793            return;
    794            
    795            uint16 newpanid=0,temp=0;
   \   000031   12....       LCALL   ?Subroutine29 & 0xFFFF
    796            
    797          
    798            for ( i = 0; i <9; i++ )//Õâ¼¸¸ö¿Õ¹ýÈ¥ÊÇÒòÎªÓÐÉè±¸ID¡£
    799            {
    800             *dat++ ;
    801            }
    802            
    803            for ( i = 0; i <3; i++ )
    804            {
    805             if(*dat++ == *ppredict++);
   \                     ??CrossCallReturnLabel_66:
   \   000034   12....       LCALL   ?Subroutine16 & 0xFFFF
    806             else
    807                 return;
    808            }  
   \                     ??CrossCallReturnLabel_29:
   \   000037   7057         JNZ     ??CrossCallReturnLabel_115
   \   000039   05..         INC     ?V0 + 2
   \   00003B   E5..         MOV     A,?V0 + 2
   \   00003D   C3           CLR     C
   \   00003E   9403         SUBB    A,#0x3
   \   000040   40F2         JC      ??CrossCallReturnLabel_66
    809            
    810            for ( i =0; i <4; i++ )
   \   000042   8C..         MOV     ?V0 + 2,R4
    811            { 
    812             if(*dat>=48&&*dat<=57)
   \                     ??comparebuf_0:
   \   000044   8A82         MOV     DPL,R2
   \   000046   8B83         MOV     DPH,R3
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V0 + 0,A
   \   00004B   C3           CLR     C
   \   00004C   9430         SUBB    A,#0x30
   \   00004E   400B         JC      ??comparebuf_1
   \   000050   E5..         MOV     A,?V0 + 0
   \   000052   C3           CLR     C
   \   000053   943A         SUBB    A,#0x3a
   \   000055   5004         JNC     ??comparebuf_1
    813               {
    814                temp=(*dat)-48;    
   \   000057   74D0         MOV     A,#-0x30
   \   000059   8020         SJMP    ??comparebuf_2
    815               }
    816             else if(*dat>=97&&*dat<=102)
   \                     ??comparebuf_1:
   \   00005B   E5..         MOV     A,?V0 + 0
   \   00005D   C3           CLR     C
   \   00005E   9461         SUBB    A,#0x61
   \   000060   E5..         MOV     A,?V0 + 0
   \   000062   4009         JC      ??comparebuf_3
   \   000064   C3           CLR     C
   \   000065   9467         SUBB    A,#0x67
   \   000067   5027         JNC     ??CrossCallReturnLabel_115
    817               {
    818                temp=(*dat)-87;
   \   000069   74A9         MOV     A,#-0x57
   \   00006B   800E         SJMP    ??comparebuf_2
    819               }
    820              else if(*dat>=65&&*dat<=70)
   \                     ??comparebuf_3:
   \   00006D   C3           CLR     C
   \   00006E   9441         SUBB    A,#0x41
   \   000070   401E         JC      ??CrossCallReturnLabel_115
   \   000072   E5..         MOV     A,?V0 + 0
   \   000074   C3           CLR     C
   \   000075   9447         SUBB    A,#0x47
   \   000077   5017         JNC     ??CrossCallReturnLabel_115
    821               {
    822                temp=(*dat)-55;
   \   000079   74C9         MOV     A,#-0x37
    823               }
    824             else
    825               return;
    826                *dat++;
    827               temp=temp<<((3-i)*4);
    828               newpanid|=temp;
    829            } 
   \                     ??comparebuf_2:
   \   00007B   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00007E   12....       LCALL   ?S_SHL
   \   000081   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000084   40BE         JC      ??comparebuf_0
    830            
    831            Set_Panid(newpanid);
   \   000086                ; Setup parameters for call to function Set_Panid
   \   000086   EC           MOV     A,R4
   \   000087   FA           MOV     R2,A
   \   000088   ED           MOV     A,R5
   \   000089   FB           MOV     R3,A
   \   00008A   12....       LCALL   ??Set_Panid?relay
    832            osal_mem_free( rbuf );  //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!
   \   00008D                ; Setup parameters for call to function osal_mem_free
   \   00008D   12....       LCALL   ??Subroutine64_0 & 0xFFFF
    833            rbuf_Free_Flag=1;//ÊÍ·ÅÄÚ´æ±êÖ¾Î»
    834          }
   \                     ??CrossCallReturnLabel_115:
   \   000090   7403         MOV     A,#0x3
   \   000092                REQUIRE ?Subroutine44
   \   000092                ; // Fall through to label ?Subroutine44

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   4C           ORL     A,R4
   \   000003   FC           MOV     R4,A
   \   000004   E5..         MOV     A,?V0 + 1
   \   000006   4D           ORL     A,R5
   \   000007   FD           MOV     R5,A
   \   000008   05..         INC     ?V0 + 2
   \   00000A   E5..         MOV     A,?V0 + 2
   \   00000C   C3           CLR     C
   \   00000D   9404         SUBB    A,#0x4
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   7C00         MOV     R4,#0x0
   \   000002   7D00         MOV     R5,#0x0
   \   000004   EA           MOV     A,R2
   \   000005   2409         ADD     A,#0x9
   \   000007   FA           MOV     R2,A
   \   000008   EB           MOV     A,R3
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   8C..         MOV     ?V0 + 2,R4
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   25..         ADD     A,?V0 + 0
   \   000002   F5..         MOV     ?V0 + 0,A
   \   000004   74FF         MOV     A,#-0x1
   \   000006   3400         ADDC    A,#0x0
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   A3           INC     DPTR
   \   00000B   AA82         MOV     R2,DPL
   \   00000D   AB83         MOV     R3,DPH
   \   00000F   7403         MOV     A,#0x3
   \   000011   C3           CLR     C
   \   000012   95..         SUBB    A,?V0 + 2
   \   000014   33           RLC     A
   \   000015   33           RLC     A
   \   000016   54FC         ANL     A,#0xfc
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   A3           INC     DPTR
   \   000009   AA82         MOV     R2,DPL
   \   00000B   AB83         MOV     R3,DPH
   \   00000D   88..         MOV     ?V0 + 0,R0
   \   00000F   89..         MOV     ?V0 + 1,R1
   \   000011   85..82       MOV     DPL,?V0 + 0
   \   000014   85..83       MOV     DPH,?V0 + 1
   \   000017   A3           INC     DPTR
   \   000018   A882         MOV     R0,DPL
   \   00001A   A983         MOV     R1,DPH
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FE           MOV     R6,A
   \   000022   85..82       MOV     DPL,?V0 + 0
   \   000025   85..83       MOV     DPH,?V0 + 1
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6E           XRL     A,R6
   \   00002A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000003   7401         MOV     A,#0x1
   \   000005   90....       MOV     DPTR,#rbuf_Free_Flag
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET
    835          
    836          
    837          
    838          
    839          //Éè¶¨PANIDºÅ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    840          void Set_Panid(uint16 u16NewPaind)
   \                     Set_Panid:
    841          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine3 & 0xFFFF
    842             uint8 u8BackCode;
    843            
    844              if ( osal_nv_item_init( ZCD_NV_PANID1,2,&u16NewPaind ) == ZSUCCESS )  
   \                     ??CrossCallReturnLabel_93:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   7C02         MOV     R4,#0x2
   \   000012   7D00         MOV     R5,#0x0
   \   000014   7A85         MOV     R2,#-0x7b
   \   000016   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000019   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001C   E9           MOV     A,R1
   \   00001D   701C         JNZ     ??Set_Panid_0
    845              {
    846                     osal_nv_write(ZCD_NV_PANID1,0,2,&u16NewPaind);
   \   00001F                ; Setup parameters for call to function osal_nv_write
   \   00001F   78..         MOV     R0,#?V0 + 0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..02       MOV     ?V0 + 0,#0x2
   \   000027   75..00       MOV     ?V0 + 1,#0x0
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A85         MOV     R2,#-0x7b
   \   000035   12....       LCALL   ??Subroutine62_0 & 0xFFFF
    847              }
   \                     ??CrossCallReturnLabel_107:
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
    848              if ( osal_nv_item_init( ZCD_NV_PANID,2,&u16NewPaind) == ZSUCCESS )  
   \                     ??Set_Panid_0:
   \   00003B                ; Setup parameters for call to function osal_nv_item_init
   \   00003B   85..82       MOV     DPL,?XSP + 0
   \   00003E   85..83       MOV     DPH,?XSP + 1
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   7C02         MOV     R4,#0x2
   \   00004E   7D00         MOV     R5,#0x0
   \   000050   7A83         MOV     R2,#-0x7d
   \   000052   7B00         MOV     R3,#0x0
   \   000054   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   E9           MOV     A,R1
   \   00005B   7020         JNZ     ??Set_Panid_1
    849              {
    850                 u8BackCode=osal_nv_write(ZCD_NV_PANID,0,2,&u16NewPaind);
   \   00005D                ; Setup parameters for call to function osal_nv_write
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   75..02       MOV     ?V0 + 0,#0x2
   \   000065   75..00       MOV     ?V0 + 1,#0x0
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   7C00         MOV     R4,#0x0
   \   00006F   7D00         MOV     R5,#0x0
   \   000071   7A83         MOV     R2,#-0x7d
   \   000073   7B00         MOV     R3,#0x0
   \   000075   12....       LCALL   ??Subroutine63_0 & 0xFFFF
    851              }
   \                     ??CrossCallReturnLabel_112:
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007B   E9           MOV     A,R1
   \   00007C   FE           MOV     R6,A
    852              
    853              if(u8BackCode==ZSUCCESS)//³É¹¦
   \                     ??Set_Panid_1:
   \   00007D   EE           MOV     A,R6
   \   00007E   700F         JNZ     ??Set_Panid_2
    854              {
    855                 NLME_UpdateNV(0x01);
   \   000080                ; Setup parameters for call to function NLME_UpdateNV
   \   000080   7901         MOV     R1,#0x1
   \   000082   12....       LCALL   ??NLME_UpdateNV?relay
    856                      //ÌáÊ¾½«ÍøÂçÏà¹ØÐÅÏ¢Ð´ÈëFlashÖÐ£¬Õâ¶Î´úÂëºÃÏñºÍº¯Êýµ÷ÓÃOSAL_NV_WRITE()ÖØµþ£¬µ«²»¿ÉÉÙ
    857                 HAL_SYSTEM_RESET();//ÖØÆôÏµÍ³
   \   000085   C2AF         CLR     0xa8.7
   \   000087   75C9AB       MOV     0xc9,#-0x55
   \   00008A   75C95B       MOV     0xc9,#0x5b
   \                     ??Set_Panid_3:
   \   00008D   80FE         SJMP    ??Set_Panid_3
    858              }
    859          }
   \                     ??Set_Panid_2:
   \   00008F   80..         SJMP    ??Subroutine55_0
   \   000091                REQUIRE _A_IEN0
   \   000091                REQUIRE WDCTL

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   7402         MOV     A,#0x2
   \   000002   02....       LJMP    ??Subroutine60_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   EA           MOV     A,R2
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   EB           MOV     A,R3
   \   00000A                REQUIRE ?Subroutine46
   \   00000A                REQUIRE ??Subroutine56_0
   \   00000A                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_item_init
   \   000001                ; Setup parameters for call to function osal_nv_item_init
   \   000001                ; Setup parameters for call to function osal_nv_item_init
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ?Subroutine46
   \   000007                ; // Fall through to label ?Subroutine46

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   8582..       MOV     ?V0 + 0,DPL
   \   000003   8583..       MOV     ?V0 + 1,DPH
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   7B04         MOV     R3,#0x4
   \   000002                REQUIRE ??Subroutine63_0
   \   000002                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   12....       LCALL   ??osal_nv_write?relay
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET
    860          
    861          
    862          
    863          //¶ÁÈ¡PAN ID 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    864          void ReadPanidbuf(uint8 *dat)
   \                     ReadPanidbuf:
    865          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    866            uint8 predict[8]={103,97,111,112,97,110,105,100};  //gaopanid
   \   00000A   7409         MOV     A,#0x9
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   AC82         MOV     R4,DPL
   \   000011   AD83         MOV     R5,DPH
   \   000013   7583..       MOV     DPH,#((`?<Constant {103, 97, 111, 112, 97, 110, 105, 1` >> 8) & 0xff)
   \   000016   7582..       MOV     DPL,#(`?<Constant {103, 97, 111, 112, 97, 110, 105, 1` & 0xff)
   \   000019   7408         MOV     A,#0x8
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    867            //ÒÔÉÏÎªÆ¥Åä×Ö·û  
    868            uint8 *ppredict=&predict[0];
   \   00001E   7409         MOV     A,#0x9
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   A882         MOV     R0,DPL
   \   000025   A983         MOV     R1,DPH
    869            uint8 i; 
    870            uint16 short_ddr;
    871            uint8 short_ddr_H;
    872            uint8 short_ddr_L;
    873            uint8 shortaddr[7];
    874            uint8 *pointer1; 
    875            
    876            if(rxlen!=8)//±È½Ï´ÓÉÏÎ»»úÀ´µÄÊý¾Ý³¤¶È£¡£¡
   \   000027   90....       MOV     DPTR,#rxlen
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6408         XRL     A,#0x8
   \   00002D   6003         JZ      $+5
   \   00002F   02....       LJMP    ??CrossCallReturnLabel_113 & 0xFFFF
    877            return;
    878            
    879          
    880            for ( i = 0; i <9; i++ )//Õâ¼¸¸ö¿Õ¹ýÈ¥ÊÇÒòÎªÓÐÉè±¸ID¡£
   \   000032   12....       LCALL   ?Subroutine20 & 0xFFFF
    881            {
    882             *dat++ ;
    883            }
    884            
    885            for ( i = 0; i <8; i++ )//½øÐÐÊý¾ÝÆ¥Åä
    886            {
    887             if(*dat++ == *ppredict++);
   \                     ??CrossCallReturnLabel_46:
   \   000035   12....       LCALL   ?Subroutine14 & 0xFFFF
    888             else
    889                 return;
    890            }    
   \                     ??CrossCallReturnLabel_21:
   \   000038   6003         JZ      $+5
   \   00003A   02....       LJMP    ??CrossCallReturnLabel_113 & 0xFFFF
   \   00003D   05..         INC     ?V0 + 0
   \   00003F   E5..         MOV     A,?V0 + 0
   \   000041   C3           CLR     C
   \   000042   9408         SUBB    A,#0x8
   \   000044   40EF         JC      ??CrossCallReturnLabel_46
    891            //ÏÂÃæ´úÂëÀàËÆÓÚ¶ÌµØÖ·µÄ»ñµÃ£¬ËùÒÔÒýÓÃÁË»ñµÃ¶ÌµØÖ·µÄ´úÂë
    892            //Ãû×ÖÃ»ÓÐ¸Ä£¬µ«ÊÇÒòÎª¶¼ÊÇ¾Ö²¿±äÁ¿ËùÒÔÃ»ÓÐ»¥ÏàÓ°Ïì
    893            osal_nv_read(ZCD_NV_PANID,0,2,&short_ddr);
   \   000046                ; Setup parameters for call to function osal_nv_read
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   8582..       MOV     ?V0 + 0,DPL
   \   00004F   8583..       MOV     ?V0 + 1,DPH
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   75..00       MOV     ?V0 + 1,#0x0
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   7C00         MOV     R4,#0x0
   \   000064   7D00         MOV     R5,#0x0
   \   000066   7A83         MOV     R2,#-0x7d
   \   000068   7B00         MOV     R3,#0x0
   \   00006A   12....       LCALL   ??osal_nv_read?relay
   \   00006D   7404         MOV     A,#0x4
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
    894            short_ddr_H=(uint8)((short_ddr&0xff00)>>8);
   \   000072   85..82       MOV     DPL,?XSP + 0
   \   000075   85..83       MOV     DPH,?XSP + 1
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   FE           MOV     R6,A
    895            short_ddr_L=(uint8)short_ddr;
   \   00007C   85..82       MOV     DPL,?XSP + 0
   \   00007F   85..83       MOV     DPH,?XSP + 1
   \   000082   E0           MOVX    A,@DPTR
   \   000083   FF           MOV     R7,A
    896            shortaddr[0]=48;
   \   000084   7402         MOV     A,#0x2
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   7430         MOV     A,#0x30
   \   00008B   F0           MOVX    @DPTR,A
    897            shortaddr[1]=120;
   \   00008C   7403         MOV     A,#0x3
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   7478         MOV     A,#0x78
   \   000093   F0           MOVX    @DPTR,A
    898            shortaddr[2]=hextoword1(short_ddr_H);
   \   000094                ; Setup parameters for call to function hextoword1
   \   000094   12....       LCALL   ??hextoword1?relay
   \   000097   7404         MOV     A,#0x4
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   E9           MOV     A,R1
   \   00009D   F0           MOVX    @DPTR,A
    899            shortaddr[3]=hextoword2(short_ddr_H);
   \   00009E                ; Setup parameters for call to function hextoword2
   \   00009E   EE           MOV     A,R6
   \   00009F   F9           MOV     R1,A
   \   0000A0   12....       LCALL   ??hextoword2?relay
   \   0000A3   7405         MOV     A,#0x5
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   E9           MOV     A,R1
   \   0000A9   F0           MOVX    @DPTR,A
    900            shortaddr[4]=hextoword1(short_ddr_L);
   \   0000AA                ; Setup parameters for call to function hextoword1
   \   0000AA   EF           MOV     A,R7
   \   0000AB   F9           MOV     R1,A
   \   0000AC   12....       LCALL   ??hextoword1?relay
   \   0000AF   7406         MOV     A,#0x6
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   E9           MOV     A,R1
   \   0000B5   F0           MOVX    @DPTR,A
    901            shortaddr[5]=hextoword2(short_ddr_L);
   \   0000B6                ; Setup parameters for call to function hextoword2
   \   0000B6   EF           MOV     A,R7
   \   0000B7   F9           MOV     R1,A
   \   0000B8   12....       LCALL   ??hextoword2?relay
   \   0000BB   7407         MOV     A,#0x7
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   E9           MOV     A,R1
   \   0000C1   F0           MOVX    @DPTR,A
    902            shortaddr[6]='\n';
   \   0000C2   7408         MOV     A,#0x8
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   740A         MOV     A,#0xa
   \   0000C9   F0           MOVX    @DPTR,A
    903            pointer1=&shortaddr[0];
    904            HalUARTWrite(SERIAL_APP_PORT,pointer1,7);
   \   0000CA                ; Setup parameters for call to function HalUARTWrite
   \   0000CA   7C07         MOV     R4,#0x7
   \   0000CC   7D00         MOV     R5,#0x0
   \   0000CE   7402         MOV     A,#0x2
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   AA82         MOV     R2,DPL
   \   0000D5   AB83         MOV     R3,DPH
   \   0000D7   12....       LCALL   ?Subroutine13 & 0xFFFF
    905            
    906            osal_mem_free( rbuf );  //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!
    907            rbuf_Free_Flag=1;
    908          }
   \                     ??CrossCallReturnLabel_113:
   \   0000DA   7411         MOV     A,#0x11
   \   0000DC   02....       LJMP    ??Subroutine60_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EA           MOV     A,R2
   \   000001   2409         ADD     A,#0x9
   \   000003   FA           MOV     R2,A
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   75..00       MOV     ?V0 + 0,#0x0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003   FD           MOV     R5,A
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   A3           INC     DPTR
   \   000009   AA82         MOV     R2,DPL
   \   00000B   AB83         MOV     R3,DPH
   \   00000D   E8           MOV     A,R0
   \   00000E   FE           MOV     R6,A
   \   00000F   E9           MOV     A,R1
   \   000010   FF           MOV     R7,A
   \   000011   8E82         MOV     DPL,R6
   \   000013   8F83         MOV     DPH,R7
   \   000015   A3           INC     DPTR
   \   000016   A882         MOV     R0,DPL
   \   000018   A983         MOV     R1,DPH
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FC           MOV     R4,A
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6C           XRL     A,R4
   \   000026   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005                REQUIRE ??Subroutine64_0
   \   000005                ; // Fall through to label ??Subroutine64_0
    909          
    910          /*********************************************************************
    911           * @fn      SampleApp_SPI_SendData
    912           *
    913           * @brief   sent the uart buffer data to the air
    914           *ÏêÏ¸ËµÃ÷£ºº¯ÊýµÄ¹¦ÄÜÊÇÈç¹ûuartµÄbufÖÐÓÐÊý¾Ý£¬ÔòÍ¨¹ýÕâ¸öº¯Êý½²Êý¾Ý·¢ËÍ³öÈ¥£¨Í¨¹ýÌìÏß·¢ËÍµ½¿ÕÖÐ£©
    915          
    916                      1¡¢Èç¹ûÕâ¸öÉè±¸Æô¶¯µÄÊ±ºòÎªÐ­µ÷Æ÷£¬ÔòÒÔ¹ã²¥µÄÐÎÊ½·¢ËÍµ½ËùÓÐÆäËûÉè±¸
    917          
    918                      2¡¢Èç¹ûÕâ¸öÉè±¸²»ÊÇÐ­µ÷Æ÷£¬¼´Â·ÓÉÆ÷£¬ÔòÒÔµ¥²¥µÄÐÎÊ½·¢ËÍµ½Ð­µ÷Æ÷
    919          
    920            ×¢Òâ£ºÓÃÍêÖ®ºóÒªÊÍ·ÅÄÚ´æ
    921          
    922           * @param   *buf   the dat
    923                      len    the length of the dat 
    924           *
    925           * @return  none
    926           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    927          void SampleApp_SPI_SendData( uint8 *buf, uint8 len )
   \                     SampleApp_SPI_SendData:
    928          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    929            if ( devStartMode == MODE_HARD )//Èç¹ûÆô¶¯µÄÊ±ºòÊÇÐ­µ÷Æ÷£¬ÔòÓÃ¹ã²¥
   \   000005   90....       MOV     DPTR,#devStartMode
   \   000008   E0           MOVX    A,@DPTR
   \   000009   6402         XRL     A,#0x2
   \   00000B   7009         JNZ     ??SampleApp_SPI_SendData_0
    930            {
    931              SampleApp_SPI_SendData_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000D   740F         MOV     A,#0xf
   \   00000F   12....       LCALL   ?Subroutine11 & 0xFFFF
    932              SampleApp_SPI_SendData_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    933              SampleApp_SPI_SendData_DstAddr.addr.shortAddr = 0xFFFF;  
    934            }
   \                     ??CrossCallReturnLabel_19:
   \   000012   74FF         MOV     A,#-0x1
   \   000014   8006         SJMP    ??SampleApp_SPI_SendData_1
    935            else//ÆäËüÉè±¸ÀàÐÍÔòÓÃµ¥²¥
    936            {
    937              
    938              SampleApp_SPI_SendData_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??SampleApp_SPI_SendData_0:
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?Subroutine11 & 0xFFFF
    939              SampleApp_SPI_SendData_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    940              SampleApp_SPI_SendData_DstAddr.addr.shortAddr = 0x0000;  
    941            }
   \                     ??CrossCallReturnLabel_20:
   \   00001B   E4           CLR     A
   \                     ??SampleApp_SPI_SendData_1:
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   12....       LCALL   ?Subroutine47 & 0xFFFF
    942            
    943            if ( AF_DataRequest   ( &SampleApp_SPI_SendData_DstAddr,
    944                                   (endPointDesc_t *)&SampleApp_epDesc,
    945                                    SAMPLEAPP_FLASH_CLUSTERID,
    946                                    len, buf,
    947                                    &SampleApp_TransID, 
    948                                    0, 
    949                                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_144:
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000024   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000027   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   8A..         MOV     ?V0 + 0,R2
   \   000031   8B..         MOV     ?V0 + 1,R3
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   89..         MOV     ?V0 + 0,R1
   \   00003A   75..00       MOV     ?V0 + 1,#0x0
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   75..02       MOV     ?V0 + 0,#0x2
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
    950            {
    951              osal_mem_free( rbuf );  //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!
   \   000050                ; Setup parameters for call to function osal_mem_free
   \   000050   12....       LCALL   ?Subroutine17 & 0xFFFF
    952            }
    953            else
    954            {
    955              osal_mem_free( rbuf ); //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!    
    956            }  
    957          }
   \                     ??CrossCallReturnLabel_32:
   \   000053   02....       LJMP    ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   90....       MOV     DPTR,#(SampleApp_SPI_SendData_DstAddr + 8)
   \   000003   F0           MOVX    @DPTR,A
   \   000004   7414         MOV     A,#0x14
   \   000006   90....       MOV     DPTR,#(SampleApp_SPI_SendData_DstAddr + 9)
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   90....       MOV     DPTR,#SampleApp_SPI_SendData_DstAddr
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   7900         MOV     R1,#0x0
   \   000002                REQUIRE ??Subroutine65_0
   \   000002                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   000002   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   000004   7A..         MOV     R2,#(SampleApp_SPI_SendData_DstAddr & 0xff)
   \   000006   7B..         MOV     R3,#((SampleApp_SPI_SendData_DstAddr >> 8) & 0xff)
   \   000008                REQUIRE ??Subroutine66_0
   \   000008                ; // Fall through to label ??Subroutine66_0
    958          
    959          /*********************************************************************
    960           * @fn      ReadID(uint8 *dat)
    961           *
    962           * @brief   Get the ID then sent it to PC Æ¥Åä×Ö·û²¢¶ÁÈ¡PANID
    963           *
    964           * @param   *dat   
    965                       the data from uart
    966           *
    967           * @return  none
    968           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    969          void ReadID(uint8 *dat)
   \                     ReadID:
    970          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    971            uint8 predict[5]={103,97,111,105,100};  //gaoid
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#((`?<Constant {103, 97, 111, 105, 100}>` >> 8) & 0xff)
   \   000017   7582..       MOV     DPL,#(`?<Constant {103, 97, 111, 105, 100}>` & 0xff)
   \   00001A   7405         MOV     A,#0x5
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    972            //ÒÔÉÏÎªÆ¥Åä×Ö·û  
    973            uint8 *ppredict=&predict[0];
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   A882         MOV     R0,DPL
   \   000027   A983         MOV     R1,DPH
    974            uint8 i; 
    975            
    976            if(rxlen!=5)//±È½Ï´ÓÉÏÎ»»úÀ´µÄÊý¾Ý³¤¶È£¡£¡
   \   000029   90....       MOV     DPTR,#rxlen
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6405         XRL     A,#0x5
   \   00002F   701C         JNZ     ??CrossCallReturnLabel_114
    977            return;
    978            
    979            
    980            //ÆôÓÃÁËID£¬ÔòÔÚÕæÊµÊý¾ÝÔÚIDÖ®ºó£¬ÐèÒªÌø¹ýID½øÐÐ±È½ÏÆ¥Åä
    981          
    982            for ( i = 0; i <9; i++ )//Õâ¼¸¸ö¿Õ¹ýÈ¥ÊÇÒòÎªÓÐÉè±¸ID¡£
   \   000031   12....       LCALL   ?Subroutine20 & 0xFFFF
    983            {
    984             *dat++ ;
    985            }
    986            
    987            for ( i = 0; i <5; i++ )//½øÐÐÊý¾ÝÆ¥Åä
    988            {
    989             if(*dat++ == *ppredict++);
   \                     ??CrossCallReturnLabel_47:
   \   000034   12....       LCALL   ?Subroutine14 & 0xFFFF
    990             else
    991                 return;
    992            }  
   \                     ??CrossCallReturnLabel_22:
   \   000037   7014         JNZ     ??CrossCallReturnLabel_114
   \   000039   05..         INC     ?V0 + 0
   \   00003B   E5..         MOV     A,?V0 + 0
   \   00003D   C3           CLR     C
   \   00003E   9405         SUBB    A,#0x5
   \   000040   40F2         JC      ??CrossCallReturnLabel_47
    993            
    994            HalUARTWrite(SERIAL_APP_PORT,&IDbuf[0],5);
   \   000042                ; Setup parameters for call to function HalUARTWrite
   \   000042   7C05         MOV     R4,#0x5
   \   000044   7D00         MOV     R5,#0x0
   \   000046   7A..         MOV     R2,#(IDbuf & 0xff)
   \   000048   7B..         MOV     R3,#((IDbuf >> 8) & 0xff)
   \   00004A   12....       LCALL   ?Subroutine13 & 0xFFFF
    995            osal_mem_free( rbuf );  //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!
    996            rbuf_Free_Flag=1;
    997          }
   \                     ??CrossCallReturnLabel_114:
   \   00004D   7405         MOV     A,#0x5
   \   00004F   02....       LJMP    ??Subroutine60_0 & 0xFFFF
    998          
    999          
   1000          //Æ¥Åä×Ö·û£¬ÉèÖÃID¡£ÀàËÆÓÚÉèÖÃPANID

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1001          void CompforID(uint8 *dat)
   \                     CompforID:
   1002          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1003            uint8 predict[8]={103,97,111,115,101,116,105,100};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#((`?<Constant {103, 97, 111, 115, 101, 116, 105, ` >> 8) & 0xff)
   \   000017   7582..       MOV     DPL,#(`?<Constant {103, 97, 111, 115, 101, 116, 105, ` & 0xff)
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1004            uint8 *ppredict=&predict[0];
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   A882         MOV     R0,DPL
   \   000027   A983         MOV     R1,DPH
   1005            uint8 i; 
   1006            //uint8 7;
   1007            if(rxlen!=12)//±È½Ï´ÓÉÏÎ»»úÀ´µÄÊý¾Ý³¤¶È£¡£¡
   \   000029   90....       MOV     DPTR,#rxlen
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   640C         XRL     A,#0xc
   \   00002F   705F         JNZ     ??CrossCallReturnLabel_116
   1008            return;
   1009            
   1010            uint16 newid=0,temp=0;
   \   000031   12....       LCALL   ?Subroutine29 & 0xFFFF
   1011            
   1012          
   1013            for ( i = 0; i <9; i++ )//Õâ¼¸¸ö¿Õ¹ýÈ¥ÊÇÒòÎªÓÐÉè±¸ID¡£
   1014            {
   1015             *dat++ ;
   1016            }
   1017            
   1018            for ( i = 0; i <8; i++ )
   1019            {
   1020             if(*dat++ == *ppredict++);
   \                     ??CrossCallReturnLabel_67:
   \   000034   12....       LCALL   ?Subroutine16 & 0xFFFF
   1021             else
   1022                 return;
   1023            }  
   \                     ??CrossCallReturnLabel_30:
   \   000037   7057         JNZ     ??CrossCallReturnLabel_116
   \   000039   05..         INC     ?V0 + 2
   \   00003B   E5..         MOV     A,?V0 + 2
   \   00003D   C3           CLR     C
   \   00003E   9408         SUBB    A,#0x8
   \   000040   40F2         JC      ??CrossCallReturnLabel_67
   1024            
   1025            for ( i =0; i <4; i++ )
   \   000042   8C..         MOV     ?V0 + 2,R4
   1026            { 
   1027             if(*dat>=48&&*dat<=57)
   \                     ??CompforID_0:
   \   000044   8A82         MOV     DPL,R2
   \   000046   8B83         MOV     DPH,R3
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V0 + 0,A
   \   00004B   C3           CLR     C
   \   00004C   9430         SUBB    A,#0x30
   \   00004E   400B         JC      ??CompforID_1
   \   000050   E5..         MOV     A,?V0 + 0
   \   000052   C3           CLR     C
   \   000053   943A         SUBB    A,#0x3a
   \   000055   5004         JNC     ??CompforID_1
   1028               {
   1029                temp=(*dat)-48;    
   \   000057   74D0         MOV     A,#-0x30
   \   000059   8020         SJMP    ??CompforID_2
   1030               }
   1031             else if(*dat>=97&&*dat<=102)
   \                     ??CompforID_1:
   \   00005B   E5..         MOV     A,?V0 + 0
   \   00005D   C3           CLR     C
   \   00005E   9461         SUBB    A,#0x61
   \   000060   E5..         MOV     A,?V0 + 0
   \   000062   4009         JC      ??CompforID_3
   \   000064   C3           CLR     C
   \   000065   9467         SUBB    A,#0x67
   \   000067   5027         JNC     ??CrossCallReturnLabel_116
   1032               {
   1033                temp=(*dat)-87;
   \   000069   74A9         MOV     A,#-0x57
   \   00006B   800E         SJMP    ??CompforID_2
   1034               }
   1035              else if(*dat>=65&&*dat<=70)
   \                     ??CompforID_3:
   \   00006D   C3           CLR     C
   \   00006E   9441         SUBB    A,#0x41
   \   000070   401E         JC      ??CrossCallReturnLabel_116
   \   000072   E5..         MOV     A,?V0 + 0
   \   000074   C3           CLR     C
   \   000075   9447         SUBB    A,#0x47
   \   000077   5017         JNC     ??CrossCallReturnLabel_116
   1036               {
   1037                temp=(*dat)-55;
   \   000079   74C9         MOV     A,#-0x37
   1038               }
   1039             else
   1040               return;
   1041             
   1042                *dat++;
   1043               temp=temp<<((3-i)*4);
   1044               newid|=temp;
   1045            } 
   \                     ??CompforID_2:
   \   00007B   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00007E   12....       LCALL   ?S_SHL
   \   000081   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000084   40BE         JC      ??CompforID_0
   1046            
   1047            Set_id(newid);
   \   000086                ; Setup parameters for call to function Set_id
   \   000086   EC           MOV     A,R4
   \   000087   FA           MOV     R2,A
   \   000088   ED           MOV     A,R5
   \   000089   FB           MOV     R3,A
   \   00008A   12....       LCALL   ??Set_id?relay
   1048            osal_mem_free( rbuf );  //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!
   \   00008D                ; Setup parameters for call to function osal_mem_free
   \   00008D   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   1049            rbuf_Free_Flag=1;
   1050          }
   \                     ??CrossCallReturnLabel_116:
   \   000090   7408         MOV     A,#0x8
   \   000092   02....       LJMP    ?Subroutine44 & 0xFFFF
   1051          
   1052          
   1053          //Éè¶¨IDºÅ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1054          void Set_id(uint16 u16NewPaind)
   \                     Set_id:
   1055          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine3 & 0xFFFF
   1056            
   1057              if ( osal_nv_item_init( ZCD_NV_ID1,2,&u16NewPaind ) == ZSUCCESS )  
   \                     ??CrossCallReturnLabel_94:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   7C02         MOV     R4,#0x2
   \   000012   7D00         MOV     R5,#0x0
   \   000014   7A89         MOV     R2,#-0x77
   \   000016   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000019   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001C   E9           MOV     A,R1
   \   00001D   701C         JNZ     ??Set_id_0
   1058              {
   1059                     osal_nv_write(ZCD_NV_ID1,0,2,&u16NewPaind);
   \   00001F                ; Setup parameters for call to function osal_nv_write
   \   00001F   78..         MOV     R0,#?V0 + 0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..02       MOV     ?V0 + 0,#0x2
   \   000027   75..00       MOV     ?V0 + 1,#0x0
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A89         MOV     R2,#-0x77
   \   000035   12....       LCALL   ??Subroutine62_0 & 0xFFFF
   1060              }
   \                     ??CrossCallReturnLabel_108:
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
   1061              if ( osal_nv_item_init( ZCD_NV_ID,2,&u16NewPaind) == ZSUCCESS )  
   \                     ??Set_id_0:
   \   00003B                ; Setup parameters for call to function osal_nv_item_init
   \   00003B   85..82       MOV     DPL,?XSP + 0
   \   00003E   85..83       MOV     DPH,?XSP + 1
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   7C02         MOV     R4,#0x2
   \   00004E   7D00         MOV     R5,#0x0
   \   000050   7A88         MOV     R2,#-0x78
   \   000052   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   \   000058   E9           MOV     A,R1
   \   000059   701C         JNZ     ??Set_id_1
   1062              {
   1063                     osal_nv_write(ZCD_NV_ID,0,2,&u16NewPaind);
   \   00005B                ; Setup parameters for call to function osal_nv_write
   \   00005B   78..         MOV     R0,#?V0 + 0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   75..02       MOV     ?V0 + 0,#0x2
   \   000063   75..00       MOV     ?V0 + 1,#0x0
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   7C00         MOV     R4,#0x0
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   7A88         MOV     R2,#-0x78
   \   000071   12....       LCALL   ??Subroutine62_0 & 0xFFFF
   1064              }
   \                     ??CrossCallReturnLabel_109:
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   1065               //HAL_SYSTEM_RESET();//ÖØÆôÏµÍ³
   1066          }
   \                     ??Set_id_1:
   \   000077   02....       LJMP    ??Subroutine55_0 & 0xFFFF
   1067          
   1068          
   1069          /*********************************************************************
   1070           * @fn      CheckToSetTest(uint8 *dat)
   1071           *
   1072           * @brief   Éè¶¨ÊÇ·ñÆôÓÃTEST¹¦ÄÜ
   1073           *
   1074           * @param   *dat   
   1075                       the data from uart
   1076           *
   1077           * @return  none
   1078           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1079          void CheckToSetTest(uint8 *dat)
   \                     CheckToSetTest:
   1080          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 34
   \   000005   74DE         MOV     A,#-0x22
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1081            uint8 predict[4]={103,97,111,36};  //gao$
   \   00000E   7401         MOV     A,#0x1
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   AC82         MOV     R4,DPL
   \   000015   AD83         MOV     R5,DPH
   \   000017   7583..       MOV     DPH,#((`?<Constant {103, 97, 111, 36}>` >> 8) & 0xff)
   \   00001A   7582..       MOV     DPL,#(`?<Constant {103, 97, 111, 36}>` & 0xff)
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1082            //ÒÔÉÏÎªÆ¥Åä×Ö·û  
   1083            uint8 *ppredict=&predict[0];
   \   000022   7401         MOV     A,#0x1
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   A882         MOV     R0,DPL
   \   000029   A983         MOV     R1,DPH
   1084            uint8 i; 
   1085            
   1086            uint8 shortadd1[1];
   1087            shortadd1[0]='\n'; 
   \   00002B   740A         MOV     A,#0xa
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   F0           MOVX    @DPTR,A
   1088            
   1089            uint8 str_1[ ]="Test is open!";
   \   000034   7414         MOV     A,#0x14
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   AC82         MOV     R4,DPL
   \   00003B   AD83         MOV     R5,DPH
   \   00003D   7583..       MOV     DPH,#((`?<Constant "Test is open!">` >> 8) & 0xff)
   \   000040   7582..       MOV     DPL,#(`?<Constant "Test is open!">` & 0xff)
   \   000043   740E         MOV     A,#0xe
   \   000045   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1090            uint8 str_2[ ]="Test is close!";
   \   000048   7405         MOV     A,#0x5
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   AC82         MOV     R4,DPL
   \   00004F   AD83         MOV     R5,DPH
   \   000051   7583..       MOV     DPH,#((`?<Constant "Test is close!">` >> 8) & 0xff)
   \   000054   7582..       MOV     DPL,#(`?<Constant "Test is close!">` & 0xff)
   \   000057   740F         MOV     A,#0xf
   \   000059   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1091            
   1092            if(rxlen!=5)//±È½Ï´ÓÉÏÎ»»úÀ´µÄÊý¾Ý³¤¶È£¡£¡
   \   00005C   90....       MOV     DPTR,#rxlen
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   6405         XRL     A,#0x5
   \   000062   7044         JNZ     ??CrossCallReturnLabel_117
   1093            return;
   1094            
   1095          
   1096            for ( i = 0; i <9; i++ )//Õâ¼¸¸ö¿Õ¹ýÈ¥ÊÇÒòÎªÓÐÉè±¸ID¡£
   \   000064   12....       LCALL   ?Subroutine27 & 0xFFFF
   1097            {
   1098             *dat++ ;
   1099            }
   1100             
   1101            for ( i = 0; i <4; i++ )//½øÐÐÊý¾ÝÆ¥Åä
   1102            {
   1103             if(*dat++ == *ppredict++);
   \                     ??CrossCallReturnLabel_62:
   \   000067   12....       LCALL   ?Subroutine19 & 0xFFFF
   1104             else
   1105                 return;
   1106            }
   \                     ??CrossCallReturnLabel_44:
   \   00006A   703C         JNZ     ??CrossCallReturnLabel_117
   \   00006C   05..         INC     ?V0 + 0
   \   00006E   E5..         MOV     A,?V0 + 0
   \   000070   C3           CLR     C
   \   000071   9404         SUBB    A,#0x4
   \   000073   40F2         JC      ??CrossCallReturnLabel_62
   1107            
   1108            if(*dat==48)//´«À´µÄÊÇÊý¾Ý0£¬Ôò½ûÖ¹TEST¹¦ÄÜ
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   6430         XRL     A,#0x30
   \   00007C   700F         JNZ     ??CheckToSetTest_0
   1109            {
   1110              HalUARTWrite(0,&str_2[0],14);
   \   00007E                ; Setup parameters for call to function HalUARTWrite
   \   00007E   7C0E         MOV     R4,#0xe
   \   000080   7D00         MOV     R5,#0x0
   \   000082   7405         MOV     A,#0x5
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   12....       LCALL   ?Subroutine21 & 0xFFFF
   1111              
   1112              HalUARTWrite(0,&shortadd1[0],1);//Õâ¸öÓÃÀ´ÏÔÊ¾µÄ»»ÐÐ
   1113              Set_Test(0);
   1114            }
   \                     ??CrossCallReturnLabel_52:
   \   00008A   12....       LCALL   ??Set_Test?relay
   1115            
   1116            if(*dat==49)
   \                     ??CheckToSetTest_0:
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   E0           MOVX    A,@DPTR
   \   000092   6431         XRL     A,#0x31
   \   000094   700F         JNZ     ??CheckToSetTest_1
   1117            {
   1118              HalUARTWrite(0,&str_1[0],13);
   \   000096                ; Setup parameters for call to function HalUARTWrite
   \   000096   7C0D         MOV     R4,#0xd
   \   000098   7D00         MOV     R5,#0x0
   \   00009A   7414         MOV     A,#0x14
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   12....       LCALL   ?Subroutine22 & 0xFFFF
   1119              HalUARTWrite(0,&shortadd1[0],1);//Õâ¸öÓÃÀ´ÏÔÊ¾µÄ»»ÐÐ
   1120              Set_Test(1);
   1121            }
   \                     ??CrossCallReturnLabel_54:
   \   0000A2   12....       LCALL   ??Set_Test?relay
   1122            
   1123            osal_mem_free( rbuf );  //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!
   \                     ??CheckToSetTest_1:
   \   0000A5                ; Setup parameters for call to function osal_mem_free
   \   0000A5   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   1124            rbuf_Free_Flag=1;
   1125          }
   \                     ??CrossCallReturnLabel_117:
   \   0000A8   7422         MOV     A,#0x22
   \   0000AA   02....       LJMP    ??Subroutine60_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   EE           MOV     A,R6
   \   000001   2409         ADD     A,#0x9
   \   000003   FE           MOV     R6,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008   75..00       MOV     ?V0 + 0,#0x0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000003                ; Setup parameters for call to function Set_Test
   \   000003                ; Setup parameters for call to function ID_Set
   \   000003   7901         MOV     R1,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003                ; Setup parameters for call to function Set_Test
   \   000003                ; Setup parameters for call to function ID_Set
   \   000003   7900         MOV     R1,#0x0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   7900         MOV     R1,#0x0
   \   000006   12....       LCALL   ??HalUARTWrite?relay
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009   7C01         MOV     R4,#0x1
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
   \   000017   7900         MOV     R1,#0x0
   \   000019   12....       LCALL   ??HalUARTWrite?relay
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   AE82         MOV     R6,DPL
   \   00000B   AF83         MOV     R7,DPH
   \   00000D   E8           MOV     A,R0
   \   00000E   FC           MOV     R4,A
   \   00000F   E9           MOV     A,R1
   \   000010   FD           MOV     R5,A
   \   000011   8C82         MOV     DPL,R4
   \   000013   8D83         MOV     DPH,R5
   \   000015   A3           INC     DPTR
   \   000016   A882         MOV     R0,DPL
   \   000018   A983         MOV     R1,DPH
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6A           XRL     A,R2
   \   000026   22           RET
   1126          
   1127          //ÉèÖÃÊÇ·ñ¿ªÆô²âÊÔ¹¦ÄÜ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1128          void Set_Test(uint8 u16NewPaind)//Ð´1»òÕßÐ´0
   \                     Set_Test:
   1129          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine12 & 0xFFFF
   1130            
   1131              if ( osal_nv_item_init( ZCD_NV_TEST,1,&u16NewPaind ) == ZSUCCESS )  
   \                     ??CrossCallReturnLabel_91:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   7C01         MOV     R4,#0x1
   \   000012   7D00         MOV     R5,#0x0
   \   000014   7A86         MOV     R2,#-0x7a
   \   000016   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000019   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001C   E9           MOV     A,R1
   \   00001D   7016         JNZ     ??Set_Test_0
   1132              {
   1133                     osal_nv_write(ZCD_NV_TEST,0,1,&u16NewPaind);
   \   00001F                ; Setup parameters for call to function osal_nv_write
   \   00001F   78..         MOV     R0,#?V0 + 0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..01       MOV     ?V0 + 0,#0x1
   \   000027   75..00       MOV     ?V0 + 1,#0x0
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   12....       LCALL   ?Subroutine31 & 0xFFFF
   1134              }  
   \                     ??CrossCallReturnLabel_105:
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
   1135          }
   \                     ??Set_Test_0:
   \   000035   02....       LJMP    ??Subroutine59_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine60_0
   \   000002                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   7C00         MOV     R4,#0x0
   \   000002   7D00         MOV     R5,#0x0
   \   000004   7A86         MOV     R2,#-0x7a
   \   000006                REQUIRE ??Subroutine62_0
   \   000006                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function osal_nv_item_init
   \   000008                ; Setup parameters for call to function osal_nv_item_init
   \   000008   02....       LJMP    ?Subroutine46 & 0xFFFF
   1136          
   1137          
   1138          
   1139          //ÉèÖÃÊÇ·ñÆôÓÃID

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1140          void IDISUSE(uint8 *dat)
   \                     IDISUSE:
   1141          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV     A,#-0x21
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1142            uint8 predict[4]={103,97,111,35};  //gao#
   \   00000E   7401         MOV     A,#0x1
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   AC82         MOV     R4,DPL
   \   000015   AD83         MOV     R5,DPH
   \   000017   7583..       MOV     DPH,#((`?<Constant {103, 97, 111, 35}>` >> 8) & 0xff)
   \   00001A   7582..       MOV     DPL,#(`?<Constant {103, 97, 111, 35}>` & 0xff)
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1143            //ÒÔÉÏÎªÆ¥Åä×Ö·û  
   1144            uint8 *ppredict=&predict[0];
   \   000022   7401         MOV     A,#0x1
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   A882         MOV     R0,DPL
   \   000029   A983         MOV     R1,DPH
   1145            uint8 i; 
   1146            uint8 shortadd1[1];
   1147            shortadd1[0]='\n'; 
   \   00002B   740A         MOV     A,#0xa
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   F0           MOVX    @DPTR,A
   1148            uint8 str_1[ ]="ID is used!";
   \   000034   7415         MOV     A,#0x15
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   AC82         MOV     R4,DPL
   \   00003B   AD83         MOV     R5,DPH
   \   00003D   7583..       MOV     DPH,#((`?<Constant "ID is used!">` >> 8) & 0xff)
   \   000040   7582..       MOV     DPL,#(`?<Constant "ID is used!">` & 0xff)
   \   000043   740C         MOV     A,#0xc
   \   000045   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1149            uint8 str_2[ ]="ID is not used!";
   \   000048   7405         MOV     A,#0x5
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   AC82         MOV     R4,DPL
   \   00004F   AD83         MOV     R5,DPH
   \   000051   7583..       MOV     DPH,#((`?<Constant "ID is not used!">` >> 8) & 0xff)
   \   000054   7582..       MOV     DPL,#(`?<Constant "ID is not used!">` & 0xff)
   \   000057   7410         MOV     A,#0x10
   \   000059   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1150            
   1151            if(rxlen!=5)//±È½Ï´ÓÉÏÎ»»úÀ´µÄÊý¾Ý³¤¶È£¡£¡
   \   00005C   90....       MOV     DPTR,#rxlen
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   6405         XRL     A,#0x5
   \   000062   7044         JNZ     ??CrossCallReturnLabel_118
   1152            return;
   1153            
   1154            for ( i = 0; i <9; i++ )//Õâ¼¸¸ö¿Õ¹ýÈ¥ÊÇÒòÎªÓÐÉè±¸ID¡£
   \   000064   12....       LCALL   ?Subroutine27 & 0xFFFF
   1155            {
   1156             *dat++ ;
   1157            }
   1158          
   1159            
   1160            for ( i = 0; i <4; i++ )//½øÐÐÊý¾ÝÆ¥Åä
   1161            {
   1162             if(*dat++ == *ppredict++);
   \                     ??CrossCallReturnLabel_63:
   \   000067   12....       LCALL   ?Subroutine19 & 0xFFFF
   1163             else
   1164                 return;
   1165            }
   \                     ??CrossCallReturnLabel_45:
   \   00006A   703C         JNZ     ??CrossCallReturnLabel_118
   \   00006C   05..         INC     ?V0 + 0
   \   00006E   E5..         MOV     A,?V0 + 0
   \   000070   C3           CLR     C
   \   000071   9404         SUBB    A,#0x4
   \   000073   40F2         JC      ??CrossCallReturnLabel_63
   1166            if(*dat==48)
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   6430         XRL     A,#0x30
   \   00007C   700F         JNZ     ??IDISUSE_0
   1167            {
   1168              HalUARTWrite(0,&str_2[0],15);
   \   00007E                ; Setup parameters for call to function HalUARTWrite
   \   00007E   7C0F         MOV     R4,#0xf
   \   000080   7D00         MOV     R5,#0x0
   \   000082   7405         MOV     A,#0x5
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   12....       LCALL   ?Subroutine21 & 0xFFFF
   1169              HalUARTWrite(0,&shortadd1[0],1);//Õâ¸öÓÃÀ´ÏÔÊ¾µÄ»»ÐÐ
   1170              ID_Set(0);
   1171            }
   \                     ??CrossCallReturnLabel_53:
   \   00008A   12....       LCALL   ??ID_Set?relay
   1172            if(*dat==49)
   \                     ??IDISUSE_0:
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   E0           MOVX    A,@DPTR
   \   000092   6431         XRL     A,#0x31
   \   000094   700F         JNZ     ??IDISUSE_1
   1173            {
   1174              HalUARTWrite(0,&str_1[0],11);
   \   000096                ; Setup parameters for call to function HalUARTWrite
   \   000096   7C0B         MOV     R4,#0xb
   \   000098   7D00         MOV     R5,#0x0
   \   00009A   7415         MOV     A,#0x15
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   12....       LCALL   ?Subroutine22 & 0xFFFF
   1175              HalUARTWrite(0,&shortadd1[0],1);//Õâ¸öÓÃÀ´ÏÔÊ¾µÄ»»ÐÐ
   1176              ID_Set(1);
   1177            }
   \                     ??CrossCallReturnLabel_55:
   \   0000A2   12....       LCALL   ??ID_Set?relay
   1178            osal_mem_free( rbuf );  //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!
   \                     ??IDISUSE_1:
   \   0000A5                ; Setup parameters for call to function osal_mem_free
   \   0000A5   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   1179            rbuf_Free_Flag=1;
   1180            
   1181          }
   \                     ??CrossCallReturnLabel_118:
   \   0000A8   7421         MOV     A,#0x21
   \   0000AA   80..         SJMP    ??Subroutine60_0
   1182          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1183          void ID_Set(uint8 u16NewPaind)
   \                     ID_Set:
   1184          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine12 & 0xFFFF
   1185            
   1186              if ( osal_nv_item_init( ZCD_NV_IDSET,1,&u16NewPaind ) == ZSUCCESS )  
   \                     ??CrossCallReturnLabel_92:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000013   12....       LCALL   ?DEALLOC_XSTACK8
   \   000016   E9           MOV     A,R1
   \   000017   701C         JNZ     ??ID_Set_0
   1187              {
   1188                     osal_nv_write(ZCD_NV_IDSET,0,1,&u16NewPaind);
   \   000019                ; Setup parameters for call to function osal_nv_write
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75..01       MOV     ?V0 + 0,#0x1
   \   000021   75..00       MOV     ?V0 + 1,#0x0
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A87         MOV     R2,#-0x79
   \   00002F   12....       LCALL   ??Subroutine62_0 & 0xFFFF
   1189              }  
   \                     ??CrossCallReturnLabel_110:
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
   1190          }
   \                     ??ID_Set_0:
   \   000035   02....       LJMP    ??Subroutine59_0 & 0xFFFF
   1191          
   1192          
   1193          //ÕâÀïÓÃÓÚÍ³¼Æ¹¦ÄÜ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1194          void CompforTestID(uint8 *dat)
   \                     CompforTestID:
   1195          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1196            uint8 predict[8]={103,97,111,99,101,115,104,105};//gaoceshi
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#((`?<Constant {103, 97, 111, 99, 101, 115, 104, 1` >> 8) & 0xff)
   \   000017   7582..       MOV     DPL,#(`?<Constant {103, 97, 111, 99, 101, 115, 104, 1` & 0xff)
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1197            uint8 *ppredict=&predict[0];
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   A882         MOV     R0,DPL
   \   000027   A983         MOV     R1,DPH
   1198            uint8 i; 
   1199            //uint8 7;
   1200            if(rxlen!=8)//±È½Ï´ÓÉÏÎ»»úÀ´µÄÊý¾Ý³¤¶È£¡£¡
   \   000029   90....       MOV     DPTR,#rxlen
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6408         XRL     A,#0x8
   \   00002F   7017         JNZ     ??CrossCallReturnLabel_119
   1201            return;
   1202          
   1203            for ( i = 0; i <9; i++ )//Õâ¼¸¸ö¿Õ¹ýÈ¥ÊÇÒòÎªÓÐÉè±¸ID¡£
   \   000031   12....       LCALL   ?Subroutine20 & 0xFFFF
   1204            {
   1205             *dat++ ;
   1206            }
   1207            
   1208            for ( i = 0; i <8; i++ )
   1209            {
   1210             if(*dat++ == *ppredict++);
   \                     ??CrossCallReturnLabel_48:
   \   000034   12....       LCALL   ?Subroutine14 & 0xFFFF
   1211             else
   1212                 return;
   1213            }  
   \                     ??CrossCallReturnLabel_23:
   \   000037   700F         JNZ     ??CrossCallReturnLabel_119
   \   000039   05..         INC     ?V0 + 0
   \   00003B   E5..         MOV     A,?V0 + 0
   \   00003D   C3           CLR     C
   \   00003E   9408         SUBB    A,#0x8
   \   000040   40F2         JC      ??CrossCallReturnLabel_48
   1214            SampleApp_Broadcast_ForTest();
   \   000042                ; Setup parameters for call to function SampleApp_Broadcast_ForTest
   \   000042   12....       LCALL   ??SampleApp_Broadcast_ForTest?relay
   1215            osal_mem_free( rbuf );  //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!
   \   000045                ; Setup parameters for call to function osal_mem_free
   \   000045   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   1216            
   1217            rbuf_Free_Flag=1;
   1218          }
   \                     ??CrossCallReturnLabel_119:
   \   000048                REQUIRE ?Subroutine52
   \   000048                ; // Fall through to label ?Subroutine52

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   7408         MOV     A,#0x8
   \   000002   02....       LJMP    ??Subroutine60_0 & 0xFFFF
   1219          
   1220          
   1221          //×¢ÒâÕâ¸öº¯Êý±»µ÷ÓÃºóÊÍ·ÅÁËÄÚ´æ£¬ËùÒÔÕâ¸öº¯Êý±¾ÉíÄÚ²¿²»ÊÍ·Å
   1222          
   1223          //Ð­µ÷Æ÷Ïò½Úµã·¢ËÍ¹ã²¥ÐÅÏ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   78..         MOV     R0,#?V0 + 0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000005   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000008   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000B                REQUIRE ??Subroutine59_0
   \   00000B                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1224          void SampleApp_Broadcast_ForTest(void)
   \                     SampleApp_Broadcast_ForTest:
   1225          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1226              uint8 Broadcast[1];
   1227              SampleApp_SPI_SendData_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000A   12....       LCALL   ??Subroutine67_0 & 0xFFFF
   1228              SampleApp_SPI_SendData_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   1229              SampleApp_SPI_SendData_DstAddr.addr.shortAddr = 0xFFFF; 
   1230              
   1231              if ( AF_DataRequest   ( &SampleApp_SPI_SendData_DstAddr,
   1232                                    (endPointDesc_t *)&SampleApp_epDesc,
   1233                                    SAMPLEAPP_BROADCAST_CLUSTERID,
   1234                                    1, 
   1235                                    &Broadcast[0],
   1236                                    &SampleApp_TransID, 
   1237                                    0, 
   1238                                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_139:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000010   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000013   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7403         MOV     A,#0x3
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   8582..       MOV     ?V0 + 0,DPL
   \   000023   8583..       MOV     ?V0 + 1,DPH
   \   000026   78..         MOV     R0,#?V0 + 0
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   75..01       MOV     ?V0 + 0,#0x1
   \   00002E   75..00       MOV     ?V0 + 1,#0x0
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..04       MOV     ?V0 + 0,#0x4
   \   000039   02....       LJMP    ?Subroutine45 & 0xFFFF
   1239            {
   1240              //osal_mem_free( rbuf );  //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!
   1241            }
   1242            else
   1243            {
   1244             // osal_mem_free( rbuf ); //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!    
   1245            }
   1246          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   740F         MOV     A,#0xf
   \   000002   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000005   74FF         MOV     A,#-0x1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   02....       LJMP    ?Subroutine47 & 0xFFFF
   1247          
   1248          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1249          void SampleApp_SendTestMessage(void)
   \                     SampleApp_SendTestMessage:
   1250          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1251            uint8 i;
   1252            uint8 pIDTestbuf[4];
   1253            SampleApp_SPI_SendData_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00000A   12....       LCALL   ?Subroutine6 & 0xFFFF
   1254            SampleApp_SPI_SendData_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   1255            SampleApp_SPI_SendData_DstAddr.addr.shortAddr = 0x0000;  
   1256            for(i=0;i<4;i++)
   \                     ??CrossCallReturnLabel_9:
   \   00000D   FA           MOV     R2,A
   1257            {
   1258            pIDTestbuf[i]=pIDbuf[i];
   \                     ??SampleApp_SendTestMessage_0:
   \   00000E   12....       LCALL   ?Subroutine34 & 0xFFFF
   1259            }
   \                     ??CrossCallReturnLabel_72:
   \   000011   C0E0         PUSH    A
   \   000013   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000016   D0E0         POP     A
   \   000018   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00001B   40F1         JC      ??SampleApp_SendTestMessage_0
   1260            if ( AF_DataRequest   ( &SampleApp_SPI_SendData_DstAddr,
   1261                                   (endPointDesc_t *)&SampleApp_epDesc,
   1262                                    SAMPLEAPP_TEST_CLUSTERID,
   1263                                    4, 
   1264                                    &pIDTestbuf[0],
   1265                                    &SampleApp_TransID, 
   1266                                    0, 
   1267                                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00001D                ; Setup parameters for call to function AF_DataRequest
   \   00001D   75..1E       MOV     ?V0 + 0,#0x1e
   \   000020   78..         MOV     R0,#?V0 + 0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000025   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000028   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   7403         MOV     A,#0x3
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   8582..       MOV     ?V0 + 0,DPL
   \   000038   8583..       MOV     ?V0 + 1,DPH
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   75..04       MOV     ?V0 + 0,#0x4
   \   000043   89..         MOV     ?V0 + 1,R1
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   75..03       MOV     ?V0 + 0,#0x3
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000055                REQUIRE ?Subroutine51
   \   000055                ; // Fall through to label ?Subroutine51
   1268            {
   1269             // osal_mem_free( rbuf );  //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!
   1270            }
   1271            else
   1272            {
   1273             // osal_mem_free( rbuf ); //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!    
   1274            }
   1275          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7404         MOV     A,#0x4
   \   000005   02....       LJMP    ??Subroutine60_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000005   E4           CLR     A
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   8A82         MOV     DPL,R2
   \   000002   A882         MOV     R0,DPL
   \   000004   7900         MOV     R1,#0x0
   \   000006   E8           MOV     A,R0
   \   000007   24..         ADD     A,#(pIDbuf & 0xff)
   \   000009   F582         MOV     DPL,A
   \   00000B   E4           CLR     A
   \   00000C   34..         ADDC    A,#((pIDbuf >> 8) & 0xff)
   \   00000E   F583         MOV     DPH,A
   \   000010   E0           MOVX    A,@DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   3400         ADDC    A,#0x0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   0A           INC     R2
   \   000002   EA           MOV     A,R2
   \   000003   C3           CLR     C
   \   000004   9404         SUBB    A,#0x4
   \   000006   22           RET
   1276          
   1277          
   1278          //Ä¬ÈÏÇé¿ö£º1²»ÆôÓÃID¹¦ÄÜ  2ÆôÓÃTEST¹¦ÄÜ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1279          void Init_IDandTest(void)
   \                     Init_IDandTest:
   1280          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1281            uint8 u16NewPaind=1;
   \   00000A   7401         MOV     A,#0x1
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   F0           MOVX    @DPTR,A
   1282            uint8 u16InitID=0;
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E4           CLR     A
   \   000017   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   1283                if ( osal_nv_item_init( ZCD_NV_IDSET,1,&u16NewPaind ) == ZSUCCESS )  
   \                     ??CrossCallReturnLabel_95:
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
   \   000023   E9           MOV     A,R1
   \   000024   7049         JNZ     ??Init_IDandTest_0
   1284              {
   1285                     osal_nv_write(ZCD_NV_IDSET,0,1,&u16InitID);//ÉèÖÃÄ¬ÈÏ²»´øID
   \   000026                ; Setup parameters for call to function osal_nv_write
   \   000026   7401         MOV     A,#0x1
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   8582..       MOV     ?V0 + 0,DPL
   \   00002E   8583..       MOV     ?V0 + 1,DPH
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV     ?V0 + 0,#0x1
   \   000039   75..00       MOV     ?V0 + 1,#0x0
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A87         MOV     R2,#-0x79
   \   000047   12....       LCALL   ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   1286                     osal_nv_write(ZCD_NV_TEST,0,1,&u16NewPaind);//Éè±¸Ä¬ÈÏÆôÓÃTEST
   \   00004D                ; Setup parameters for call to function osal_nv_write
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   8582..       MOV     ?V0 + 0,DPL
   \   000056   8583..       MOV     ?V0 + 1,DPH
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   75..01       MOV     ?V0 + 0,#0x1
   \   000061   75..00       MOV     ?V0 + 1,#0x0
   \   000064   78..         MOV     R0,#?V0 + 0
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   12....       LCALL   ?Subroutine31 & 0xFFFF
   1287              }  
   \                     ??CrossCallReturnLabel_106:
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   1288          }
   \                     ??Init_IDandTest_0:
   \   00006F   02....       LJMP    ??Subroutine55_0 & 0xFFFF
   1289          
   1290          //µçÑ¹¼ì²â¶Ô±È

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1291          void CompForVdd(uint8 *dat)
   \                     CompForVdd:
   1292          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1293            uint8 predict[8]={103,97,111};//gao
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#((`?<Constant {103, 97, 111}>_1` >> 8) & 0xff)
   \   000017   7582..       MOV     DPL,#(`?<Constant {103, 97, 111}>_1` & 0xff)
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1294            uint8 *ppredict=&predict[0];
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   A882         MOV     R0,DPL
   \   000027   A983         MOV     R1,DPH
   1295            uint8 i; 
   1296            //uint8 7;
   1297            if(rxlen!=3)//±È½Ï´ÓÉÏÎ»»úÀ´µÄÊý¾Ý³¤¶È£¡£¡
   \   000029   90....       MOV     DPTR,#rxlen
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6403         XRL     A,#0x3
   \   00002F   7017         JNZ     ??CrossCallReturnLabel_120
   1298            return;
   1299          
   1300            for ( i = 0; i <9; i++ )//Õâ¼¸¸ö¿Õ¹ýÈ¥ÊÇÒòÎªÓÐÉè±¸ID¡£
   \   000031   12....       LCALL   ?Subroutine20 & 0xFFFF
   1301            {
   1302             *dat++ ;
   1303            }
   1304            
   1305            for ( i = 0; i <3; i++ )
   1306            {
   1307             if(*dat++ == *ppredict++);
   \                     ??CrossCallReturnLabel_49:
   \   000034   12....       LCALL   ?Subroutine14 & 0xFFFF
   1308             else
   1309                 return;
   1310            }  
   \                     ??CrossCallReturnLabel_24:
   \   000037   700F         JNZ     ??CrossCallReturnLabel_120
   \   000039   05..         INC     ?V0 + 0
   \   00003B   E5..         MOV     A,?V0 + 0
   \   00003D   C3           CLR     C
   \   00003E   9403         SUBB    A,#0x3
   \   000040   40F2         JC      ??CrossCallReturnLabel_49
   1311            SampleApp_Broadcast_Vdd();
   \   000042                ; Setup parameters for call to function SampleApp_Broadcast_Vdd
   \   000042   12....       LCALL   ??SampleApp_Broadcast_Vdd?relay
   1312            osal_mem_free( rbuf );  //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!
   \   000045                ; Setup parameters for call to function osal_mem_free
   \   000045   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   1313            rbuf_Free_Flag=1;
   1314          }
   \                     ??CrossCallReturnLabel_120:
   \   000048   02....       LJMP    ?Subroutine52 & 0xFFFF
   1315          
   1316          //µçÑ¹¼ì²â---DA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1317          uint8 myApp_ReadBattery( void )
   \                     myApp_ReadBattery:
   1318          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   1319            uint16 value;
   1320            /* Clear ADC interrupt flag */
   1321            ADCIF = 0;
   \   000005   C28D         CLR     0x88.5
   1322            ADCCON3 = (HAL_ADC_REF_125V | HAL_ADC_DEC_128 | HAL_ADC_CHN_VDD3);
   \   000007   75B61F       MOV     0xb6,#0x1f
   1323            /* Wait for the conversion to finish */
   1324            while ( !ADCIF );
   \                     ??myApp_ReadBattery_0:
   \   00000A   A28D         MOV     C,0x88.5
   \   00000C   50FC         JNC     ??myApp_ReadBattery_0
   1325            /* Get the result */
   1326            value = ADCL;
   \   00000E   AABA         MOV     R2,0xba
   \   000010   8A82         MOV     DPL,R2
   \   000012   8582..       MOV     ?V0 + 0,DPL
   1327            value |= ((uint16) ADCH) << 8;
   \   000015   E5BB         MOV     A,0xbb
   \   000017   F5..         MOV     ?V0 + 1,A
   1328            /*
   1329             * value now contains measurement of Vdd/3
   1330             * 0 indicates 0V and 32767 indicates 1.25V
   1331             * voltage = (value*3*1.25)/32767 volts
   1332             * we will multiply by this by 10 to allow units of 0.1 volts
   1333             */
   1334            value = value >> 6;   // divide first by 2^6
   1335            value = (uint16)(value * 37.5);
   1336            value = value >> 9;   // ...and later by 2^9...to prevent overflow during multiplication
   1337            return value;
   \   000019   7406         MOV     A,#0x6
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?US_SHR
   \   000020   F5..         MOV     ?V0 + 2,A
   \   000022   F5..         MOV     ?V0 + 3,A
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?UL_TO_FLT
   \   000029   90....       MOV     DPTR,#__Constant_42160000
   \   00002C   78..         MOV     R0,#?V0 + 4
   \   00002E   12....       LCALL   ?L_MOV_X
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   79..         MOV     R1,#?V0 + 4
   \   000035   12....       LCALL   ?FLT_MUL
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   12....       LCALL   ?FLT_TO_L
   \   00003D   7409         MOV     A,#0x9
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?US_SHR
   \   000044   A9..         MOV     R1,?V0 + 0
   \   000046   7F08         MOV     R7,#0x8
   \   000048   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00004B                REQUIRE _A_TCON
   \   00004B                REQUIRE ADCCON3
   \   00004B                REQUIRE ADCL
   \   00004B                REQUIRE ADCH
   1338          }
   1339          
   1340          
   1341          //ÏÔÊ¾±¾µØµçÑ¹Öµ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1342          void Read_Battery(void)
   \                     Read_Battery:
   1343          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 15
   \   000004   74F1         MOV     A,#-0xf
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1344            uint8 Battery_buf[5];
   1345            uint8 Battery[1];
   1346            uint8 str_1[ ]="Battery:";
   \   000009   7406         MOV     A,#0x6
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   AC82         MOV     R4,DPL
   \   000010   AD83         MOV     R5,DPH
   \   000012   7583..       MOV     DPH,#((`?<Constant "Battery:">` >> 8) & 0xff)
   \   000015   7582..       MOV     DPL,#(`?<Constant "Battery:">` & 0xff)
   \   000018   7409         MOV     A,#0x9
   \   00001A   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1347            Battery[0]=myApp_ReadBattery();
   \   00001D                ; Setup parameters for call to function myApp_ReadBattery
   \   00001D   12....       LCALL   ?Subroutine35 & 0xFFFF
   1348            Battery_buf[0]=(Battery[0] / 10 ) + '0';   // convent msb to ascii
   \                     ??CrossCallReturnLabel_76:
   \   000020   75F00A       MOV     B,#0xa
   \   000023   84           DIV     AB
   \   000024   2430         ADD     A,#0x30
   \   000026   C0E0         PUSH    A
   \   000028   7401         MOV     A,#0x1
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   D0E0         POP     A
   \   00002F   F0           MOVX    @DPTR,A
   1349            Battery_buf[1]='.';                                                 // decimal point ( battery reading is in units of 0.1 V
   \   000030   7402         MOV     A,#0x2
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   12....       LCALL   ?Subroutine2 & 0xFFFF
   1350            Battery_buf[2]=(Battery[0] % 10 ) + '0'; // convert lsb to ascii
   \                     ??CrossCallReturnLabel_2:
   \   000038   C0E0         PUSH    A
   \   00003A   7403         MOV     A,#0x3
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   D0E0         POP     A
   \   000041   F0           MOVX    @DPTR,A
   1351            Battery_buf[3]=' ';
   \   000042   7404         MOV     A,#0x4
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   7420         MOV     A,#0x20
   \   000049   F0           MOVX    @DPTR,A
   1352            Battery_buf[4]='V';
   \   00004A   7405         MOV     A,#0x5
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   7456         MOV     A,#0x56
   \   000051   F0           MOVX    @DPTR,A
   1353            HalUARTWrite(SERIAL_APP_PORT,&str_1[0],8);
   \   000052                ; Setup parameters for call to function HalUARTWrite
   \   000052   7C08         MOV     R4,#0x8
   \   000054   7D00         MOV     R5,#0x0
   \   000056   7406         MOV     A,#0x6
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   AA82         MOV     R2,DPL
   \   00005D   AB83         MOV     R3,DPH
   \   00005F   7900         MOV     R1,#0x0
   \   000061   12....       LCALL   ??HalUARTWrite?relay
   1354            HalUARTWrite(SERIAL_APP_PORT,&Battery_buf[0],5);
   \   000064                ; Setup parameters for call to function HalUARTWrite
   \   000064   7C05         MOV     R4,#0x5
   \   000066   7D00         MOV     R5,#0x0
   \   000068   7401         MOV     A,#0x1
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   AA82         MOV     R2,DPL
   \   00006F   AB83         MOV     R3,DPH
   \   000071   7900         MOV     R1,#0x0
   \   000073   12....       LCALL   ??HalUARTWrite?relay
   1355          }
   \   000076   740F         MOV     A,#0xf
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007B   02....       LJMP    ?Subroutine48 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ??myApp_ReadBattery?relay
   \   000003   E9           MOV     A,R1
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   742E         MOV     A,#0x2e
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   75F00A       MOV     B,#0xa
   \   00000D   84           DIV     AB
   \   00000E   E5F0         MOV     A,B
   \   000010   2430         ADD     A,#0x30
   \   000012   22           RET
   1356          
   1357          //½«µçÑ¹Öµ·¢ËÍ¸øÐ­µ÷Æ÷

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1358          void SampleApp_Send_VDD_Message(void)
   \                     SampleApp_Send_VDD_Message:
   1359          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1360            uint8 i;
   1361            uint8 BatteryBuf[24];
   1362            uint8 Battery[1];
   1363            
   1364            Battery[0]=myApp_ReadBattery();//¶ÁÈ¡µçÑ¹Öµ
   \   00000A                ; Setup parameters for call to function myApp_ReadBattery
   \   00000A   12....       LCALL   ?Subroutine35 & 0xFFFF
   1365            
   1366            //½«ÐÅÏ¢·¢ËÍ¸øÐ­µ÷Æ÷
   1367            SampleApp_SPI_SendData_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_77:
   \   00000D   12....       LCALL   ?Subroutine6 & 0xFFFF
   1368            SampleApp_SPI_SendData_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   1369            SampleApp_SPI_SendData_DstAddr.addr.shortAddr = 0x0000;  
   1370            
   1371            //Ð­µ÷Æ÷ÏÔÊ¾µçÑ¹¸ñÊ½
   1372            // ID£ºXXXX Battery:XXX 
   1373            BatteryBuf[0]=23;             //Êý¾Ý³¤¶È
   \                     ??CrossCallReturnLabel_10:
   \   000010   7401         MOV     A,#0x1
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   7417         MOV     A,#0x17
   \   000017   F0           MOVX    @DPTR,A
   1374            BatteryBuf[1]=73;             //×Ö·û£ºI
   \   000018   7402         MOV     A,#0x2
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   7449         MOV     A,#0x49
   \   00001F   F0           MOVX    @DPTR,A
   1375            BatteryBuf[2]=68;             //×Ö·û£ºD
   \   000020   7403         MOV     A,#0x3
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   7444         MOV     A,#0x44
   \   000027   F0           MOVX    @DPTR,A
   1376            BatteryBuf[3]=58;             //×Ö·û£º
   \   000028   7404         MOV     A,#0x4
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   743A         MOV     A,#0x3a
   \   00002F   F0           MOVX    @DPTR,A
   1377            
   1378            for(i=0;i<4;i++)//¸´ÖÆÉè±¸ID
   \   000030   7A00         MOV     R2,#0x0
   1379            {
   1380              BatteryBuf[i+4]=pIDbuf[i];
   \                     ??SampleApp_Send_VDD_Message_0:
   \   000032   12....       LCALL   ?Subroutine34 & 0xFFFF
   1381            }  
   \                     ??CrossCallReturnLabel_73:
   \   000035   C0E0         PUSH    A
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00003F   D0E0         POP     A
   \   000041   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000044   40EC         JC      ??SampleApp_Send_VDD_Message_0
   1382            
   1383            BatteryBuf[8]=' ';           //»»ÐÐ·û
   \   000046   7409         MOV     A,#0x9
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   7420         MOV     A,#0x20
   \   00004D   F0           MOVX    @DPTR,A
   1384            
   1385            BatteryBuf[9]='B';            //Battery: 
   \   00004E   740A         MOV     A,#0xa
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   7442         MOV     A,#0x42
   \   000055   F0           MOVX    @DPTR,A
   1386            BatteryBuf[10]='a';
   \   000056   740B         MOV     A,#0xb
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   7461         MOV     A,#0x61
   \   00005D   F0           MOVX    @DPTR,A
   1387            BatteryBuf[11]='t';
   \   00005E   740C         MOV     A,#0xc
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   7474         MOV     A,#0x74
   \   000065   F0           MOVX    @DPTR,A
   1388            BatteryBuf[12]='t';
   \   000066   740D         MOV     A,#0xd
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   7474         MOV     A,#0x74
   \   00006D   F0           MOVX    @DPTR,A
   1389            BatteryBuf[13]='e';
   \   00006E   740E         MOV     A,#0xe
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   7465         MOV     A,#0x65
   \   000075   F0           MOVX    @DPTR,A
   1390            BatteryBuf[14]='r';
   \   000076   740F         MOV     A,#0xf
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   7472         MOV     A,#0x72
   \   00007D   F0           MOVX    @DPTR,A
   1391            BatteryBuf[15]='y';
   \   00007E   7410         MOV     A,#0x10
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   7479         MOV     A,#0x79
   \   000085   F0           MOVX    @DPTR,A
   1392            BatteryBuf[16]=':';
   \   000086   7411         MOV     A,#0x11
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   743A         MOV     A,#0x3a
   \   00008D   F0           MOVX    @DPTR,A
   1393            BatteryBuf[17]=' ';
   \   00008E   7412         MOV     A,#0x12
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   12....       LCALL   ?Subroutine8 & 0xFFFF
   1394            
   1395            BatteryBuf[18]=(Battery[0] / 10 ) + '0';   // convent msb to ascii
   \                     ??CrossCallReturnLabel_13:
   \   000096   C0E0         PUSH    A
   \   000098   7413         MOV     A,#0x13
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   D0E0         POP     A
   \   00009F   F0           MOVX    @DPTR,A
   1396            BatteryBuf[19]='.';                                                 // decimal point ( battery reading is in units of 0.1 V
   \   0000A0   7414         MOV     A,#0x14
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL   ?Subroutine2 & 0xFFFF
   1397            BatteryBuf[20]=(Battery[0] % 10 ) + '0'; // convert lsb to ascii
   \                     ??CrossCallReturnLabel_3:
   \   0000A8   C0E0         PUSH    A
   \   0000AA   7415         MOV     A,#0x15
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   D0E0         POP     A
   \   0000B1   F0           MOVX    @DPTR,A
   1398            BatteryBuf[21]=' ';
   \   0000B2   7416         MOV     A,#0x16
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   7420         MOV     A,#0x20
   \   0000B9   F0           MOVX    @DPTR,A
   1399            BatteryBuf[22]='V';
   \   0000BA   7417         MOV     A,#0x17
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   7456         MOV     A,#0x56
   \   0000C1   F0           MOVX    @DPTR,A
   1400            BatteryBuf[23]='\n';                     //»»ÐÐ·û
   \   0000C2   7418         MOV     A,#0x18
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL   ?Subroutine9 & 0xFFFF
   1401            
   1402            if ( AF_DataRequest   ( &SampleApp_SPI_SendData_DstAddr,
   1403                                   (endPointDesc_t *)&SampleApp_epDesc,
   1404                                    SAMPLEAPP_VDD_CLUSTERID,
   1405                                    24, 
   1406                                    &BatteryBuf[0],
   1407                                    &SampleApp_TransID, 
   1408                                    0, 
   1409                                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_141:
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CD   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   0000D0   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   0000D3   78..         MOV     R0,#?V0 + 0
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D8   7404         MOV     A,#0x4
   \   0000DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DD   8582..       MOV     ?V0 + 0,DPL
   \   0000E0   8583..       MOV     ?V0 + 1,DPH
   \   0000E3   78..         MOV     R0,#?V0 + 0
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E8   75..18       MOV     ?V0 + 0,#0x18
   \   0000EB   89..         MOV     ?V0 + 1,R1
   \   0000ED   78..         MOV     R0,#?V0 + 0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F2   75..05       MOV     ?V0 + 0,#0x5
   \   0000F5   78..         MOV     R0,#?V0 + 0
   \   0000F7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FA   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   0000FD   12....       LCALL   ?DEALLOC_XSTACK8
   1410            {
   1411            }
   1412            else
   1413            {
   1414            }
   1415          }
   \   000100   7419         MOV     A,#0x19
   \   000102   02....       LJMP    ??Subroutine60_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   740A         MOV     A,#0xa
   \   000002                REQUIRE ?Subroutine47
   \   000002                ; // Fall through to label ?Subroutine47

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7420         MOV     A,#0x20
   \   000002   F0           MOVX    @DPTR,A
   \   000003   75F00A       MOV     B,#0xa
   \   000006   85..82       MOV     DPL,?XSP + 0
   \   000009   85..83       MOV     DPH,?XSP + 1
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   84           DIV     AB
   \   00000E   2430         ADD     A,#0x30
   \   000010   22           RET
   1416          
   1417          
   1418          //Ð­µ÷Æ÷·¢Ïò¸÷¸ö½Úµã£¬ÒªÇó»ØÀ¡µçÑ¹Öµ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1419          void SampleApp_Broadcast_Vdd(void)
   \                     SampleApp_Broadcast_Vdd:
   1420          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1421              uint8 Broadcast[1];
   1422              SampleApp_SPI_SendData_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000A   12....       LCALL   ??Subroutine67_0 & 0xFFFF
   1423              SampleApp_SPI_SendData_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   1424              SampleApp_SPI_SendData_DstAddr.addr.shortAddr = 0xFFFF; 
   1425              
   1426              if ( AF_DataRequest   ( &SampleApp_SPI_SendData_DstAddr,
   1427                                    (endPointDesc_t *)&SampleApp_epDesc,
   1428                                    SAMPLEAPP_BROADCAST_VDD_CLUSTERID,
   1429                                    1, 
   1430                                    &Broadcast[0],
   1431                                    &SampleApp_TransID, 
   1432                                    0, 
   1433                                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_140:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000010   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000013   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7403         MOV     A,#0x3
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   8582..       MOV     ?V0 + 0,DPL
   \   000023   8583..       MOV     ?V0 + 1,DPH
   \   000026   78..         MOV     R0,#?V0 + 0
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   75..01       MOV     ?V0 + 0,#0x1
   \   00002E   75..00       MOV     ?V0 + 1,#0x0
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..06       MOV     ?V0 + 0,#0x6
   \   000039   02....       LJMP    ?Subroutine45 & 0xFFFF
   1434            {
   1435              
   1436            }
   1437            else
   1438            {
   1439              
   1440            }
   1441          }
   1442          
   1443          //Æ¥Åä×Ö·û£¬ÓÃÓÚ²âÊÔ½Úµã£¬»ñÈ¡ÆäËûÉè±¸ID

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1444          void CompforTESTID(uint8 *dat)
   \                     CompforTESTID:
   1445          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1446            uint8 predict[9]={103,97,111,116,101,115,116,105,100};//gaotestid
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#((`?<Constant {103, 97, 111, 116, 101, 115, 116, ` >> 8) & 0xff)
   \   000017   7582..       MOV     DPL,#(`?<Constant {103, 97, 111, 116, 101, 115, 116, ` & 0xff)
   \   00001A   7409         MOV     A,#0x9
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1447            uint8 *ppredict=&predict[0];
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   A882         MOV     R0,DPL
   \   000027   A983         MOV     R1,DPH
   1448            uint8 i; 
   1449            //uint8 7;
   1450            if(rxlen!=9)//±È½Ï´ÓÉÏÎ»»úÀ´µÄÊý¾Ý³¤¶È£¡£¡
   \   000029   90....       MOV     DPTR,#rxlen
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6409         XRL     A,#0x9
   \   00002F   7017         JNZ     ??CrossCallReturnLabel_121
   1451            return;
   1452            
   1453           // uint16 newid=0,temp=0;
   1454            
   1455            for ( i = 0; i <9; i++ )//Õâ¼¸¸ö¿Õ¹ýÈ¥ÊÇÒòÎªÓÐÉè±¸ID¡£
   \   000031   12....       LCALL   ?Subroutine20 & 0xFFFF
   1456            {
   1457             *dat++ ;
   1458            }
   1459            
   1460            for ( i = 0; i <9; i++ )
   1461            {
   1462             if(*dat++ == *ppredict++);
   \                     ??CrossCallReturnLabel_50:
   \   000034   12....       LCALL   ?Subroutine14 & 0xFFFF
   1463             else
   1464                 return;
   1465            }  
   \                     ??CrossCallReturnLabel_25:
   \   000037   700F         JNZ     ??CrossCallReturnLabel_121
   \   000039   05..         INC     ?V0 + 0
   \   00003B   E5..         MOV     A,?V0 + 0
   \   00003D   C3           CLR     C
   \   00003E   9409         SUBB    A,#0x9
   \   000040   40F2         JC      ??CrossCallReturnLabel_50
   1466            
   1467            SampleApp_Broadcast_TEST_ID();
   \   000042                ; Setup parameters for call to function SampleApp_Broadcast_TEST_ID
   \   000042   12....       LCALL   ??SampleApp_Broadcast_TEST_ID?relay
   1468            osal_mem_free( rbuf );  //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!
   \   000045                ; Setup parameters for call to function osal_mem_free
   \   000045   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   1469            rbuf_Free_Flag=1;
   1470          }
   \                     ??CrossCallReturnLabel_121:
   \   000048                REQUIRE ?Subroutine53
   \   000048                ; // Fall through to label ?Subroutine53

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   7409         MOV     A,#0x9
   \   000002   02....       LJMP    ??Subroutine60_0 & 0xFFFF
   1471          
   1472          //²âÊÔ½Úµã·¢Ïò¸÷¸ö½Úµã£¬ÒªÇó»ØÀ¡IDÖµ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   78..         MOV     R0,#?V0 + 0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000005   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000008   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000B                REQUIRE ??Subroutine55_0
   \   00000B                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1473          void SampleApp_Broadcast_TEST_ID(void)
   \                     SampleApp_Broadcast_TEST_ID:
   1474          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1475              uint16 short_add;
   1476              uint8 pshort_add[2];
   1477              short_add=NLME_GetShortAddr();
   \   00000A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000A   12....       LCALL   ?Subroutine32 & 0xFFFF
   1478              
   1479              pshort_add[0]=(uint8)((short_add&0xff00)>>8);
   1480              pshort_add[1]=(uint8)short_add;
   \                     ??CrossCallReturnLabel_68:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine0 & 0xFFFF
   1481               
   1482              SampleApp_SPI_SendData_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   1483              SampleApp_SPI_SendData_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   1484              SampleApp_SPI_SendData_DstAddr.addr.shortAddr = 0xFFFF; 
   1485              
   1486              //¹ã²¥³öÁ½¸öÐÅÏ¢£º1¡¢×Ô¼ºµÄµØÖ·  2¡¢clusterid
   1487              if ( AF_DataRequest   ( &SampleApp_SPI_SendData_DstAddr,
   1488                                    (endPointDesc_t *)&SampleApp_epDesc,
   1489                                    SAMPLEAPP_TEST_ID_CLUSTERID,
   1490                                    2, 
   1491                                    &pshort_add[0],
   1492                                    &SampleApp_TransID, 
   1493                                    0, 
   1494                                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_137:
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000016   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000019   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   7403         MOV     A,#0x3
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   8582..       MOV     ?V0 + 0,DPL
   \   000029   8583..       MOV     ?V0 + 1,DPH
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   75..02       MOV     ?V0 + 0,#0x2
   \   000034   75..00       MOV     ?V0 + 1,#0x0
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75..07       MOV     ?V0 + 0,#0x7
   \   00003F   02....       LJMP    ?Subroutine50 & 0xFFFF
   1495               {
   1496              
   1497               }
   1498               else
   1499               {    
   1500               }
   1501          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002                REQUIRE ??Subroutine67_0
   \   000002                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   EB           MOV     A,R3
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   7401         MOV     A,#0x1
   \   00000D   22           RET
   1502          
   1503          //»ØÀ¡²âÊÔ½ÚµãID¶ÌµØÖ·   

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1504          void SampleApp_Send_TestID_Message(void)
   \                     SampleApp_Send_TestID_Message:
   1505          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1506            uint8 i;
   1507            uint8 pIDTestbuf[4];
   1508            
   1509            SampleApp_TestID_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00000A   12....       LCALL   ?Subroutine4 & 0xFFFF
   1510            SampleApp_TestID_DstAddr.endPoint =SAMPLEAPP_ENDPOINT;
   1511            SampleApp_TestID_DstAddr.addr.shortAddr =short_test; //ÕâÀïÓÃÁËÈ«¾Ö
   1512            
   1513            for(i=0;i<4;i++)
   \                     ??CrossCallReturnLabel_5:
   \   00000D   7A00         MOV     R2,#0x0
   1514            {
   1515              pIDTestbuf[i]=pIDbuf[i];
   \                     ??SampleApp_Send_TestID_Message_0:
   \   00000F   12....       LCALL   ?Subroutine34 & 0xFFFF
   1516            }
   \                     ??CrossCallReturnLabel_74:
   \   000012   C0E0         PUSH    A
   \   000014   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000017   D0E0         POP     A
   \   000019   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00001C   40F1         JC      ??SampleApp_Send_TestID_Message_0
   1517            
   1518            if(AF_DataRequest(&SampleApp_TestID_DstAddr,
   1519                              (endPointDesc_t *)&SampleApp_epDesc,
   1520                              SAMPLEAPP_TEST_ID_BACK_CLUSTERID,
   1521                              4, 
   1522                              &pIDTestbuf[0],
   1523                              &SampleApp_TransID, 
   1524                              0, 
   1525                              AF_DEFAULT_RADIUS)==afStatus_SUCCESS)
   \   00001E                ; Setup parameters for call to function AF_DataRequest
   \   00001E   75..1E       MOV     ?V0 + 0,#0x1e
   \   000021   78..         MOV     R0,#?V0 + 0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000026   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000029   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   7403         MOV     A,#0x3
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   8582..       MOV     ?V0 + 0,DPL
   \   000039   8583..       MOV     ?V0 + 1,DPH
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   75..04       MOV     ?V0 + 0,#0x4
   \   000044   89..         MOV     ?V0 + 1,R1
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   75..08       MOV     ?V0 + 0,#0x8
   \   00004E   78..         MOV     R0,#?V0 + 0
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   000055   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   000057   7A..         MOV     R2,#(SampleApp_TestID_DstAddr & 0xff)
   \   000059   7B..         MOV     R3,#((SampleApp_TestID_DstAddr >> 8) & 0xff)
   \   00005B   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00005E   02....       LJMP    ?Subroutine51 & 0xFFFF
   1526            {
   1527            }
   1528            else
   1529            {
   1530            }
   1531          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7402         MOV     A,#0x2
   \   000002   90....       MOV     DPTR,#(SampleApp_TestID_DstAddr + 8)
   \   000005   F0           MOVX    @DPTR,A
   \   000006   7414         MOV     A,#0x14
   \   000008   90....       MOV     DPTR,#(SampleApp_TestID_DstAddr + 9)
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   90....       MOV     DPTR,#short_test
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
   \   000014   90....       MOV     DPTR,#SampleApp_TestID_DstAddr
   \   000017   E8           MOV     A,R0
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   E9           MOV     A,R1
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   22           RET
   1532          
   1533          //Æ¥Åä×Ö·û£¬ÓÃÓÚ²âÊÔ½Úµã£¬»ñÈ¡ÆäËûÉè±¸µçÑ¹

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1534          void CompforTEST_BATTERY(uint8 *dat)
   \                     CompforTEST_BATTERY:
   1535          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1536            uint8 predict[9]={103,97,111,116,101,115,116,98,97};//gaotestba
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#((`?<Constant {103, 97, 111, 116, 101, 115, 116, _1` >> 8) & 0xff)
   \   000017   7582..       MOV     DPL,#(`?<Constant {103, 97, 111, 116, 101, 115, 116, _1` & 0xff)
   \   00001A   7409         MOV     A,#0x9
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1537            uint8 *ppredict=&predict[0];
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   A882         MOV     R0,DPL
   \   000027   A983         MOV     R1,DPH
   1538            uint8 i; 
   1539            //uint8 7;
   1540            if(rxlen!=9)//±È½Ï´ÓÉÏÎ»»úÀ´µÄÊý¾Ý³¤¶È£¡£¡
   \   000029   90....       MOV     DPTR,#rxlen
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6409         XRL     A,#0x9
   \   00002F   7017         JNZ     ??CrossCallReturnLabel_122
   1541            return;
   1542            
   1543           // uint16 newid=0,temp=0;
   1544            
   1545            for ( i = 0; i <9; i++ )//Õâ¼¸¸ö¿Õ¹ýÈ¥ÊÇÒòÎªÓÐÉè±¸ID¡£
   \   000031   12....       LCALL   ?Subroutine20 & 0xFFFF
   1546            {
   1547             *dat++ ;
   1548            }
   1549            
   1550            for ( i = 0; i <9; i++ )
   1551            {
   1552             if(*dat++ == *ppredict++);
   \                     ??CrossCallReturnLabel_51:
   \   000034   12....       LCALL   ?Subroutine14 & 0xFFFF
   1553             else
   1554                 return;
   1555            }  
   \                     ??CrossCallReturnLabel_26:
   \   000037   700F         JNZ     ??CrossCallReturnLabel_122
   \   000039   05..         INC     ?V0 + 0
   \   00003B   E5..         MOV     A,?V0 + 0
   \   00003D   C3           CLR     C
   \   00003E   9409         SUBB    A,#0x9
   \   000040   40F2         JC      ??CrossCallReturnLabel_51
   1556            
   1557            SampleApp_Broadcast_TEST_BATTERY();
   \   000042                ; Setup parameters for call to function SampleApp_Broadcast_TEST_BATTERY
   \   000042   12....       LCALL   ??SampleApp_Broadcast_TEST_BATTERY?relay
   1558            osal_mem_free( rbuf );  //±ØÐëÊÍ·ÅÄÚ´æ,²»È»Ôì³ÉÒç³ö!
   \   000045                ; Setup parameters for call to function osal_mem_free
   \   000045   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   1559            rbuf_Free_Flag=1;
   1560          }
   \                     ??CrossCallReturnLabel_122:
   \   000048   02....       LJMP    ?Subroutine53 & 0xFFFF
   1561          
   1562          //²âÊÔ½Úµã·¢Ïò¸÷¸ö½Úµã£¬ÒªÇó»ØÀ¡µçÑ¹Öµ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1563          void SampleApp_Broadcast_TEST_BATTERY(void)
   \                     SampleApp_Broadcast_TEST_BATTERY:
   1564          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1565              uint16 short_add;
   1566              uint8 pshort_add[2];
   1567              short_add=NLME_GetShortAddr();
   \   00000A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000A   12....       LCALL   ?Subroutine32 & 0xFFFF
   1568              
   1569              pshort_add[0]=(uint8)((short_add&0xff00)>>8);
   1570              pshort_add[1]=(uint8)short_add;
   \                     ??CrossCallReturnLabel_69:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine0 & 0xFFFF
   1571               
   1572              SampleApp_SPI_SendData_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   1573              SampleApp_SPI_SendData_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   1574              SampleApp_SPI_SendData_DstAddr.addr.shortAddr = 0xFFFF; 
   1575              
   1576              //¹ã²¥³öÁ½¸öÐÅÏ¢£º1¡¢×Ô¼ºµÄµØÖ·  2¡¢clusterid
   1577              if ( AF_DataRequest   (&SampleApp_SPI_SendData_DstAddr,
   1578                                    (endPointDesc_t *)&SampleApp_epDesc,
   1579                                    SAMPLEAPP_TEST_BATTERY_CLUSTERID,
   1580                                    2, 
   1581                                    &pshort_add[0],
   1582                                    &SampleApp_TransID, 
   1583                                    0, 
   1584                                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_138:
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000016   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000019   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   7403         MOV     A,#0x3
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   8582..       MOV     ?V0 + 0,DPL
   \   000029   8583..       MOV     ?V0 + 1,DPH
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   75..02       MOV     ?V0 + 0,#0x2
   \   000034   75..00       MOV     ?V0 + 1,#0x0
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75..09       MOV     ?V0 + 0,#0x9
   \   00003F   02....       LJMP    ?Subroutine50 & 0xFFFF
   1585               {
   1586              
   1587               }
   1588               else
   1589               {    
   1590               } 
   1591          }
   1592          
   1593          //»ØÀ¡²âÊÔ½ÚµãID¶ÌµØÖ·   

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1594          void SampleApp_Send_TestBATTERY_Message(void)
   \                     SampleApp_Send_TestBATTERY_Message:
   1595          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 27
   \   000005   74E5         MOV     A,#-0x1b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1596            uint8 i;
   1597            uint8 BatteryBuf[26];
   1598            uint8 Battery[1];
   1599            
   1600            Battery[0]=myApp_ReadBattery();//¶ÁÈ¡µçÑ¹Öµ
   \   00000A                ; Setup parameters for call to function myApp_ReadBattery
   \   00000A   12....       LCALL   ?Subroutine35 & 0xFFFF
   1601            
   1602            SampleApp_TestID_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_78:
   \   00000D   12....       LCALL   ?Subroutine4 & 0xFFFF
   1603            SampleApp_TestID_DstAddr.endPoint =SAMPLEAPP_ENDPOINT;
   1604            SampleApp_TestID_DstAddr.addr.shortAddr =short_test; //ÕâÀïÓÃÁËÈ«¾Ö
   1605            
   1606            //²âÊÔ½ÚµãÏÔÊ¾µçÑ¹¸ñÊ½
   1607            // ID£ºXXXX Battery:XXX
   1608            
   1609            BatteryBuf[0]=25;             //Êý¾Ý³¤¶È
   \                     ??CrossCallReturnLabel_6:
   \   000010   7401         MOV     A,#0x1
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   7419         MOV     A,#0x19
   \   000017   F0           MOVX    @DPTR,A
   1610            BatteryBuf[1]=73;             //×Ö·û£ºI
   \   000018   7402         MOV     A,#0x2
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   7449         MOV     A,#0x49
   \   00001F   F0           MOVX    @DPTR,A
   1611            BatteryBuf[2]=68;             //×Ö·û£ºD
   \   000020   7403         MOV     A,#0x3
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   7444         MOV     A,#0x44
   \   000027   F0           MOVX    @DPTR,A
   1612            BatteryBuf[3]=58;             //×Ö·û£º
   \   000028   7404         MOV     A,#0x4
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   743A         MOV     A,#0x3a
   \   00002F   F0           MOVX    @DPTR,A
   1613            
   1614            for(i=0;i<4;i++)//¸´ÖÆÉè±¸ID
   \   000030   7A00         MOV     R2,#0x0
   1615            {
   1616              BatteryBuf[i+4]=pIDbuf[i];
   \                     ??SampleApp_Send_TestBATTERY_Message_0:
   \   000032   12....       LCALL   ?Subroutine34 & 0xFFFF
   1617            }  
   \                     ??CrossCallReturnLabel_75:
   \   000035   C0E0         PUSH    A
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00003F   D0E0         POP     A
   \   000041   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000044   40EC         JC      ??SampleApp_Send_TestBATTERY_Message_0
   1618            
   1619            BatteryBuf[8]=' ';           
   \   000046   7409         MOV     A,#0x9
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   7420         MOV     A,#0x20
   \   00004D   F0           MOVX    @DPTR,A
   1620            
   1621            BatteryBuf[9]='B';            //Battery: 
   \   00004E   740A         MOV     A,#0xa
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   7442         MOV     A,#0x42
   \   000055   F0           MOVX    @DPTR,A
   1622            BatteryBuf[10]='a';
   \   000056   740B         MOV     A,#0xb
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   7461         MOV     A,#0x61
   \   00005D   F0           MOVX    @DPTR,A
   1623            BatteryBuf[11]='t';
   \   00005E   740C         MOV     A,#0xc
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   7474         MOV     A,#0x74
   \   000065   F0           MOVX    @DPTR,A
   1624            BatteryBuf[12]='t';
   \   000066   740D         MOV     A,#0xd
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   7474         MOV     A,#0x74
   \   00006D   F0           MOVX    @DPTR,A
   1625            BatteryBuf[13]='e';
   \   00006E   740E         MOV     A,#0xe
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   7465         MOV     A,#0x65
   \   000075   F0           MOVX    @DPTR,A
   1626            BatteryBuf[14]='r';
   \   000076   740F         MOV     A,#0xf
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   7472         MOV     A,#0x72
   \   00007D   F0           MOVX    @DPTR,A
   1627            BatteryBuf[15]='y';
   \   00007E   7410         MOV     A,#0x10
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   7479         MOV     A,#0x79
   \   000085   F0           MOVX    @DPTR,A
   1628            BatteryBuf[16]=':';
   \   000086   7411         MOV     A,#0x11
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   743A         MOV     A,#0x3a
   \   00008D   F0           MOVX    @DPTR,A
   1629            BatteryBuf[17]=' ';
   \   00008E   7412         MOV     A,#0x12
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   12....       LCALL   ?Subroutine8 & 0xFFFF
   1630            
   1631            BatteryBuf[18]=(Battery[0] / 10 ) + '0';   // convent msb to ascii
   \                     ??CrossCallReturnLabel_14:
   \   000096   C0E0         PUSH    A
   \   000098   7413         MOV     A,#0x13
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   D0E0         POP     A
   \   00009F   F0           MOVX    @DPTR,A
   1632            BatteryBuf[19]='.';                       
   \   0000A0   7414         MOV     A,#0x14
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL   ?Subroutine2 & 0xFFFF
   1633            BatteryBuf[20]=(Battery[0] % 10 ) + '0'; // convert lsb to ascii
   \                     ??CrossCallReturnLabel_4:
   \   0000A8   C0E0         PUSH    A
   \   0000AA   7415         MOV     A,#0x15
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   D0E0         POP     A
   \   0000B1   F0           MOVX    @DPTR,A
   1634            BatteryBuf[21]=' ';
   \   0000B2   7416         MOV     A,#0x16
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   7420         MOV     A,#0x20
   \   0000B9   F0           MOVX    @DPTR,A
   1635            BatteryBuf[22]='V';  
   \   0000BA   7417         MOV     A,#0x17
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   7456         MOV     A,#0x56
   \   0000C1   F0           MOVX    @DPTR,A
   1636            BatteryBuf[23]=' ';                     
   \   0000C2   7418         MOV     A,#0x18
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   7420         MOV     A,#0x20
   \   0000C9   F0           MOVX    @DPTR,A
   1637            BatteryBuf[24]=' ';   
   \   0000CA   7419         MOV     A,#0x19
   \   0000CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CF   7420         MOV     A,#0x20
   \   0000D1   F0           MOVX    @DPTR,A
   1638            BatteryBuf[25]='\n';                     //»»ÐÐ·û
   \   0000D2   741A         MOV     A,#0x1a
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   12....       LCALL   ?Subroutine9 & 0xFFFF
   1639                            
   1640            if(AF_DataRequest(&SampleApp_TestID_DstAddr,
   1641                              (endPointDesc_t *)&SampleApp_epDesc,
   1642                              SAMPLEAPP_TEST_BATTERY_BACK_CLUSTERID,
   1643                              26, 
   1644                              &BatteryBuf[0],
   1645                              &SampleApp_TransID, 
   1646                              0, 
   1647                              AF_DEFAULT_RADIUS)==afStatus_SUCCESS)
   \                     ??CrossCallReturnLabel_142:
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DD   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   0000E0   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   0000E3   78..         MOV     R0,#?V0 + 0
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E8   7404         MOV     A,#0x4
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   8582..       MOV     ?V0 + 0,DPL
   \   0000F0   8583..       MOV     ?V0 + 1,DPH
   \   0000F3   78..         MOV     R0,#?V0 + 0
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F8   75..1A       MOV     ?V0 + 0,#0x1a
   \   0000FB   89..         MOV     ?V0 + 1,R1
   \   0000FD   78..         MOV     R0,#?V0 + 0
   \   0000FF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000102   75..0A       MOV     ?V0 + 0,#0xa
   \   000105   78..         MOV     R0,#?V0 + 0
   \   000107   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010A   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   00010C   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   00010E   7A..         MOV     R2,#(SampleApp_TestID_DstAddr & 0xff)
   \   000110   7B..         MOV     R3,#((SampleApp_TestID_DstAddr >> 8) & 0xff)
   \   000112   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000115   12....       LCALL   ?DEALLOC_XSTACK8
   1648            {
   1649            }
   1650            else
   1651            {
   1652            }
   1653          }
   \   000118   741B         MOV     A,#0x1b
   \   00011A   02....       LJMP    ??Subroutine60_0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_UART_EVT?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_UART_EVT

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SPI?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SPI

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??hextoword1?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hextoword1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??hextoword2?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hextoword2

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??comparebuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    comparebuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Set_Panid?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Set_Panid

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadPanidbuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadPanidbuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SPI_SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SPI_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadID?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadID

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CompforID?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CompforID

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Set_id?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Set_id

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CheckToSetTest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CheckToSetTest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Set_Test?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Set_Test

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??IDISUSE?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    IDISUSE

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ID_Set?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ID_Set

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CompforTestID?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CompforTestID

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Broadcast_ForTest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Broadcast_ForTest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendTestMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendTestMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Init_IDandTest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Init_IDandTest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CompForVdd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CompForVdd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??myApp_ReadBattery?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    myApp_ReadBattery

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Read_Battery?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Read_Battery

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_VDD_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_VDD_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Broadcast_Vdd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Broadcast_Vdd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CompforTESTID?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CompforTESTID

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Broadcast_TEST_ID?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Broadcast_TEST_ID

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_TestID_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_TestID_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CompforTEST_BATTERY?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CompforTEST_BATTERY

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Broadcast_TEST_BATTERY?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Broadcast_TEST_BATTERY

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_TestBATTERY_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_TestBATTERY_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "my short address is:">`:
   \   000000   6D792073     DB "my short address is:"
   \            686F7274
   \            20616464
   \            72657373
   \            2069733A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {103, 97, 111}>`:
   \   000000   67616F       DB 103, 97, 111

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {103, 97, 111, 112, 97, 110, 105, 1`:
   \   000000   67616F70     DB 103, 97, 111, 112, 97, 110, 105, 100
   \            616E6964

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {103, 97, 111, 105, 100}>`:
   \   000000   67616F69     DB 103, 97, 111, 105, 100
   \            64      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {103, 97, 111, 115, 101, 116, 105, `:
   \   000000   67616F73     DB 103, 97, 111, 115, 101, 116, 105, 100
   \            65746964

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {103, 97, 111, 36}>`:
   \   000000   67616F24     DB 103, 97, 111, 36

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Test is open!">`:
   \   000000   54657374     DB "Test is open!"
   \            20697320
   \            6F70656E
   \            2100    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Test is close!">`:
   \   000000   54657374     DB "Test is close!"
   \            20697320
   \            636C6F73
   \            652100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {103, 97, 111, 35}>`:
   \   000000   67616F23     DB 103, 97, 111, 35

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ID is used!">`:
   \   000000   49442069     DB "ID is used!"
   \            73207573
   \            65642100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ID is not used!">`:
   \   000000   49442069     DB "ID is not used!"
   \            73206E6F
   \            74207573
   \            65642100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {103, 97, 111, 99, 101, 115, 104, 1`:
   \   000000   67616F63     DB 103, 97, 111, 99, 101, 115, 104, 105
   \            65736869

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {103, 97, 111}>_1`:
   \   000000   67616F00     DB 103, 97, 111, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Battery:">`:
   \   000000   42617474     DB "Battery:"
   \            6572793A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {103, 97, 111, 116, 101, 115, 116, `:
   \   000000   67616F74     DB 103, 97, 111, 116, 101, 115, 116, 105, 100
   \            65737469
   \            64      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {103, 97, 111, 116, 101, 115, 116, _1`:
   \   000000   67616F74     DB 103, 97, 111, 116, 101, 115, 116, 98, 97
   \            65737462
   \            61      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42160000:
   \   000000   00001642     DD 42160000H

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     CheckToSetTest                     2      0     44
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> Set_Test                      0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> Set_Test                      0      0     88
       -> osal_mem_free                 0      0     88
     CompForVdd                         2      0     18
       -> SampleApp_Broadcast_Vdd       0      0     36
       -> osal_mem_free                 0      0     36
     CompforID                          2      0     20
       -> Set_id                        0      0     40
       -> osal_mem_free                 0      0     40
     CompforTESTID                      2      0     19
       -> SampleApp_Broadcast_TEST_ID
                                        0      0     38
       -> osal_mem_free                 0      0     38
     CompforTEST_BATTERY                2      0     19
       -> SampleApp_Broadcast_TEST_BATTERY
                                        0      0     38
       -> osal_mem_free                 0      0     38
     CompforTestID                      2      0     18
       -> SampleApp_Broadcast_ForTest
                                        0      0     36
       -> osal_mem_free                 0      0     36
     IDISUSE                            2      0     43
       -> HalUARTWrite                  0      0     86
       -> HalUARTWrite                  0      0     86
       -> ID_Set                        0      0     86
       -> HalUARTWrite                  0      0     86
       -> HalUARTWrite                  0      0     86
       -> ID_Set                        0      0     86
       -> osal_mem_free                 0      0     86
     ID_Set                             1      0     58
       -> osal_nv_item_init             0      0     26
       -> osal_nv_write                 0      0     30
     Init_IDandTest                     1      0     27
       -> osal_nv_item_init             0      0     28
       -> osal_nv_write                 0      0     32
       -> osal_nv_write                 0      0     32
     ReadID                             2      0     15
       -> HalUARTWrite                  0      0     30
       -> osal_mem_free                 0      0     30
     ReadPanidbuf                       2      0     31
       -> osal_nv_read                  0      0     62
       -> hextoword1                    0      0     54
       -> hextoword2                    0      0     54
       -> hextoword1                    0      0     54
       -> hextoword2                    0      0     54
       -> HalUARTWrite                  0      0     54
       -> osal_mem_free                 0      0     54
     Read_Battery                       4      0     27
       -> myApp_ReadBattery             4      0     30
       -> HalUARTWrite                  4      0     30
       -> HalUARTWrite                  4      0     30
     SampleApp_Broadcast_ForTest        0      0     38
       -> AF_DataRequest                0      0     40
     SampleApp_Broadcast_TEST_BATTERY
                                        1      0     40
       -> NLME_GetShortAddr             0      0     24
       -> AF_DataRequest                0      0     42
     SampleApp_Broadcast_TEST_ID        1      0     40
       -> NLME_GetShortAddr             0      0     24
       -> AF_DataRequest                0      0     42
     SampleApp_Broadcast_Vdd            0      0     38
       -> AF_DataRequest                0      0     40
     SampleApp_HandleKeys               0      0     22
       -> osal_mem_free                 0      0     20
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
       -> readbuf                       0      0     22
       -> Init_IDandTest                0      0     22
     SampleApp_MessageMSGCB             1      0     33
       -> osal_nv_item_init             0      0     38
       -> osal_nv_read                  0      0     42
       -> HalUARTWrite                  0      0     34
       -> osal_nv_item_init             0      0     38
       -> osal_nv_read                  0      0     42
       -> HalUARTWrite                  0      0     34
       -> HalUARTWrite                  0      0     34
       -> osal_rand                     0      0     34
       -> osal_start_timerEx            0      0     34
       -> HalUARTWrite                  0      0     34
       -> osal_rand                     0      0     34
       -> osal_start_timerEx            0      0     34
       -> osal_rand                     0      0     34
       -> osal_start_timerEx            0      0     34
       -> osal_rand                     0      0     34
       -> osal_start_timerEx            0      0     34
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_UART_EVT            0      0     24
       -> SampleApp_SPI                 0      0     24
       -> Read_Battery                  0      0     24
       -> SampleApp_SendTestMessage     0      0     24
       -> SampleApp_Send_VDD_Message
                                        0      0     24
       -> SampleApp_Send_TestID_Message
                                        0      0     24
       -> SampleApp_Send_TestBATTERY_Message
                                        0      0     24
     SampleApp_SPI                      2      0     50
       -> HalUARTWrite                  0      0     76
       -> NLME_GetShortAddr             0      0     76
       -> hextoword1                    0      0     76
       -> hextoword2                    0      0     76
       -> hextoword1                    0      0     76
       -> hextoword2                    0      0     76
       -> HalUARTWrite                  0      0     76
     SampleApp_SPI_SendData             0      0     19
       -> AF_DataRequest                0      0     38
       -> osal_mem_free                 0      0     20
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_SendTestMessage          1      0     35
       -> AF_DataRequest                0      0     46
     SampleApp_Send_TestBATTERY_Message
                                        1      0     58
       -> myApp_ReadBattery             0      0     74
       -> AF_DataRequest                0      0     92
     SampleApp_Send_TestID_Message      1      0     35
       -> AF_DataRequest                0      0     46
     SampleApp_Send_VDD_Message         1      0     56
       -> myApp_ReadBattery             0      0     70
       -> AF_DataRequest                0      0     88
     SampleApp_UART_EVT                 2      0     12
       -> ReadPanidbuf                  4      0      0
       -> comparebuf                    4      0      0
       -> ReadID                        4      0      0
       -> CompforID                     4      0      0
       -> CheckToSetTest                4      0      0
       -> IDISUSE                       4      0      0
       -> CompforTestID                 4      0      0
       -> CompForVdd                    4      0      0
       -> CompforTESTID                 4      0      0
       -> CompforTEST_BATTERY           4      0      0
       -> SampleApp_SPI_SendData        4      0      0
     Set_Panid                          0      0     31
       -> osal_nv_item_init             0      0     28
       -> osal_nv_write                 0      0     32
       -> osal_nv_item_init             0      0     28
       -> osal_nv_write                 0      0     32
       -> NLME_UpdateNV                 0      0     24
     Set_Test                           1      0     59
       -> osal_nv_item_init             0      0     26
       -> osal_nv_write                 0      0     30
     Set_id                             0      0     36
       -> osal_nv_item_init             0      0     28
       -> osal_nv_write                 0      0     32
       -> osal_nv_item_init             0      0     28
       -> osal_nv_write                 0      0     32
     comparebuf                         2      0     15
       -> Set_Panid                     0      0     30
       -> osal_mem_free                 0      0     30
     hextoword1                         0      0     38
     hextoword2                         0      0     38
     myApp_ReadBattery                  0      0     53


   Segment part sizes:

     Function/Label                                   Bytes
     --------------                                   -----
     _A_TCON                                             1
     _A_P1                                               1
     _A_IEN0                                             1
     ADCCON3                                             1
     ADCL                                                1
     ADCH                                                1
     WDCTL                                               1
     SampleApp_ClusterList                              20
     SampleApp_SimpleDesc                               12
     SampleApp_epDesc                                    6
     SampleApp_TaskID                                    1
     SampleApp_NwkState                                  1
     SampleApp_TransID                                   1
     SampleApp_Periodic_DstAddr                         12
     SampleApp_Flash_DstAddr                            12
     SampleApp_SPI_SendData_DstAddr                     12
     SampleApp_TestID_DstAddr                           12
     SampleApp_Group                                    18
     SampleAppPeriodicCounter                            1
     SampleAppFlashCounter                               1
     short_test                                          2
     SampleApp_Init                                    174
     SampleApp_ProcessEvent                            246
     ??Subroutine54_0                                    5
     SampleApp_HandleKeys                               64
     ?Subroutine17                                       4
     ?Subroutine39                                      12
     ??Subroutine61_0                                    5
     SampleApp_MessageMSGCB                            403
     ?Subroutine26                                       4
     ?Subroutine15                                       4
     ?Subroutine38                                      15
     ?Subroutine7                                        4
     ?Subroutine37                                       6
     ?Subroutine43                                      13
     ?Subroutine5                                        6
     ?Subroutine1                                       29
     ?Subroutine41                                      14
     ?Subroutine24                                       6
     ??Subroutine57_0                                    2
     ??Subroutine58_0                                    6
     ??Subroutine60_0                                    3
     SampleApp_SendPeriodicMessage                      70
     ??Subroutine66_0                                    6
     SampleApp_SendFlashMessage                        113
     ?Subroutine47                                       7
     rbuf_Free_Flag                                      1
     SampleApp_UART_EVT                                140
     ?Subroutine48                                       7
     ?Subroutine18                                       9
     SampleApp_SPI                                     153
     hextoword1                                         16
     ?Subroutine49                                       5
     hextoword2                                         17
     comparebuf                                        146
     ?Subroutine44                                       3
     ?Subroutine33                                      16
     ?Subroutine29                                      15
     ?Subroutine23                                      27
     ?Subroutine16                                      43
     ??Subroutine64_0                                   10
     Set_Panid                                         145
     ??Subroutine55_0                                    5
     ?Subroutine3                                       10
     ??Subroutine56_0                                    7
     ?Subroutine46                                       9
     ??Subroutine62_0                                    2
     ??Subroutine63_0                                    6
     ReadPanidbuf                                      223
     ?Subroutine20                                      12
     ?Subroutine14                                      39
     ?Subroutine13                                       5
     SampleApp_SPI_SendData                             86
     ?Subroutine11                                       4
     ?Subroutine36                                      14
     ?Subroutine30                                       2
     ??Subroutine65_0                                    8
     ReadID                                             82
     CompforID                                         149
     Set_id                                            122
     CheckToSetTest                                    173
     ?Subroutine27                                      12
     ?Subroutine22                                       6
     ?Subroutine21                                       6
     ?Subroutine40                                      29
     ?Subroutine19                                      39
     Set_Test                                           56
     ??Subroutine59_0                                    2
     ?Subroutine31                                       6
     ?Subroutine12                                      11
     IDISUSE                                           172
     ID_Set                                             56
     CompforTestID                                      72
     ?Subroutine52                                       5
     ?Subroutine45                                      11
     SampleApp_Broadcast_ForTest                        60
     ??Subroutine67_0                                   12
     SampleApp_SendTestMessage                          85
     ?Subroutine51                                       8
     ?Subroutine6                                       10
     ?Subroutine34                                      18
     ?Subroutine28                                      10
     ?Subroutine42                                      12
     ?Subroutine10                                       7
     Init_IDandTest                                    114
     CompForVdd                                         75
     myApp_ReadBattery                                  75
     Read_Battery                                      126
     ?Subroutine35                                      12
     ?Subroutine2                                       19
     SampleApp_Send_VDD_Message                        261
     ?Subroutine9                                        2
     ?Subroutine25                                       8
     ?Subroutine8                                       17
     SampleApp_Broadcast_Vdd                            60
     CompforTESTID                                      72
     ?Subroutine53                                       5
     ?Subroutine50                                      11
     SampleApp_Broadcast_TEST_ID                        66
     ?Subroutine0                                        2
     ?Subroutine32                                      14
     SampleApp_Send_TestID_Message                      97
     ?Subroutine4                                       29
     CompforTEST_BATTERY                                75
     SampleApp_Broadcast_TEST_BATTERY
                                                        66
     SampleApp_Send_TestBATTERY_Message
                                                       285
     ??SampleApp_Init?relay                              6
     ??SampleApp_ProcessEvent?relay                      6
     ??SampleApp_HandleKeys?relay                        6
     ??SampleApp_MessageMSGCB?relay                      6
     ??SampleApp_SendPeriodicMessage?relay               6
     ??SampleApp_SendFlashMessage?relay                  6
     ??SampleApp_UART_EVT?relay                          6
     ??SampleApp_SPI?relay                               6
     ??hextoword1?relay                                  6
     ??hextoword2?relay                                  6
     ??comparebuf?relay                                  6
     ??Set_Panid?relay                                   6
     ??ReadPanidbuf?relay                                6
     ??SampleApp_SPI_SendData?relay                      6
     ??ReadID?relay                                      6
     ??CompforID?relay                                   6
     ??Set_id?relay                                      6
     ??CheckToSetTest?relay                              6
     ??Set_Test?relay                                    6
     ??IDISUSE?relay                                     6
     ??ID_Set?relay                                      6
     ??CompforTestID?relay                               6
     ??SampleApp_Broadcast_ForTest?relay                 6
     ??SampleApp_SendTestMessage?relay                   6
     ??Init_IDandTest?relay                              6
     ??CompForVdd?relay                                  6
     ??myApp_ReadBattery?relay                           6
     ??Read_Battery?relay                                6
     ??SampleApp_Send_VDD_Message?relay                  6
     ??SampleApp_Broadcast_Vdd?relay                     6
     ??CompforTESTID?relay                               6
     ??SampleApp_Broadcast_TEST_ID?relay                 6
     ??SampleApp_Send_TestID_Message?relay               6
     ??CompforTEST_BATTERY?relay                         6
     ??SampleApp_Broadcast_TEST_BATTERY?relay            6
     ??SampleApp_Send_TestBATTERY_Message?relay          6
     ?<Constant "Group 1">                               8
     ?<Constant "SampleApp">                            10
     ?<Constant "my short address is:">                 21
     ?<Constant {103, 97, 111}>                          3
     ?<Constant {103, 97, 111, 112, 97, 110, 105, 1      8
     ?<Constant {103, 97, 111, 105, 100}>                5
     ?<Constant {103, 97, 111, 115, 101, 116, 105,       8
     ?<Constant {103, 97, 111, 36}>                      4
     ?<Constant "Test is open!">                        14
     ?<Constant "Test is close!">                       15
     ?<Constant {103, 97, 111, 35}>                      4
     ?<Constant "ID is used!">                          12
     ?<Constant "ID is not used!">                      16
     ?<Constant {103, 97, 111, 99, 101, 115, 104, 1      8
     ?<Constant {103, 97, 111}>_1                        8
     ?<Constant "Battery:">                              9
     ?<Constant {103, 97, 111, 116, 101, 115, 116,       9
     ?<Constant {103, 97, 111, 116, 101, 115, 116, _1    9
     __Constant_42160000                                 4

 
 5 127 bytes in segment BANKED_CODE
   216 bytes in segment BANK_RELAYS
     7 bytes in segment SFR_AN
   207 bytes in segment XDATA_ROM_C
    80 bytes in segment XDATA_Z
 
 5 343 bytes of CODE  memory
   203 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 7 bytes shared)
    80 bytes of XDATA memory

Errors: none
Warnings: none
