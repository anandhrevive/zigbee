###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                15/Aug/2011  15:26:53 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Components\mt\MT_TASK.c                        #
#    Command line       =  -f C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0 #
#                          ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ   #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0 #
#                          ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0  #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x11FF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\zhoufei\Desktop\Zi #
#                          gBee³ÌÐò\ZStack1.4.0ÐÞ¸Äºó\Components\mt\MT_TASK.c #
#                           -D ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK -D            #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D HAL_UART=TRUE -D     #
#                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED=DEBUG -lC       #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\Coo #
#                          rdinatorEB-Pro\List\ -lA                           #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\Coo #
#                          rdinatorEB-Pro\List\ --diag_suppress Pe001,Pa010   #
#                          -o C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0 #
#                          ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          CoordinatorEB-Pro\Obj\ -e --require_prototypes     #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0 #
#                          ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                           -I C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4. #
#                          0ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\SOURCE\ -I C:\Users\zhoufei\Desktop\ZigBee³ÌÐò #
#                          \ZStack1.4.0ÐÞ¸Äºó\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I            #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MT\ -I                      #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I             #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I     #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I          #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I            #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\AF\ -I                #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I               #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I               #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I              #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I               #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I               #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I                #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\ZMAC\ -I                    #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I          #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I          #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I             #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I          #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I     #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_ #
#                          CHIP\ -I D:\IAR\8051\INC\ -I                       #
#                          D:\IAR\8051\INC\CLIB\ -Ohz                         #
#    List file          =  C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\Coo #
#                          rdinatorEB-Pro\List\MT_TASK.lst                    #
#    Object file        =  C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\Coo #
#                          rdinatorEB-Pro\Obj\MT_TASK.r51                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸Äºó\Components\mt\MT_TASK.c
      1          /***************************************************************************************************
      2            Filename:       MT_TASK.c
      3            Revised:        $Date: 2010-04-20 16:45:06 -0700 (Tue, 20 Apr 2010) $
      4            Revision:       $Revision: 22262 $
      5          
      6            Description:    MonitorTest Task handling routines
      7          
      8            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT_TASK.h"
     45          #include "MT.h"
     46          #include "MT_DEBUG.h"
     47          #include "MT_UART.h"
     48          #include "MT_UTIL.h"
     49          #include "MT_SYS.h"
     50          #include "MT_ZDO.h"
     51          
     52          #if !defined( NONWK )
     53          #include "MT_AF.h"
     54          #endif  /* NONWK */
     55          
     56          #include "hal_uart.h"
     57          #include "OSAL_Memory.h"
     58          
     59          /***************************************************************************************************
     60           * LOCAL FUNCTIONS
     61           ***************************************************************************************************/
     62          void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg );
     63          
     64          /***************************************************************************************************
     65           * GLOBALS
     66           ***************************************************************************************************/
     67          
     68          /***************************************************************************************************
     69           * @fn      MT_TaskInit
     70           *
     71           * @brief  MonitorTest Task Initialization.  This function is put into the
     72           *         task table.
     73           *
     74           * @param   byte task_id - task ID of the MT Task
     75           *
     76           * @return  void
     77           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     78          void MT_TaskInit(uint8 task_id)
   \                     MT_TaskInit:
     79          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     80            /* Initialize the Serial port */
     81            MT_UartInit();
   \   000007                ; Setup parameters for call to function MT_UartInit
   \   000007   12....       LCALL   ??MT_UartInit?relay
     82          
     83            /* Register taskID - Do this after UartInit() because it will reset the taskID */
     84            MT_UartRegisterTaskID(task_id);
   \   00000A                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00000A   EE           MOV     A,R6
   \   00000B   F9           MOV     R1,A
   \   00000C   12....       LCALL   ??MT_UartRegisterTaskID?relay
     85          
     86            /* Initialize MT */
     87            MT_Init(task_id);
   \   00000F                ; Setup parameters for call to function MT_Init
   \   00000F   EE           MOV     A,R6
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??MT_Init?relay
     88          }
   \   000014   7F01         MOV     R7,#0x1
   \   000016   02....       LJMP    ?BANKED_LEAVE_XDATA
     89          
     90          /***************************************************************************************************
     91           * @fn      MT_ProcessEvent
     92           *
     93           * @brief MonitorTest Task Event Processor.  This task is put into the task table.
     94           *
     95           * @param   byte task_id - task ID of the MT Task
     96           * @param   UINT16 events - event(s) for the MT Task
     97           *
     98           * @return  void
     99           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    100          UINT16 MT_ProcessEvent(uint8 task_id, uint16 events)
   \                     MT_ProcessEvent:
    101          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    102            uint8 *msg_ptr;
    103          
    104            (void)task_id;  // Intentionally unreferenced parameter
    105          
    106            /* Could be multiple events, so switch won't work */
    107            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??MT_ProcessEvent_0
   \   000010   E9           MOV     A,R1
   \                     ??MT_ProcessEvent_0:
   \   000011   700F         JNZ     ??MT_ProcessEvent_1
    108            {
    109              while ( (msg_ptr = osal_msg_receive( MT_TaskID )) )
    110              {
    111                MT_ProcessIncomingCommand((mtOSALSerialData_t *)msg_ptr);
    112              }
    113          
    114              /* Return unproccessed events */
    115              return (events ^ SYS_EVENT_MSG);
    116            }
    117          
    118            if ( events & MT_ZTOOL_SERIAL_RCV_BUFFER_FULL )
   \   000013   EE           MOV     A,R6
   \   000014   5402         ANL     A,#0x2
   \   000016   6020         JZ      ??MT_ProcessEvent_2
    119            {
    120              /* Return unproccessed events */
    121              return (events ^ MT_ZTOOL_SERIAL_RCV_BUFFER_FULL);
   \   000018   7402         MOV     A,#0x2
   \   00001A   6E           XRL     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   02....       LJMP    ??MT_ProcessEvent_3 & 0xFFFF
    122            }
   \                     ??MT_ProcessEvent_4:
   \   00001F                ; Setup parameters for call to function MT_ProcessIncomingCommand
   \   00001F   12....       LCALL   ??MT_ProcessIncomingCommand?relay
   \                     ??MT_ProcessEvent_1:
   \   000022                ; Setup parameters for call to function osal_msg_receive
   \   000022   90....       MOV     DPTR,#MT_TaskID
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   ??osal_msg_receive?relay
   \   00002A   EA           MOV     A,R2
   \   00002B   7001         JNZ     ??MT_ProcessEvent_5
   \   00002D   EB           MOV     A,R3
   \                     ??MT_ProcessEvent_5:
   \   00002E   70EF         JNZ     ??MT_ProcessEvent_4
   \   000030   EE           MOV     A,R6
   \   000031   FA           MOV     R2,A
   \   000032   7480         MOV     A,#-0x80
   \   000034   6F           XRL     A,R7
   \                     ??MT_ProcessEvent_6:
   \   000035   FB           MOV     R3,A
   \   000036   806F         SJMP    ??MT_ProcessEvent_3
    123          
    124          #if !defined( NONWK )
    125            if ( events & MT_AF_EXEC_EVT )
   \                     ??MT_ProcessEvent_2:
   \   000038   EE           MOV     A,R6
   \   000039   5408         ANL     A,#0x8
   \   00003B   600A         JZ      ??MT_ProcessEvent_7
    126            {
    127              MT_AfExec();
   \   00003D                ; Setup parameters for call to function MT_AfExec
   \   00003D   12....       LCALL   ??MT_AfExec?relay
    128              return (events ^ MT_AF_EXEC_EVT);
   \   000040   7408         MOV     A,#0x8
   \   000042   6E           XRL     A,R6
   \   000043   FA           MOV     R2,A
   \   000044   EF           MOV     A,R7
   \   000045   80EE         SJMP    ??MT_ProcessEvent_6
    129            }
    130          #endif  /* NONWK */
    131          
    132            /* Handle MT_SYS_OSAL_START_TIMER callbacks */
    133          #if defined MT_SYS_FUNC
    134            if ( events & (MT_SYS_OSAL_EVENT_MASK))
   \                     ??MT_ProcessEvent_7:
   \   000047   740F         MOV     A,#0xf
   \   000049   5F           ANL     A,R7
   \   00004A   F9           MOV     R1,A
   \   00004B   E4           CLR     A
   \   00004C   7001         JNZ     ??MT_ProcessEvent_8
   \   00004E   E9           MOV     A,R1
   \                     ??MT_ProcessEvent_8:
   \   00004F   6052         JZ      ??MT_ProcessEvent_9
    135            {
    136              if (events & MT_SYS_OSAL_EVENT_0)
   \   000051   7408         MOV     A,#0x8
   \   000053   5F           ANL     A,R7
   \   000054   F9           MOV     R1,A
   \   000055   E4           CLR     A
   \   000056   7001         JNZ     ??MT_ProcessEvent_10
   \   000058   E9           MOV     A,R1
   \                     ??MT_ProcessEvent_10:
   \   000059   6009         JZ      ??MT_ProcessEvent_11
    137              {
    138                MT_SysOsalTimerExpired(0x00);
   \   00005B                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   00005B   7900         MOV     R1,#0x0
   \   00005D   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    139                events ^= MT_SYS_OSAL_EVENT_0;
   \   000060   7408         MOV     A,#0x8
   \   000062   6F           XRL     A,R7
   \   000063   FF           MOV     R7,A
    140              }
    141          
    142              if (events & MT_SYS_OSAL_EVENT_1)
   \                     ??MT_ProcessEvent_11:
   \   000064   7404         MOV     A,#0x4
   \   000066   5F           ANL     A,R7
   \   000067   F9           MOV     R1,A
   \   000068   E4           CLR     A
   \   000069   7001         JNZ     ??MT_ProcessEvent_12
   \   00006B   E9           MOV     A,R1
   \                     ??MT_ProcessEvent_12:
   \   00006C   6009         JZ      ??MT_ProcessEvent_13
    143              {
    144                MT_SysOsalTimerExpired(0x01);
   \   00006E                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   00006E   7901         MOV     R1,#0x1
   \   000070   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    145                events ^= MT_SYS_OSAL_EVENT_1;
   \   000073   7404         MOV     A,#0x4
   \   000075   6F           XRL     A,R7
   \   000076   FF           MOV     R7,A
    146              }
    147          
    148              if (events & MT_SYS_OSAL_EVENT_2)
   \                     ??MT_ProcessEvent_13:
   \   000077   7402         MOV     A,#0x2
   \   000079   5F           ANL     A,R7
   \   00007A   F9           MOV     R1,A
   \   00007B   E4           CLR     A
   \   00007C   7001         JNZ     ??MT_ProcessEvent_14
   \   00007E   E9           MOV     A,R1
   \                     ??MT_ProcessEvent_14:
   \   00007F   6009         JZ      ??MT_ProcessEvent_15
    149              {
    150                MT_SysOsalTimerExpired(0x02);
   \   000081                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   000081   7902         MOV     R1,#0x2
   \   000083   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    151                events ^= MT_SYS_OSAL_EVENT_2;
   \   000086   7402         MOV     A,#0x2
   \   000088   6F           XRL     A,R7
   \   000089   FF           MOV     R7,A
    152              }
    153          
    154              if (events & MT_SYS_OSAL_EVENT_3)
   \                     ??MT_ProcessEvent_15:
   \   00008A   7401         MOV     A,#0x1
   \   00008C   5F           ANL     A,R7
   \   00008D   F9           MOV     R1,A
   \   00008E   E4           CLR     A
   \   00008F   7001         JNZ     ??MT_ProcessEvent_16
   \   000091   E9           MOV     A,R1
   \                     ??MT_ProcessEvent_16:
   \   000092   6009         JZ      ??MT_ProcessEvent_17
    155              {
    156                MT_SysOsalTimerExpired(0x03);
   \   000094                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   000094   7903         MOV     R1,#0x3
   \   000096   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    157                events ^= MT_SYS_OSAL_EVENT_3;
   \   000099   7401         MOV     A,#0x1
   \   00009B   6F           XRL     A,R7
   \   00009C   FF           MOV     R7,A
    158              }
    159          
    160              return events;
   \                     ??MT_ProcessEvent_17:
   \   00009D   EE           MOV     A,R6
   \   00009E   FA           MOV     R2,A
   \   00009F   EF           MOV     A,R7
   \   0000A0   FB           MOV     R3,A
   \   0000A1   8004         SJMP    ??MT_ProcessEvent_3
    161            }
    162          #endif
    163          
    164            /* Discard or make more handlers */
    165            return 0;
   \                     ??MT_ProcessEvent_9:
   \   0000A3   7A00         MOV     R2,#0x0
   \   0000A5   7B00         MOV     R3,#0x0
   \                     ??MT_ProcessEvent_3:
   \   0000A7                REQUIRE ?Subroutine0
   \   0000A7                ; // Fall through to label ?Subroutine0
    166          
    167          } /* MT_ProcessEvent() */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    168          
    169          /***************************************************************************************************
    170           * @fn      MT_ProcessIncomingCommand
    171           *
    172           * @brief
    173           *
    174           *   Process Event Messages.
    175           *
    176           * @param   byte *msg - pointer to event message
    177           *
    178           * @return
    179           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg )
   \                     MT_ProcessIncomingCommand:
    181          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    182            byte deallocate;
    183            byte *msg_ptr;
    184            byte len;
    185          
    186            /* A little setup for AF, CB_FUNC and MT_SYS_APP_RSP_MSG */
    187            msg_ptr = msg->msg;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FB           MOV     R3,A
   \   000014   8A..         MOV     ?V0 + 0,R2
   \   000016   8B..         MOV     ?V0 + 1,R3
    188          
    189            deallocate = true;
    190          
    191            /* Use the first byte of the message as the command ID */
    192            switch ( msg->hdr.event )
   \   000018   EA           MOV     A,R2
   \   000019   2403         ADD     A,#0x3
   \   00001B   F8           MOV     R0,A
   \   00001C   EB           MOV     A,R3
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   F9           MOV     R1,A
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   E0           MOVX    A,@DPTR
   \   000025   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for MT_ProcessIncomingCommand>_0`:
   \   000028   00           DB        0
   \   000029   05           DB        5
   \   00002A   01           DB        1
   \   00002B   ....         DW        ??MT_ProcessIncomingCommand_0
   \   00002D   02           DB        2
   \   00002E   ....         DW        ??MT_ProcessIncomingCommand_1
   \   000030   04           DB        4
   \   000031   ....         DW        ??MT_ProcessIncomingCommand_2
   \   000033   06           DB        6
   \   000034   ....         DW        ??MT_ProcessIncomingCommand_3
   \   000036   24           DB        36
   \   000037   ....         DW        ??MT_ProcessIncomingCommand_4
   \   000039   ....         DW        ??MT_ProcessIncomingCommand_5
    193            {
    194              case CMD_SERIAL_MSG:
    195                MT_ProcessIncoming(msg->msg);
   \                     ??MT_ProcessIncomingCommand_0:
   \   00003B                ; Setup parameters for call to function MT_ProcessIncoming
   \   00003B   12....       LCALL   ??MT_ProcessIncoming?relay
   \   00003E   8063         SJMP    ??MT_ProcessIncomingCommand_5
    196                break;
    197          
    198              case CMD_DEBUG_MSG:
    199                MT_ProcessDebugMsg( (mtDebugMsg_t *)msg );
   \                     ??MT_ProcessIncomingCommand_1:
   \   000040                ; Setup parameters for call to function MT_ProcessDebugMsg
   \   000040   EE           MOV     A,R6
   \   000041   FA           MOV     R2,A
   \   000042   EF           MOV     A,R7
   \   000043   FB           MOV     R3,A
   \   000044   12....       LCALL   ??MT_ProcessDebugMsg?relay
   \   000047   805A         SJMP    ??MT_ProcessIncomingCommand_5
    200                break;
    201          
    202              case CB_FUNC:
    203                /*
    204                  Build SPI message here instead of redundantly calling MT_BuildSPIMsg
    205                  because we have copied data already in the allocated message
    206                */
    207          
    208                /* msg_ptr is the beginning of the intended SPI message */
    209                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
   \                     ??MT_ProcessIncomingCommand_2:
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   2405         ADD     A,#0x5
   \   000050   F5..         MOV     ?V0 + 2,A
    210          
    211                /*
    212                  FCS goes to the last byte in the message and is calculated over all
    213                  the bytes except FCS and SOP
    214                */
    215                msg_ptr[len-1] = MT_UartCalcFCS(msg_ptr + 1, (byte)(len-2));
   \   000052                ; Setup parameters for call to function MT_UartCalcFCS
   \   000052   74FE         MOV     A,#-0x2
   \   000054   25..         ADD     A,?V0 + 2
   \   000056   F9           MOV     R1,A
   \   000057   8A82         MOV     DPL,R2
   \   000059   8B83         MOV     DPH,R3
   \   00005B   A3           INC     DPTR
   \   00005C   AA82         MOV     R2,DPL
   \   00005E   AB83         MOV     R3,DPH
   \   000060   12....       LCALL   ??MT_UartCalcFCS?relay
   \   000063   E9           MOV     A,R1
   \   000064   C0E0         PUSH    A
   \   000066   85....       MOV     ?V0 + 4,?V0 + 2
   \   000069   E5..         MOV     A,?V0 + 0
   \   00006B   25..         ADD     A,?V0 + 4
   \   00006D   F8           MOV     R0,A
   \   00006E   E5..         MOV     A,?V0 + 1
   \   000070   3400         ADDC    A,#0x0
   \   000072   F9           MOV     R1,A
   \   000073   74FF         MOV     A,#-0x1
   \   000075   28           ADD     A,R0
   \   000076   F582         MOV     DPL,A
   \   000078   74FF         MOV     A,#-0x1
   \   00007A   39           ADDC    A,R1
   \   00007B   F583         MOV     DPH,A
   \   00007D   D0E0         POP     A
   \   00007F   F0           MOVX    @DPTR,A
    216          
    217          #ifdef MT_UART_DEFAULT_PORT
    218                HalUARTWrite ( MT_UART_DEFAULT_PORT, msg_ptr, len );
   \   000080                ; Setup parameters for call to function HalUARTWrite
   \   000080   AC..         MOV     R4,?V0 + 2
   \   000082   7D00         MOV     R5,#0x0
   \   000084   AA..         MOV     R2,?V0 + 0
   \   000086   AB..         MOV     R3,?V0 + 1
   \   000088   7900         MOV     R1,#0x0
   \   00008A   12....       LCALL   ??HalUARTWrite?relay
   \   00008D   8014         SJMP    ??MT_ProcessIncomingCommand_5
    219          #endif
    220                break;
    221          
    222              case CMD_DEBUG_STR:
    223                MT_ProcessDebugStr( (mtDebugStr_t *)msg );
   \                     ??MT_ProcessIncomingCommand_3:
   \   00008F                ; Setup parameters for call to function MT_ProcessDebugStr
   \   00008F   EE           MOV     A,R6
   \   000090   FA           MOV     R2,A
   \   000091   EF           MOV     A,R7
   \   000092   FB           MOV     R3,A
   \   000093   12....       LCALL   ??MT_ProcessDebugStr?relay
   \   000096   800B         SJMP    ??MT_ProcessIncomingCommand_5
    224                break;
    225          
    226          #if !defined ( NONWK )
    227              case MT_SYS_APP_RSP_MSG:
    228                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
    229                MTProcessAppRspMsg( msg_ptr, len );
   \                     ??MT_ProcessIncomingCommand_4:
   \   000098                ; Setup parameters for call to function MTProcessAppRspMsg
   \   000098   8882         MOV     DPL,R0
   \   00009A   8983         MOV     DPH,R1
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   2405         ADD     A,#0x5
   \   00009F   F9           MOV     R1,A
   \   0000A0   12....       LCALL   ??MTProcessAppRspMsg?relay
    230                break;
    231          #endif  // NONWK
    232          
    233          #if defined (MT_UTIL_FUNC)
    234          #if defined ZCL_KEY_ESTABLISH
    235              case ZCL_KEY_ESTABLISH_IND:
    236                MT_UtilKeyEstablishInd((keyEstablishmentInd_t *)msg);
    237                break;
    238          #endif
    239          #endif
    240          #ifdef MT_ZDO_CB_FUNC
    241              case ZDO_STATE_CHANGE:
    242                MT_ZdoStateChangeCB((osal_event_hdr_t *)msg);
    243                break;
    244          #endif
    245          
    246              default:
    247                break;
    248            }
    249          
    250            if ( deallocate )
    251            {
    252              osal_msg_deallocate( (uint8 *)msg );
   \                     ??MT_ProcessIncomingCommand_5:
   \   0000A3                ; Setup parameters for call to function osal_msg_deallocate
   \   0000A3   EE           MOV     A,R6
   \   0000A4   FA           MOV     R2,A
   \   0000A5   EF           MOV     A,R7
   \   0000A6   FB           MOV     R3,A
   \   0000A7   12....       LCALL   ??osal_msg_deallocate?relay
    253            }
    254          }
   \   0000AA   7F06         MOV     R7,#0x6
   \   0000AC   02....       LJMP    ?BANKED_LEAVE_XDATA
    255          
    256          #ifdef MT_TASK
    257          /***************************************************************************************************
    258           * @fn      MT_TransportAlloc
    259           *
    260           * @brief   Allocate memory for transport msg
    261           *
    262           * @param   uint8 cmd0 - The first byte of the MT command id containing the command type and subsystem.
    263           *          uint8 len - length
    264           *
    265           * @return  pointer the allocated memory or NULL if fail to allocate the memory
    266           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    267          uint8 *MT_TransportAlloc(uint8 cmd0, uint8 len)
   \                     MT_TransportAlloc:
    268          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    269            uint8 *p;
    270          
    271            (void)cmd0;  // Intentionally unreferenced parameter
    272          
    273            /* Allocate a buffer of data length + SOP+CMD+FCS (5bytes) */
    274            p = osal_msg_allocate(len + SPI_0DATA_MSG_LEN);
   \   000005                ; Setup parameters for call to function osal_msg_allocate
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   7405         MOV     A,#0x5
   \   000009   25..         ADD     A,?V0 + 0
   \   00000B   FA           MOV     R2,A
   \   00000C   E4           CLR     A
   \   00000D   3400         ADDC    A,#0x0
   \   00000F   FB           MOV     R3,A
   \   000010   12....       LCALL   ??osal_msg_allocate?relay
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
    275          
    276            if (p)
   \   000017   E582         MOV     A,DPL
   \   000019   7002         JNZ     ??MT_TransportAlloc_0
   \   00001B   E583         MOV     A,DPH
   \                     ??MT_TransportAlloc_0:
   \   00001D   6007         JZ      ??MT_TransportAlloc_1
    277            {
    278              p++; /* Save space for SOP_VALUE, msg structure */
    279              return p;
   \   00001F   A3           INC     DPTR
   \   000020   AA82         MOV     R2,DPL
   \   000022   AB83         MOV     R3,DPH
   \   000024   8004         SJMP    ??MT_TransportAlloc_2
    280            }
    281            else
    282            {
    283              return NULL;
   \                     ??MT_TransportAlloc_1:
   \   000026   7A00         MOV     R2,#0x0
   \   000028   7B00         MOV     R3,#0x0
    284            }
   \                     ??MT_TransportAlloc_2:
   \   00002A   02....       LJMP    ?Subroutine0 & 0xFFFF
    285          }
    286          
    287          /***************************************************************************************************
    288           * @fn      MT_TransportSend
    289           *
    290           * @brief   Fill in SOP and FCS then send out the msg
    291           *
    292           * @param   uint8 *pBuf - pointer to the message that contains CMD, length, data and FCS
    293           *
    294           * @return  None
    295           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    296          void MT_TransportSend(uint8 *pBuf)
   \                     MT_TransportSend:
    297          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    298            uint8 *msgPtr;
    299            uint8 dataLen = pBuf[0]; /* Data length is on byte #1 from the pointer */
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FC           MOV     R4,A
    300          
    301            /* Move back to the SOP */
    302            msgPtr = pBuf-1;
   \   00000B   EA           MOV     A,R2
   \   00000C   24FF         ADD     A,#-0x1
   \   00000E   FE           MOV     R6,A
   \   00000F   EB           MOV     A,R3
   \   000010   34FF         ADDC    A,#-0x1
   \   000012   FF           MOV     R7,A
    303          
    304            /* Insert SOP */
    305            msgPtr[0] = MT_UART_SOF;
   \   000013   74FE         MOV     A,#-0x2
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   F0           MOVX    @DPTR,A
    306          
    307            /* Insert FCS */
    308            msgPtr[SPI_0DATA_MSG_LEN - 1 + dataLen] = MT_UartCalcFCS (pBuf, (3 + dataLen));
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8582..       MOV     ?V0 + 0,DPL
   \   00001F                ; Setup parameters for call to function MT_UartCalcFCS
   \   00001F   7403         MOV     A,#0x3
   \   000021   2C           ADD     A,R4
   \   000022   F9           MOV     R1,A
   \   000023   12....       LCALL   ??MT_UartCalcFCS?relay
   \   000026   EE           MOV     A,R6
   \   000027   25..         ADD     A,?V0 + 0
   \   000029   F582         MOV     DPL,A
   \   00002B   EF           MOV     A,R7
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F583         MOV     DPH,A
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   E9           MOV     A,R1
   \   000035   F0           MOVX    @DPTR,A
    309          
    310            /* Send to UART */
    311          #ifdef MT_UART_DEFAULT_PORT
    312            HalUARTWrite(MT_UART_DEFAULT_PORT, msgPtr, dataLen + SPI_0DATA_MSG_LEN);
   \   000036                ; Setup parameters for call to function HalUARTWrite
   \   000036   7405         MOV     A,#0x5
   \   000038   25..         ADD     A,?V0 + 0
   \   00003A   FC           MOV     R4,A
   \   00003B   E4           CLR     A
   \   00003C   3400         ADDC    A,#0x0
   \   00003E   FD           MOV     R5,A
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   7900         MOV     R1,#0x0
   \   000045   12....       LCALL   ??HalUARTWrite?relay
    313          #endif
    314          
    315            /* Deallocate */
    316            osal_msg_deallocate(msgPtr);
   \   000048                ; Setup parameters for call to function osal_msg_deallocate
   \   000048   EE           MOV     A,R6
   \   000049   FA           MOV     R2,A
   \   00004A   EF           MOV     A,R7
   \   00004B   FB           MOV     R3,A
   \   00004C   12....       LCALL   ??osal_msg_deallocate?relay
    317          }
   \   00004F   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_TaskInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TaskInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ProcessIncomingCommand?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessIncomingCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_TransportAlloc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TransportAlloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_TransportSend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TransportSend
    318          #endif /* MT_TASK */
    319          /***************************************************************************************************
    320           ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     MT_ProcessEvent                    0      0     10
       -> MT_ProcessIncomingCommand     0      0     20
       -> osal_msg_receive              0      0     20
       -> MT_AfExec                     0      0     20
       -> MT_SysOsalTimerExpired        0      0     20
       -> MT_SysOsalTimerExpired        0      0     20
       -> MT_SysOsalTimerExpired        0      0     20
       -> MT_SysOsalTimerExpired        0      0     20
     MT_ProcessIncomingCommand          1      0     24
       -> MT_ProcessIncoming            0      0     28
       -> MT_ProcessDebugMsg            0      0     28
       -> MT_UartCalcFCS                0      0     28
       -> HalUARTWrite                  0      0     28
       -> MT_ProcessDebugStr            0      0     28
       -> MTProcessAppRspMsg            0      0     28
       -> osal_msg_deallocate           0      0     28
     MT_TaskInit                        0      0      9
       -> MT_UartInit                   0      0     18
       -> MT_UartRegisterTaskID         0      0     18
       -> MT_Init                       0      0     18
     MT_TransportAlloc                  0      0     10
       -> osal_msg_allocate             0      0     20
     MT_TransportSend                   1      0     10
       -> MT_UartCalcFCS                0      0     20
       -> HalUARTWrite                  0      0     20
       -> osal_msg_deallocate           0      0     20


   Segment part sizes:

     Function/Label                    Bytes
     --------------                    -----
     MT_TaskInit                         25
     MT_ProcessEvent                    167
     ?Subroutine0                         5
     MT_ProcessIncomingCommand          175
     MT_TransportAlloc                   45
     MT_TransportSend                    82
     ??MT_TaskInit?relay                  6
     ??MT_ProcessEvent?relay              6
     ??MT_ProcessIncomingCommand?relay    6
     ??MT_TransportAlloc?relay            6
     ??MT_TransportSend?relay             6

 
 499 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
 
 529 bytes of CODE memory

Errors: none
Warnings: none
