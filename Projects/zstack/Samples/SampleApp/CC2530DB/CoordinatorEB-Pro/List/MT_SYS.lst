###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                15/Aug/2011  15:26:52 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Components\mt\MT_SYS.c                         #
#    Command line       =  -f C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0 #
#                          ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ   #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0 #
#                          ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0  #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x11FF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\zhoufei\Desktop\Zi #
#                          gBee³ÌÐò\ZStack1.4.0ÐÞ¸Äºó\Components\mt\MT_SYS.c  #
#                          -D ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK -D             #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D HAL_UART=TRUE -D     #
#                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED=DEBUG -lC       #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\Coo #
#                          rdinatorEB-Pro\List\ -lA                           #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\Coo #
#                          rdinatorEB-Pro\List\ --diag_suppress Pe001,Pa010   #
#                          -o C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0 #
#                          ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          CoordinatorEB-Pro\Obj\ -e --require_prototypes     #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0 #
#                          ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                           -I C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4. #
#                          0ÐÞ¸Äºó\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\SOURCE\ -I C:\Users\zhoufei\Desktop\ZigBee³ÌÐò #
#                          \ZStack1.4.0ÐÞ¸Äºó\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I            #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MT\ -I                      #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I             #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I     #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I          #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I            #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\AF\ -I                #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I               #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I               #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I              #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I               #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I               #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I                #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\ZMAC\ -I                    #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I          #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I          #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I             #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I          #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I     #
#                          C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_ #
#                          CHIP\ -I D:\IAR\8051\INC\ -I                       #
#                          D:\IAR\8051\INC\CLIB\ -Ohz                         #
#    List file          =  C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\Coo #
#                          rdinatorEB-Pro\List\MT_SYS.lst                     #
#    Object file        =  C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸ #
#                          Äºó\Projects\zstack\Samples\SampleApp\CC2530DB\Coo #
#                          rdinatorEB-Pro\Obj\MT_SYS.r51                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\zhoufei\Desktop\ZigBee³ÌÐò\ZStack1.4.0ÐÞ¸Äºó\Components\mt\MT_SYS.c
      1          /***************************************************************************************************
      2            Filename:       MT_SYS.c
      3            Revised:        $Date: 2010-05-07 17:22:44 -0700 (Fri, 07 May 2010) $
      4            Revision:       $Revision: 22418 $
      5          
      6            Description:   MonitorTest
      7          
      8            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT.h"
     45          #include "MT_SYS.h"
     46          #include "MT_VERSION.h"
     47          #include "nwk_util.h"
     48          #include "OSAL.h"
     49          #include "OSAL_NV.h"
     50          #include "Onboard.h"  /* This is here because RAM read/write macros need it */

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     51          #include "hal_adc.h"
     52          #include "ZGlobals.h"
     53          
     54          /***************************************************************************************************
     55           * MACROS
     56           ***************************************************************************************************/
     57          
     58          #define MT_SYS_DEVICE_INFO_RESPONSE_LEN 14
     59          #define MT_NV_ITEM_MAX_LENGTH           250
     60          
     61          #if !defined HAL_GPIO || !HAL_GPIO
     62          #define GPIO_DIR_IN(IDX)
     63          #define GPIO_DIR_OUT(IDX)
     64          #define GPIO_TRI(IDX)
     65          #define GPIO_PULL_UP(IDX)
     66          #define GPIO_PULL_DN(IDX)
     67          #define GPIO_SET(IDX)
     68          #define GPIO_CLR(IDX)
     69          #define GPIO_TOG(IDX)
     70          #define GPIO_GET(IDX) 0
     71          #define GPIO_HiD_SET() (val = 0)
     72          #define GPIO_HiD_CLR() (val = 0)
     73          #endif
     74          
     75          /***************************************************************************************************
     76           * CONSTANT
     77           ***************************************************************************************************/
     78          
     79          #if !defined MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
     80          #define MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA  FALSE
     81          #endif
     82          

   \                                 In  segment XDATA_ROM_C, align 1
     83          const uint16 MT_SysOsalEventId [] = {
   \                     MT_SysOsalEventId:
   \   000000   00080004     DW 2048, 1024, 512, 256
   \            00020001
     84                                                MT_SYS_OSAL_EVENT_0,
     85                                                MT_SYS_OSAL_EVENT_1,
     86                                                MT_SYS_OSAL_EVENT_2,
     87                                                MT_SYS_OSAL_EVENT_3
     88                                              };
     89          
     90          typedef enum {
     91            GPIO_DIR,
     92            GPIO_TRI,
     93            GPIO_SET,
     94            GPIO_CLR,
     95            GPIO_TOG,
     96            GPIO_GET,
     97            GPIO_HiD = 0x12
     98          } GPIO_Op_t;
     99          
    100          /***************************************************************************************************
    101           * LOCAL FUNCTIONS
    102           ***************************************************************************************************/
    103          #if defined (MT_SYS_FUNC)
    104          void MT_SysReset(uint8 *pBuf);
    105          void MT_SysPing(void);
    106          void MT_SysVersion(void);
    107          void MT_SysSetExtAddr(uint8 *pBuf);
    108          void MT_SysGetExtAddr(void);
    109          void MT_SysOsalNVWrite(uint8 *pBuf);
    110          void MT_SysOsalNVRead(uint8 *pBuf);
    111          void MT_SysOsalStartTimer(uint8 *pBuf);
    112          void MT_SysOsalStopTimer(uint8 *pBuf);
    113          void MT_SysRandom(void);
    114          void MT_SysAdcRead(uint8 *pBuf);
    115          void MT_SysGpio(uint8 *pBuf);
    116          void MT_SysStackTune(uint8 *pBuf);
    117          void MT_SysGetDeviceInfo(uint8 *pBuf);
    118          #endif /* MT_SYS_FUNC */
    119          
    120          #if defined (MT_SYS_FUNC)
    121          /***************************************************************************************************
    122           * @fn      MT_SysProcessing
    123           *
    124           * @brief   Process all the SYS commands that are issued by test tool
    125           *
    126           * @param   pBuf - pointer to the msg buffer
    127           *
    128           *          | LEN  | CMD0  | CMD1  |  DATA  |
    129           *          |  1   |   1   |   1   |  0-255 |
    130           *
    131           * @return  status
    132           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    133          uint8 MT_SysCommandProcessing(uint8 *pBuf)
   \                     MT_SysCommandProcessing:
    134          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    135            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV     R6,#0x0
    136          
    137            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for MT_SysCommandProcessing>_0`:
   \   000011   00           DB        0
   \   000012   0F           DB        15
   \   000013   ....         DW        ??MT_SysCommandProcessing_0
   \   000015   ....         DW        ??MT_SysCommandProcessing_1
   \   000017   ....         DW        ??MT_SysCommandProcessing_2
   \   000019   ....         DW        ??MT_SysCommandProcessing_3
   \   00001B   ....         DW        ??MT_SysCommandProcessing_4
   \   00001D   ....         DW        ??MT_SysCommandProcessing_5
   \   00001F   ....         DW        ??MT_SysCommandProcessing_0
   \   000021   ....         DW        ??MT_SysCommandProcessing_0
   \   000023   ....         DW        ??MT_SysCommandProcessing_0
   \   000025   ....         DW        ??MT_SysCommandProcessing_6
   \   000027   ....         DW        ??MT_SysCommandProcessing_7
   \   000029   ....         DW        ??MT_SysCommandProcessing_8
   \   00002B   ....         DW        ??MT_SysCommandProcessing_9
   \   00002D   ....         DW        ??MT_SysCommandProcessing_10
   \   00002F   ....         DW        ??MT_SysCommandProcessing_11
   \   000031   ....         DW        ??MT_SysCommandProcessing_12
   \   000033   ....         DW        ??MT_SysCommandProcessing_13
    138            {
    139              case MT_SYS_RESET_REQ:
    140                MT_SysReset(pBuf);
   \                     ??MT_SysCommandProcessing_1:
   \   000035                ; Setup parameters for call to function MT_SysReset
   \   000035   12....       LCALL   ??MT_SysReset?relay
   \   000038   803E         SJMP    ??MT_SysCommandProcessing_14
    141                break;
    142          
    143              case MT_SYS_PING:
    144                MT_SysPing();
   \                     ??MT_SysCommandProcessing_2:
   \   00003A                ; Setup parameters for call to function MT_SysPing
   \   00003A   12....       LCALL   ??MT_SysPing?relay
   \   00003D   8039         SJMP    ??MT_SysCommandProcessing_14
    145                break;
    146          
    147              case MT_SYS_VERSION:
    148                MT_SysVersion();
   \                     ??MT_SysCommandProcessing_3:
   \   00003F                ; Setup parameters for call to function MT_SysVersion
   \   00003F   12....       LCALL   ??MT_SysVersion?relay
   \   000042   8034         SJMP    ??MT_SysCommandProcessing_14
    149                break;
    150          
    151              case MT_SYS_SET_EXTADDR:
    152                MT_SysSetExtAddr(pBuf);
   \                     ??MT_SysCommandProcessing_4:
   \   000044                ; Setup parameters for call to function MT_SysSetExtAddr
   \   000044   12....       LCALL   ??MT_SysSetExtAddr?relay
   \   000047   802F         SJMP    ??MT_SysCommandProcessing_14
    153                break;
    154          
    155              case MT_SYS_GET_EXTADDR:
    156                MT_SysGetExtAddr();
   \                     ??MT_SysCommandProcessing_5:
   \   000049                ; Setup parameters for call to function MT_SysGetExtAddr
   \   000049   12....       LCALL   ??MT_SysGetExtAddr?relay
   \   00004C   802A         SJMP    ??MT_SysCommandProcessing_14
    157                break;
    158          
    159              case MT_SYS_OSAL_NV_READ:
    160                MT_SysOsalNVRead(pBuf);
   \                     ??MT_SysCommandProcessing_6:
   \   00004E                ; Setup parameters for call to function MT_SysOsalNVRead
   \   00004E   12....       LCALL   ??MT_SysOsalNVRead?relay
   \   000051   8025         SJMP    ??MT_SysCommandProcessing_14
    161                break;
    162          
    163              case MT_SYS_OSAL_NV_WRITE:
    164                MT_SysOsalNVWrite(pBuf);
   \                     ??MT_SysCommandProcessing_7:
   \   000053                ; Setup parameters for call to function MT_SysOsalNVWrite
   \   000053   12....       LCALL   ??MT_SysOsalNVWrite?relay
   \   000056   8020         SJMP    ??MT_SysCommandProcessing_14
    165                break;
    166          
    167              case MT_SYS_OSAL_START_TIMER:
    168                MT_SysOsalStartTimer(pBuf);
   \                     ??MT_SysCommandProcessing_8:
   \   000058                ; Setup parameters for call to function MT_SysOsalStartTimer
   \   000058   12....       LCALL   ??MT_SysOsalStartTimer?relay
   \   00005B   801B         SJMP    ??MT_SysCommandProcessing_14
    169                break;
    170          
    171              case MT_SYS_OSAL_STOP_TIMER:
    172                MT_SysOsalStopTimer(pBuf);
   \                     ??MT_SysCommandProcessing_9:
   \   00005D                ; Setup parameters for call to function MT_SysOsalStopTimer
   \   00005D   12....       LCALL   ??MT_SysOsalStopTimer?relay
   \   000060   8016         SJMP    ??MT_SysCommandProcessing_14
    173                break;
    174          
    175              case MT_SYS_RANDOM:
    176                MT_SysRandom();
   \                     ??MT_SysCommandProcessing_10:
   \   000062                ; Setup parameters for call to function MT_SysRandom
   \   000062   12....       LCALL   ??MT_SysRandom?relay
   \   000065   8011         SJMP    ??MT_SysCommandProcessing_14
    177                break;
    178          
    179              case MT_SYS_ADC_READ:
    180                MT_SysAdcRead(pBuf);
   \                     ??MT_SysCommandProcessing_11:
   \   000067                ; Setup parameters for call to function MT_SysAdcRead
   \   000067   12....       LCALL   ??MT_SysAdcRead?relay
   \   00006A   800C         SJMP    ??MT_SysCommandProcessing_14
    181                break;
    182          
    183              case MT_SYS_GPIO:
    184                MT_SysGpio(pBuf);
   \                     ??MT_SysCommandProcessing_12:
   \   00006C                ; Setup parameters for call to function MT_SysGpio
   \   00006C   12....       LCALL   ??MT_SysGpio?relay
   \   00006F   8007         SJMP    ??MT_SysCommandProcessing_14
    185                break;
    186          
    187              case MT_SYS_STACK_TUNE:
    188                MT_SysStackTune(pBuf);
   \                     ??MT_SysCommandProcessing_13:
   \   000071                ; Setup parameters for call to function MT_SysStackTune
   \   000071   12....       LCALL   ??MT_SysStackTune?relay
   \   000074   8002         SJMP    ??MT_SysCommandProcessing_14
    189                break;
    190          
    191              default:
    192                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_SysCommandProcessing_0:
   \   000076   0E           INC     R6
   \   000077   0E           INC     R6
    193                break;
    194            }
    195          
    196            return status;
   \                     ??MT_SysCommandProcessing_14:
   \   000078   EE           MOV     A,R6
   \   000079   F9           MOV     R1,A
   \   00007A   02....       LJMP    ??Subroutine17_0 & 0xFFFF
    197          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    198          
    199          /**************************************************************************************************
    200           * @fn      MT_SysReset
    201           *
    202           * @brief   Reset the device.
    203           * @param   typID: 0=reset, 1=serial bootloader
    204           *
    205           * @return  None
    206           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    207          void MT_SysReset(uint8 *pBuf)
   \                     MT_SysReset:
    208          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    209            if (pBuf[MT_RPC_POS_DAT0] == 0)
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   700C         JNZ     ??MT_SysReset_0
    210            {
    211              SystemReset();
   \   00000E   C2AF         CLR     0xa8.7
   \   000010   C2AF         CLR     0xa8.7
   \   000012   75C9AB       MOV     0xc9,#-0x55
   \   000015   75C95B       MOV     0xc9,#0x5b
   \                     ??MT_SysReset_1:
   \   000018   80FE         SJMP    ??MT_SysReset_1
    212            }
    213            else
    214            {
    215              SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
   \                     ??MT_SysReset_0:
   \   00001A                ; Setup parameters for call to function Onboard_soft_reset
   \   00001A   12....       LCALL   Onboard_soft_reset & 0xFFFF
    216            }
    217          }
   \   00001D   02....       LJMP    ??Subroutine18_0 & 0xFFFF
   \   000020                REQUIRE _A_IEN0
   \   000020                REQUIRE WDCTL

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    218          
    219          /***************************************************************************************************
    220           * @fn      MT_SysPing
    221           *
    222           * @brief   Process the Ping command
    223           *
    224           * @param   None
    225           *
    226           * @return  None
    227           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    228          void MT_SysPing(void)
   \                     MT_SysPing:
    229          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    230            uint16 tmp16;
    231            uint8 retArray[2];
    232          
    233            /* Build Capabilities */
    234            tmp16 = MT_CAP_SYS | MT_CAP_MAC | MT_CAP_NWK | MT_CAP_AF | MT_CAP_ZDO|
    235                    MT_CAP_SAPI | MT_CAP_UTIL | MT_CAP_DEBUG | MT_CAP_APP | MT_CAP_ZOAD;
    236          
    237            /* Convert to high byte first into temp buffer */
    238            retArray[0] = LO_UINT16( tmp16 );
   \   000009   7411         MOV     A,#0x11
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
    239            retArray[1] = HI_UINT16( tmp16 );
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   12....       LCALL   ?Subroutine1 & 0xFFFF
    240          
    241            /* Build and send back the response */
    242            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_PING,
    243                                          sizeof (tmp16), retArray );
   \                     ??CrossCallReturnLabel_0:
   \   00001B   7A01         MOV     R2,#0x1
   \   00001D   7961         MOV     R1,#0x61
   \   00001F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    244          }
   \   000022   7402         MOV     A,#0x2
   \   000024   02....       LJMP    ?Subroutine9 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AC82         MOV     R4,DPL
   \   000009   AD83         MOV     R5,DPH
   \   00000B   7B02         MOV     R3,#0x2
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine18_0
   \   000003                ; // Fall through to label ??Subroutine18_0
    245          
    246          /***************************************************************************************************
    247           * @fn      MT_SysVersion
    248           *
    249           * @brief   Process the Version command
    250           *
    251           * @param   None
    252           *
    253           * @return  None
    254           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    255          void MT_SysVersion(void)
   \                     MT_SysVersion:
    256          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    257            byte *verStr = (byte *)MTVersionString;
    258            uint8 respLen = sizeof(MTVersionString);
    259          
    260            /* Build and send back the response */
    261            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
    262                                         respLen, verStr);
   \   000004                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000004   7C..         MOV     R4,#(MTVersionString & 0xff)
   \   000006   7D..         MOV     R5,#((MTVersionString >> 8) & 0xff)
   \   000008   7B05         MOV     R3,#0x5
   \   00000A   7A02         MOV     R2,#0x2
   \   00000C   7961         MOV     R1,#0x61
   \   00000E   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    263          }
   \   000011   02....       LJMP    ??Subroutine18_0 & 0xFFFF
    264          
    265          /***************************************************************************************************
    266           * @fn      MT_SysSetExtAddr
    267           *
    268           * @brief   Set the Extended Address
    269           *
    270           * @param   pBuf
    271           *
    272           * @return  None
    273           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    274          void MT_SysSetExtAddr(uint8 *pBuf)
   \                     MT_SysSetExtAddr:
    275          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    276            uint8 retValue = ZFailure;
   \   00000A   7401         MOV     A,#0x1
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   F0           MOVX    @DPTR,A
    277            uint8 cmdId;
    278          
    279            /* parse header */
    280            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FE           MOV     R6,A
    281            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001B   12....       LCALL   ?Subroutine5 & 0xFFFF
    282          
    283            if ( ZMacSetReq(ZMacExtAddr, pBuf) == ZMacSuccess )
   \                     ??CrossCallReturnLabel_5:
   \   00001E                ; Setup parameters for call to function ZMacSetReq
   \   00001E   0A           INC     R2
   \   00001F   0A           INC     R2
   \   000020   0A           INC     R2
   \   000021   FB           MOV     R3,A
   \   000022   79E2         MOV     R1,#-0x1e
   \   000024   12....       LCALL   ??ZMacSetReq?relay
   \   000027   E9           MOV     A,R1
   \   000028   7028         JNZ     ??MT_SysSetExtAddr_0
    284            {
    285              retValue = osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf);
   \   00002A                ; Setup parameters for call to function osal_nv_write
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   75..08       MOV     ?V0 + 0,#0x8
   \   000032   75..00       MOV     ?V0 + 1,#0x0
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   7C00         MOV     R4,#0x0
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   7A01         MOV     R2,#0x1
   \   000040   7B00         MOV     R3,#0x0
   \   000042   12....       LCALL   ??osal_nv_write?relay
   \   000045   7404         MOV     A,#0x4
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   E9           MOV     A,R1
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   F0           MOVX    @DPTR,A
    286            }
    287          
    288            /* Build and send back the response */
    289            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
   \                     ??MT_SysSetExtAddr_0:
   \   000052                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000052   12....       LCALL   ?Subroutine3 & 0xFFFF
    290          
    291          }
   \                     ??CrossCallReturnLabel_16:
   \   000055   02....       LJMP    ??Subroutine14_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   EA           MOV     A,R2
   \   000001   2403         ADD     A,#0x3
   \   000003   F5..         MOV     ?V0 + 0,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   AC82         MOV     R4,DPL
   \   000008   AD83         MOV     R5,DPH
   \   00000A   7B01         MOV     R3,#0x1
   \   00000C   EE           MOV     A,R6
   \   00000D   FA           MOV     R2,A
   \   00000E                REQUIRE ??Subroutine15_0
   \   00000E                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   7961         MOV     R1,#0x61
   \   000002   02....       LJMP    ?Subroutine11 & 0xFFFF
    292          
    293          /***************************************************************************************************
    294           * @fn      MT_SysGetExtAddr
    295           *
    296           * @brief   Get the Extended Address
    297           *
    298           * @param   None
    299           *
    300           * @return  None
    301           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    302          void MT_SysGetExtAddr(void)
   \                     MT_SysGetExtAddr:
    303          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV     A,#-0x8
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    304            uint8 extAddr[Z_EXTADDR_LEN];
    305          
    306            ZMacGetReq( ZMacExtAddr, extAddr );
   \   000009                ; Setup parameters for call to function ZMacGetReq
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   AA82         MOV     R2,DPL
   \   000011   AB83         MOV     R3,DPH
   \   000013   79E2         MOV     R1,#-0x1e
   \   000015   12....       LCALL   ??ZMacGetReq?relay
    307          
    308            /* Build and send back the response */
    309            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_GET_EXTADDR,
    310                                         Z_EXTADDR_LEN, extAddr);
   \   000018                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   AC82         MOV     R4,DPL
   \   000020   AD83         MOV     R5,DPH
   \   000022   7B08         MOV     R3,#0x8
   \   000024   7A04         MOV     R2,#0x4
   \   000026   7961         MOV     R1,#0x61
   \   000028   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    311          }
   \   00002B   7408         MOV     A,#0x8
   \   00002D   02....       LJMP    ?Subroutine9 & 0xFFFF
    312          
    313          /***************************************************************************************************
    314           * @fn      MT_SysOsalNVRead
    315           *
    316           * @brief  Read a NV value
    317           *
    318           * @param  uint8 pBuf - pointer to the data
    319           *
    320           * @return  None
    321           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    322          void MT_SysOsalNVRead(uint8 *pBuf)
   \                     MT_SysOsalNVRead:
    323          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    324            uint16 nvId;
    325            uint8 nvItemLen=0, nvItemOffset=0;
    326            uint8 *pRetBuf=NULL;
    327            uint8 respLen, cmdId;
    328          
    329            /* parse header */
    330            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 4,A
    331            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   12....       LCALL   ??Subroutine13_0 & 0xFFFF
    332          
    333            /* Get the ID */
    334            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_15:
   \   000016   FC           MOV     R4,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   EC           MOV     A,R4
   \   00001B   F5..         MOV     ?V0 + 0,A
   \   00001D   E9           MOV     A,R1
   \   00001E   F5..         MOV     ?V0 + 1,A
    335            pBuf += sizeof(uint16);
   \   000020   EA           MOV     A,R2
   \   000021   2402         ADD     A,#0x2
   \   000023   0A           INC     R2
   \   000024   0A           INC     R2
   \   000025   EB           MOV     A,R3
   \   000026   3400         ADDC    A,#0x0
   \   000028   FB           MOV     R3,A
    336          
    337          #if !MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
    338            if ((ZCD_NV_IMPLICIT_CERTIFICATE == nvId) ||
    339                (ZCD_NV_CA_PUBLIC_KEY == nvId)        ||
    340                (ZCD_NV_DEVICE_PRIVATE_KEY == nvId))
   \   000029   7469         MOV     A,#0x69
   \   00002B   65..         XRL     A,?V0 + 0
   \   00002D   7001         JNZ     ??MT_SysOsalNVRead_0
   \   00002F   E9           MOV     A,R1
   \                     ??MT_SysOsalNVRead_0:
   \   000030   6012         JZ      ??MT_SysOsalNVRead_1
   \   000032   746B         MOV     A,#0x6b
   \   000034   65..         XRL     A,?V0 + 0
   \   000036   7001         JNZ     ??MT_SysOsalNVRead_2
   \   000038   E9           MOV     A,R1
   \                     ??MT_SysOsalNVRead_2:
   \   000039   6009         JZ      ??MT_SysOsalNVRead_1
   \   00003B   746A         MOV     A,#0x6a
   \   00003D   65..         XRL     A,?V0 + 0
   \   00003F   7001         JNZ     ??MT_SysOsalNVRead_3
   \   000041   E9           MOV     A,R1
   \                     ??MT_SysOsalNVRead_3:
   \   000042   702B         JNZ     ??MT_SysOsalNVRead_4
    341            {
    342              uint8 tmp[2] = { INVALIDPARAMETER, 0 };
   \                     ??MT_SysOsalNVRead_1:
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   AC82         MOV     R4,DPL
   \   00004C   AD83         MOV     R5,DPH
   \   00004E   7583..       MOV     DPH,#((`?<Constant {2, 0}>` >> 8) & 0xff)
   \   000051   7582..       MOV     DPL,#(`?<Constant {2, 0}>` & 0xff)
   \                     ??MT_SysOsalNVRead_5:
   \   000054   7402         MOV     A,#0x2
   \   000056   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    343              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 2, tmp);
   \   000059                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000059   85..82       MOV     DPL,?XSP + 0
   \   00005C   85..83       MOV     DPH,?XSP + 1
   \   00005F   AC82         MOV     R4,DPL
   \   000061   AD83         MOV     R5,DPH
   \   000063   7B02         MOV     R3,#0x2
   \   000065   AA..         MOV     R2,?V0 + 4
   \   000067   7961         MOV     R1,#0x61
   \   000069   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    344              return;
   \   00006C   02....       LJMP    ??MT_SysOsalNVRead_6 & 0xFFFF
    345            }
    346          #endif
    347          
    348          #if !MT_SYS_KEY_MANAGEMENT
    349            if ( (nvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
    350                 (nvId == ZCD_NV_NWK_ALTERN_KEY_INFO) ||
    351                ((nvId >= ZCD_NV_TCLK_TABLE_START) && (nvId <= ZCD_NV_TCLK_TABLE_END)) ||
    352                ((nvId >= ZCD_NV_APS_LINK_KEY_DATA_START) && (nvId <= ZCD_NV_APS_LINK_KEY_DATA_END)) ||
    353                ((nvId >= ZCD_NV_MASTER_KEY_DATA_START) && (nvId <= ZCD_NV_MASTER_KEY_DATA_END)) ||
    354                 (nvId == ZCD_NV_PRECFGKEY) )
   \                     ??MT_SysOsalNVRead_4:
   \   00006F   743A         MOV     A,#0x3a
   \   000071   65..         XRL     A,?V0 + 0
   \   000073   7001         JNZ     ??MT_SysOsalNVRead_7
   \   000075   E9           MOV     A,R1
   \                     ??MT_SysOsalNVRead_7:
   \   000076   603F         JZ      ??MT_SysOsalNVRead_8
   \   000078   743B         MOV     A,#0x3b
   \   00007A   65..         XRL     A,?V0 + 0
   \   00007C   7001         JNZ     ??MT_SysOsalNVRead_9
   \   00007E   E9           MOV     A,R1
   \                     ??MT_SysOsalNVRead_9:
   \   00007F   6036         JZ      ??MT_SysOsalNVRead_8
   \   000081   C3           CLR     C
   \   000082   EC           MOV     A,R4
   \   000083   9401         SUBB    A,#0x1
   \   000085   E9           MOV     A,R1
   \   000086   9401         SUBB    A,#0x1
   \   000088   4006         JC      ??MT_SysOsalNVRead_10
   \   00008A   C3           CLR     C
   \   00008B   E9           MOV     A,R1
   \   00008C   9402         SUBB    A,#0x2
   \   00008E   4027         JC      ??MT_SysOsalNVRead_8
   \                     ??MT_SysOsalNVRead_10:
   \   000090   C3           CLR     C
   \   000091   EC           MOV     A,R4
   \   000092   9401         SUBB    A,#0x1
   \   000094   E9           MOV     A,R1
   \   000095   9402         SUBB    A,#0x2
   \   000097   4006         JC      ??MT_SysOsalNVRead_11
   \   000099   C3           CLR     C
   \   00009A   E9           MOV     A,R1
   \   00009B   9403         SUBB    A,#0x3
   \   00009D   4018         JC      ??MT_SysOsalNVRead_8
   \                     ??MT_SysOsalNVRead_11:
   \   00009F   C3           CLR     C
   \   0000A0   EC           MOV     A,R4
   \   0000A1   9401         SUBB    A,#0x1
   \   0000A3   E9           MOV     A,R1
   \   0000A4   9403         SUBB    A,#0x3
   \   0000A6   4006         JC      ??MT_SysOsalNVRead_12
   \   0000A8   C3           CLR     C
   \   0000A9   E9           MOV     A,R1
   \   0000AA   9404         SUBB    A,#0x4
   \   0000AC   4009         JC      ??MT_SysOsalNVRead_8
   \                     ??MT_SysOsalNVRead_12:
   \   0000AE   7462         MOV     A,#0x62
   \   0000B0   65..         XRL     A,?V0 + 0
   \   0000B2   7001         JNZ     ??MT_SysOsalNVRead_13
   \   0000B4   E9           MOV     A,R1
   \                     ??MT_SysOsalNVRead_13:
   \   0000B5   7012         JNZ     ??MT_SysOsalNVRead_14
    355            {
    356              uint8 tmp1[2] = { INVALIDPARAMETER, 0 };
   \                     ??MT_SysOsalNVRead_8:
   \   0000B7   85..82       MOV     DPL,?XSP + 0
   \   0000BA   85..83       MOV     DPH,?XSP + 1
   \   0000BD   AC82         MOV     R4,DPL
   \   0000BF   AD83         MOV     R5,DPH
   \   0000C1   7583..       MOV     DPH,#((`?<Constant {2, 0}>_1` >> 8) & 0xff)
   \   0000C4   7582..       MOV     DPL,#(`?<Constant {2, 0}>_1` & 0xff)
   \   0000C7   808B         SJMP    ??MT_SysOsalNVRead_5
    357              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 2, tmp1);
    358              return;
    359            }
    360          #endif //!MT_SYS_KEY_MANAGEMENT
    361                  
    362            /* Calculate the offset */
    363            nvItemOffset = *pBuf;
   \                     ??MT_SysOsalNVRead_14:
   \   0000C9   8A82         MOV     DPL,R2
   \   0000CB   8B83         MOV     DPH,R3
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F5..         MOV     ?V0 + 5,A
    364          
    365            nvItemLen = osal_nv_item_len(nvId);
   \   0000D0                ; Setup parameters for call to function osal_nv_item_len
   \   0000D0   AA..         MOV     R2,?V0 + 0
   \   0000D2   AB..         MOV     R3,?V0 + 1
   \   0000D4   12....       LCALL   ??osal_nv_item_len?relay
   \   0000D7   EA           MOV     A,R2
   \   0000D8   F5..         MOV     ?V0 + 6,A
    366          
    367            /* Return only 250 bytes max */
    368            if (nvItemLen > MT_NV_ITEM_MAX_LENGTH)
   \   0000DA   C3           CLR     C
   \   0000DB   94FB         SUBB    A,#-0x5
   \   0000DD   4005         JC      ??MT_SysOsalNVRead_15
    369            {
    370              nvItemLen = MT_NV_ITEM_MAX_LENGTH;
   \   0000DF   75..FA       MOV     ?V0 + 6,#-0x6
   \   0000E2   8003         SJMP    ??MT_SysOsalNVRead_16
    371            }
    372          
    373            if ((nvItemLen > 0) && ((nvItemLen - nvItemOffset) > 0))
   \                     ??MT_SysOsalNVRead_15:
   \   0000E4   EA           MOV     A,R2
   \   0000E5   6029         JZ      ??MT_SysOsalNVRead_17
   \                     ??MT_SysOsalNVRead_16:
   \   0000E7   85....       MOV     ?V0 + 8,?V0 + 6
   \   0000EA   85....       MOV     ?V0 + 2,?V0 + 5
   \   0000ED   E5..         MOV     A,?V0 + 8
   \   0000EF   C3           CLR     C
   \   0000F0   95..         SUBB    A,?V0 + 2
   \   0000F2   F8           MOV     R0,A
   \   0000F3   E4           CLR     A
   \   0000F4   9400         SUBB    A,#0x0
   \   0000F6   F9           MOV     R1,A
   \   0000F7   C3           CLR     C
   \   0000F8   E8           MOV     A,R0
   \   0000F9   9401         SUBB    A,#0x1
   \   0000FB   E9           MOV     A,R1
   \   0000FC   9400         SUBB    A,#0x0
   \   0000FE   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000100   65D0         XRL     A,PSW
   \   000102   33           RLC     A
   \   000103   400B         JC      ??MT_SysOsalNVRead_17
    374            {
    375              respLen = nvItemLen - nvItemOffset + 2;
   \   000105   E5..         MOV     A,?V0 + 6
   \   000107   C3           CLR     C
   \   000108   95..         SUBB    A,?V0 + 5
   \   00010A   2402         ADD     A,#0x2
   \   00010C   F5..         MOV     ?V0 + 7,A
   \   00010E   8003         SJMP    ??MT_SysOsalNVRead_18
    376            }
    377            else
    378            {
    379              respLen = 2;
   \                     ??MT_SysOsalNVRead_17:
   \   000110   75..02       MOV     ?V0 + 7,#0x2
    380            }
    381          
    382            pRetBuf = osal_mem_alloc(respLen);
   \                     ??MT_SysOsalNVRead_18:
   \   000113                ; Setup parameters for call to function osal_mem_alloc
   \   000113   AA..         MOV     R2,?V0 + 7
   \   000115   7B00         MOV     R3,#0x0
   \   000117   12....       LCALL   ??osal_mem_alloc?relay
   \   00011A   8A..         MOV     ?V0 + 2,R2
   \   00011C   8B..         MOV     ?V0 + 3,R3
   \   00011E   AE..         MOV     R6,?V0 + 2
   \   000120   AF..         MOV     R7,?V0 + 3
    383          
    384            if (pRetBuf != NULL)
   \   000122   EE           MOV     A,R6
   \   000123   7001         JNZ     ??MT_SysOsalNVRead_19
   \   000125   EF           MOV     A,R7
   \                     ??MT_SysOsalNVRead_19:
   \   000126   6074         JZ      ??MT_SysOsalNVRead_6
    385            {
    386              osal_memset(pRetBuf, 0, respLen);
   \   000128                ; Setup parameters for call to function osal_memset
   \   000128   AC..         MOV     R4,?V0 + 7
   \   00012A   7D00         MOV     R5,#0x0
   \   00012C   7900         MOV     R1,#0x0
   \   00012E   12....       LCALL   ??osal_memset?relay
    387          
    388              /* Default to ZFailure */
    389              pRetBuf[0] = ZFailure;
   \   000131   7401         MOV     A,#0x1
   \   000133   8E82         MOV     DPL,R6
   \   000135   8F83         MOV     DPH,R7
   \   000137   F0           MOVX    @DPTR,A
    390          
    391              if (respLen > 2)
   \   000138   A3           INC     DPTR
   \   000139   8582..       MOV     ?V0 + 2,DPL
   \   00013C   8583..       MOV     ?V0 + 3,DPH
   \   00013F   E5..         MOV     A,?V0 + 7
   \   000141   C3           CLR     C
   \   000142   9403         SUBB    A,#0x3
   \   000144   4040         JC      ??MT_SysOsalNVRead_20
    392              {
    393                if (((osal_nv_read( nvId, (uint16)nvItemOffset, (uint16)nvItemLen, &pRetBuf[2])) == ZSUCCESS) && (respLen > 2))
   \   000146                ; Setup parameters for call to function osal_nv_read
   \   000146   EE           MOV     A,R6
   \   000147   2402         ADD     A,#0x2
   \   000149   F5..         MOV     ?V0 + 8,A
   \   00014B   EF           MOV     A,R7
   \   00014C   3400         ADDC    A,#0x0
   \   00014E   F5..         MOV     ?V0 + 9,A
   \   000150   78..         MOV     R0,#?V0 + 8
   \   000152   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000155   85....       MOV     ?V0 + 8,?V0 + 6
   \   000158   75..00       MOV     ?V0 + 9,#0x0
   \   00015B   78..         MOV     R0,#?V0 + 8
   \   00015D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000160   AC..         MOV     R4,?V0 + 5
   \   000162   7D00         MOV     R5,#0x0
   \   000164   AA..         MOV     R2,?V0 + 0
   \   000166   AB..         MOV     R3,?V0 + 1
   \   000168   12....       LCALL   ??osal_nv_read?relay
   \   00016B   7404         MOV     A,#0x4
   \   00016D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000170   E9           MOV     A,R1
   \   000171   7006         JNZ     ??MT_SysOsalNVRead_21
    394                {
    395                  pRetBuf[0] = ZSuccess;
   \   000173   E4           CLR     A
   \   000174   8E82         MOV     DPL,R6
   \   000176   8F83         MOV     DPH,R7
   \   000178   F0           MOVX    @DPTR,A
    396                }
    397                pRetBuf[1] = nvItemLen - nvItemOffset;
   \                     ??MT_SysOsalNVRead_21:
   \   000179   E5..         MOV     A,?V0 + 6
   \   00017B   C3           CLR     C
   \   00017C   95..         SUBB    A,?V0 + 5
   \   00017E   85..82       MOV     DPL,?V0 + 2
   \   000181   85..83       MOV     DPH,?V0 + 3
   \   000184   8001         SJMP    ??MT_SysOsalNVRead_22
    398              }
    399              else
    400              {
    401                pRetBuf[1] = 0;
   \                     ??MT_SysOsalNVRead_20:
   \   000186   E4           CLR     A
   \                     ??MT_SysOsalNVRead_22:
   \   000187   F0           MOVX    @DPTR,A
    402              }
    403          
    404              /* Build and send back the response */
    405              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, respLen, pRetBuf );
   \   000188                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000188   EE           MOV     A,R6
   \   000189   FC           MOV     R4,A
   \   00018A   EF           MOV     A,R7
   \   00018B   FD           MOV     R5,A
   \   00018C   AB..         MOV     R3,?V0 + 7
   \   00018E   AA..         MOV     R2,?V0 + 4
   \   000190   7961         MOV     R1,#0x61
   \   000192   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    406          
    407              osal_mem_free(pRetBuf);
   \   000195                ; Setup parameters for call to function osal_mem_free
   \   000195   EE           MOV     A,R6
   \   000196   FA           MOV     R2,A
   \   000197   EF           MOV     A,R7
   \   000198   FB           MOV     R3,A
   \   000199   12....       LCALL   ??osal_mem_free?relay
   \                     ??MT_SysOsalNVRead_6:
   \   00019C   7402         MOV     A,#0x2
   \   00019E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A1   7F0A         MOV     R7,#0xa
   \   0001A3   02....       LJMP    ?BANKED_LEAVE_XDATA
    408            }
    409          
    410          
    411          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   EA           MOV     A,R2
   \   000001   2403         ADD     A,#0x3
   \   000003   0A           INC     R2
   \   000004   0A           INC     R2
   \   000005   0A           INC     R2
   \   000006   EB           MOV     A,R3
   \   000007   3400         ADDC    A,#0x0
   \   000009   FB           MOV     R3,A
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET
    412          
    413          /***************************************************************************************************
    414           * @fn      MT_SysOsalNVWrite
    415           *
    416           * @brief
    417           *
    418           * @param   uint8 pData - pointer to the data
    419           *
    420           * @return  None
    421           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    422          void MT_SysOsalNVWrite(uint8 *pBuf)
   \                     MT_SysOsalNVWrite:
    423          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    424            uint16 nvId;
    425            uint8 nvItemLen=0, nvItemOffset=0;
    426            uint8 rtrn, cmd;
    427          
    428            /* parse header */
    429            cmd = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 4,A
    430            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   12....       LCALL   ?Subroutine5 & 0xFFFF
    431          
    432            /* Get the ID */
    433            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_6:
   \   000016   85..82       MOV     DPL,?V0 + 0
   \   000019   F583         MOV     DPH,A
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FA           MOV     R2,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F8           MOV     R0,A
   \   000020   E4           CLR     A
   \   000021   C8           XCH     A,R0
   \   000022   F9           MOV     R1,A
   \   000023   EA           MOV     A,R2
   \   000024   FE           MOV     R6,A
   \   000025   E9           MOV     A,R1
   \   000026   FF           MOV     R7,A
    434            pBuf += sizeof(uint16);
   \   000027   E5..         MOV     A,?V0 + 0
   \   000029   2402         ADD     A,#0x2
   \   00002B   F5..         MOV     ?V0 + 0,A
   \   00002D   E5..         MOV     A,?V0 + 1
   \   00002F   3400         ADDC    A,#0x0
    435          
    436            /* Calculate the offset */
    437            nvItemOffset = *pBuf++;
   \   000031   85..82       MOV     DPL,?V0 + 0
   \   000034   F583         MOV     DPH,A
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V0 + 5,A
   \   000039   A3           INC     DPTR
    438          
    439            /* Calculate the length */
    440            nvItemLen = *pBuf++;
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   FA           MOV     R2,A
   \   00003C   A3           INC     DPTR
   \   00003D   8582..       MOV     ?V0 + 0,DPL
   \   000040   8583..       MOV     ?V0 + 1,DPH
    441          
    442            /* Default to ZFailure */
    443            rtrn = ZFailure;
   \   000043   7401         MOV     A,#0x1
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   F0           MOVX    @DPTR,A
    444          
    445            /* Set the Z-Globals value of this NV item. */
    446            zgSetItem( nvId, (uint16)nvItemLen, pBuf );
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   8582..       MOV     ?V0 + 2,DPL
   \   000051   88..         MOV     ?V0 + 3,R0
   \   000053                ; Setup parameters for call to function zgSetItem
   \   000053   78..         MOV     R0,#?V0 + 0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   AC..         MOV     R4,?V0 + 2
   \   00005A   7D00         MOV     R5,#0x0
   \   00005C   EE           MOV     A,R6
   \   00005D   FA           MOV     R2,A
   \   00005E   EF           MOV     A,R7
   \   00005F   FB           MOV     R3,A
   \   000060   12....       LCALL   ??zgSetItem?relay
   \   000063   7402         MOV     A,#0x2
   \   000065   12....       LCALL   ?DEALLOC_XSTACK8
    447          
    448            if ((osal_nv_write(nvId, (uint16)nvItemOffset, (uint16)nvItemLen, pBuf)) == ZSUCCESS)
   \   000068                ; Setup parameters for call to function osal_nv_write
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   78..         MOV     R0,#?V0 + 2
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   AC..         MOV     R4,?V0 + 5
   \   000074   7D00         MOV     R5,#0x0
   \   000076   EE           MOV     A,R6
   \   000077   FA           MOV     R2,A
   \   000078   EF           MOV     A,R7
   \   000079   FB           MOV     R3,A
   \   00007A   12....       LCALL   ??osal_nv_write?relay
   \   00007D   7404         MOV     A,#0x4
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   E9           MOV     A,R1
   \   000083   701C         JNZ     ??MT_SysOsalNVWrite_0
    449            {
    450              if (nvId == ZCD_NV_EXTADDR)
   \   000085   7401         MOV     A,#0x1
   \   000087   6E           XRL     A,R6
   \   000088   7001         JNZ     ??MT_SysOsalNVWrite_1
   \   00008A   EF           MOV     A,R7
   \                     ??MT_SysOsalNVWrite_1:
   \   00008B   700C         JNZ     ??MT_SysOsalNVWrite_2
    451              {
    452                rtrn = ZMacSetReq(ZMacExtAddr, pBuf);
   \   00008D                ; Setup parameters for call to function ZMacSetReq
   \   00008D   AA..         MOV     R2,?V0 + 0
   \   00008F   AB..         MOV     R3,?V0 + 1
   \   000091   79E2         MOV     R1,#-0x1e
   \   000093   12....       LCALL   ??ZMacSetReq?relay
   \   000096   E9           MOV     A,R1
   \   000097   8001         SJMP    ??MT_SysOsalNVWrite_3
    453              }
    454              else
    455              {
    456                rtrn = ZSuccess;
   \                     ??MT_SysOsalNVWrite_2:
   \   000099   E4           CLR     A
   \                     ??MT_SysOsalNVWrite_3:
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   F0           MOVX    @DPTR,A
    457              }
    458            }
    459          
    460            /* Build and send back the response */
    461            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &rtrn);
   \                     ??MT_SysOsalNVWrite_0:
   \   0000A1                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000A1   85..82       MOV     DPL,?XSP + 0
   \   0000A4   85..83       MOV     DPH,?XSP + 1
   \   0000A7   AC82         MOV     R4,DPL
   \   0000A9   AD83         MOV     R5,DPH
   \   0000AB   7B01         MOV     R3,#0x1
   \   0000AD   AA..         MOV     R2,?V0 + 4
   \   0000AF   12....       LCALL   ??Subroutine15_0 & 0xFFFF
    462          }
   \                     ??CrossCallReturnLabel_18:
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B5   7F06         MOV     R7,#0x6
   \   0000B7   02....       LJMP    ?BANKED_LEAVE_XDATA
    463          
    464          /***************************************************************************************************
    465           * @fn      MT_SysOsalStartTimer
    466           *
    467           * @brief
    468           *
    469           * @param   uint8 pData - pointer to the data
    470           *
    471           * @return  None
    472           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          void MT_SysOsalStartTimer(uint8 *pBuf)
   \                     MT_SysOsalStartTimer:
    474          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    475            uint16 eventId;
    476            uint8 retValue = ZFailure;
   \   00000A   12....       LCALL   ?Subroutine0 & 0xFFFF
    477            uint8 cmdId;
    478          
    479            /* parse header */
    480            cmdId = pBuf[MT_RPC_POS_CMD1];
    481            pBuf += MT_RPC_FRAME_HDR_SZ;
    482          
    483            if (*pBuf <= 3)
   \                     ??CrossCallReturnLabel_12:
   \   00000D   FF           MOV     R7,A
   \   00000E   C3           CLR     C
   \   00000F   9404         SUBB    A,#0x4
   \   000011   5019         JNC     ??MT_SysOsalStartTimer_0
    484            {
    485              eventId = (uint16) MT_SysOsalEventId[*pBuf];
    486              retValue = osal_start_timerEx(MT_TaskID, eventId, BUILD_UINT16(pBuf[1], pBuf[2]));
   \   000013                ; Setup parameters for call to function osal_start_timerEx
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FC           MOV     R4,A
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   E4           CLR     A
   \   00001F   2C           ADD     A,R4
   \   000020   E9           MOV     A,R1
   \   000021   FD           MOV     R5,A
   \   000022   EF           MOV     A,R7
   \   000023   12....       LCALL   ?Subroutine4 & 0xFFFF
    487            }
   \                     ??CrossCallReturnLabel_3:
   \   000026   12....       LCALL   ??osal_start_timerEx?relay
   \   000029   E9           MOV     A,R1
   \   00002A   8002         SJMP    ??MT_SysOsalStartTimer_1
    488            else
    489            {
    490              retValue = ZInvalidParameter;
   \                     ??MT_SysOsalStartTimer_0:
   \   00002C   7402         MOV     A,#0x2
    491            }
   \                     ??MT_SysOsalStartTimer_1:
   \   00002E   02....       LJMP    ?Subroutine8 & 0xFFFF
    492          
    493            /* Build and send back the response */
    494            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
    495          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7401         MOV     A,#0x1
   \   000002   85..82       MOV     DPL,?XSP + 0
   \   000005   85..83       MOV     DPH,?XSP + 1
   \   000008   F0           MOVX    @DPTR,A
   \   000009                REQUIRE ??Subroutine12_0
   \   000009                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008                REQUIRE ??Subroutine13_0
   \   000008                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   33           RLC     A
   \   000001   F8           MOV     R0,A
   \   000002   E4           CLR     A
   \   000003   33           RLC     A
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   24..         ADD     A,#(MT_SysOsalEventId & 0xff)
   \   000008   F582         MOV     DPL,A
   \   00000A   E9           MOV     A,R1
   \   00000B   34..         ADDC    A,#((MT_SysOsalEventId >> 8) & 0xff)
   \   00000D   F583         MOV     DPH,A
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FB           MOV     R3,A
   \   000014   90....       MOV     DPTR,#MT_TaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000003   EE           MOV     A,R6
   \   000004   FA           MOV     R2,A
   \   000005   7961         MOV     R1,#0x61
   \   000007                REQUIRE ?Subroutine11
   \   000007                ; // Fall through to label ?Subroutine11

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   F0           MOVX    @DPTR,A
   \   000007                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000007                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000007                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000007                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000007   AC82         MOV     R4,DPL
   \   000009   AD83         MOV     R5,DPH
   \   00000B   7B01         MOV     R3,#0x1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000003                REQUIRE ??Subroutine16_0
   \   000003                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine17_0
   \   000003                ; // Fall through to label ??Subroutine17_0
    496          
    497          /***************************************************************************************************
    498           * @fn      MT_SysOsalStopTimer
    499           *
    500           * @brief
    501           *
    502           * @param   uint8 pData - pointer to the data
    503           *
    504           * @return  None
    505           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    506          void MT_SysOsalStopTimer(uint8 *pBuf)
   \                     MT_SysOsalStopTimer:
    507          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    508            uint16 eventId;
    509            uint8 retValue = ZFailure;
   \   00000A   12....       LCALL   ?Subroutine0 & 0xFFFF
    510            uint8 cmdId;
    511          
    512            /* parse header */
    513            cmdId = pBuf[MT_RPC_POS_CMD1];
    514            pBuf += MT_RPC_FRAME_HDR_SZ;
    515          
    516            if (*pBuf <= 3)
   \                     ??CrossCallReturnLabel_13:
   \   00000D   FA           MOV     R2,A
   \   00000E   C3           CLR     C
   \   00000F   9404         SUBB    A,#0x4
   \   000011   500B         JNC     ??MT_SysOsalStopTimer_0
    517            {
    518              eventId = (uint16) MT_SysOsalEventId[*pBuf];
    519              retValue = osal_stop_timerEx(MT_TaskID, eventId);
   \   000013                ; Setup parameters for call to function osal_stop_timerEx
   \   000013   EA           MOV     A,R2
   \   000014   C3           CLR     C
   \   000015   12....       LCALL   ?Subroutine4 & 0xFFFF
    520            }
   \                     ??CrossCallReturnLabel_4:
   \   000018   12....       LCALL   ??osal_stop_timerEx?relay
   \   00001B   E9           MOV     A,R1
   \   00001C   8002         SJMP    ??MT_SysOsalStopTimer_1
    521            else
    522            {
    523              retValue = ZInvalidParameter;
   \                     ??MT_SysOsalStopTimer_0:
   \   00001E   7402         MOV     A,#0x2
    524            }
   \                     ??MT_SysOsalStopTimer_1:
   \   000020   02....       LJMP    ?Subroutine8 & 0xFFFF
    525          
    526            /* Build and send back the response */
    527            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue );
    528          }
    529          
    530          /***************************************************************************************************
    531           * @fn      MT_SysRandom
    532           *
    533           * @brief
    534           *
    535           * @param   uint8 pData - pointer to the data
    536           *
    537           * @return  None
    538           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    539          void MT_SysRandom()
   \                     MT_SysRandom:
    540          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    541            uint16 randValue = Onboard_rand();
   \   00000A                ; Setup parameters for call to function Onboard_rand
   \   00000A   12....       LCALL   ??Onboard_rand?relay
    542            uint8 retArray[2];
    543          
    544            retArray[0] = LO_UINT16(randValue);
   \   00000D   EA           MOV     A,R2
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
    545            retArray[1] = HI_UINT16(randValue);
   \   000015   7401         MOV     A,#0x1
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   EB           MOV     A,R3
   \   00001B   12....       LCALL   ?Subroutine1 & 0xFFFF
    546          
    547            /* Build and send back the response */
    548            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_RANDOM, 2, retArray );
   \                     ??CrossCallReturnLabel_1:
   \   00001E   7A0C         MOV     R2,#0xc
   \   000020                REQUIRE ?Subroutine10
   \   000020                ; // Fall through to label ?Subroutine10
    549          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7961         MOV     R1,#0x61
   \   000002   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   000005   7402         MOV     A,#0x2
   \   000007                REQUIRE ??Subroutine14_0
   \   000007                ; // Fall through to label ??Subroutine14_0
    550          
    551          /***************************************************************************************************
    552           * @fn      MT_SysAdcRead
    553           *
    554           * @brief   Reading ADC value, temperature sensor and voltage
    555           *
    556           * @param   uint8 pData - pointer to the data
    557           *
    558           * @return  None
    559           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    560          void MT_SysAdcRead(uint8 *pBuf)
   \                     MT_SysAdcRead:
    561          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    562          #ifndef HAL_BOARD_LM3S8962
    563            uint8 channel, resolution;
    564            uint16 tempValue;
    565            uint8 retArray[2];
    566            uint8 cmdId;
    567          
    568            /* parse header */
    569            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine12_0 & 0xFFFF
    570            pBuf += MT_RPC_FRAME_HDR_SZ;
    571          
    572            /* Channel */
    573            channel = *pBuf++;
   \                     ??CrossCallReturnLabel_14:
   \   00000D   F9           MOV     R1,A
   \   00000E   A3           INC     DPTR
   \   00000F   AA82         MOV     R2,DPL
   \   000011   AB83         MOV     R3,DPH
    574          
    575            /* Resolution */
    576            resolution = *pBuf++;
    577          
    578            /* Voltage reading */
    579            switch (channel)
   \   000013   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for MT_SysAdcRead>_0`:
   \   000016   01           DB        1
   \   000017   00           DB        0
   \   000018   07           DB        7
   \   000019   ....         DW        ??MT_SysAdcRead_0
   \   00001B   02           DB        2
   \   00001C   0E           DB        14
   \   00001D   ....         DW        ??MT_SysAdcRead_1
   \   00001F   0F           DB        15
   \   000020   ....         DW        ??MT_SysAdcRead_2
   \   000022   ....         DW        ??MT_SysAdcRead_3
    580            {
    581              /* Analog input channel */
    582              case HAL_ADC_CHANNEL_0:
    583              case HAL_ADC_CHANNEL_1:
    584              case HAL_ADC_CHANNEL_2:
    585              case HAL_ADC_CHANNEL_3:
    586              case HAL_ADC_CHANNEL_4:
    587              case HAL_ADC_CHANNEL_5:
    588              case HAL_ADC_CHANNEL_6:
    589              case HAL_ADC_CHANNEL_7:
    590                tempValue = HalAdcRead(channel, resolution);
   \                     ??MT_SysAdcRead_0:
   \   000024                ; Setup parameters for call to function HalAdcRead
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FA           MOV     R2,A
   \                     ??MT_SysAdcRead_4:
   \   00002A   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00002D   8013         SJMP    ??MT_SysAdcRead_5
    591                break;
    592          
    593              /* Temperature sensor */
    594              case(HAL_ADC_CHANNEL_TEMP):
    595                tempValue = HalAdcRead(HAL_ADC_CHANNEL_TEMP, HAL_ADC_RESOLUTION_14);
   \                     ??MT_SysAdcRead_1:
   \   00002F                ; Setup parameters for call to function HalAdcRead
   \   00002F   7A04         MOV     R2,#0x4
   \   000031   790E         MOV     R1,#0xe
   \   000033   80F5         SJMP    ??MT_SysAdcRead_4
    596                break;
    597          
    598              /* Voltage reading */
    599              case(HAL_ADC_CHANNEL_VDD):
    600                tempValue = HalAdcRead(HAL_ADC_CHANNEL_VDD, HAL_ADC_RESOLUTION_14);
   \                     ??MT_SysAdcRead_2:
   \   000035                ; Setup parameters for call to function HalAdcRead
   \   000035   7A04         MOV     R2,#0x4
   \   000037   790F         MOV     R1,#0xf
   \   000039   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00003C   8004         SJMP    ??MT_SysAdcRead_5
    601                break;
    602          
    603              /* Undefined channels */
    604              default:
    605                tempValue = 0x00;
   \                     ??MT_SysAdcRead_3:
   \   00003E   7800         MOV     R0,#0x0
   \   000040   7900         MOV     R1,#0x0
    606                break;
    607            }
    608          
    609            retArray[0] = LO_UINT16(tempValue);
   \                     ??MT_SysAdcRead_5:
   \   000042   E8           MOV     A,R0
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   F0           MOVX    @DPTR,A
    610            retArray[1] = HI_UINT16(tempValue);
   \   00004A   7401         MOV     A,#0x1
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   E9           MOV     A,R1
   \   000050   12....       LCALL   ?Subroutine1 & 0xFFFF
    611          
    612            /* Build and send back the response */
    613            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 2, retArray);
   \                     ??CrossCallReturnLabel_2:
   \   000053   EE           MOV     A,R6
   \   000054   FA           MOV     R2,A
   \   000055   80..         SJMP    ?Subroutine10
    614          #endif /* #ifndef HAL_BOARD_LM3S8962 */
    615          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ??HalAdcRead?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   A8..         MOV     R0,?V0 + 0
   \   000009   A9..         MOV     R1,?V0 + 1
   \   00000B   22           RET
    616          
    617          /**************************************************************************************************
    618           * @fn      MT_SysGpio
    619           *
    620           * @brief   ZAccel RPC interface for controlling the available GPIO pins.
    621           *
    622           * @param   uint8 pData - Pointer to the data.
    623           *
    624           * @return  None
    625           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    626          void MT_SysGpio(uint8 *pBuf)
   \                     MT_SysGpio:
    627          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    628            uint8 cmd, val;
    629            GPIO_Op_t op;
    630          
    631            cmd = pBuf[MT_RPC_POS_CMD1];
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
    632            pBuf += MT_RPC_FRAME_HDR_SZ;
    633          
    634            op = (GPIO_Op_t)(*pBuf++);
    635            val = *pBuf;
    636          
    637            switch (op)
    638            {
    639              case GPIO_DIR:
    640                if (val & BV(0)) {GPIO_DIR_OUT(0);} else {GPIO_DIR_IN(0);}
    641                if (val & BV(1)) {GPIO_DIR_OUT(1);} else {GPIO_DIR_IN(1);}
    642                if (val & BV(2)) {GPIO_DIR_OUT(2);} else {GPIO_DIR_IN(2);}
    643                if (val & BV(3)) {GPIO_DIR_OUT(3);} else {GPIO_DIR_IN(3);}
    644                break;
    645          
    646              case GPIO_TRI:
    647                if(val & BV(0)) {GPIO_TRI(0);} else if(val & BV(4)) {GPIO_PULL_DN(0);} else {GPIO_PULL_UP(0);}
    648                if(val & BV(1)) {GPIO_TRI(1);} else if(val & BV(5)) {GPIO_PULL_DN(1);} else {GPIO_PULL_UP(1);}
    649                if(val & BV(2)) {GPIO_TRI(2);} else if(val & BV(6)) {GPIO_PULL_DN(2);} else {GPIO_PULL_UP(2);}
    650                if(val & BV(3)) {GPIO_TRI(3);} else if(val & BV(7)) {GPIO_PULL_DN(3);} else {GPIO_PULL_UP(3);}
    651                break;
    652          
    653              case GPIO_SET:
    654                if (val & BV(0)) {GPIO_SET(0);}
    655                if (val & BV(1)) {GPIO_SET(1);}
    656                if (val & BV(2)) {GPIO_SET(2);}
    657                if (val & BV(3)) {GPIO_SET(3);}
    658                break;
    659          
    660              case GPIO_CLR:
    661                if (val & BV(0)) {GPIO_CLR(0);}
    662                if (val & BV(1)) {GPIO_CLR(1);}
    663                if (val & BV(2)) {GPIO_CLR(2);}
    664                if (val & BV(3)) {GPIO_CLR(3);}
    665                break;
    666          
    667              case GPIO_TOG:
    668                if (val & BV(0)) {GPIO_TOG(0);}
    669                if (val & BV(1)) {GPIO_TOG(1);}
    670                if (val & BV(2)) {GPIO_TOG(2);}
    671                if (val & BV(3)) {GPIO_TOG(3);}
    672                break;
    673          
    674              case GPIO_GET:
    675                break;
    676          
    677              case GPIO_HiD:
    678                (val) ? GPIO_HiD_SET() :  GPIO_HiD_CLR();
    679                break;
    680          
    681              default:
    682                break;
    683            }
    684          
    685            val  = (GPIO_GET(0)) ? BV(0) : 0;
    686            val |= (GPIO_GET(1)) ? BV(1) : 0;
    687            val |= (GPIO_GET(2)) ? BV(2) : 0;
    688            val |= (GPIO_GET(3)) ? BV(3) : 0;
   \   000011   E4           CLR     A
   \   000012   12....       LCALL   ?Subroutine7 & 0xFFFF
    689          
    690            /* Build and send back the response */
    691            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &val);
   \                     ??CrossCallReturnLabel_10:
   \   000015   12....       LCALL   ??Subroutine15_0 & 0xFFFF
    692          }
   \                     ??CrossCallReturnLabel_19:
   \   000018   02....       LJMP    ?Subroutine9 & 0xFFFF
    693          
    694          /**************************************************************************************************
    695           * @fn      MT_SysStackTune
    696           *
    697           * @brief   ZAccel RPC interface for tuning the stack parameters to adjust performance
    698           *
    699           * @param   uint8 pData - Pointer to the data.
    700           *
    701           * @return  None
    702           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    703          void MT_SysStackTune(uint8 *pBuf)
   \                     MT_SysStackTune:
    704          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    705            uint8 cmd, rtrn;
    706          
    707            cmd = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
    708            pBuf += MT_RPC_FRAME_HDR_SZ;
    709          
    710            switch (*pBuf++)
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   F8           MOV     R0,A
   \   000016   EB           MOV     A,R3
   \   000017   3400         ADDC    A,#0x0
   \   000019   F9           MOV     R1,A
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   A3           INC     DPTR
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
   \   000023   8882         MOV     DPL,R0
   \   000025   8983         MOV     DPH,R1
   \   000027   E0           MOVX    A,@DPTR
   \   000028   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for MT_SysStackTune>_0`:
   \   00002B   00           DB        0
   \   00002C   01           DB        1
   \   00002D   ....         DW        ??MT_SysStackTune_0
   \   00002F   ....         DW        ??MT_SysStackTune_1
   \   000031   ....         DW        ??MT_SysStackTune_2
    711            {
    712            case STK_TX_PWR:
    713              rtrn = ZMacSetReq(ZMacPhyTransmitPowerSigned, pBuf);
   \                     ??MT_SysStackTune_1:
   \   000033                ; Setup parameters for call to function ZMacSetReq
   \   000033   79E5         MOV     R1,#-0x1b
   \                     ??MT_SysStackTune_3:
   \   000035   12....       LCALL   ??ZMacSetReq?relay
   \   000038   E9           MOV     A,R1
   \   000039   8025         SJMP    ??MT_SysStackTune_4
    714              break;
    715          
    716            case STK_RX_ON_IDLE:
    717              if ((*pBuf != TRUE) && (*pBuf != FALSE))
   \                     ??MT_SysStackTune_2:
   \   00003B   8A82         MOV     DPL,R2
   \   00003D   8B83         MOV     DPH,R3
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FC           MOV     R4,A
   \   000041   7401         MOV     A,#0x1
   \   000043   6C           XRL     A,R4
   \   000044   6014         JZ      ??MT_SysStackTune_5
   \   000046   EC           MOV     A,R4
   \   000047   6011         JZ      ??MT_SysStackTune_5
    718              {
    719                (void)ZMacGetReq(ZMacRxOnIdle, &rtrn);
   \   000049                ; Setup parameters for call to function ZMacGetReq
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   AA82         MOV     R2,DPL
   \   000051   AB83         MOV     R3,DPH
   \   000053   7952         MOV     R1,#0x52
   \   000055   12....       LCALL   ??ZMacGetReq?relay
   \   000058   800D         SJMP    ??MT_SysStackTune_6
    720              }
    721              else
    722              {
    723                rtrn = ZMacSetReq(ZMacRxOnIdle, pBuf);
   \                     ??MT_SysStackTune_5:
   \   00005A                ; Setup parameters for call to function ZMacSetReq
   \   00005A   7952         MOV     R1,#0x52
   \   00005C   80D7         SJMP    ??MT_SysStackTune_3
    724              }
    725              break;
    726          
    727            default:
    728              rtrn = ZInvalidParameter;
   \                     ??MT_SysStackTune_0:
   \   00005E   7402         MOV     A,#0x2
   \                     ??MT_SysStackTune_4:
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   F0           MOVX    @DPTR,A
    729              break;
    730            }
    731          
    732            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &rtrn);
   \                     ??MT_SysStackTune_6:
   \   000067                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000067   12....       LCALL   ?Subroutine3 & 0xFFFF
    733          }
   \                     ??CrossCallReturnLabel_17:
   \   00006A   80..         SJMP    ??Subroutine16_0
    734          #endif /* MT_SYS_FUNC */
    735          
    736          /***************************************************************************************************
    737           * SUPPORT
    738           ***************************************************************************************************/
    739          
    740          /***************************************************************************************************
    741           * @fn      MT_SysResetInd()
    742           *
    743           * @brief   Sends a ZTOOL "reset response" message.
    744           *
    745           * @param   None
    746           *
    747           * @return  None
    748           *
    749           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    750          void MT_SysResetInd(void)
   \                     MT_SysResetInd:
    751          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    752            uint8 retArray[6];
    753          
    754            retArray[0] = ResetReason();   /* Reason */
   \   00000A   E59D         MOV     A,0x9d
   \   00000C   13           RRC     A
   \   00000D   13           RRC     A
   \   00000E   13           RRC     A
   \   00000F   541F         ANL     A,#0x1f
   \   000011   5403         ANL     A,#0x3
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   F0           MOVX    @DPTR,A
    755            osal_memcpy( &retArray[1], MTVersionString, 5 );   /* Revision info */
   \   00001A                ; Setup parameters for call to function osal_memcpy
   \   00001A   75....       MOV     ?V0 + 0,#(MTVersionString & 0xff)
   \   00001D   75....       MOV     ?V0 + 1,#((MTVersionString >> 8) & 0xff)
   \   000020   75..00       MOV     ?V0 + 2,#0x0
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000028   7C05         MOV     R4,#0x5
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7404         MOV     A,#0x4
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   AA82         MOV     R2,DPL
   \   000033   AB83         MOV     R3,DPH
   \   000035   12....       LCALL   ??osal_memcpy?relay
   \   000038   7403         MOV     A,#0x3
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
    756          
    757            /* Send out Reset Response message */
    758            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_RESET_IND,
    759                                          sizeof(retArray), retArray);
   \   00003D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   AC82         MOV     R4,DPL
   \   000045   AD83         MOV     R5,DPH
   \   000047   7B06         MOV     R3,#0x6
   \   000049   7A80         MOV     R2,#-0x80
   \   00004B   7941         MOV     R1,#0x41
   \   00004D   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    760          }
   \   000050   7406         MOV     A,#0x6
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   \   000055   7F03         MOV     R7,#0x3
   \   000057   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00005A                REQUIRE SLEEPSTA
    761          
    762          /***************************************************************************************************
    763           * @fn      MT_SysOsalTimerExpired()
    764           *
    765           * @brief   Sends a SYS Osal Timer Expired
    766           *
    767           * @param   None
    768           *
    769           * @return  None
    770           *
    771           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    772          void MT_SysOsalTimerExpired(uint8 Id)
   \                     MT_SysOsalTimerExpired:
    773          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    774            uint8 retValue;
    775            retValue = Id;
   \   000009   E9           MOV     A,R1
   \   00000A   12....       LCALL   ?Subroutine7 & 0xFFFF
    776            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_OSAL_TIMER_EXPIRED, 1, &retValue);
   \                     ??CrossCallReturnLabel_11:
   \   00000D   7A81         MOV     R2,#-0x7f
   \   00000F   7941         MOV     R1,#0x41
   \   000011   12....       LCALL   ?Subroutine11 & 0xFFFF
    777          }
   \                     ??CrossCallReturnLabel_20:
   \   000014                REQUIRE ?Subroutine9
   \   000014                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysCommandProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysPing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysPing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysVersion?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysVersion

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysSetExtAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysSetExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysGetExtAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGetExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysOsalNVRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysOsalNVWrite?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysOsalStartTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalStartTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysOsalStopTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalStopTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysRandom?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysRandom

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysAdcRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysAdcRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysGpio?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGpio

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysStackTune?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysStackTune

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysResetInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysResetInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysOsalTimerExpired?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalTimerExpired

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {2, 0}>`:
   \   000000   0200         DB 2, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {2, 0}>_1`:
   \   000000   0200         DB 2, 0
    778          
    779          /***************************************************************************************************
    780           ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     MT_SysAdcRead                      1      0     21
       -> HalAdcRead                    0      0     24
       -> HalAdcRead                    0      0     24
       -> HalAdcRead                    0      0     24
       -> MT_BuildAndSendZToolResponse
                                        0      0     24
     MT_SysCommandProcessing            0      0      9
       -> MT_SysReset                   0      0     18
       -> MT_SysPing                    0      0     18
       -> MT_SysVersion                 0      0     18
       -> MT_SysSetExtAddr              0      0     18
       -> MT_SysGetExtAddr              0      0     18
       -> MT_SysOsalNVRead              0      0     18
       -> MT_SysOsalNVWrite             0      0     18
       -> MT_SysOsalStartTimer          0      0     18
       -> MT_SysOsalStopTimer           0      0     18
       -> MT_SysRandom                  0      0     18
       -> MT_SysAdcRead                 0      0     18
       -> MT_SysGpio                    0      0     18
       -> MT_SysStackTune               0      0     18
     MT_SysGetExtAddr                   2      0     17
       -> ZMacGetReq                    4      0     16
       -> MT_BuildAndSendZToolResponse
                                        4      0     16
     MT_SysGpio                         3      0     10
       -> MT_BuildAndSendZToolResponse
                                        4      0      2
     MT_SysOsalNVRead                   2      0     33
       -> MT_BuildAndSendZToolResponse
                                        0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     40
       -> osal_nv_item_len              0      0     40
       -> osal_mem_alloc                0      0     40
       -> osal_memset                   0      0     40
       -> osal_nv_read                  0      0     48
       -> MT_BuildAndSendZToolResponse
                                        0      0     40
       -> osal_mem_free                 0      0     40
     MT_SysOsalNVWrite                  1      0     28
       -> zgSetItem                     0      0     34
       -> osal_nv_write                 0      0     38
       -> ZMacSetReq                    0      0     30
       -> MT_BuildAndSendZToolResponse
                                        0      0     30
     MT_SysOsalStartTimer               1      0     19
       -> osal_start_timerEx            0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_SysOsalStopTimer                1      0     19
       -> osal_stop_timerEx             0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_SysOsalTimerExpired             3      0      1
       -> MT_BuildAndSendZToolResponse
                                        4      0      2
     MT_SysPing                         3      0     11
       -> MT_BuildAndSendZToolResponse
                                        4      0      4
     MT_SysRandom                       1      0     21
       -> Onboard_rand                  0      0     24
       -> MT_BuildAndSendZToolResponse
                                        0      0     24
     MT_SysReset                        2      0      9
       -> Onboard_soft_reset            4      0      0
     MT_SysResetInd                     1      0     20
       -> osal_memcpy                   0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     34
     MT_SysSetExtAddr                   1      0     24
       -> ZMacSetReq                    0      0     22
       -> osal_nv_write                 0      0     30
       -> MT_BuildAndSendZToolResponse
                                        0      0     22
     MT_SysStackTune                    1      0     19
       -> ZMacSetReq                    0      0     20
       -> ZMacGetReq                    0      0     20
       -> ZMacSetReq                    0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_SysVersion                      2      0      9
       -> MT_BuildAndSendZToolResponse
                                        4      0      0


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     SLEEPSTA                           1
     _A_IEN0                            1
     WDCTL                              1
     MT_SysOsalEventId                  8
     MT_SysCommandProcessing          125
     ??Subroutine17_0                   5
     MT_SysReset                       32
     ??Subroutine18_0                   7
     MT_SysPing                        39
     ?Subroutine1                      14
     ?Subroutine9                       3
     MT_SysVersion                     20
     MT_SysSetExtAddr                  88
     ?Subroutine5                      11
     ?Subroutine11                      6
     ??Subroutine14_0                   8
     ?Subroutine3                      14
     ??Subroutine15_0                   5
     MT_SysGetExtAddr                  48
     MT_SysOsalNVRead                 422
     ??Subroutine13_0                  16
     MT_SysOsalNVWrite                186
     MT_SysOsalStartTimer              49
     ?Subroutine0                       9
     ??Subroutine12_0                   8
     ?Subroutine4                      26
     ?Subroutine2                       7
     ?Subroutine7                      14
     ?Subroutine8                       3
     ??Subroutine16_0                   3
     MT_SysOsalStopTimer               35
     MT_SysRandom                      32
     ?Subroutine10                      7
     MT_SysAdcRead                     87
     ?Subroutine6                      12
     MT_SysGpio                        27
     MT_SysStackTune                  108
     MT_SysResetInd                    90
     MT_SysOsalTimerExpired            20
     ??MT_SysCommandProcessing?relay    6
     ??MT_SysReset?relay                6
     ??MT_SysPing?relay                 6
     ??MT_SysVersion?relay              6
     ??MT_SysSetExtAddr?relay           6
     ??MT_SysGetExtAddr?relay           6
     ??MT_SysOsalNVRead?relay           6
     ??MT_SysOsalNVWrite?relay          6
     ??MT_SysOsalStartTimer?relay       6
     ??MT_SysOsalStopTimer?relay        6
     ??MT_SysRandom?relay               6
     ??MT_SysAdcRead?relay              6
     ??MT_SysGpio?relay                 6
     ??MT_SysStackTune?relay            6
     ??MT_SysResetInd?relay             6
     ??MT_SysOsalTimerExpired?relay     6
     ?<Constant {2, 0}>                 2
     ?<Constant {2, 0}>_1               2

 
 1 586 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     3 bytes in segment SFR_AN
    12 bytes in segment XDATA_ROM_C
 
 1 682 bytes of CODE  memory
    12 bytes of CONST memory
     0 bytes of DATA  memory (+ 3 bytes shared)

Errors: none
Warnings: none
