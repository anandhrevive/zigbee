###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                13/Aug/2011  15:03:39 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k-CC2530-2.3.1-1.4.0\Components\stack\zdo\ZDApp.c  #
#    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRoute #
#                          r.cfg" (-DCPU32MHZ -DROOT=__near_func              #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3. #
#                          1-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\Tools\CC2530DB\f8wConfig.cfg"            #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x11FF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Documents and           #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Components\stack\zdo\ZDApp.c" -D ZTOOL_P1 -D   #
#                          MT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D         #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D              #
#                          BUILD_ALL_DEVICES -D xLCD_SUPPORTED=DEBUG -D       #
#                          NWK_AUTO_POLL -D SOFT_SATRT -D ZDO_COORDINATOR     #
#                          -lC "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          ZStack-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\RouterEB\List\" -lA             #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\RouterEB\List\" --diag_suppress     #
#                          Pe001,Pa010 -o "C:\Documents and                   #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\Rou #
#                          terEB\Obj\" -e --require_prototypes --debug        #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\"   #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\SOURCE\" -I "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3. #
#                          1-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\ZMAIN\TI2530DB\" -I "C:\Documents and    #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MT\" -I "C:\Documents and   #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I            #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGE #
#                          T\CC2530EB\" -I "C:\Documents and                  #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I         #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCL #
#                          UDE\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\AF\" -I               #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\ZStack-CC2530-2.3.1-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\SEC\" -I "C:\Documents and                      #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\SAPI\" -I             #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\ZStack-CC2530-2.3.1-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\ZDO\" -I "C:\Documents and                      #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\ZMAC\F8W\" -I               #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"    #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVIC #
#                          ES\SADDR\" -I "C:\Documents and                    #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\" -I         #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLU #
#                          DE\" -I "C:\Documents and                          #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I         #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_L #
#                          EVEL\srf04\" -I "C:\Documents and                  #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_ #
#                          CHIP\" -I D:\Zigbee\IAR\8051\INC\ -I               #
#                          D:\Zigbee\IAR\8051\INC\CLIB\ -Ohz                  #
#    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\RouterEB\List\ZDApp.lst              #
#    Object file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\RouterEB\Obj\ZDApp.r51               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1.4.0\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2010-08-20 15:30:00 -0700 (Fri, 20 Aug 2010) $
      4            Revision:       $Revision: 23463 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMac.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          #if !defined( NWK_START_DELAY )
     83            #define NWK_START_DELAY             100   // in milliseconds
     84          #endif
     85          
     86          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     87            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     88          #endif
     89          
     90          #if !defined( BEACON_REQUEST_DELAY )
     91            #define BEACON_REQUEST_DELAY        100   // in milliseconds
     92          #endif
     93          
     94          #if !defined( BEACON_REQ_DELAY_MASK )
     95            #define BEACON_REQ_DELAY_MASK       0x007F
     96          #endif
     97          
     98          #define MAX_RESUME_RETRY            3
     99          
    100          #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
    101          
    102          // Beacon Order Settings (see NLMEDE.h)
    103          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    104          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    105          
    106          #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
    107            // The number of times the frame counter can change before
    108            // saving to NV
    109            #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
    110          #endif
    111          
    112          // Leave control bits
    113          #define ZDAPP_LEAVE_CTRL_INIT 0
    114          #define ZDAPP_LEAVE_CTRL_SET  1
    115          #define ZDAPP_LEAVE_CTRL_RA   2
    116          
    117          // Address Manager Stub Implementation
    118          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    119          
    120          
    121          #if !defined ZDO_NV_SAVE_RFDs
    122          #define ZDO_NV_SAVE_RFDs  TRUE
    123          #endif
    124          
    125          // Delay time before updating NWK NV data to force fewer writes during high activity.
    126          #if ZDO_NV_SAVE_RFDs
    127          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    128          #else
    129          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    130          #endif
    131          
    132          /*********************************************************************
    133           * GLOBAL VARIABLES
    134           */
    135          
    136          #if defined( LCD_SUPPORTED )
    137            uint8 MatchRsps = 0;
    138          #endif
    139          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    140          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint16 nwkFrameCounterChanges = 0;
   \                     nwkFrameCounterChanges:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    151          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    152          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          
    155          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    157          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    159          
    160          /*********************************************************************
    161           * EXTERNAL VARIABLES
    162           */
    163          
    164          /*********************************************************************
    165           * EXTERNAL FUNCTIONS
    166           */
    167          
    168          /*********************************************************************
    169           * LOCAL FUNCTIONS
    170           */
    171          
    172          void ZDApp_NetworkStartEvt( void );
    173          void ZDApp_DeviceAuthEvt( void );
    174          void ZDApp_SaveNetworkStateEvt( void );
    175          
    176          uint8 ZDApp_ReadNetworkRestoreState( void );
    177          uint8 ZDApp_RestoreNetworkState( void );
    178          void ZDAppDetermineDeviceType( void );
    179          void ZDApp_InitUserDesc( void );
    180          void ZDAppCheckForHoldKey( void );
    181          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    182          void ZDApp_ProcessNetworkJoin( void );
    183          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    184          void ZDApp_SaveNwkKey( void );
    185          uint8 ZDApp_RestoreNwkKey( void );
    186          
    187          void ZDApp_SecInit( uint8 state );
    188          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    189          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    190          
    191          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    192          
    193          void ZDApp_ResetTimerStart( uint16 delay );
    194          void ZDApp_ResetTimerCancel( void );
    195          void ZDApp_LeaveCtrlInit( void );
    196          void ZDApp_LeaveCtrlSet( uint8 ra );
    197          uint8 ZDApp_LeaveCtrlBypass( void );
    198          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    199          void ZDApp_LeaveReset( uint8 ra );
    200          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    201                                  uint8 removeChildren );
    202          void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm );
    203          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    204          void ZDApp_RegisterCBs( void );
    205          extern uint8 readCoordinatorJumper( void );
    206          
    207          /*********************************************************************
    208           * LOCAL VARIABLES
    209           */
    210          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    212          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    213          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    214          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    215          
    216          #if defined( HOLD_AUTO_START )
    217            devStates_t devState = DEV_HOLD;
    218          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    219            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    220          #endif
    221          
    222          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    223            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    224            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    225                                  // to parent. Set to make the device do an Orphan scan.
    226          #else
    227            // Set the default to coodinator
    228            devStartModes_t devStartMode = MODE_HARD;
    229          #endif
    230          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    231          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    232          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    233          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    234          {
    235            ZDO_EP,
    236            &ZDAppTaskID,
    237            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    238            (afNetworkLatencyReq_t)0            // No Network Latency req
    239          };
    240          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    241          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    242          
    243          /*********************************************************************
    244           * @fn      ZDApp_Init
    245           *
    246           * @brief   ZDApp Initialization function.
    247           *
    248           * @param   task_id - ZDApp Task ID
    249           *
    250           * @return  None
    251           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    252          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    253          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    254            // Save the task ID
    255            ZDAppTaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#ZDAppTaskID
   \   000008   F0           MOVX    @DPTR,A
    256          
    257             zgDeviceLogicalType =ZG_DEVICETYPE_ROUTER;
   \   000009   7401         MOV     A,#0x1
   \   00000B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000E   F0           MOVX    @DPTR,A
    258            // Initialize the ZDO global device short address storage
    259            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000F   7402         MOV     A,#0x2
   \   000011   90....       MOV     DPTR,#(ZDAppNwkAddr + 8)
   \   000014   F0           MOVX    @DPTR,A
    260            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000015   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000018   74FE         MOV     A,#-0x2
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   74FF         MOV     A,#-0x1
   \   00001E   F0           MOVX    @DPTR,A
    261            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   00001F                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001F   12....       LCALL   ??NLME_GetExtAddr?relay
    262          
    263            // Check for manual "Hold Auto Start"
    264            ZDAppCheckForHoldKey();
   \   000022                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   000022   12....       LCALL   ??ZDAppCheckForHoldKey?relay
    265          
    266            // Initialize ZDO items and setup the device - type of device to create.
    267            ZDO_Init();
   \   000025                ; Setup parameters for call to function ZDO_Init
   \   000025   12....       LCALL   ??ZDO_Init?relay
    268          
    269            // Register the endpoint description with the AF
    270            // This task doesn't have a Simple description, but we still need
    271            // to register the endpoint.
    272            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000028                ; Setup parameters for call to function afRegister
   \   000028   7A..         MOV     R2,#(ZDApp_epDesc & 0xff)
   \   00002A   7B..         MOV     R3,#((ZDApp_epDesc >> 8) & 0xff)
   \   00002C   12....       LCALL   ??afRegister?relay
    273          
    274          #if defined( ZDO_USERDESC_RESPONSE )
    275            ZDApp_InitUserDesc();
    276          #endif // ZDO_USERDESC_RESPONSE
    277          
    278            // Start the device?
    279            if ( devState != DEV_HOLD )
   \   00002F   90....       MOV     DPTR,#devState
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6009         JZ      ??ZDApp_Init_0
    280            {
    281              ZDOInitDevice( 0 );
   \   000035                ; Setup parameters for call to function ZDOInitDevice
   \   000035   7A00         MOV     R2,#0x0
   \   000037   7B00         MOV     R3,#0x0
   \   000039   12....       LCALL   ??ZDOInitDevice?relay
   \   00003C   800D         SJMP    ??ZDApp_Init_1
    282            }
    283            else
    284            {
    285              // Blink LED to indicate HOLD_START
    286              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \                     ??ZDApp_Init_0:
   \   00003E                ; Setup parameters for call to function HalLedBlink
   \   00003E   7CF4         MOV     R4,#-0xc
   \   000040   7D01         MOV     R5,#0x1
   \   000042   7B32         MOV     R3,#0x32
   \   000044   7A00         MOV     R2,#0x0
   \   000046   7908         MOV     R1,#0x8
   \   000048   12....       LCALL   ??HalLedBlink?relay
    287            }
    288          
    289            ZDApp_RegisterCBs();
   \                     ??ZDApp_Init_1:
   \   00004B                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   00004B   12....       LCALL   ??ZDApp_RegisterCBs?relay
    290          } /* ZDApp_Init() */
   \   00004E   02....       LJMP    ??Subroutine31_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    291          
    292          /*********************************************************************
    293           * @fn          ZDApp_SecInit
    294           *
    295           * @brief       ZDApp initialize security.
    296           *
    297           * @param       state - device initialization state
    298           *
    299           * @return      none
    300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    302          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    303            uint8 zgPreConfigKey[SEC_KEY_LEN];
    304          
    305            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    306            {
    307              // Set the Trust Center bit
    308              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    309            }
    310          
    311            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
    312            {
    313              ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_SECURITY_CAPABLE;
    314            }
    315          
    316            // Initialize ZigBee Device Security Manager
    317            ZDSecMgrInit(state);
   \   000004                ; Setup parameters for call to function ZDSecMgrInit
   \   000004   12....       LCALL   ??ZDSecMgrInit?relay
    318          
    319            if ( ZG_SECURE_ENABLED )
    320            {
    321              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
    322              {
    323                nwkFrameCounter = 0;
    324          
    325                if( _NIB.nwkKeyLoaded == FALSE )
    326                {
    327                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    328                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    329                  {
    330                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
    331                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
    332                      SSP_SwitchNwkKey( 0 );
    333          
    334                      // clear local copy of key
    335                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    336                  }
    337                }
    338              }
    339            }
    340          }
   \   000007   02....       LJMP    ??Subroutine31_0 & 0xFFFF
    341          
    342          /*********************************************************************
    343           * @fn      ZDApp_event_loop()
    344           *
    345           * @brief   Main event loop for Zigbee device objects task. This function
    346           *          should be called at periodic intervals.
    347           *
    348           * @param   task_id - Task ID
    349           * @param   events  - Bitmap of events
    350           *
    351           * @return  none
    352           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    353          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    354          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    355            uint8 *msg_ptr;
    356          
    357            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??ZDApp_event_loop_0
   \   000010   E9           MOV     A,R1
   \                     ??ZDApp_event_loop_0:
   \   000011   7031         JNZ     ??ZDApp_event_loop_1
    358            {
    359              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    360              {
    361                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    362          
    363                // Release the memory
    364                osal_msg_deallocate( msg_ptr );
    365              }
    366          
    367              // Return unprocessed events
    368              return (events ^ SYS_EVENT_MSG);
    369            }
    370          
    371            if ( events & ZDO_NETWORK_INIT )
   \   000013   EE           MOV     A,R6
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   5045         JNC     ??ZDApp_event_loop_2
    372            {
    373              // Initialize apps and start the network
    374              devState = DEV_INIT;
   \   000018   7401         MOV     A,#0x1
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   F0           MOVX    @DPTR,A
    375          
    376              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    377                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   00001E                ; Setup parameters for call to function ZDO_StartDevice
   \   00001E   7C0F         MOV     R4,#0xf
   \   000020   7B0F         MOV     R3,#0xf
   \   000022   90....       MOV     DPTR,#devStartMode
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FA           MOV     R2,A
   \   000027   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   5407         ANL     A,#0x7
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??ZDO_StartDevice?relay
    378          
    379              // Return unprocessed events
    380              return (events ^ ZDO_NETWORK_INIT);
   \   000031   7401         MOV     A,#0x1
   \                     ??ZDApp_event_loop_3:
   \   000033   6E           XRL     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   EF           MOV     A,R7
   \                     ??ZDApp_event_loop_4:
   \   000036   FB           MOV     R3,A
   \   000037   02....       LJMP    ??ZDApp_event_loop_5 & 0xFFFF
    381            }
   \                     ??ZDApp_event_loop_6:
   \   00003A                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   00003A   12....       LCALL   ??ZDApp_ProcessOSALMsg?relay
   \   00003D                ; Setup parameters for call to function osal_msg_deallocate
   \   00003D   AA..         MOV     R2,?V0 + 0
   \   00003F   AB..         MOV     R3,?V0 + 1
   \   000041   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??ZDApp_event_loop_1:
   \   000044                ; Setup parameters for call to function osal_msg_receive
   \   000044   90....       MOV     DPTR,#ZDAppTaskID
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   12....       LCALL   ??osal_msg_receive?relay
   \   00004C   8A..         MOV     ?V0 + 0,R2
   \   00004E   8B..         MOV     ?V0 + 1,R3
   \   000050   EA           MOV     A,R2
   \   000051   7001         JNZ     ??ZDApp_event_loop_7
   \   000053   EB           MOV     A,R3
   \                     ??ZDApp_event_loop_7:
   \   000054   70E4         JNZ     ??ZDApp_event_loop_6
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   7480         MOV     A,#-0x80
   \                     ??ZDApp_event_loop_8:
   \   00005A   6F           XRL     A,R7
   \   00005B   80D9         SJMP    ??ZDApp_event_loop_4
    382          
    383            if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_event_loop_2:
   \   00005D   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6004         JZ      ??ZDApp_event_loop_9
   \   000063   6401         XRL     A,#0x1
   \   000065   702E         JNZ     ??ZDApp_event_loop_10
    384            {
    385              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_9:
   \   000067   EE           MOV     A,R6
   \   000068   5402         ANL     A,#0x2
   \   00006A   6007         JZ      ??ZDApp_event_loop_11
    386              {
    387                ZDApp_NetworkStartEvt();
   \   00006C                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   00006C   12....       LCALL   ??ZDApp_NetworkStartEvt?relay
    388          
    389                // Return unprocessed events
    390                return (events ^ ZDO_NETWORK_START);
   \   00006F   7402         MOV     A,#0x2
   \                     ??ZDApp_event_loop_12:
   \   000071   80C0         SJMP    ??ZDApp_event_loop_3
    391              }
    392          
    393              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_11:
   \   000073   EE           MOV     A,R6
   \   000074   5420         ANL     A,#0x20
   \   000076   601D         JZ      ??ZDApp_event_loop_10
    394              {
    395                if ( nwkStatus == ZSuccess )
   \   000078   90....       MOV     DPTR,#nwkStatus
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   7010         JNZ     ??ZDApp_event_loop_13
    396                {
    397                  if ( devState == DEV_END_DEVICE )
   \   00007E   90....       MOV     DPTR,#devState
   \   000081   E0           MOVX    A,@DPTR
   \   000082   6406         XRL     A,#0x6
   \   000084   7003         JNZ     ??ZDApp_event_loop_14
    398                    devState = DEV_ROUTER;
   \   000086   7407         MOV     A,#0x7
   \   000088   F0           MOVX    @DPTR,A
    399          
    400                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_14:
   \   000089                ; Setup parameters for call to function osal_pwrmgr_device
   \   000089   7900         MOV     R1,#0x0
   \   00008B   12....       LCALL   ??osal_pwrmgr_device?relay
    401                }
    402                else
    403                {
    404                  // remain as end device!!
    405                }
    406                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_13:
   \   00008E                ; Setup parameters for call to function osal_set_event
   \   00008E   12....       LCALL   ?Subroutine4 & 0xFFFF
    407          
    408                // Return unprocessed events
    409                return (events ^ ZDO_ROUTER_START);
   \                     ??CrossCallReturnLabel_34:
   \   000091   7420         MOV     A,#0x20
   \   000093   809E         SJMP    ??ZDApp_event_loop_3
    410              }
    411            }
    412          
    413            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_10:
   \   000095   EE           MOV     A,R6
   \   000096   5410         ANL     A,#0x10
   \   000098   6022         JZ      ??ZDApp_event_loop_15
    414            {
    415              ZDO_UpdateNwkStatus( devState );
   \   00009A                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   00009A   90....       MOV     DPTR,#devState
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F9           MOV     R1,A
   \   00009F   12....       LCALL   ??ZDO_UpdateNwkStatus?relay
    416          
    417              // At start up, do one MTO route discovery if the device is a concentrator
    418              if ( zgConcentratorEnable == TRUE )
   \   0000A2   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   6401         XRL     A,#0x1
   \   0000A8   700E         JNZ     ??CrossCallReturnLabel_60
    419              {
    420                // Start next event
    421                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000AA                ; Setup parameters for call to function osal_start_timerEx
   \   0000AA   7C64         MOV     R4,#0x64
   \   0000AC   7D00         MOV     R5,#0x0
   \   0000AE   7A00         MOV     R2,#0x0
   \   0000B0   7B08         MOV     R3,#0x8
   \   0000B2   90....       MOV     DPTR,#NWK_TaskID
   \   0000B5   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    422              }
    423          
    424              // Return unprocessed events
    425              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??CrossCallReturnLabel_60:
   \   0000B8   7410         MOV     A,#0x10
   \   0000BA   80B5         SJMP    ??ZDApp_event_loop_12
    426            }
    427          
    428            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_15:
   \   0000BC   EE           MOV     A,R6
   \   0000BD   5408         ANL     A,#0x8
   \   0000BF   6006         JZ      ??ZDApp_event_loop_16
    429            {
    430              // User defined logic
    431          
    432              // Return unprocessed events
    433              return (events ^ ZDO_COMMAND_CNF);
   \   0000C1   7408         MOV     A,#0x8
   \   0000C3   6E           XRL     A,R6
   \   0000C4   FA           MOV     R2,A
   \   0000C5   801A         SJMP    ??ZDApp_event_loop_5
    434            }
    435          
    436            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_16:
   \   0000C7   7402         MOV     A,#0x2
   \   0000C9   5F           ANL     A,R7
   \   0000CA   F9           MOV     R1,A
   \   0000CB   E4           CLR     A
   \   0000CC   7001         JNZ     ??ZDApp_event_loop_17
   \   0000CE   E9           MOV     A,R1
   \                     ??ZDApp_event_loop_17:
   \   0000CF   6004         JZ      ??ZDApp_event_loop_18
    437            {
    438              ZDApp_SaveNetworkStateEvt();
    439          
    440              // Return unprocessed events
    441              return (events ^ ZDO_NWK_UPDATE_NV);
   \   0000D1   7402         MOV     A,#0x2
   \   0000D3   8085         SJMP    ??ZDApp_event_loop_8
    442            }
    443          
    444            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_18:
   \   0000D5   EE           MOV     A,R6
   \   0000D6   5404         ANL     A,#0x4
   \   0000D8   6003         JZ      ??ZDApp_event_loop_19
    445            {
    446              // The device has been in the UNAUTH state, so reset
    447              // Note: there will be no return from this call
    448              SystemResetSoft();
   \   0000DA                ; Setup parameters for call to function Onboard_soft_reset
   \   0000DA   12....       LCALL   Onboard_soft_reset & 0xFFFF
    449            }
    450          
    451            if ( ZG_SECURE_ENABLED )
    452            {
    453              return ( ZDApp_ProcessSecEvent( task_id, events ) );
    454            }
    455            else
    456            {
    457              // Discard or make more handlers
    458              return 0;
   \                     ??ZDApp_event_loop_19:
   \   0000DD   7A00         MOV     R2,#0x0
   \   0000DF   7B00         MOV     R3,#0x0
    459            }
   \                     ??ZDApp_event_loop_5:
   \   0000E1   02....       LJMP    ??Subroutine35_0 & 0xFFFF
    460          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_set_event?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??osal_start_timerEx?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7A10         MOV     R2,#0x10
   \   000002   02....       LJMP    ?Subroutine24 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    461          
    462          /*********************************************************************
    463           * @fn      ZDApp_ProcessSecEvent()
    464           *
    465           * @brief   Process incoming security events.
    466           *
    467           * @param   task_id - Task ID
    468           * @param   events  - Bitmap of events
    469           *
    470           * @return  none
    471           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    472          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    473          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    474            (void)task_id;  // Intentionally unreferenced parameter
    475          
    476            if ( ZSTACK_ROUTER_BUILD )
   \   000009   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6004         JZ      ??ZDApp_ProcessSecEvent_0
   \   00000F   6401         XRL     A,#0x1
   \   000011   701E         JNZ     ??ZDApp_ProcessSecEvent_1
    477            {
    478              if ( events & ZDO_NEW_DEVICE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000013   EE           MOV     A,R6
   \   000014   5440         ANL     A,#0x40
   \   000016   6019         JZ      ??ZDApp_ProcessSecEvent_1
    479              {
    480                // process the new device event
    481                if ( ZDSecMgrNewDeviceEvent() == TRUE )
   \   000018                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   000018   12....       LCALL   ??ZDSecMgrNewDeviceEvent?relay
   \   00001B   E9           MOV     A,R1
   \   00001C   6401         XRL     A,#0x1
   \   00001E   7009         JNZ     ??CrossCallReturnLabel_57
    482                {
    483                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
   \   000020                ; Setup parameters for call to function osal_start_timerEx
   \   000020   7CE8         MOV     R4,#-0x18
   \   000022   7D03         MOV     R5,#0x3
   \   000024   7A40         MOV     R2,#0x40
   \   000026   12....       LCALL   ?Subroutine9 & 0xFFFF
    484                }
    485          
    486                // Return unprocessed events
    487                return (events ^ ZDO_NEW_DEVICE);
   \                     ??CrossCallReturnLabel_57:
   \   000029   7440         MOV     A,#0x40
   \                     ??ZDApp_ProcessSecEvent_2:
   \   00002B   6E           XRL     A,R6
   \   00002C   FA           MOV     R2,A
   \   00002D   EF           MOV     A,R7
   \                     ??ZDApp_ProcessSecEvent_3:
   \   00002E   FB           MOV     R3,A
   \   00002F   8063         SJMP    ??ZDApp_ProcessSecEvent_4
    488              }
    489            }
    490          
    491            if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
    492                || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
    493            {
    494              if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    495              {
    496                if ( events & ZDO_SECMGR_EVENT )
    497                {
    498                  ZDSecMgrEvent();
    499          
    500                  // Return unprocessed events
    501                  return (events ^ ZDO_SECMGR_EVENT);
    502                }
    503              }
    504            }
    505          
    506            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000031   EE           MOV     A,R6
   \   000032   5480         ANL     A,#0x80
   \   000034   6007         JZ      ??ZDApp_ProcessSecEvent_5
    507            {
    508              ZDApp_DeviceAuthEvt();
   \   000036                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   000036   12....       LCALL   ??ZDApp_DeviceAuthEvt?relay
    509          
    510              // Return unprocessed events
    511              return (events ^ ZDO_DEVICE_AUTH);
   \   000039   7480         MOV     A,#-0x80
   \   00003B   80EE         SJMP    ??ZDApp_ProcessSecEvent_2
    512            }
    513          
    514            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_5:
   \   00003D   7404         MOV     A,#0x4
   \   00003F   5F           ANL     A,R7
   \   000040   F9           MOV     R1,A
   \   000041   E4           CLR     A
   \   000042   7001         JNZ     ??ZDApp_ProcessSecEvent_6
   \   000044   E9           MOV     A,R1
   \                     ??ZDApp_ProcessSecEvent_6:
   \   000045   6027         JZ      ??ZDApp_ProcessSecEvent_7
    515            {
    516              if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
   \   000047   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00004A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00004D   7401         MOV     A,#0x1
   \   00004F   28           ADD     A,R0
   \   000050   FA           MOV     R2,A
   \   000051   E4           CLR     A
   \   000052   39           ADDC    A,R1
   \   000053   FB           MOV     R3,A
   \   000054   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000057   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00005A   C3           CLR     C
   \   00005B   E8           MOV     A,R0
   \   00005C   94E9         SUBB    A,#-0x17
   \   00005E   E9           MOV     A,R1
   \   00005F   9403         SUBB    A,#0x3
   \   000061   4003         JC      ??ZDApp_ProcessSecEvent_8
    517              {
    518                ZDApp_SaveNwkKey();
   \   000063                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000063   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    519              }
    520          
    521              // Return unprocessed events
    522              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDApp_ProcessSecEvent_8:
   \   000066   EE           MOV     A,R6
   \   000067   FA           MOV     R2,A
   \   000068   7404         MOV     A,#0x4
   \                     ??ZDApp_ProcessSecEvent_9:
   \   00006A   6F           XRL     A,R7
   \   00006B   FB           MOV     R3,A
   \   00006C   8026         SJMP    ??ZDApp_ProcessSecEvent_4
    523            }
    524          
    525            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_7:
   \   00006E   7410         MOV     A,#0x10
   \   000070   5F           ANL     A,R7
   \   000071   F9           MOV     R1,A
   \   000072   E4           CLR     A
   \   000073   7001         JNZ     ??ZDApp_ProcessSecEvent_10
   \   000075   E9           MOV     A,R1
   \                     ??ZDApp_ProcessSecEvent_10:
   \   000076   6005         JZ      ??ZDApp_ProcessSecEvent_11
    526            {
    527          #if defined (NV_RESTORE)
    528              ZDSecMgrSaveApsLinkKey();
    529          #endif // (NV_RESTORE)
    530              
    531              // Return unprocessed events
    532              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   000078   7410         MOV     A,#0x10
   \   00007A   6F           XRL     A,R7
   \   00007B   80B1         SJMP    ??ZDApp_ProcessSecEvent_3
    533            }
    534          
    535            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_11:
   \   00007D   7408         MOV     A,#0x8
   \   00007F   5F           ANL     A,R7
   \   000080   F9           MOV     R1,A
   \   000081   E4           CLR     A
   \   000082   7001         JNZ     ??ZDApp_ProcessSecEvent_12
   \   000084   E9           MOV     A,R1
   \                     ??ZDApp_ProcessSecEvent_12:
   \   000085   6009         JZ      ??ZDApp_ProcessSecEvent_13
    536            {
    537              ZDSecMgrSaveTCLinkKey();
   \   000087                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   000087   12....       LCALL   ??ZDSecMgrSaveTCLinkKey?relay
    538              
    539              // Return unprocessed events
    540              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   00008A   EE           MOV     A,R6
   \   00008B   FA           MOV     R2,A
   \   00008C   7408         MOV     A,#0x8
   \   00008E   80DA         SJMP    ??ZDApp_ProcessSecEvent_9
    541            }
    542            
    543            // Discard or make more handlers
    544            return 0;
   \                     ??ZDApp_ProcessSecEvent_13:
   \   000090   7A00         MOV     R2,#0x0
   \   000092   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_4:
   \   000094                REQUIRE ?Subroutine23
   \   000094                ; // Fall through to label ?Subroutine23
    545          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005                REQUIRE ??Subroutine30_0
   \   000005                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    546          
    547          /*********************************************************************
    548           * Application Functions
    549           */
    550          
    551          /*********************************************************************
    552           * @fn      ZDOInitDevice
    553           *
    554           * @brief   Start the device in the network.  This function will read
    555           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    556           *   restore the network state of the device.
    557           *
    558           * @param   startDelay - timeDelay to start device (in milliseconds).
    559           *      There is a jitter added to this delay:
    560           *              ((NWK_START_DELAY + startDelay)
    561           *              + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    562           *
    563           * NOTE:    If the application would like to force a "new" join, the
    564           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    565           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    566           *          this function. "new" join means to not restore the network
    567           *          state of the device. Use zgWriteStartupOptions() to set these
    568           *          options.
    569           *
    570           * @return
    571           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    572           *          restored.
    573           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    574           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    575           *          it could mean that there was no network state to restore.
    576           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    577           *          with the rejoin option set to TRUE.  So, the device was not
    578           *          started in the network (one time only).  The next time this
    579           *          function is called it will start.
    580           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    581          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    582          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine2 & 0xFFFF
    583            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    584            uint16 extendedDelay = 0;
    585          
    586            if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_72:
   \   00000D   90....       MOV     DPTR,#devState
   \   000010   E0           MOVX    A,@DPTR
   \   000011   7005         JNZ     ??ZDOInitDevice_0
    587            {
    588              // Initialize the RAM items table, in case an NV item has been updated.
    589              zgInitItems( FALSE );
   \   000013                ; Setup parameters for call to function zgInitItems
   \   000013   7900         MOV     R1,#0x0
   \   000015   12....       LCALL   ??zgInitItems?relay
    590            }
    591          
    592            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000018                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000018   12....       LCALL   ??ZDConfig_InitDescriptors?relay
    593            //devtag.071807.todo - fix this temporary solution
    594            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00001B   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   90....       MOV     DPTR,#(_NIB + 14)
   \   000022   F0           MOVX    @DPTR,A
    595          
    596            devState = DEV_INIT;    // Remove the Hold state
   \   000023   7401         MOV     A,#0x1
   \   000025   90....       MOV     DPTR,#devState
   \   000028   F0           MOVX    @DPTR,A
    597          
    598            // Initialize leave control logic
    599            ZDApp_LeaveCtrlInit();
   \   000029                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   000029   12....       LCALL   ??ZDApp_LeaveCtrlInit?relay
    600          
    601            // Check leave control reset settings
    602            ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   00002C                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   AC82         MOV     R4,DPL
   \   000034   AD83         MOV     R5,DPH
   \   000036   7A..         MOV     R2,#(devState & 0xff)
   \   000038   7B..         MOV     R3,#((devState >> 8) & 0xff)
   \   00003A   12....       LCALL   ??ZDApp_LeaveCtrlStartup?relay
    603          
    604            // Leave may make the hold state come back
    605            if ( devState == DEV_HOLD )
   \   00003D   90....       MOV     DPTR,#devState
   \   000040   E0           MOVX    A,@DPTR
   \   000041   700E         JNZ     ??ZDOInitDevice_1
    606            {
    607              // Set the NV startup option to force a "new" join.
    608              zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000043                ; Setup parameters for call to function zgWriteStartupOptions
   \   000043   7A02         MOV     R2,#0x2
   \   000045   79FF         MOV     R1,#-0x1
   \   000047   12....       LCALL   ??zgWriteStartupOptions?relay
    609          
    610              // Notify the applications
    611              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00004A                ; Setup parameters for call to function osal_set_event
   \   00004A   12....       LCALL   ?Subroutine4 & 0xFFFF
    612          
    613              return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \                     ??CrossCallReturnLabel_35:
   \   00004D   7902         MOV     R1,#0x2
   \   00004F   8039         SJMP    ??ZDOInitDevice_2
    614            }
    615          
    616          #if defined ( NV_RESTORE )
    617            // Get Keypad directly to see if a reset nv is needed.
    618            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    619            // while booting to skip past NV Restore.
    620            if ( HalKeyRead() == SW_BYPASS_NV )
    621              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    622            else
    623            {
    624              // Determine if NV should be restored
    625              networkStateNV = ZDApp_ReadNetworkRestoreState();
    626            }
    627          
    628            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    629            {
    630              networkStateNV = ZDApp_RestoreNetworkState();
    631            }
    632            else
    633            {
    634              // Wipe out the network state in NV
    635              NLME_InitNV();
    636              NLME_SetDefaultNV();
    637              // clear NWK key values
    638              ZDSecMgrClearNVKeyValues();
    639            }
    640          #endif
    641          
    642            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
    643            {
    644              ZDAppDetermineDeviceType();
   \                     ??ZDOInitDevice_1:
   \   000051                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000051   12....       LCALL   ??ZDAppDetermineDeviceType?relay
    645          
    646              // Only delay if joining network - not restoring network state
    647              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    648                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000054                ; Setup parameters for call to function osal_rand
   \   000054   12....       LCALL   ??osal_rand?relay
   \   000057   8A..         MOV     ?V0 + 0,R2
   \   000059   A8..         MOV     R0,?V0 + 0
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   747F         MOV     A,#0x7f
   \   000063   58           ANL     A,R0
   \   000064   F8           MOV     R0,A
   \   000065   E0           MOVX    A,@DPTR
   \   000066   28           ADD     A,R0
   \   000067   F8           MOV     R0,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   3400         ADDC    A,#0x0
   \   00006C   F9           MOV     R1,A
   \   00006D   7464         MOV     A,#0x64
   \   00006F   28           ADD     A,R0
   \   000070   FE           MOV     R6,A
   \   000071   E4           CLR     A
   \   000072   39           ADDC    A,R1
   \   000073   FF           MOV     R7,A
    649            }
    650          
    651            // Initialize the security for type of device
    652            ZDApp_SecInit( networkStateNV );
   \   000074                ; Setup parameters for call to function ZDSecMgrInit
   \   000074   7901         MOV     R1,#0x1
   \   000076   12....       LCALL   ??ZDSecMgrInit?relay
    653          
    654            // Trigger the network start
    655            ZDApp_NetworkInit( extendedDelay );
   \   000079                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   FB           MOV     R3,A
   \   00007D   12....       LCALL   ??ZDApp_NetworkInit?relay
    656          
    657            // set broadcast address mask to support broadcast filtering
    658            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000080                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000080   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??NLME_SetBroadcastFilter?relay
    659          
    660            return ( networkStateNV );
   \   000088   7901         MOV     R1,#0x1
   \                     ??ZDOInitDevice_2:
   \   00008A   02....       LJMP    ?Subroutine22 & 0xFFFF
    661          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine34_0
   \   000002                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine35_0
   \   000003                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine36_0
   \   000006                ; // Fall through to label ??Subroutine36_0
    662          
    663          /*********************************************************************
    664           * @fn      ZDApp_ReadNetworkRestoreState
    665           *
    666           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    667           *          or not to restore the network state.
    668           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    669           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    670           *
    671           * @param   none
    672           *
    673           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    674           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    675           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    676           *          ZCD_NV_STARTUP_OPTION
    677           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    678          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    679          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    680            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    681          
    682            // Look for the New Network State option.
    683            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   ??zgReadStartupOptions?relay
   \   00000A   E9           MOV     A,R1
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   5001         JNC     ??ZDApp_ReadNetworkRestoreState_0
    684            {
    685              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   00000F   0E           INC     R6
    686            }
    687          
    688            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000010   EE           MOV     A,R6
   \   000011   F9           MOV     R1,A
   \   000012   02....       LJMP    ?Subroutine23 & 0xFFFF
    689          }
    690          
    691          /*********************************************************************
    692           * @fn      ZDAppDetermineDeviceType()
    693           *
    694           * @brief   Determines the type of device to start.
    695           *
    696           *          Looks at zgDeviceLogicalType and determines what type of
    697           *          device to start.  The types are:
    698           *            ZG_DEVICETYPE_COORDINATOR
    699           *            ZG_DEVICETYPE_ROUTER
    700           *            ZG_DEVICETYPE_ENDDEVICE
    701           *
    702           * @param   none
    703           *
    704           * @return  none
    705           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    706          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    707          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    708            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    709            {
    710              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   7402         MOV     A,#0x2
   \   00000C   90....       MOV     DPTR,#devStartMode
   \   00000F   F0           MOVX    @DPTR,A
    711              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   802E         SJMP    ??ZDAppDetermineDeviceType_1
    712            }
    713            else
    714            {
    715              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL     A,#0x1
   \   00001A   700A         JNZ     ??ZDAppDetermineDeviceType_2
    716                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   54F8         ANL     A,#0xf8
   \   000022   4401         ORL     A,#0x1
   \   000024   800D         SJMP    ??ZDAppDetermineDeviceType_3
    717              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6402         XRL     A,#0x2
   \   000029   7009         JNZ     ??ZDAppDetermineDeviceType_4
    718                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   54F8         ANL     A,#0xf8
   \   000031   4402         ORL     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000033   F0           MOVX    @DPTR,A
    719          
    720              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    721              // The device shall do rejoin the network. Otherwise, do normal join
    722              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000034                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000034   7A..         MOV     R2,#(AIB_apsUseExtendedPANID & 0xff)
   \   000036   7B..         MOV     R3,#((AIB_apsUseExtendedPANID >> 8) & 0xff)
   \   000038   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   00003B   E9           MOV     A,R1
   \   00003C   7003         JNZ     ??ZDAppDetermineDeviceType_5
    723              {
    724                devStartMode = MODE_JOIN;     // Assume joining
   \   00003E   E4           CLR     A
   \   00003F   8002         SJMP    ??ZDAppDetermineDeviceType_6
    725              }
    726              else
    727              {
    728                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000041   7403         MOV     A,#0x3
   \                     ??ZDAppDetermineDeviceType_6:
   \   000043   90....       MOV     DPTR,#devStartMode
   \                     ??ZDAppDetermineDeviceType_1:
   \   000046   F0           MOVX    @DPTR,A
    729              }
    730            }
    731          }
   \   000047   02....       LJMP    ??Subroutine31_0 & 0xFFFF
    732          
    733          /*********************************************************************
    734           * @fn      ZDApp_NetworkStartEvt()
    735           *
    736           * @brief   Process the Network Start Event
    737           *
    738           * @param   none
    739           *
    740           * @return  none
    741           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    742          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    743          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    744            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??ZDApp_NetworkStartEvt_0
    745            {
    746              // Successfully started a ZigBee network
    747              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7003         JNZ     ??ZDApp_NetworkStartEvt_1
    748              {
    749                devState = DEV_ZB_COORD;
   \   000012   7409         MOV     A,#0x9
   \   000014   F0           MOVX    @DPTR,A
    750              }
    751          
    752              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   ??osal_pwrmgr_device?relay
    753              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   802D         SJMP    ??ZDApp_NetworkStartEvt_2
    754            }
    755            else
    756            {
    757              // Try again with a higher energy threshold !!
    758              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001C   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   00001F   E9           MOV     A,R1
   \   000020   F8           MOV     R0,A
   \   000021   7410         MOV     A,#0x10
   \   000023   28           ADD     A,R0
   \   000024   F8           MOV     R0,A
   \   000025   E4           CLR     A
   \   000026   3400         ADDC    A,#0x0
   \   000028   F9           MOV     R1,A
   \   000029   E8           MOV     A,R0
   \   00002A   94FF         SUBB    A,#-0x1
   \   00002C   E9           MOV     A,R1
   \   00002D   9400         SUBB    A,#0x0
   \   00002F   C3           CLR     C
   \   000030   65D0         XRL     A,PSW
   \   000032   33           RLC     A
   \   000033   500E         JNC     ??ZDApp_NetworkStartEvt_3
    759              {
    760                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000035                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000035                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000035   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   000038   E9           MOV     A,R1
   \   000039   2410         ADD     A,#0x10
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   ??NLME_SetEnergyThreshold?relay
    761                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   00003F                ; Setup parameters for call to function osal_set_event
   \   00003F   7A01         MOV     R2,#0x1
   \   000041   8008         SJMP    ??ZDApp_NetworkStartEvt_4
    762              }
    763              else
    764              {
    765                // Failed to start network. Enter a dormant state (until user intervenes)
    766                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000043   7401         MOV     A,#0x1
   \   000045   90....       MOV     DPTR,#devState
   \   000048   F0           MOVX    @DPTR,A
    767                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000049                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000049   7A10         MOV     R2,#0x10
    768              }
    769            }
   \                     ??ZDApp_NetworkStartEvt_4:
   \   00004B                REQUIRE ?Subroutine26
   \   00004B                ; // Fall through to label ?Subroutine26
    770          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000003   02....       LJMP    ??Subroutine31_0 & 0xFFFF
    771          
    772          /*********************************************************************
    773           * @fn      ZDApp_DeviceAuthEvt()
    774           *
    775           * @brief   Process the Device Authentic Event
    776           *
    777           * @param   none
    778           *
    779           * @return  none
    780           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    781          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    782          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    783            // received authentication from trust center
    784            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   7035         JNZ     ??ZDApp_DeviceAuthEvt_0
    785            {
    786              // Stop the reset timer so it doesn't reset
    787              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerCancel?relay
    788          
    789              devState = DEV_END_DEVICE;
   \   00000F   12....       LCALL   ?Subroutine0 & 0xFFFF
    790              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    791          
    792              // Set the Power Manager Device
    793          #if defined ( POWER_SAVING )
    794              osal_pwrmgr_device( PWRMGR_BATTERY );
    795          #endif
    796          
    797              if ( ZSTACK_ROUTER_BUILD )
   \                     ??CrossCallReturnLabel_41:
   \   000012   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6004         JZ      ??ZDApp_DeviceAuthEvt_1
   \   000018   6401         XRL     A,#0x1
   \   00001A   700E         JNZ     ??ZDApp_DeviceAuthEvt_2
    798              {
    799                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   00001C   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00001F   6009         JZ      ??ZDApp_DeviceAuthEvt_2
    800                {
    801                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    802                  NLME_StartRouterRequest( 0, 0, false );
   \   000021                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000021   7B00         MOV     R3,#0x0
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7900         MOV     R1,#0x0
   \   000027   12....       LCALL   ??NLME_StartRouterRequest?relay
    803                }
    804              }
    805          
    806              // Notify to save info into NV
    807              ZDApp_NVUpdate();
    808          
    809              // Save off the security
    810              ZDApp_SaveNwkKey();
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   00002A                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00002A   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    811          
    812              ZDApp_AnnounceNewAddress();
   \   00002D                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00002D   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
    813          
    814              if ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   \   000030   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000033   E0           MOVX    A,@DPTR
   \   000034   A2E3         MOV     C,0xE0 /* A   */.3
   \   000036   4009         JC      ??ZDApp_DeviceAuthEvt_0
    815              {
    816                NLME_SetPollRate( ZDApp_SavedPollRate );
   \   000038                ; Setup parameters for call to function NLME_SetPollRate
   \   000038   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00003B   12....       LCALL   ?Subroutine7 & 0xFFFF
    817              }
    818            }
   \                     ??CrossCallReturnLabel_7:
   \   00003E   12....       LCALL   ??NLME_SetPollRate?relay
    819            else
    820            {
    821              ZDApp_NVUpdate();
    822            }
    823          }
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000041   02....       LJMP    ??Subroutine31_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000003   E0           MOVX    A,@DPTR
   \   000004   5407         ANL     A,#0x7
   \   000006   6402         XRL     A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7406         MOV     A,#0x6
   \   000002   90....       MOV     DPTR,#devState
   \   000005   F0           MOVX    @DPTR,A
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006   7A10         MOV     R2,#0x10
   \   000008                REQUIRE ?Subroutine24
   \   000008                ; // Fall through to label ?Subroutine24

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    824          
    825          /*********************************************************************
    826           * @fn      ZDApp_SaveNetworkStateEvt()
    827           *
    828           * @brief   Process the Save the Network State Event
    829           *
    830           * @param   none
    831           *
    832           * @return  none
    833           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    834          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    835          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    836          #if defined ( NV_RESTORE )
    837           #if defined ( NV_TURN_OFF_RADIO )
    838            // Turn off the radio's receiver during an NV update
    839            uint8 RxOnIdle;
    840            uint8 x = false;
    841            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    842            ZMacSetReq( ZMacRxOnIdle, &x );
    843           #endif
    844          
    845            // Update the Network State in NV
    846            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    847                           NWK_NV_DEVICELIST_ENABLE |
    848                           NWK_NV_BINDING_ENABLE    |
    849                           NWK_NV_ADDRMGR_ENABLE );
    850          
    851            // Reset the NV startup option to resume from NV by
    852            // clearing the "New" join option.
    853            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
    854          
    855           #if defined ( NV_TURN_OFF_RADIO )
    856            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    857           #endif
    858          #endif  // NV_RESTORE
    859          }
   \   000000   02....       LJMP    ?BRET
    860          
    861          /*********************************************************************
    862           * @fn      ZDApp_RestoreNetworkState()
    863           *
    864           * @brief   This function will restore the network state of the
    865           *          device if the network state is stored in NV.
    866           *
    867           * @param   none
    868           *
    869           * @return
    870           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    871           *          restored.
    872           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    873           *          This could mean that zgStartupOption said to not restore, or
    874           *          it could mean that there was no network state to restore.
    875           *
    876           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    877          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
    878          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    879            uint8 nvStat;
    880          
    881            // Initialize NWK NV items
    882            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   ??NLME_InitNV?relay
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
    883          
    884            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   602F         JZ      ??ZDApp_RestoreNetworkState_0
    885            {
    886              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   ??NLME_RestoreFromNV?relay
   \   000012   E9           MOV     A,R1
   \   000013   6029         JZ      ??ZDApp_RestoreNetworkState_0
    887              {
    888                // Are we a coordinator
    889                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   12....       LCALL   ??Subroutine36_0 & 0xFFFF
    890                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_69:
   \   00001E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000021   E0           MOVX    A,@DPTR
   \   000022   7002         JNZ     ??ZDApp_RestoreNetworkState_1
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \                     ??ZDApp_RestoreNetworkState_1:
   \   000026   7007         JNZ     ??ZDApp_RestoreNetworkState_2
    891                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000028   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   54F8         ANL     A,#0xf8
   \   00002E   F0           MOVX    @DPTR,A
    892                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   00002F   7401         MOV     A,#0x1
   \   000031   90....       MOV     DPTR,#devStartMode
   \   000034   12....       LCALL   ?Subroutine1 & 0xFFFF
    893                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
    894              }
    895              else
    896                nvStat = NV_ITEM_UNINIT;
    897          
    898              if ( ZG_SECURE_ENABLED )
    899              {
    900                nwkFrameCounterChanges = 0;
    901          
    902                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    903                {
    904                  ZDApp_RestoreNwkKey();
    905                }
    906              }
    907          
    908              // The default for RxOnWhenIdle is true for Routers and false for end devices
    909              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
    910              // other than default.
    911            }
    912          
    913            if ( nvStat == ZSUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000037   EE           MOV     A,R6
   \   000038   7004         JNZ     ??ZDApp_RestoreNetworkState_0
    914              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   8002         SJMP    ??ZDApp_RestoreNetworkState_3
    915            else
    916              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   00003E   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_3:
   \   000040   02....       LJMP    ?Subroutine23 & 0xFFFF
    917          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV     R4,#((_NIB + 53) & 0xff)
   \   000003   7D..         MOV     R5,#(((_NIB + 53) >> 8) & 0xff)
   \   000005   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000007   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   000009   12....       LCALL   ??sAddrExtCpy?relay
   \   00000C   22           RET
    918          
    919          /*********************************************************************
    920           * @fn      ZDApp_InitUserDesc()
    921           *
    922           * @brief   Initialize the User Descriptor, the descriptor is read from NV
    923           *          when needed.  If you want to initialize the User descriptor to
    924           *          something other than all zero, do it here.
    925           *
    926           * @param   none
    927           *
    928           * @return  none
    929           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    930          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
    931          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    932            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
    933          
    934            // Initialize the User Descriptor, the descriptor is read from NV
    935            // when needed.  If you want to initialize the User descriptor to something
    936            // other than all zero, do it here.
    937            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   12....       LCALL   ?Subroutine15 & 0xFFFF
    938            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
    939                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \                     ??CrossCallReturnLabel_27:
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   7C11         MOV     R4,#0x11
   \   000014   7D00         MOV     R5,#0x0
   \   000016   7A81         MOV     R2,#-0x7f
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ??osal_nv_item_init?relay
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000022   E9           MOV     A,R1
   \   000023   7033         JNZ     ??ZDApp_InitUserDesc_0
    940            {
    941              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
    942                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..11       MOV     ?V0 + 0,#0x11
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV     R4,#0x0
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7A81         MOV     R2,#-0x7f
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   12....       LCALL   ??osal_nv_read?relay
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   E9           MOV     A,R1
   \   000046   7010         JNZ     ??ZDApp_InitUserDesc_0
    943              {
    944                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6007         JZ      ??ZDApp_InitUserDesc_0
    945                {
    946                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000051   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000054   E0           MOVX    A,@DPTR
   \   000055   D2E4         SETB    0xE0 /* A   */.4
   \   000057   F0           MOVX    @DPTR,A
    947                }
    948              }
    949            }
    950          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000058   7411         MOV     A,#0x11
   \   00005A   02....       LJMP    ??Subroutine34_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   7900         MOV     R1,#0x0
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   AA82         MOV     R2,DPL
   \   00000C   AB83         MOV     R3,DPH
   \   00000E   12....       LCALL   ??osal_memset?relay
   \   000011                ; Setup parameters for call to function osal_nv_item_init
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   8582..       MOV     ?V0 + 0,DPL
   \   00001A   8583..       MOV     ?V0 + 1,DPH
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   22           RET
    951          
    952          /*********************************************************************
    953           * @fn      ZDAppCheckForHoldKey()
    954           *
    955           * @brief   Check for key to set the device into Hold Auto Start
    956           *
    957           * @param   none
    958           *
    959           * @return  none
    960           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    961          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
    962          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    963          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    964            // Get Keypad directly to see if a HOLD_START is needed.
    965            // Hold down the SW_BYPASS_START key (see OnBoard.h)
    966            // while booting to avoid starting up the device.
    967            if ( HalKeyRead () == SW_BYPASS_START)
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay
   \   000007   E9           MOV     A,R1
   \   000008   6401         XRL     A,#0x1
   \   00000A   7005         JNZ     ??ZDAppCheckForHoldKey_0
    968            {
    969              // Change the device state to HOLD on start up
    970              devState = DEV_HOLD;
   \   00000C   E4           CLR     A
   \   00000D   90....       MOV     DPTR,#devState
   \   000010   F0           MOVX    @DPTR,A
    971            }
    972          #endif // HAL_KEY
    973          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000011   02....       LJMP    ??Subroutine31_0 & 0xFFFF
    974          
    975          /*********************************************************************
    976           * @fn      ZDApp_ProcessOSALMsg()
    977           *
    978           * @brief   Process the incoming task message.
    979           *
    980           * @param   msgPtr - message to process
    981           *
    982           * @return  none
    983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    984          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
    985          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    986            // Data Confirmation message fields
    987            uint8 sentEP;       // This should always be 0
    988            uint8 sentStatus;
    989            afDataConfirm_t *afDataConfirm;
    990            uint8 tmp;
    991          
    992            switch ( msgPtr->event )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   E0           MOVX    A,@DPTR
   \   000013   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessOSALMsg>_0`:
   \   000016   00           DB        0
   \   000017   06           DB        6
   \   000018   01           DB        1
   \   000019   ....         DW        ??ZDApp_ProcessOSALMsg_0
   \   00001B   02           DB        2
   \   00001C   ....         DW        ??ZDApp_ProcessOSALMsg_1
   \   00001E   03           DB        3
   \   00001F   ....         DW        ??ZDApp_ProcessOSALMsg_2
   \   000021   1A           DB        26
   \   000022   ....         DW        ??ZDApp_ProcessOSALMsg_3
   \   000024   D3           DB        211
   \   000025   ....         DW        ??ZDApp_ProcessOSALMsg_4
   \   000027   FD           DB        253
   \   000028   ....         DW        ??ZDApp_ProcessOSALMsg_5
   \   00002A   ....         DW        ??ZDApp_ProcessOSALMsg_6
    993            {
    994              // Incoming ZDO Message
    995              case AF_INCOMING_MSG_CMD:
    996                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   00002C                ; Setup parameters for call to function ZDP_IncomingData
   \   00002C   12....       LCALL   ??ZDP_IncomingData?relay
   \   00002F   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
    997                break;
    998          
    999              case ZDO_CB_MSG:
   1000                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000032                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000032   12....       LCALL   ??ZDApp_ProcessMsgCBs?relay
   \   000035   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1001                break;
   1002          
   1003              case AF_DATA_CONFIRM_CMD:
   1004                // This message is received as a confirmation of a data packet sent.
   1005                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1006                // The message fields are defined in AF.h
   1007                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1008                sentEP = afDataConfirm->endpoint;
   1009                sentStatus = afDataConfirm->hdr.status;
   1010          
   1011                // Action taken when confirmation is received.
   1012          #if defined ( ZIGBEE_FREQ_AGILITY )
   1013                if ( pZDNwkMgr_ProcessDataConfirm )
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   000038   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   7002         JNZ     ??ZDApp_ProcessOSALMsg_7
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   000040   7003         JNZ     $+5
   \   000042   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1014                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   000045                ; Setup parameters for indirect call
   \   000045   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   000048   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00004B   12....       LCALL   ?CALL_IND
   \   00004E   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1015          #endif
   1016                (void)sentEP;
   1017                (void)sentStatus;
   1018                break;
   1019          
   1020              case ZDO_NWK_DISC_CNF:
   1021                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000051   90....       MOV     DPTR,#devState
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6402         XRL     A,#0x2
   \   000057   6003         JZ      $+5
   \   000059   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1022                  break;
   1023          
   1024                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   00005C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   6401         XRL     A,#0x1
   \   000062   6008         JZ      ??ZDApp_ProcessOSALMsg_8
   \   000064   E0           MOVX    A,@DPTR
   \   000065   6402         XRL     A,#0x2
   \   000067   6003         JZ      $+5
   \   000069   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1025                {
   1026                  if ( (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status == ZDO_SUCCESS) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   6003         JZ      $+5
   \   000074   02....       LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   \   000077   90....       MOV     DPTR,#zdoDiscCounter
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   C3           CLR     C
   \   00007C   9403         SUBB    A,#0x3
   \   00007E   5003         JNC     $+5
   \   000080   02....       LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   1027                  {
   1028                    if ( devStartMode == MODE_JOIN )
   \   000083   EE           MOV     A,R6
   \   000084   2404         ADD     A,#0x4
   \   000086   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000089   2403         ADD     A,#0x3
   \   00008B   18           DEC     R0
   \   00008C   EF           MOV     A,R7
   \   00008D   3400         ADDC    A,#0x0
   \   00008F   F9           MOV     R1,A
   \   000090   88..         MOV     ?V0 + 2,R0
   \   000092   89..         MOV     ?V0 + 3,R1
   \   000094   EE           MOV     A,R6
   \   000095   2402         ADD     A,#0x2
   \   000097   18           DEC     R0
   \   000098   EF           MOV     A,R7
   \   000099   3400         ADDC    A,#0x0
   \   00009B   F9           MOV     R1,A
   \   00009C   88..         MOV     ?V0 + 4,R0
   \   00009E   89..         MOV     ?V0 + 5,R1
   \   0000A0   90....       MOV     DPTR,#devStartMode
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   703E         JNZ     ??ZDApp_ProcessOSALMsg_10
   1029                    {
   1030                      devState = DEV_NWK_JOINING;
   \   0000A6   7403         MOV     A,#0x3
   \   0000A8   90....       MOV     DPTR,#devState
   \   0000AB   F0           MOVX    @DPTR,A
   1031          
   1032                      ZDApp_NodeProfileSync((ZDO_NetworkDiscoveryCfm_t *)msgPtr);
   \   0000AC                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   0000AC   12....       LCALL   ??ZDApp_NodeProfileSync?relay
   1033          
   1034                      if ( NLME_JoinRequest( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->extendedPANID,
   1035                           BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB ),
   1036                           ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel,
   1037                           ZDO_Config_Node_Descriptor.CapabilityFlags ) != ZSuccess )
   \   0000AF                ; Setup parameters for call to function NLME_JoinRequest
   \   0000AF   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F5..         MOV     ?V0 + 6,A
   \   0000B5   78..         MOV     R0,#?V0 + 6
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BA   85..82       MOV     DPL,?V0 + 0
   \   0000BD   85..83       MOV     DPH,?V0 + 1
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F9           MOV     R1,A
   \   0000C2   85..82       MOV     DPL,?V0 + 4
   \   0000C5   85..83       MOV     DPH,?V0 + 5
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   FC           MOV     R4,A
   \   0000CA   85..82       MOV     DPL,?V0 + 2
   \   0000CD   85..83       MOV     DPH,?V0 + 3
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   FD           MOV     R5,A
   \   0000D2   EE           MOV     A,R6
   \   0000D3   2406         ADD     A,#0x6
   \   0000D5   FA           MOV     R2,A
   \   0000D6   EF           MOV     A,R7
   \   0000D7   3400         ADDC    A,#0x0
   \   0000D9   FB           MOV     R3,A
   \   0000DA   12....       LCALL   ??NLME_JoinRequest?relay
   \   0000DD   7401         MOV     A,#0x1
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E2   807A         SJMP    ??ZDApp_ProcessOSALMsg_11
   1038                      {
   1039                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1040                            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1041                      }
   1042                    }
   1043                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0000E4   6403         XRL     A,#0x3
   \   0000E6   707C         JNZ     ??CrossCallReturnLabel_23
   1044                    {
   1045                      devState = DEV_NWK_REJOIN;
   \   0000E8   7404         MOV     A,#0x4
   \   0000EA   90....       MOV     DPTR,#devState
   \   0000ED   F0           MOVX    @DPTR,A
   1046          
   1047                      // Before trying to do rejoin, check if the device has a valid short address
   1048                      // If not, generate a random short address for itself
   1049                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   0000EE   90....       MOV     DPTR,#(_NIB + 20)
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   64FE         XRL     A,#0xfe
   \   0000F4   7004         JNZ     ??ZDApp_ProcessOSALMsg_12
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   0000FA   7012         JNZ     ??ZDApp_ProcessOSALMsg_13
   1050                      {
   1051                        _NIB.nwkDevAddress = osal_rand();
   \   0000FC                ; Setup parameters for call to function osal_rand
   \   0000FC   12....       LCALL   ??osal_rand?relay
   \   0000FF   90....       MOV     DPTR,#(_NIB + 20)
   \   000102   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   1052                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \                     ??CrossCallReturnLabel_70:
   \   000105                ; Setup parameters for call to function ZMacSetReq
   \   000105   7A..         MOV     R2,#((_NIB + 20) & 0xff)
   \   000107   7B..         MOV     R3,#(((_NIB + 20) >> 8) & 0xff)
   \   000109   7953         MOV     R1,#0x53
   \   00010B   12....       LCALL   ??ZMacSetReq?relay
   1053                      }
   1054          
   1055                      if ( ZG_SECURE_ENABLED )
   1056                      {
   1057                        ZDApp_RestoreNwkKey();
   1058                      }
   1059          
   1060                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1061                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   00010E   90....       MOV     DPTR,#(_NIB + 33)
   \   000111   E0           MOVX    A,@DPTR
   \   000112   64FE         XRL     A,#0xfe
   \   000114   7004         JNZ     ??ZDApp_ProcessOSALMsg_14
   \   000116   A3           INC     DPTR
   \   000117   E0           MOVX    A,@DPTR
   \   000118   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   00011A   7021         JNZ     ??ZDApp_ProcessOSALMsg_15
   1062                      {
   1063                        _NIB.nwkPanId = BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB );
   \   00011C   85..82       MOV     DPL,?V0 + 4
   \   00011F   85..83       MOV     DPH,?V0 + 5
   \   000122   E0           MOVX    A,@DPTR
   \   000123   FA           MOV     R2,A
   \   000124   85..82       MOV     DPL,?V0 + 2
   \   000127   85..83       MOV     DPH,?V0 + 3
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   F9           MOV     R1,A
   \   00012C   EA           MOV     A,R2
   \   00012D   90....       MOV     DPTR,#(_NIB + 33)
   \   000130   F0           MOVX    @DPTR,A
   \   000131   A3           INC     DPTR
   \   000132   E9           MOV     A,R1
   \   000133   F0           MOVX    @DPTR,A
   1064                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \   000134                ; Setup parameters for call to function ZMacSetReq
   \   000134   7A..         MOV     R2,#((_NIB + 33) & 0xff)
   \   000136   7B..         MOV     R3,#(((_NIB + 33) >> 8) & 0xff)
   \   000138   7950         MOV     R1,#0x50
   \   00013A   12....       LCALL   ??ZMacSetReq?relay
   1065                      }
   1066          
   1067                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   00013D   7401         MOV     A,#0x1
   \   00013F   85..82       MOV     DPL,?XSP + 0
   \   000142   85..83       MOV     DPH,?XSP + 1
   \   000145   F0           MOVX    @DPTR,A
   1068                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   000146                ; Setup parameters for call to function ZMacSetReq
   \   000146   AA82         MOV     R2,DPL
   \   000148   AB83         MOV     R3,DPH
   \   00014A   7952         MOV     R1,#0x52
   \   00014C   12....       LCALL   ??ZMacSetReq?relay
   1069                      if ( NLME_ReJoinRequest( ZDO_UseExtendedPANID, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel) != ZSuccess )
   \   00014F                ; Setup parameters for call to function NLME_ReJoinRequest
   \   00014F   85..82       MOV     DPL,?V0 + 0
   \   000152   85..83       MOV     DPH,?V0 + 1
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F9           MOV     R1,A
   \   000157   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000159   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   00015B   12....       LCALL   ??NLME_ReJoinRequest?relay
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   00015E   E9           MOV     A,R1
   \   00015F   6003         JZ      ??CrossCallReturnLabel_23
   1070                      {
   1071                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1072                            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   000161                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000161                ; Setup parameters for call to function osal_rand
   \   000161   12....       LCALL   ?Subroutine13 & 0xFFFF
   1073                      }
   1074                    }
   1075          
   1076                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_23:
   \   000164   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000167   E0           MOVX    A,@DPTR
   \   000168   A2E3         MOV     C,0xE0 /* A   */.3
   \   00016A   5062         JNC     ??ZDApp_ProcessOSALMsg_6
   1077                    {
   1078                      // The receiver is on, turn network layer polling off.
   1079                      NLME_SetPollRate( 0 );
   \   00016C                ; Setup parameters for call to function NLME_SetPollRate
   \   00016C   12....       LCALL   ?Subroutine14 & 0xFFFF
   1080                      NLME_SetQueuedPollRate( 0 );
   1081                      NLME_SetResponseRate( 0 );
   1082                    }
   1083                    else
   1084                    {
   1085                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1086                      {
   1087                        ZDApp_SavedPollRate = zgPollRate;
   1088                        NLME_SetPollRate( zgRejoinPollRate );
   1089                      }
   1090                    }
   1091                  }
   \                     ??CrossCallReturnLabel_25:
   \   00016F   805D         SJMP    ??ZDApp_ProcessOSALMsg_6
   1092                  else
   1093                  {
   1094                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   000171   90....       MOV     DPTR,#continueJoining
   \   000174   E0           MOVX    A,@DPTR
   \   000175   6057         JZ      ??ZDApp_ProcessOSALMsg_6
   1095                    {
   1096              #if defined ( MANAGED_SCAN )
   1097                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1098              #else
   1099                      zdoDiscCounter++;
   \   000177   90....       MOV     DPTR,#zdoDiscCounter
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   04           INC     A
   \   00017C   F0           MOVX    @DPTR,A
   1100                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1101                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   00017D                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00017D                ; Setup parameters for call to function osal_rand
   \   00017D   12....       LCALL   ??osal_rand?relay
   \   000180   8A..         MOV     ?V0 + 0,R2
   \   000182   74FF         MOV     A,#-0x1
   \   000184   55..         ANL     A,?V0 + 0
   \   000186   F8           MOV     R0,A
   \   000187   7464         MOV     A,#0x64
   \   000189   28           ADD     A,R0
   \   00018A   FA           MOV     R2,A
   \   00018B   E4           CLR     A
   \   00018C   3400         ADDC    A,#0x0
   \   00018E   FB           MOV     R3,A
   \   00018F   803A         SJMP    ??ZDApp_ProcessOSALMsg_16
   1102              #endif
   1103                    }
   1104                  }
   1105                }
   1106                break;
   1107          
   1108              case ZDO_NWK_JOIN_IND:
   1109                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000191   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000194   E0           MOVX    A,@DPTR
   \   000195   6401         XRL     A,#0x1
   \   000197   6005         JZ      ??ZDApp_ProcessOSALMsg_17
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   6402         XRL     A,#0x2
   \   00019C   7030         JNZ     ??ZDApp_ProcessOSALMsg_6
   1110                {
   1111                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   00019E                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   00019E   12....       LCALL   ??ZDApp_ProcessNetworkJoin?relay
   \   0001A1   802B         SJMP    ??ZDApp_ProcessOSALMsg_6
   1112                }
   1113                break;
   1114          
   1115              case ZDO_NWK_JOIN_REQ:
   1116                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   0001A3   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   6401         XRL     A,#0x1
   \   0001A9   6005         JZ      ??ZDApp_ProcessOSALMsg_18
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   6402         XRL     A,#0x2
   \   0001AE   701E         JNZ     ??ZDApp_ProcessOSALMsg_6
   1117                {
   1118                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_18:
   \   0001B0   E4           CLR     A
   \   0001B1   90....       MOV     DPTR,#retryCnt
   \   0001B4   F0           MOVX    @DPTR,A
   1119                  devStartMode = MODE_RESUME;
   \   0001B5   7401         MOV     A,#0x1
   \   0001B7   90....       MOV     DPTR,#devStartMode
   \   0001BA   F0           MOVX    @DPTR,A
   1120                  _tmpRejoinState = true;
   \   0001BB   90....       MOV     DPTR,#_tmpRejoinState
   \   0001BE   12....       LCALL   ?Subroutine1 & 0xFFFF
   1121                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1122                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \                     ??CrossCallReturnLabel_1:
   \   0001C1   7402         MOV     A,#0x2
   \   0001C3   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   0001C6   F0           MOVX    @DPTR,A
   1123                  ZDApp_NetworkInit( 0 );
   \   0001C7                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001C7   7A00         MOV     R2,#0x0
   \   0001C9   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   0001CB   12....       LCALL   ??ZDApp_NetworkInit?relay
   1124                }
   1125                break;
   1126          
   1127              default:
   1128                if ( ZG_SECURE_ENABLED )
   1129                  ZDApp_ProcessSecMsg( msgPtr );
   1130                break;
   1131            }
   1132          
   1133          }
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   0001CE   7401         MOV     A,#0x1
   \   0001D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D3   7F07         MOV     R7,#0x7
   \   0001D5   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7B00         MOV     R3,#0x0
   \   000004   12....       LCALL   ??NLME_SetPollRate?relay
   \   000007                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000007                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   12....       LCALL   ??NLME_SetQueuedPollRate?relay
   \   00000E                ; Setup parameters for call to function NLME_SetResponseRate
   \   00000E                ; Setup parameters for call to function NLME_SetResponseRate
   \   00000E   7A00         MOV     R2,#0x0
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   ??NLME_SetResponseRate?relay
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ??osal_rand?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   747F         MOV     A,#0x7f
   \   000007   55..         ANL     A,?V0 + 0
   \   000009   F8           MOV     R0,A
   \   00000A   7464         MOV     A,#0x64
   \   00000C   28           ADD     A,R0
   \   00000D   FA           MOV     R2,A
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   12....       LCALL   ??ZDApp_NetworkInit?relay
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F8           MOV     R0,A
   \   000001   EF           MOV     A,R7
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   88..         MOV     ?V0 + 0,R0
   \   000007   89..         MOV     ?V0 + 1,R1
   \   000009   EE           MOV     A,R6
   \   00000A   22           RET
   1134          
   1135          /*********************************************************************
   1136           * @fn      ZDApp_ProcessMsgCBs()
   1137           *
   1138           * @brief   Process response messages
   1139           *
   1140           * @param   none
   1141           *
   1142           * @return  none
   1143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1144          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1145          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV     A,#-0x2c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1146            switch ( inMsg->clusterID )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000014   F5..         MOV     ?V0 + 0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 1,A
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   00001F   0300         DW        3
   \   000021   2100         DW        33
   \   000023   2200         DW        34
   \   000025   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000027   0080         DW        32768
   \   000029   0180         DW        32769
   \   00002B   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   00002D   2180         DW        32801
   \   00002F   2280         DW        32802
   \   000031   ....         DW        ??ZDApp_ProcessMsgCBs_2
   \   000033   0100         DW        1
   \   000035   2000         DW        32
   \   000037   ....         DW        ??ZDApp_ProcessMsgCBs_3
   \   000039   ....         DW        ??ZDApp_ProcessMsgCBs_4
   1147            {
   1148          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1149              case NWK_addr_rsp:
   1150              case IEEE_addr_rsp:
   1151                {
   1152                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1153                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00003B                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00003B   12....       LCALL   ??ZDO_ParseAddrRsp?relay
   \   00003E   8A..         MOV     ?V0 + 0,R2
   \   000040   8B..         MOV     ?V0 + 1,R3
   \   000042   AE..         MOV     R6,?V0 + 0
   \   000044   AF..         MOV     R7,?V0 + 1
   1154                  if ( pAddrRsp )
   \   000046   EE           MOV     A,R6
   \   000047   7001         JNZ     ??ZDApp_ProcessMsgCBs_5
   \   000049   EF           MOV     A,R7
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   00004A   7003         JNZ     $+5
   \   00004C   02....       LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1155                  {
   1156                    if ( pAddrRsp->status == ZSuccess )
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   E0           MOVX    A,@DPTR
   \   000054   700F         JNZ     ??ZDApp_ProcessMsgCBs_6
   1157                    {
   1158                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000056                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000056   EE           MOV     A,R6
   \   000057   2403         ADD     A,#0x3
   \   000059   FC           MOV     R4,A
   \   00005A   EF           MOV     A,R7
   \   00005B   3400         ADDC    A,#0x0
   \   00005D   FD           MOV     R5,A
   \   00005E   A3           INC     DPTR
   \   00005F   12....       LCALL   ?Subroutine7 & 0xFFFF
   1159                    }
   \                     ??CrossCallReturnLabel_8:
   \   000062   12....       LCALL   ??ZDO_UpdateAddrManager?relay
   1160                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_6:
   \   000065                ; Setup parameters for call to function osal_mem_free
   \   000065   EE           MOV     A,R6
   \   000066   FA           MOV     R2,A
   \   000067   EF           MOV     A,R7
   \   000068   02....       LJMP    ??ZDApp_ProcessMsgCBs_7 & 0xFFFF
   1161                  }
   1162                }
   1163                break;
   1164          #endif
   1165          
   1166          #if defined ( REFLECTOR )
   1167              case Bind_req:
   1168              case Unbind_req:
   1169                {
   1170                  ZDO_BindUnbindReq_t bindReq;
   1171                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   00006B                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   00006B   7417         MOV     A,#0x17
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   AC82         MOV     R4,DPL
   \   000072   AD83         MOV     R5,DPH
   \   000074   12....       LCALL   ??ZDO_ParseBindUnbindReq?relay
   1172                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000077                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000077   7417         MOV     A,#0x17
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   AC82         MOV     R4,DPL
   \   00007E   AD83         MOV     R5,DPH
   \   000080   EE           MOV     A,R6
   \   000081   FA           MOV     R2,A
   \   000082   EF           MOV     A,R7
   \   000083   FB           MOV     R3,A
   \   000084   12....       LCALL   ??ZDO_ProcessBindUnbindReq?relay
   \   000087   02....       LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1173                }
   1174                break;
   1175          #endif
   1176          
   1177          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1178              case Bind_rsp:
   1179              case Unbind_rsp:
   1180                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   00008A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   707C         JNZ     ??ZDApp_ProcessMsgCBs_4
   \   000090   90....       MOV     DPTR,#matchED
   \   000093   E0           MOVX    A,@DPTR
   \   000094   7002         JNZ     ??ZDApp_ProcessMsgCBs_8
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \                     ??ZDApp_ProcessMsgCBs_8:
   \   000098   6072         JZ      ??ZDApp_ProcessMsgCBs_4
   1181                {
   1182                  ZDMatchSendState(
   1183                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1184                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   \   00009A   7421         MOV     A,#0x21
   \   00009C   65..         XRL     A,?V0 + 0
   \   00009E   7004         JNZ     ??ZDApp_ProcessMsgCBs_9
   \   0000A0   7480         MOV     A,#-0x80
   \   0000A2   65..         XRL     A,?V0 + 1
   \                     ??ZDApp_ProcessMsgCBs_9:
   \   0000A4   7004         JNZ     ??ZDApp_ProcessMsgCBs_10
   \   0000A6   7903         MOV     R1,#0x3
   \   0000A8   8002         SJMP    ??ZDApp_ProcessMsgCBs_11
   \                     ??ZDApp_ProcessMsgCBs_10:
   \   0000AA   7902         MOV     R1,#0x2
   \                     ??ZDApp_ProcessMsgCBs_11:
   \   0000AC                ; Setup parameters for call to function ZDMatchSendState
   \   0000AC   12....       LCALL   ?Subroutine16 & 0xFFFF
   1185                }
   \                     ??CrossCallReturnLabel_66:
   \   0000AF   FB           MOV     R3,A
   \   0000B0   EE           MOV     A,R6
   \   0000B1   2413         ADD     A,#0x13
   \   0000B3   F582         MOV     DPL,A
   \   0000B5   EF           MOV     A,R7
   \   0000B6   3400         ADDC    A,#0x0
   \   0000B8   F583         MOV     DPH,A
   \   0000BA   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   FA           MOV     R2,A
   \   0000BF   12....       LCALL   ??ZDMatchSendState?relay
   \   0000C2   8048         SJMP    ??ZDApp_ProcessMsgCBs_4
   1186                break;
   1187          
   1188              case End_Device_Bind_req:
   1189                if (ZG_DEVICE_COORDINATOR_TYPE)
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   0000C4   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   7042         JNZ     ??ZDApp_ProcessMsgCBs_4
   1190                {
   1191                  ZDEndDeviceBind_t bindReq;
   1192                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   \   0000CA                ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
   \   0000CA   85..82       MOV     DPL,?XSP + 0
   \   0000CD   85..83       MOV     DPH,?XSP + 1
   \   0000D0   AC82         MOV     R4,DPL
   \   0000D2   AD83         MOV     R5,DPH
   \   0000D4   12....       LCALL   ??ZDO_ParseEndDeviceBindReq?relay
   1193                  ZDO_MatchEndDeviceBind( &bindReq );
   \   0000D7                ; Setup parameters for call to function ZDO_MatchEndDeviceBind
   \   0000D7   85..82       MOV     DPL,?XSP + 0
   \   0000DA   85..83       MOV     DPH,?XSP + 1
   \   0000DD   AA82         MOV     R2,DPL
   \   0000DF   AB83         MOV     R3,DPH
   \   0000E1   12....       LCALL   ??ZDO_MatchEndDeviceBind?relay
   1194          
   1195                  // Freeing the cluster lists - if allocated.
   1196                  if ( bindReq.numInClusters )
   \   0000E4   7411         MOV     A,#0x11
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   600B         JZ      ??ZDApp_ProcessMsgCBs_12
   1197                    osal_mem_free( bindReq.inClusters );
   \   0000EC                ; Setup parameters for call to function osal_mem_free
   \   0000EC   7412         MOV     A,#0x12
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000F4   12....       LCALL   ??osal_mem_free?relay
   1198                  if ( bindReq.numOutClusters )
   \                     ??ZDApp_ProcessMsgCBs_12:
   \   0000F7   7414         MOV     A,#0x14
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   600D         JZ      ??ZDApp_ProcessMsgCBs_4
   1199                    osal_mem_free( bindReq.outClusters );
   \   0000FF                ; Setup parameters for call to function osal_mem_free
   \   0000FF   7415         MOV     A,#0x15
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   E0           MOVX    A,@DPTR
   \   000105   FA           MOV     R2,A
   \   000106   A3           INC     DPTR
   \   000107   E0           MOVX    A,@DPTR
   \                     ??ZDApp_ProcessMsgCBs_7:
   \   000108   FB           MOV     R3,A
   \   000109   12....       LCALL   ??osal_mem_free?relay
   1200                }
   1201                break;
   1202          #endif
   1203            }
   1204          }
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   00010C   742C         MOV     A,#0x2c
   \   00010E   02....       LJMP    ??Subroutine34_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003                REQUIRE ??Subroutine32_0
   \   000003                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine33_0
   \   000003                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
   1205          
   1206          /*********************************************************************
   1207           * @fn      ZDApp_RegisterCBs()
   1208           *
   1209           * @brief   Process response messages
   1210           *
   1211           * @param   none
   1212           *
   1213           * @return  none
   1214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1215          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1216          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1217          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1218            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   12....       LCALL   ?Subroutine5 & 0xFFFF
   1219          #endif
   1220          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1221            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \                     ??CrossCallReturnLabel_46:
   \   000009                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000009   7A00         MOV     R2,#0x0
   \   00000B   12....       LCALL   ?Subroutine5 & 0xFFFF
   1222          #endif
   1223          #if ZG_BUILD_COORDINATOR_TYPE
   1224            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   \                     ??CrossCallReturnLabel_47:
   \   00000E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000E   7A21         MOV     R2,#0x21
   \   000010   12....       LCALL   ?Subroutine5 & 0xFFFF
   1225            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   \                     ??CrossCallReturnLabel_48:
   \   000013                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000013   7A22         MOV     R2,#0x22
   \   000015   12....       LCALL   ?Subroutine5 & 0xFFFF
   1226            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   \                     ??CrossCallReturnLabel_49:
   \   000018                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000018   7A20         MOV     R2,#0x20
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   1227          #endif
   1228          #if defined ( REFLECTOR )
   1229            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \                     ??CrossCallReturnLabel_50:
   \   00001F                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001F   7A21         MOV     R2,#0x21
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   1230            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \                     ??CrossCallReturnLabel_51:
   \   000026                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000026   7A22         MOV     R2,#0x22
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   1231          #endif
   1232          }
   \                     ??CrossCallReturnLabel_52:
   \   00002D   02....       LJMP    ??Subroutine31_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7B80         MOV     R3,#-0x80
   \   000002                REQUIRE ??Subroutine28_0
   \   000002                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   \   000008   22           RET
   1233          
   1234          /*********************************************************************
   1235           * @fn      ZDApp_ProcessSecMsg()
   1236           *
   1237           * @brief   Process the incoming security message.
   1238           *
   1239           * @param   msgPtr - message to process
   1240           *
   1241           * @return  none
   1242           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1243          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1244          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1245            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessSecMsg>_0`:
   \   00000C   00           DB        0
   \   00000D   03           DB        3
   \   00000E   06           DB        6
   \   00000F   ....         DW        ??ZDApp_ProcessSecMsg_0
   \   000011   07           DB        7
   \   000012   ....         DW        ??ZDApp_ProcessSecMsg_1
   \   000014   0A           DB        10
   \   000015   ....         DW        ??ZDApp_ProcessSecMsg_2
   \   000017   ....         DW        ??ZDApp_ProcessSecMsg_3
   1246            {
   1247              case ZDO_ESTABLISH_KEY_CFM:
   1248                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1249                {
   1250                  ZDSecMgrEstablishKeyCfm( (ZDO_EstablishKeyCfm_t*)msgPtr );
   1251                }
   1252                break;
   1253          
   1254              case ZDO_ESTABLISH_KEY_IND:
   1255                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1256                {
   1257                  if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1258                  {
   1259                    ZDSecMgrEstablishKeyInd( (ZDO_EstablishKeyInd_t*)msgPtr );
   1260                  }
   1261                }
   1262                break;
   1263          
   1264              case ZDO_TRANSPORT_KEY_IND:
   1265                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000019   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6402         XRL     A,#0x2
   \   000024   7020         JNZ     ??ZDApp_ProcessSecMsg_3
   1266                {
   1267                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000026                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000026   12....       LCALL   ??ZDSecMgrTransportKeyInd?relay
   \   000029   801B         SJMP    ??ZDApp_ProcessSecMsg_3
   1268                }
   1269                break;
   1270          
   1271              case ZDO_UPDATE_DEVICE_IND:
   1272                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   00002B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   7015         JNZ     ??ZDApp_ProcessSecMsg_3
   1273                {
   1274                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   \   000031                ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
   \   000031   12....       LCALL   ??ZDSecMgrUpdateDeviceInd?relay
   \   000034   8010         SJMP    ??ZDApp_ProcessSecMsg_3
   1275                }
   1276                break;
   1277          
   1278              case ZDO_REMOVE_DEVICE_IND:
   1279                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1280                {
   1281                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1282                }
   1283                break;
   1284          
   1285              case ZDO_REQUEST_KEY_IND:
   1286                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1287                {
   1288                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1289                  {
   1290                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1291                  }
   1292                }
   1293                break;
   1294          
   1295              case ZDO_SWITCH_KEY_IND:
   1296                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000036   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6401         XRL     A,#0x1
   \   00003C   6005         JZ      ??ZDApp_ProcessSecMsg_5
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6402         XRL     A,#0x2
   \   000041   7003         JNZ     ??ZDApp_ProcessSecMsg_3
   1297                {
   1298                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_5:
   \   000043                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000043   12....       LCALL   ??ZDSecMgrSwitchKeyInd?relay
   1299                }
   1300                break;
   1301          
   1302              case ZDO_AUTHENTICATE_IND:
   1303                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1304                {
   1305                  ZDSecMgrAuthenticateInd( (ZDO_AuthenticateInd_t*)msgPtr );
   1306                }
   1307                break;
   1308          
   1309              case ZDO_AUTHENTICATE_CFM:
   1310                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1311                {
   1312                  ZDSecMgrAuthenticateCfm( (ZDO_AuthenticateCfm_t*)msgPtr );
   1313                }
   1314                break;
   1315          
   1316              default:
   1317                // Unsupported messages
   1318                break;
   1319            }
   1320          }
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000046   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   1321          
   1322          /*********************************************************************
   1323           * @fn      ZDApp_ProcessNetworkJoin()
   1324           *
   1325           * @brief
   1326           *
   1327           *   Save off the Network key information.
   1328           *
   1329           * @param   none
   1330           *
   1331           * @return  none
   1332           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1333          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1334          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1335            if ( (devState == DEV_NWK_JOINING) ||
   1336                ((devState == DEV_NWK_ORPHAN)  &&
   1337                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1338            {
   1339              // Result of a Join attempt by this device.
   1340              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   7054         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1341              {
   1342                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   12....       LCALL   ?Subroutine4 & 0xFFFF
   1343          
   1344          #if defined ( POWER_SAVING )
   1345                osal_pwrmgr_device( PWRMGR_BATTERY );
   1346          #endif
   1347          
   1348                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   1349                {
   1350                  // wait for auth from trust center!!
   1351                  devState = DEV_END_DEVICE_UNAUTH;
   1352          
   1353                  // Start the reset timer for MAX UNAUTH time
   1354                  ZDApp_ResetTimerStart( 10000 );//MAX_DEVICE_UNAUTH_TIMEOUT );
   1355                }
   1356                else
   1357                {
   1358                  if ( ZSTACK_ROUTER_BUILD )
   \                     ??CrossCallReturnLabel_36:
   \   000030   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6004         JZ      ??ZDApp_ProcessNetworkJoin_4
   \   000036   6401         XRL     A,#0x1
   \   000038   7015         JNZ     ??ZDApp_ProcessNetworkJoin_5
   1359                  {
   1360                    if ( devState == DEV_NWK_ORPHAN
   1361                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   00003A   90....       MOV     DPTR,#devState
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   640A         XRL     A,#0xa
   \   000040   700D         JNZ     ??ZDApp_ProcessNetworkJoin_5
   \   000042   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000045   6013         JZ      ??ZDApp_ProcessNetworkJoin_6
   1362                    {
   1363                      // Change NIB state to router for restore
   1364                      _NIB.nwkState = NWK_ROUTER;
   \   000047   7408         MOV     A,#0x8
   \   000049   90....       MOV     DPTR,#(_NIB + 35)
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   800B         SJMP    ??ZDApp_ProcessNetworkJoin_6
   1365                    }
   1366                  }
   1367          
   1368                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   00004F   90....       MOV     DPTR,#devState
   \   000052   E0           MOVX    A,@DPTR
   \   000053   6403         XRL     A,#0x3
   \   000055   7003         JNZ     ??ZDApp_ProcessNetworkJoin_6
   1369                  {
   1370                    ZDApp_AnnounceNewAddress();
   \   000057                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000057   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1371                  }
   1372          
   1373                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00005A   7406         MOV     A,#0x6
   \   00005C   90....       MOV     DPTR,#devState
   \   00005F   F0           MOVX    @DPTR,A
   1374                  if ( ZSTACK_ROUTER_BUILD )
   \   000060   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000063   E0           MOVX    A,@DPTR
   \   000064   6007         JZ      ??ZDApp_ProcessNetworkJoin_7
   \   000066   6401         XRL     A,#0x1
   \   000068   6003         JZ      $+5
   \   00006A   02....       LJMP    ??CrossCallReturnLabel_24 & 0xFFFF
   1375                  {
   1376                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1377                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   00006D   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000070   7003         JNZ     $+5
   \   000072   02....       LJMP    ??CrossCallReturnLabel_24 & 0xFFFF
   1378                    {
   1379                      NLME_StartRouterRequest( 0, 0, false );
   \   000075                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000075   7B00         MOV     R3,#0x0
   \   000077   7A00         MOV     R2,#0x0
   \   000079   7900         MOV     R1,#0x0
   \   00007B   12....       LCALL   ??NLME_StartRouterRequest?relay
   \   00007E   02....       LJMP    ??CrossCallReturnLabel_24 & 0xFFFF
   1380                    }
   1381                  }
   1382                }
   1383              }
   1384              else
   1385              {
   1386                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000081   90....       MOV     DPTR,#devStartMode
   \   000084   E0           MOVX    A,@DPTR
   \   000085   6401         XRL     A,#0x1
   \   000087   7031         JNZ     ??ZDApp_ProcessNetworkJoin_8
   \   000089   90....       MOV     DPTR,#retryCnt
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   04           INC     A
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   C3           CLR     C
   \   000090   9403         SUBB    A,#0x3
   \   000092   4026         JC      ??ZDApp_ProcessNetworkJoin_8
   1387                {
   1388                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000094   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000097   7003         JNZ     ??ZDApp_ProcessNetworkJoin_9
   \   000099   74FF         MOV     A,#-0x1
   \   00009B   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   00009C   600A         JZ      ??ZDApp_ProcessNetworkJoin_10
   \   00009E   74FE         MOV     A,#-0x2
   \   0000A0   68           XRL     A,R0
   \   0000A1   7003         JNZ     ??ZDApp_ProcessNetworkJoin_11
   \   0000A3   74FF         MOV     A,#-0x1
   \   0000A5   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000A6   7006         JNZ     ??ZDApp_ProcessNetworkJoin_12
   1389                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000A8   E4           CLR     A
   \   0000A9   90....       MOV     DPTR,#devStartMode
   \   0000AC   800B         SJMP    ??ZDApp_ProcessNetworkJoin_13
   1390                  else
   1391                  {
   1392                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000AE   7403         MOV     A,#0x3
   \   0000B0   90....       MOV     DPTR,#devStartMode
   \   0000B3   F0           MOVX    @DPTR,A
   1393                    _tmpRejoinState = true;
   \   0000B4   7401         MOV     A,#0x1
   \   0000B6   90....       MOV     DPTR,#_tmpRejoinState
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000B9   F0           MOVX    @DPTR,A
   1394                  }
   1395                }
   1396          
   1397                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1398                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   0000BA                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000BA   12....       LCALL   ??NLME_GetShortAddr?relay
   \   0000BD   8A..         MOV     ?V0 + 0,R2
   \   0000BF   8B..         MOV     ?V0 + 1,R3
   \   0000C1   74FE         MOV     A,#-0x2
   \   0000C3   65..         XRL     A,?V0 + 0
   \   0000C5   7004         JNZ     ??ZDApp_ProcessNetworkJoin_14
   \   0000C7   74FF         MOV     A,#-0x1
   \   0000C9   65..         XRL     A,?V0 + 1
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000CB   700E         JNZ     ??ZDApp_ProcessNetworkJoin_15
   \   0000CD   90....       MOV     DPTR,#(_NIB + 20)
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   64FE         XRL     A,#0xfe
   \   0000D3   7004         JNZ     ??ZDApp_ProcessNetworkJoin_16
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   0000D9   6026         JZ      ??ZDApp_ProcessNetworkJoin_17
   1399                {
   1400                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000DB   85..82       MOV     DPL,?XSP + 0
   \   0000DE   85..83       MOV     DPH,?XSP + 1
   \   0000E1   74FE         MOV     A,#-0x2
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   74FF         MOV     A,#-0x1
   \   0000E7   F0           MOVX    @DPTR,A
   1401                  // Invalidate nwk addr so end device does not use in its data reqs.
   1402                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000E8   90....       MOV     DPTR,#(_NIB + 20)
   \   0000EB   74FE         MOV     A,#-0x2
   \   0000ED   F0           MOVX    @DPTR,A
   \   0000EE   A3           INC     DPTR
   \   0000EF   74FF         MOV     A,#-0x1
   \   0000F1   F0           MOVX    @DPTR,A
   1403                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000F2                ; Setup parameters for call to function ZMacSetReq
   \   0000F2   85..82       MOV     DPL,?XSP + 0
   \   0000F5   85..83       MOV     DPH,?XSP + 1
   \   0000F8   AA82         MOV     R2,DPL
   \   0000FA   AB83         MOV     R3,DPH
   \   0000FC   7953         MOV     R1,#0x53
   \   0000FE   12....       LCALL   ??ZMacSetReq?relay
   1404                }
   1405          
   1406                // Clear the neighbor Table and network discovery tables.
   1407                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   000101                ; Setup parameters for call to function nwkNeighborInitTable
   \   000101   12....       LCALL   ??nwkNeighborInitTable?relay
   1408                NLME_NwkDiscTerm();
   \   000104                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000104   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1409          
   1410                zdoDiscCounter = 1;
   \   000107   7401         MOV     A,#0x1
   \   000109   90....       MOV     DPTR,#zdoDiscCounter
   \   00010C   F0           MOVX    @DPTR,A
   1411          
   1412          //      ZDApp_NetworkInit( (uint16)
   1413          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1414          //                          (NWK_START_DELAY * 5)) );
   1415                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1416                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   00010D                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00010D                ; Setup parameters for call to function osal_rand
   \   00010D   807F         SJMP    ??ZDApp_ProcessNetworkJoin_18
   1417              }
   1418            }
   1419            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   6404         XRL     A,#0x4
   \   000112   707D         JNZ     ??CrossCallReturnLabel_24
   1420            {
   1421              // results of an orphaning attempt by this device
   1422              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   000114   90....       MOV     DPTR,#nwkStatus
   \   000117   E0           MOVX    A,@DPTR
   \   000118   702B         JNZ     ??ZDApp_ProcessNetworkJoin_19
   1423              {
   1424                if ( ZG_SECURE_ENABLED )
   1425                {
   1426                  ZDApp_RestoreNwkKey();
   1427                }
   1428          
   1429                devState = DEV_END_DEVICE;
   \   00011A   12....       LCALL   ?Subroutine0 & 0xFFFF
   1430                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   1431                // setup Power Manager Device
   1432          #if defined ( POWER_SAVING )
   1433                osal_pwrmgr_device( PWRMGR_BATTERY );
   1434          #endif
   1435          
   1436                if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_42:
   \   00011D   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000120   E0           MOVX    A,@DPTR
   \   000121   A2E3         MOV     C,0xE0 /* A   */.3
   \   000123   5003         JNC     ??CrossCallReturnLabel_26
   1437                {
   1438                  // The receiver is on, turn network layer polling off.
   1439                  NLME_SetPollRate( 0 );
   \   000125                ; Setup parameters for call to function NLME_SetPollRate
   \   000125   12....       LCALL   ?Subroutine14 & 0xFFFF
   1440                  NLME_SetQueuedPollRate( 0 );
   1441                  NLME_SetResponseRate( 0 );
   1442                }
   1443          
   1444                if ( ZSTACK_ROUTER_BUILD )
   \                     ??CrossCallReturnLabel_26:
   \   000128   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   6004         JZ      ??ZDApp_ProcessNetworkJoin_20
   \   00012E   6401         XRL     A,#0x1
   \   000130   700E         JNZ     ??ZDApp_ProcessNetworkJoin_21
   1445                {
   1446                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1447                  if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   000132   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000135   6009         JZ      ??ZDApp_ProcessNetworkJoin_21
   1448                  {
   1449                    NLME_StartRouterRequest( 0, 0, false );
   \   000137                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000137   7B00         MOV     R3,#0x0
   \   000139   7A00         MOV     R2,#0x0
   \   00013B   7900         MOV     R1,#0x0
   \   00013D   12....       LCALL   ??NLME_StartRouterRequest?relay
   1450                  }
   1451                }
   1452          
   1453                ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   000140                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000140   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   \   000143   804C         SJMP    ??CrossCallReturnLabel_24
   1454              }
   1455              else
   1456              {
   1457                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   000145   90....       MOV     DPTR,#devStartMode
   \   000148   E0           MOVX    A,@DPTR
   \   000149   6401         XRL     A,#0x1
   \   00014B   703B         JNZ     ??ZDApp_ProcessNetworkJoin_22
   1458                {
   1459                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   00014D   90....       MOV     DPTR,#retryCnt
   \   000150   E0           MOVX    A,@DPTR
   \   000151   04           INC     A
   \   000152   F0           MOVX    @DPTR,A
   \   000153   C3           CLR     C
   \   000154   9404         SUBB    A,#0x4
   \   000156   5028         JNC     ??ZDApp_ProcessNetworkJoin_23
   1460                  {
   1461                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000158   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00015B   7003         JNZ     ??ZDApp_ProcessNetworkJoin_24
   \   00015D   74FF         MOV     A,#-0x1
   \   00015F   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   000160   600A         JZ      ??ZDApp_ProcessNetworkJoin_25
   \   000162   74FE         MOV     A,#-0x2
   \   000164   68           XRL     A,R0
   \   000165   7003         JNZ     ??ZDApp_ProcessNetworkJoin_26
   \   000167   74FF         MOV     A,#-0x1
   \   000169   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   00016A   7007         JNZ     ??ZDApp_ProcessNetworkJoin_27
   1462                      devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   00016C   E4           CLR     A
   \   00016D   90....       MOV     DPTR,#devStartMode
   \                     ??ZDApp_ProcessNetworkJoin_28:
   \   000170   F0           MOVX    @DPTR,A
   \   000171   8015         SJMP    ??ZDApp_ProcessNetworkJoin_22
   1463                    else
   1464                    {
   1465                      devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   000173   7403         MOV     A,#0x3
   \   000175   90....       MOV     DPTR,#devStartMode
   \   000178   F0           MOVX    @DPTR,A
   1466                      _tmpRejoinState = true;
   \   000179   7401         MOV     A,#0x1
   \   00017B   90....       MOV     DPTR,#_tmpRejoinState
   \   00017E   80F0         SJMP    ??ZDApp_ProcessNetworkJoin_28
   1467                    }
   1468                  }
   1469                  // Do a normal join to the network after certain times of rejoin retries
   1470                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   000180   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   000183   E0           MOVX    A,@DPTR
   \   000184   6401         XRL     A,#0x1
   \   000186   60E4         JZ      ??ZDApp_ProcessNetworkJoin_25
   1471                  {
   1472                    devStartMode = MODE_JOIN;
   1473                  }
   1474                }
   1475          
   1476                // Clear the neighbor Table and network discovery tables.
   1477                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   000188                ; Setup parameters for call to function nwkNeighborInitTable
   \   000188   12....       LCALL   ??nwkNeighborInitTable?relay
   1478                NLME_NwkDiscTerm();
   \   00018B                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00018B   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1479          
   1480                // setup a retry for later...
   1481                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1482                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   00018E                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00018E                ; Setup parameters for call to function osal_rand
   1483              }
   1484            }
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   00018E   12....       LCALL   ?Subroutine13 & 0xFFFF
   1485          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1486            else
   1487            {
   1488              // Assume from address conflict
   1489              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   1490              {
   1491                // Notify the network
   1492                ZDApp_AnnounceNewAddress();
   1493          
   1494                // Notify apps
   1495                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   1496              }
   1497            }
   1498          #endif
   1499          }
   \                     ??CrossCallReturnLabel_24:
   \   000191   02....       LJMP    ?Subroutine22 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV     DPTR,#(_NIB + 33)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   74FF         MOV     A,#-0x1
   \   00000A   68           XRL     A,R0
   \   00000B   22           RET
   1500          
   1501          /*********************************************************************
   1502           * @fn      ZDApp_SaveNwkKey()
   1503           *
   1504           * @brief   Save off the Network key information.
   1505           *
   1506           * @param   none
   1507           *
   1508           * @return  none
   1509           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1510          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1511          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1512            nwkActiveKeyItems keyItems;
   1513          
   1514            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AA82         MOV     R2,DPL
   \   000012   AB83         MOV     R3,DPH
   \   000014   12....       LCALL   ??SSP_ReadNwkActiveKey?relay
   1515            keyItems.frameCounter++;
   \   000017   90....       MOV     DPTR,#__Constant_1
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?L_MOV_X
   \   00001F   7411         MOV     A,#0x11
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?L_ADD_TO_X
   1516          
   1517            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1518                          (void *)&keyItems );
   \   000029                ; Setup parameters for call to function osal_nv_write
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   8582..       MOV     ?V0 + 0,DPL
   \   000032   8583..       MOV     ?V0 + 1,DPH
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   75..15       MOV     ?V0 + 0,#0x15
   \   00003D   75..00       MOV     ?V0 + 1,#0x0
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   1519          
   1520            nwkFrameCounterChanges = 0;
   \   00004B   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   F0           MOVX    @DPTR,A
   1521          
   1522            // Clear copy in RAM before return.
   1523            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000052                ; Setup parameters for call to function osal_memset
   \   000052   7C15         MOV     R4,#0x15
   \   000054   FD           MOV     R5,A
   \   000055   F9           MOV     R1,A
   \   000056   85..82       MOV     DPL,?XSP + 0
   \   000059   85..83       MOV     DPH,?XSP + 1
   \   00005C   AA82         MOV     R2,DPL
   \   00005E   AB83         MOV     R3,DPH
   \   000060   12....       LCALL   ??osal_memset?relay
   1524          
   1525          }
   \   000063                REQUIRE ?Subroutine25
   \   000063                ; // Fall through to label ?Subroutine25

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   7415         MOV     A,#0x15
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F04         MOV     R7,#0x4
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7C00         MOV     R4,#0x0
   \   000002   7D00         MOV     R5,#0x0
   \   000004   7A82         MOV     R2,#-0x7e
   \   000006                REQUIRE ??Subroutine29_0
   \   000006                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_nv_write?relay
   \   000005   7404         MOV     A,#0x4
   \   000007   22           RET
   1526          
   1527          /*********************************************************************
   1528           * @fn      ZDApp_ResetNwkKey()
   1529           *
   1530           * @brief   Reset the Network key information in NV.
   1531           *
   1532           * @param   none
   1533           *
   1534           * @return  none
   1535           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1536          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1537          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1538            nwkActiveKeyItems keyItems;
   1539          
   1540            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   12....       LCALL   ?Subroutine15 & 0xFFFF
   1541            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1542                          (void *)&keyItems );
   \                     ??CrossCallReturnLabel_28:
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   75..15       MOV     ?V0 + 0,#0x15
   \   000015   75..00       MOV     ?V0 + 1,#0x0
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
   1543          }
   \   000023   7415         MOV     A,#0x15
   \   000025   02....       LJMP    ??Subroutine34_0 & 0xFFFF
   1544          
   1545          /*********************************************************************
   1546           * @fn      ZDApp_RestoreNwkKey()
   1547           *
   1548           * @brief
   1549           *
   1550           *   Save off the Network key information.
   1551           *
   1552           * @param   none
   1553           *
   1554           * @return  true if restored from NV, false if not
   1555           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1556          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1557          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1558            nwkActiveKeyItems keyItems;
   1559            uint8 ret = false;
   \   00000A   7E00         MOV     R6,#0x0
   1560          
   1561            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1562                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   8582..       MOV     ?V0 + 0,DPL
   \   000015   8583..       MOV     ?V0 + 1,DPH
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   75..15       MOV     ?V0 + 0,#0x15
   \   000020   8E..         MOV     ?V0 + 1,R6
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A82         MOV     R2,#-0x7e
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   ??osal_nv_read?relay
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   E9           MOV     A,R1
   \   000038   704B         JNZ     ??ZDApp_RestoreNwkKey_0
   1563            {
   1564              if ( keyItems.frameCounter > 0 )
   \   00003A   7411         MOV     A,#0x11
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   C082         PUSH    DPL
   \   000041   C083         PUSH    DPH
   \   000043   90....       MOV     DPTR,#__Constant_0
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?L_MOV_X
   \   00004B   D083         POP     DPH
   \   00004D   D082         POP     DPL
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?L_EQ_X
   \   000054   6025         JZ      ??ZDApp_RestoreNwkKey_1
   1565              {
   1566                // Restore the key information
   1567                keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
   \   000056   90....       MOV     DPTR,#__Constant_3e8
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?L_MOV_X
   \   00005E   7411         MOV     A,#0x11
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   12....       LCALL   ?L_ADD_TO_X
   1568                nwkFrameCounter = keyItems.frameCounter;
   \   000068   7411         MOV     A,#0x11
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?L_MOV_X
   \   000072   90....       MOV     DPTR,#nwkFrameCounter
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?L_MOV_TO_X
   1569                ret = true;
   \   00007A   0E           INC     R6
   1570              }
   1571          
   1572              // Force a save for the first frame counter increment
   1573              nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES + 1;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   00007B   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00007E   74E9         MOV     A,#-0x17
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   7403         MOV     A,#0x3
   \   000084   F0           MOVX    @DPTR,A
   1574            }
   1575            // Clear copy in RAM before return.
   1576            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000085                ; Setup parameters for call to function osal_memset
   \   000085   7C15         MOV     R4,#0x15
   \   000087   7D00         MOV     R5,#0x0
   \   000089   7900         MOV     R1,#0x0
   \   00008B   85..82       MOV     DPL,?XSP + 0
   \   00008E   85..83       MOV     DPH,?XSP + 1
   \   000091   AA82         MOV     R2,DPL
   \   000093   AB83         MOV     R3,DPH
   \   000095   12....       LCALL   ??osal_memset?relay
   1577          
   1578            return ( ret );
   \   000098   EE           MOV     A,R6
   \   000099   F9           MOV     R1,A
   \   00009A   02....       LJMP    ?Subroutine25 & 0xFFFF
   1579          }
   1580          
   1581          /*********************************************************************
   1582           * @fn      ZDApp_ResetTimerStart
   1583           *
   1584           * @brief   Start the reset timer.
   1585           *
   1586           * @param   delay - delay time(ms) before reset
   1587           *
   1588           * @return  none
   1589           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1590          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1591          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1592            // Start the rest timer
   1593            osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   EA           MOV     A,R2
   \   000005   FC           MOV     R4,A
   \   000006   EB           MOV     A,R3
   \   000007   FD           MOV     R5,A
   \   000008   7A04         MOV     R2,#0x4
   \   00000A   12....       LCALL   ?Subroutine9 & 0xFFFF
   1594          }
   \                     ??CrossCallReturnLabel_58:
   \   00000D   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   1595          
   1596          /*********************************************************************
   1597           * @fn      ZDApp_ResetTimerCancel
   1598           *
   1599           * @brief   Cancel the reset timer.
   1600           *
   1601           * @param   none
   1602           *
   1603           * @return  none
   1604           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1605          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1606          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1607            // Cancel the reset timer
   1608            osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_stop_timerEx?relay
   1609          }
   \   000010   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   1610          
   1611          /*********************************************************************
   1612           * @fn      ZDApp_LeaveCtrlInit
   1613           *
   1614           * @brief   Initialize the leave control logic.
   1615           *
   1616           * @param   none
   1617           *
   1618           * @return  none
   1619           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1620          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1621          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1622            uint8 status;
   1623          
   1624          
   1625            // Initialize control state
   1626            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   12....       LCALL   ?Subroutine3 & 0xFFFF
   1627          
   1628            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1629                                        sizeof(ZDApp_LeaveCtrl),
   1630                                        &ZDApp_LeaveCtrl );
   1631          
   1632            if ( status == ZSUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   7C01         MOV     R4,#0x1
   \   00000D   7D00         MOV     R5,#0x0
   \   00000F   7A85         MOV     R2,#-0x7b
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??osal_nv_item_init?relay
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001B   E9           MOV     A,R1
   \   00001C   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   1633            {
   1634              // Read saved control
   1635              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1636                            0,
   1637                            sizeof( uint8 ),
   1638                            &ZDApp_LeaveCtrl);
   \   00001E                ; Setup parameters for call to function osal_nv_read
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C00         MOV     R4,#0x0
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A85         MOV     R2,#-0x7b
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   ??osal_nv_read?relay
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   1639            }
   1640          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   00003E   02....       LJMP    ??Subroutine35_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E4           CLR     A
   \   000001   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_write
   \   000005   75....       MOV     ?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
   \   000008   75....       MOV     ?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   22           RET
   1641          
   1642          /*********************************************************************
   1643           * @fn      ZDApp_LeaveCtrlSet
   1644           *
   1645           * @brief   Set the leave control logic.
   1646           *
   1647           * @param   ra - reassociate flag
   1648           *
   1649           * @return  none
   1650           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1651          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1652          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1653            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000005   7401         MOV     A,#0x1
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   F0           MOVX    @DPTR,A
   1654          
   1655            if ( ra == TRUE )
   \   00000B   69           XRL     A,R1
   \   00000C   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1656            {
   1657              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   00000E   7403         MOV     A,#0x3
   \   000010   F0           MOVX    @DPTR,A
   1658            }
   1659          
   1660            // Write the leave control
   1661            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1662                           0,
   1663                           sizeof( uint8 ),
   1664                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   75....       MOV     ?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
   \   000014   75....       MOV     ?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
   \   000017   78..         MOV     R0,#?V0 + 0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   75..01       MOV     ?V0 + 0,#0x1
   \   00001F   75..00       MOV     ?V0 + 1,#0x0
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A85         MOV     R2,#-0x7b
   \   00002D   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000030   02....       LJMP    ??Subroutine34_0 & 0xFFFF
   1665          }
   1666          
   1667          /*********************************************************************
   1668           * @fn      ZDApp_LeaveCtrlBypass
   1669           *
   1670           * @brief   Check if NV restore should be skipped during a leave reset.
   1671           *
   1672           * @param   none
   1673           *
   1674           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1675           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1676          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1677          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1678            uint8 bypass;
   1679          
   1680            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1681            {
   1682              bypass = TRUE;
   1683            }
   1684            else
   1685            {
   1686              bypass = FALSE;
   1687            }
   1688          
   1689            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   92E0         MOV     0xE0 /* A   */.0,C
   \   00000D   F9           MOV     R1,A
   \   00000E   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   1690          }
   1691          
   1692          /*********************************************************************
   1693           * @fn      ZDApp_LeaveCtrlStartup
   1694           *
   1695           * @brief   Check for startup conditions during a leave reset.
   1696           *
   1697           * @param   state      - devState_t determined by leave control logic
   1698           * @param   startDelay - startup delay
   1699           *
   1700           * @return  none
   1701           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1702          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1703          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1704            *startDelay = 0;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   E4           CLR     A
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   F0           MOVX    @DPTR,A
   1705          
   1706            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000D   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000010   E0           MOVX    A,@DPTR
   \   000011   A2E0         MOV     C,0xE0 /* A   */.0
   \   000013   5033         JNC     ??ZDApp_LeaveCtrlStartup_0
   1707            {
   1708              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000015   A2E1         MOV     C,0xE0 /* A   */.1
   \   000017   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   1709              {
   1710                *startDelay = 5000;
   \   000019   8C82         MOV     DPL,R4
   \   00001B   8D83         MOV     DPH,R5
   \   00001D   7488         MOV     A,#-0x78
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   7413         MOV     A,#0x13
   \   000023   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1711              }
   1712              else
   1713              {
   1714                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000025   E4           CLR     A
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   00002A   F0           MOVX    @DPTR,A
   1715              }
   1716          
   1717              // Set leave control to initialized state
   1718              ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   00002B   12....       LCALL   ?Subroutine3 & 0xFFFF
   1719          
   1720              // Write initialized control
   1721              osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1722                            0,
   1723                            sizeof( uint8 ),
   1724                            &ZDApp_LeaveCtrl);
   1725            }
   \                     ??CrossCallReturnLabel_3:
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   75..01       MOV     ?V0 + 0,#0x1
   \   000034   75..00       MOV     ?V0 + 1,#0x0
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7C00         MOV     R4,#0x0
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7A85         MOV     R2,#-0x7b
   \   000042   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   1726          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   000048   02....       LJMP    ??Subroutine35_0 & 0xFFFF
   1727          
   1728          /*********************************************************************
   1729           * @fn      ZDApp_LeaveReset
   1730           *
   1731           * @brief   Setup a device reset due to a leave indication/confirm.
   1732           *
   1733           * @param   ra - reassociate flag
   1734           *
   1735           * @return  none
   1736           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1737          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1738          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1739            ZDApp_LeaveCtrlSet( ra );
   \   000004                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000004   12....       LCALL   ??ZDApp_LeaveCtrlSet?relay
   1740          
   1741            ZDApp_ResetTimerStart( 5000 );
   \   000007                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000007   7A88         MOV     R2,#-0x78
   \   000009   7B13         MOV     R3,#0x13
   \   00000B   12....       LCALL   ??ZDApp_ResetTimerStart?relay
   1742          }
   \   00000E   80..         SJMP    ??Subroutine31_0
   1743          
   1744          /*********************************************************************
   1745           * @fn      ZDApp_LeaveUpdate
   1746           *
   1747           * @brief   Update local device data related to leaving device.
   1748           *
   1749           * @param   nwkAddr        - NWK address of leaving device
   1750           * @param   extAddr        - EXT address of leaving device
   1751           * @param   removeChildren - remove children of leaving device
   1752           *
   1753           * @return  none
   1754           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1755          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1756                                  uint8 removeChildren )
   1757          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EC           MOV     A,R4
   \   000005   FA           MOV     R2,A
   \   000006   ED           MOV     A,R5
   \   000007   FB           MOV     R3,A
   1758            /*
   1759            AddrMgrEntry_t entry;
   1760            */
   1761            (void)nwkAddr;  // Intentionally unreferenced parameter
   1762          
   1763            // Remove if child
   1764            if ( ZSTACK_ROUTER_BUILD )
   \   000008   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6004         JZ      ??ZDApp_LeaveUpdate_0
   \   00000E   6401         XRL     A,#0x1
   \   000010   7003         JNZ     ??ZDApp_LeaveUpdate_1
   1765            {
   1766              NLME_RemoveChild( extAddr, removeChildren );
   \                     ??ZDApp_LeaveUpdate_0:
   \   000012                ; Setup parameters for call to function NLME_RemoveChild
   \   000012   12....       LCALL   ??NLME_RemoveChild?relay
   1767            }
   1768          
   1769            /*
   1770            // Set NWK address to invalid
   1771            entry.user    = ADDRMGR_USER_DEFAULT;
   1772            entry.nwkAddr = INVALID_NODE_ADDR;
   1773            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   1774            AddrMgrEntryUpdate( &entry );
   1775          
   1776            // Check
   1777            if ( removeChildren == TRUE )
   1778            {
   1779              // Set index to INVALID_NODE_ADDR to start search
   1780              entry.index = INVALID_NODE_ADDR;
   1781          
   1782              // Get first entry
   1783              AddrMgrEntryGetNext( &entry );
   1784          
   1785              // Remove all descendents
   1786              while ( entry.index != INVALID_NODE_ADDR )
   1787              {
   1788                // Check NWK address allocation algorithm
   1789                if ( RTG_ANCESTOR( entry.nwkAddr, thisAddr ) != 0 )
   1790                {
   1791                  // Set NWK address to invalid
   1792                  entry.nwkAddr = INVALID_NODE_ADDR;
   1793                  AddrMgrEntryUpdate( &entry );
   1794                }
   1795          
   1796                // Get next entry
   1797                AddrMgrEntryGetNext( &entry );
   1798              }
   1799            }
   1800            */
   1801          }
   \                     ??ZDApp_LeaveUpdate_1:
   \   000015   80..         SJMP    ??Subroutine31_0
   1802          
   1803          /*********************************************************************
   1804           * CALLBACK FUNCTIONS
   1805           */
   1806          
   1807          
   1808          /*********************************************************************
   1809           * @fn      ZDApp_SendEventMsg()
   1810           *
   1811           * @brief
   1812           *
   1813           *   Sends a Network Join message
   1814           *
   1815           * @param  cmd - command ID
   1816           * @param  len - length (in bytes) of the buf field
   1817           * @param  buf - buffer for the rest of the message.
   1818           *
   1819           * @return  none
   1820           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1821          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   1822          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1823            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000004                ; Setup parameters for call to function ZDApp_SendMsg
   \   000004   EA           MOV     A,R2
   \   000005   FB           MOV     R3,A
   \   000006   E9           MOV     A,R1
   \   000007   FA           MOV     R2,A
   \   000008                REQUIRE ?Subroutine27
   \   000008                ; // Fall through to label ?Subroutine27
   1824          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   80..         SJMP    ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDApp_SendMsg?relay
   \   000008   22           RET
   1825          
   1826          /*********************************************************************
   1827           * @fn      ZDApp_SendMsg()
   1828           *
   1829           * @brief   Sends a OSAL message
   1830           *
   1831           * @param  taskID - Where to send the message
   1832           * @param  cmd - command ID
   1833           * @param  len - length (in bytes) of the buf field
   1834           * @param  buf - buffer for the rest of the message.
   1835           *
   1836           * @return  none
   1837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1838          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   1839          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 7,R1
   \   000007   8A..         MOV     ?V0 + 8,R2
   \   000009   8B..         MOV     ?V0 + 4,R3
   \   00000B   8C..         MOV     ?V0 + 2,R4
   \   00000D   8D..         MOV     ?V0 + 3,R5
   1840            osal_event_hdr_t *msgPtr;
   1841          
   1842            // Send the address to the task
   1843            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   8B82         MOV     DPL,R3
   \   000011   8582..       MOV     ?V0 + 0,DPL
   \   000014                ; Setup parameters for call to function osal_msg_allocate
   \   000014   AA..         MOV     R2,?V0 + 0
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   ??osal_msg_allocate?relay
   \   00001B   8A..         MOV     ?V0 + 10,R2
   \   00001D   8B..         MOV     ?V0 + 11,R3
   \   00001F   AE..         MOV     R6,?V0 + 10
   \   000021   AF..         MOV     R7,?V0 + 11
   1844            if ( msgPtr )
   \   000023   EE           MOV     A,R6
   \   000024   7001         JNZ     ??ZDApp_SendMsg_0
   \   000026   EF           MOV     A,R7
   \                     ??ZDApp_SendMsg_0:
   \   000027   6036         JZ      ??ZDApp_SendMsg_1
   1845            {
   1846              if ( (len > 0) && (buf != NULL) )
   \   000029   E5..         MOV     A,?V0 + 4
   \   00002B   6022         JZ      ??ZDApp_SendMsg_2
   \   00002D   E5..         MOV     A,?V0 + 2
   \   00002F   7002         JNZ     ??ZDApp_SendMsg_3
   \   000031   E5..         MOV     A,?V0 + 3
   \                     ??ZDApp_SendMsg_3:
   \   000033   601A         JZ      ??ZDApp_SendMsg_2
   1847                osal_memcpy( msgPtr, buf, len );
   \   000035                ; Setup parameters for call to function osal_memcpy
   \   000035   85....       MOV     ?V0 + 4,?V0 + 2
   \   000038   85....       MOV     ?V0 + 5,?V0 + 3
   \   00003B   75..00       MOV     ?V0 + 6,#0x0
   \   00003E   78..         MOV     R0,#?V0 + 4
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000043   AC..         MOV     R4,?V0 + 0
   \   000045   7D00         MOV     R5,#0x0
   \   000047   12....       LCALL   ??osal_memcpy?relay
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   1848          
   1849              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_2:
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   E5..         MOV     A,?V0 + 8
   \   000055   F0           MOVX    @DPTR,A
   1850              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000056                ; Setup parameters for call to function osal_msg_send
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   EF           MOV     A,R7
   \   000059   FB           MOV     R3,A
   \   00005A   A9..         MOV     R1,?V0 + 7
   \   00005C   12....       LCALL   ??osal_msg_send?relay
   1851            }
   1852          }
   \                     ??ZDApp_SendMsg_1:
   \   00005F   7F0C         MOV     R7,#0xc
   \   000061   02....       LJMP    ?BANKED_LEAVE_XDATA
   1853          
   1854          /*********************************************************************
   1855           * Call Back Functions from NWK  - API
   1856           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1857          int BeCoor;
   \                     BeCoor:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
   1858          /*********************************************************************
   1859           * @fn          ZDO_NetworkDiscoveryConfirmCB
   1860           *
   1861           * @brief       This function returns a choice of PAN to join.
   1862           *
   1863           * @param       ResultCount - Number of routers discovered
   1864           * @param               NetworkList - Pointer to list of network descriptors
   1865           *
   1866           * @return      ZStatus_t
   1867           */
   1868          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1869          ZStatus_t ZDO_NetworkDiscoveryConfirmCB( uint8 ResultCount,
   \                     ZDO_NetworkDiscoveryConfirmCB:
   1870                                                   networkDesc_t *NetworkList )
   1871          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 7,R1
   \   00000C   8A..         MOV     ?V0 + 4,R2
   \   00000E   8B..         MOV     ?V0 + 5,R3
   1872            networkDesc_t *pNwkDesc = NetworkList;
   1873            ZDO_NetworkDiscoveryCfm_t msg;
   1874            uint8 i = ResultCount;
   1875            uint8 stackProfile;
   1876            uint8 stackProfilePro;
   1877            uint8 selected;
   1878          
   1879          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1880            if ( zdappMgmtNwkDiscReqInProgress )
   1881            {
   1882              zdappMgmtNwkDiscReqInProgress = false;
   1883              ZDO_FinishProcessingMgmtNwkDiscReq( ResultCount, NetworkList );
   1884              return ( ZSuccess );
   1885            }
   1886          #endif
   1887          
   1888            // process discovery results
   1889            stackProfilePro = FALSE;
   \   000010   75..00       MOV     ?V0 + 8,#0x0
   1890            selected = FALSE;
   1891          
   1892            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000013   75..00       MOV     ?V0 + 6,#0x0
   1893            {
   1894              pNwkDesc = NetworkList;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000016   AE..         MOV     R6,?V0 + 4
   \   000018   AF..         MOV     R7,?V0 + 5
   1895              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00001A   75..00       MOV     ?V0 + 9,#0x0
   \   00001D   8020         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   1896              {
   1897                if ( zgConfigPANID != 0xFFFF )
   1898                {
   1899                  // PAN Id is preconfigured. check if it matches
   1900                  if ( pNwkDesc->panId != zgConfigPANID )
   1901                    continue;
   1902                }
   1903          
   1904          
   1905                if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID) == true )
   1906                {
   1907                  // If the extended Pan ID is commissioned to a non zero value
   1908                  // Only join the Pan that has match EPID
   1909                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   1910                    continue;
   1911          
   1912                }
   1913          
   1914          
   1915                  // check that network is allowing joining
   1916                  if ( ZSTACK_ROUTER_BUILD )
   1917                  {
   1918                    if ( stackProfilePro == FALSE )
   1919                    {
   1920                      if ( !pNwkDesc->routerCapacity )
   1921                      {
   1922                        continue;
   1923                      }
   1924                    }
   1925                    else
   1926                    {
   1927                      if ( !pNwkDesc->deviceCapacity )
   1928                      {
   1929                        continue;
   1930                      }
   1931                    }
   1932                  }
   1933                  else if ( ZSTACK_END_DEVICE_BUILD )
   1934                  {
   1935                    if ( !pNwkDesc->deviceCapacity )
   1936                    {
   1937                      continue;
   1938                    }
   1939                  }
   1940          
   1941                  // check version of zigbee protocol
   1942                  if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   1943                    continue;
   1944          
   1945                  // check version of stack profile
   1946                  if ( pNwkDesc->stackProfile != zgStackProfile  )
   1947                  {
   1948                    if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   1949                        || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_2:
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6402         XRL     A,#0x2
   \   000022   7008         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
   \   000024   7401         MOV     A,#0x1
   \   000026   6A           XRL     A,R2
   \   000027   7003         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
   1950                      stackProfilePro = TRUE;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_4:
   \   000029   75..01       MOV     ?V0 + 8,#0x1
   1951          
   1952                    if ( stackProfile == 0 )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_3:
   \   00002C   E5..         MOV     A,?V0 + 6
   \   00002E   6003         JZ      $+5
   \   000030   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_5 & 0xFFFF
   \                     ??ZDO_NetworkDiscoveryConfirmCB_6:
   \   000033   05..         INC     ?V0 + 9
   \   000035   EE           MOV     A,R6
   \   000036   2416         ADD     A,#0x16
   \   000038   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00003B   FE           MOV     R6,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FF           MOV     R7,A
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   00003F   EE           MOV     A,R6
   \   000040   2407         ADD     A,#0x7
   \   000042   F5..         MOV     ?V0 + 0,A
   \   000044   EF           MOV     A,R7
   \   000045   3400         ADDC    A,#0x0
   \   000047   F5..         MOV     ?V0 + 1,A
   \   000049   EE           MOV     A,R6
   \   00004A   240D         ADD     A,#0xd
   \   00004C   F5..         MOV     ?V0 + 2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   3400         ADDC    A,#0x0
   \   000051   F5..         MOV     ?V0 + 3,A
   \   000053   E5..         MOV     A,?V0 + 9
   \   000055   C3           CLR     C
   \   000056   95..         SUBB    A,?V0 + 7
   \   000058   4003         JC      $+5
   \   00005A   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_7 & 0xFFFF
   \   00005D   90....       MOV     DPTR,#zgConfigPANID
   \   000060   E0           MOVX    A,@DPTR
   \   000061   64FF         XRL     A,#0xff
   \   000063   7004         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_8
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   64FF         XRL     A,#0xff
   \                     ??ZDO_NetworkDiscoveryConfirmCB_8:
   \   000069   6013         JZ      ??ZDO_NetworkDiscoveryConfirmCB_9
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000072   90....       MOV     DPTR,#zgConfigPANID
   \   000075   E0           MOVX    A,@DPTR
   \   000076   68           XRL     A,R0
   \   000077   7003         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_10
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   69           XRL     A,R1
   \                     ??ZDO_NetworkDiscoveryConfirmCB_10:
   \   00007C   70B5         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_9:
   \   00007E                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   00007E   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000080   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   000082   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   000085   E9           MOV     A,R1
   \   000086   6401         XRL     A,#0x1
   \   000088   700E         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_11
   \   00008A                ; Setup parameters for call to function sAddrExtCmp
   \   00008A   AC..         MOV     R4,?V0 + 2
   \   00008C   AD..         MOV     R5,?V0 + 3
   \   00008E   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000090   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   000092   12....       LCALL   ??sAddrExtCmp?relay
   \   000095   E9           MOV     A,R1
   \   000096   609B         JZ      ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_11:
   \   000098   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   6004         JZ      ??ZDO_NetworkDiscoveryConfirmCB_12
   \   00009E   6401         XRL     A,#0x1
   \   0000A0   701A         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_13
   \                     ??ZDO_NetworkDiscoveryConfirmCB_12:
   \   0000A2   E5..         MOV     A,?V0 + 8
   \   0000A4   700F         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_14
   \   0000A6   8E82         MOV     DPL,R6
   \   0000A8   8F83         MOV     DPH,R7
   \                     ??ZDO_NetworkDiscoveryConfirmCB_15:
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   700F         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_16
   \   0000B2   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_6 & 0xFFFF
   \                     ??ZDO_NetworkDiscoveryConfirmCB_14:
   \   0000B5   8E82         MOV     DPL,R6
   \   0000B7   8F83         MOV     DPH,R7
   \   0000B9   A3           INC     DPTR
   \   0000BA   80EE         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_15
   \                     ??ZDO_NetworkDiscoveryConfirmCB_13:
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   6402         XRL     A,#0x2
   \   0000BF   60F4         JZ      ??ZDO_NetworkDiscoveryConfirmCB_14
   \                     ??ZDO_NetworkDiscoveryConfirmCB_16:
   \   0000C1   85..82       MOV     DPL,?V0 + 0
   \   0000C4   85..83       MOV     DPH,?V0 + 1
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   FA           MOV     R2,A
   \   0000C9   90....       MOV     DPTR,#(_NIB + 17)
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   6A           XRL     A,R2
   \   0000CE   6003         JZ      $+5
   \   0000D0   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_6 & 0xFFFF
   \   0000D3   8E82         MOV     DPL,R6
   \   0000D5   8F83         MOV     DPH,R7
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   FA           MOV     R2,A
   \   0000E1   90....       MOV     DPTR,#zgStackProfile
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   6A           XRL     A,R2
   \   0000E6   606D         JZ      ??ZDO_NetworkDiscoveryConfirmCB_5
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   6401         XRL     A,#0x1
   \   0000EB   6003         JZ      $+5
   \   0000ED   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_2 & 0xFFFF
   \   0000F0   7402         MOV     A,#0x2
   \   0000F2   6A           XRL     A,R2
   \   0000F3   6003         JZ      $+5
   \   0000F5   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_3 & 0xFFFF
   \   0000F8   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_4 & 0xFFFF
   1953                    {
   1954                      continue;
   1955                    }
   1956                  }
   1957          
   1958                // check if beacon order is the right value..
   1959                //  if ( pNwkDesc->beaconOrder < ZDO_CONFIG_MAX_BO )
   1960                //    continue;
   1961          
   1962                // choose this pan for joining
   1963                break;
   1964              }
   1965              if (i < ResultCount)
   1966              {
   1967               selected = TRUE;
   1968                break;
   1969              }
   1970          
   1971              // break if selected or stack profile pro wasn't found
   1972              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_7:
   \   0000FB   E5..         MOV     A,?V0 + 8
   \   0000FD   600C         JZ      ??ZDO_NetworkDiscoveryConfirmCB_17
   1973              {
   1974                break;
   1975              }
   1976            }
   \   0000FF   05..         INC     ?V0 + 6
   \   000101   E5..         MOV     A,?V0 + 6
   \   000103   C3           CLR     C
   \   000104   9402         SUBB    A,#0x2
   \   000106   5003         JNC     $+5
   \   000108   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_0 & 0xFFFF
   1977          
   1978            if ( i == ResultCount )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_17:
   \   00010B   E5..         MOV     A,?V0 + 7
   \   00010D   65..         XRL     A,?V0 + 9
   \   00010F   7044         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_5
   1979            {
   1980              HAL_TOGGLE_LED1();//¸Ä±äLED1µÄ×´Ì¬
   \   000111   A291         MOV     C,0x90.1
   \   000113   5004         JNC     ??ZDO_NetworkDiscoveryConfirmCB_18
   \   000115   C291         CLR     0x90.1
   \   000117   8002         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_19
   \                     ??ZDO_NetworkDiscoveryConfirmCB_18:
   \   000119   D291         SETB    0x90.1
   1981              msg.hdr.status = ZDO_FAIL;   // couldn't find appropriate PAN to join !
   \                     ??ZDO_NetworkDiscoveryConfirmCB_19:
   \   00011B   7401         MOV     A,#0x1
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   7401         MOV     A,#0x1
   \   000122   F0           MOVX    @DPTR,A
   1982              BeCoor++;
   \   000123   90....       MOV     DPTR,#BeCoor
   \   000126   E0           MOVX    A,@DPTR
   \   000127   2401         ADD     A,#0x1
   \   000129   F0           MOVX    @DPTR,A
   \   00012A   A3           INC     DPTR
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   3400         ADDC    A,#0x0
   \   00012E   F0           MOVX    @DPTR,A
   1983              if(BeCoor>5)
   \   00012F   90....       MOV     DPTR,#BeCoor
   \   000132   C3           CLR     C
   \   000133   E0           MOVX    A,@DPTR
   \   000134   9406         SUBB    A,#0x6
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   9400         SUBB    A,#0x0
   \   00013A   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00013C   65D0         XRL     A,PSW
   \   00013E   33           RLC     A
   \   00013F   406C         JC      ??ZDO_NetworkDiscoveryConfirmCB_20
   1984              {
   1985                ZDO_Config_Node_Descriptor.LogicalType=NODETYPE_COORDINATOR;
   \   000141   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000144   E0           MOVX    A,@DPTR
   \   000145   54F8         ANL     A,#0xf8
   \   000147   F0           MOVX    @DPTR,A
   1986                devStartMode=MODE_HARD;
   \   000148   7402         MOV     A,#0x2
   \   00014A   90....       MOV     DPTR,#devStartMode
   \   00014D   F0           MOVX    @DPTR,A
   1987                //devState = DEV_COORD_STARTING;
   1988                osal_set_event(ZDAppTaskID, ZDO_NETWORK_INIT);
   \   00014E                ; Setup parameters for call to function osal_set_event
   \   00014E   7A01         MOV     R2,#0x1
   \   000150   12....       LCALL   ?Subroutine24 & 0xFFFF
   1989              }
   1990            }
   \                     ??CrossCallReturnLabel_39:
   \   000153   8058         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_20
   1991            else
   1992            {
   1993              msg.hdr.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_5:
   \   000155   7401         MOV     A,#0x1
   \   000157   12....       LCALL   ?XSTACK_DISP0_8
   \   00015A   E4           CLR     A
   \   00015B   F0           MOVX    @DPTR,A
   1994              msg.panIdLSB = LO_UINT16( pNwkDesc->panId );
   \   00015C   8E82         MOV     DPL,R6
   \   00015E   8F83         MOV     DPH,R7
   \   000160   E0           MOVX    A,@DPTR
   \   000161   C0E0         PUSH    A
   \   000163   7402         MOV     A,#0x2
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   D0E0         POP     A
   \   00016A   F0           MOVX    @DPTR,A
   1995              msg.panIdMSB = HI_UINT16( pNwkDesc->panId );
   \   00016B   8E82         MOV     DPL,R6
   \   00016D   8F83         MOV     DPH,R7
   \   00016F   A3           INC     DPTR
   \   000170   E0           MOVX    A,@DPTR
   \   000171   C0E0         PUSH    A
   \   000173   7403         MOV     A,#0x3
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   D0E0         POP     A
   \   00017A   F0           MOVX    @DPTR,A
   1996              msg.logicalChannel = pNwkDesc->logicalChannel;
   \   00017B   8E82         MOV     DPL,R6
   \   00017D   8F83         MOV     DPH,R7
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   E0           MOVX    A,@DPTR
   \   000182   C0E0         PUSH    A
   \   000184   7404         MOV     A,#0x4
   \   000186   12....       LCALL   ?XSTACK_DISP0_8
   \   000189   D0E0         POP     A
   \   00018B   F0           MOVX    @DPTR,A
   1997              msg.version = pNwkDesc->version;
   \   00018C   85..82       MOV     DPL,?V0 + 0
   \   00018F   85..83       MOV     DPH,?V0 + 1
   \   000192   E0           MOVX    A,@DPTR
   \   000193   C0E0         PUSH    A
   \   000195   7405         MOV     A,#0x5
   \   000197   12....       LCALL   ?XSTACK_DISP0_8
   \   00019A   D0E0         POP     A
   \   00019C   F0           MOVX    @DPTR,A
   1998              osal_cpyExtAddr( msg.extendedPANID, pNwkDesc->extendedPANID );
   \   00019D                ; Setup parameters for call to function sAddrExtCpy
   \   00019D   AC..         MOV     R4,?V0 + 2
   \   00019F   AD..         MOV     R5,?V0 + 3
   \   0001A1   7406         MOV     A,#0x6
   \   0001A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A6   AA82         MOV     R2,DPL
   \   0001A8   AB83         MOV     R3,DPH
   \   0001AA   12....       LCALL   ??sAddrExtCpy?relay
   1999            }
   2000          
   2001            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(ZDO_NetworkDiscoveryCfm_t), (uint8 *)&msg );
   \                     ??ZDO_NetworkDiscoveryConfirmCB_20:
   \   0001AD                ; Setup parameters for call to function ZDApp_SendMsg
   \   0001AD   85..82       MOV     DPL,?XSP + 0
   \   0001B0   85..83       MOV     DPH,?XSP + 1
   \   0001B3   AC82         MOV     R4,DPL
   \   0001B5   AD83         MOV     R5,DPH
   \   0001B7   7B0E         MOV     R3,#0xe
   \   0001B9   7A01         MOV     R2,#0x1
   \   0001BB   12....       LCALL   ?Subroutine10 & 0xFFFF
   2002          
   2003            return (ZSuccess);
   \                     ??CrossCallReturnLabel_44:
   \   0001BE   7900         MOV     R1,#0x0
   \   0001C0   740E         MOV     A,#0xe
   \   0001C2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C5   7F0A         MOV     R7,#0xa
   \   0001C7   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0001CA                REQUIRE _A_P1
   2004          }  // ZDO_NetworkDiscoveryConfirmCB
   2005          
   2006          /*********************************************************************
   2007           * @fn          ZDO_NetworkFormationConfirmCB
   2008           *
   2009           * @brief       This function reports the results of the request to
   2010           *              initialize a coordinator in a network.
   2011           *
   2012           * @param       Status - Result of NLME_NetworkFormationRequest()
   2013           *
   2014           * @return      none
   2015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2016          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2017          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2018            nwkStatus = (byte)Status;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#nwkStatus
   \   000008   F0           MOVX    @DPTR,A
   2019          
   2020            if ( Status == ZSUCCESS )
   \   000009   700A         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2021            {
   2022              // LED on shows Coordinator started
   2023              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000B                ; Setup parameters for call to function HalLedSet
   \   00000B   12....       LCALL   ?Subroutine18 & 0xFFFF
   2024          
   2025              // LED off forgets HOLD_AUTO_START
   2026              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   2027          
   2028          #if defined ( ZBIT )
   2029              SIM_SetColor(0xd0ffd0);
   2030          #endif
   2031          
   2032              if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_31:
   \   00000E   700C         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   2033              {
   2034                // Began with HOLD_AUTO_START
   2035                devState = DEV_COORD_STARTING;
   \   000010   7408         MOV     A,#0x8
   \   000012   F0           MOVX    @DPTR,A
   \   000013   8007         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   2036              }
   2037            }
   2038          #if defined(BLINK_LEDS)
   2039            else
   2040            {
   2041              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000015                ; Setup parameters for call to function HalLedSet
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7904         MOV     R1,#0x4
   \   000019   12....       LCALL   ??HalLedSet?relay
   2042            }
   2043          #endif
   2044          
   2045            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00001C                ; Setup parameters for call to function osal_set_event
   \   00001C   7A02         MOV     R2,#0x2
   \   00001E   02....       LJMP    ?Subroutine26 & 0xFFFF
   2046          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7A01         MOV     R2,#0x1
   \   000002   7904         MOV     R1,#0x4
   \   000004   12....       LCALL   ??HalLedSet?relay
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7908         MOV     R1,#0x8
   \   00000B   12....       LCALL   ??HalLedSet?relay
   \   00000E   90....       MOV     DPTR,#devState
   \   000011   E0           MOVX    A,@DPTR
   \   000012   22           RET
   2047          
   2048          /*********************************************************************
   2049           * @fn          ZDO_StartRouterConfirmCB
   2050           *
   2051           * @brief       This function reports the results of the request to
   2052           *              start functioning as a router in a network.
   2053           *
   2054           * @param       Status - Result of NLME_StartRouterRequest()
   2055           *
   2056           * @return      none
   2057           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2058          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2059          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2060            nwkStatus = (byte)Status;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#nwkStatus
   \   000008   F0           MOVX    @DPTR,A
   2061          
   2062            if ( Status == ZSUCCESS )
   \   000009   700A         JNZ     ??ZDO_StartRouterConfirmCB_0
   2063            {
   2064              // LED on shows Router started
   2065              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000B                ; Setup parameters for call to function HalLedSet
   \   00000B   12....       LCALL   ?Subroutine18 & 0xFFFF
   2066              // LED off forgets HOLD_AUTO_START
   2067              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2068              if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_32:
   \   00000E   700C         JNZ     ??ZDO_StartRouterConfirmCB_1
   2069              {
   2070                // Began with HOLD_AUTO_START
   2071                devState = DEV_END_DEVICE;
   \   000010   7406         MOV     A,#0x6
   \   000012   F0           MOVX    @DPTR,A
   \   000013   8007         SJMP    ??ZDO_StartRouterConfirmCB_1
   2072              }
   2073            }
   2074          #if defined(BLINK_LEDS)
   2075            else
   2076            {
   2077              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000015                ; Setup parameters for call to function HalLedSet
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7904         MOV     R1,#0x4
   \   000019   12....       LCALL   ??HalLedSet?relay
   2078            }
   2079          #endif
   2080          
   2081            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00001C                ; Setup parameters for call to function osal_set_event
   \   00001C   7A20         MOV     R2,#0x20
   \   00001E   02....       LJMP    ?Subroutine26 & 0xFFFF
   2082          }
   2083          
   2084          /*********************************************************************
   2085           * @fn          ZDO_JoinConfirmCB
   2086           *
   2087           * @brief       This function allows the next hight layer to be notified
   2088           *              of the results of its request to join itself or another
   2089           *              device to a network.
   2090           *
   2091           * @param       Status - Result of NLME_JoinRequest()
   2092           *
   2093           * @return      none
   2094           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2095          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2096          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2097            (void)PanId;  // remove if this parameter is used.
   2098          
   2099            nwkStatus = (byte)Status;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#nwkStatus
   \   000008   F0           MOVX    @DPTR,A
   2100          
   2101            if ( Status == ZSUCCESS )
   \   000009   700A         JNZ     ??ZDO_JoinConfirmCB_0
   2102            {
   2103              // LED on shows device joined
   2104              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000B                ; Setup parameters for call to function HalLedSet
   \   00000B   12....       LCALL   ?Subroutine18 & 0xFFFF
   2105              // LED off forgets HOLD_AUTO_START
   2106              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2107              if ( (devState == DEV_HOLD) )
   \                     ??CrossCallReturnLabel_33:
   \   00000E   700C         JNZ     ??ZDO_JoinConfirmCB_1
   2108              {
   2109                // Began with HOLD_AUTO_START
   2110                devState = DEV_NWK_JOINING;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   \   000013   8007         SJMP    ??ZDO_JoinConfirmCB_1
   2111              }
   2112          
   2113              if ( !ZG_SECURE_ENABLED )
   2114              {
   2115                // Notify to save info into NV
   2116                ZDApp_NVUpdate();
   2117              }
   2118            }
   2119            else
   2120            {
   2121          #if defined(BLINK_LEDS)
   2122              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   000015                ; Setup parameters for call to function HalLedSet
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7904         MOV     R1,#0x4
   \   000019   12....       LCALL   ??HalLedSet?relay
   2123          #endif
   2124            }
   2125          
   2126            // Notify ZDApp
   2127            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_1:
   \   00001C                ; Setup parameters for call to function ZDApp_SendMsg
   \   00001C   7C00         MOV     R4,#0x0
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7B02         MOV     R3,#0x2
   \   000022   7A02         MOV     R2,#0x2
   \   000024   02....       LJMP    ?Subroutine27 & 0xFFFF
   2128          }
   2129          
   2130          /*********************************************************************
   2131           * @fn          ZDO_AddrChangeIndicationCB
   2132           *
   2133           * @brief       This function notifies the application that this
   2134           *              device's address has changed.  Could happen in
   2135           *              a network with stochastic addressing (PRO).
   2136           *
   2137           * @param       newAddr - the new address
   2138           *
   2139           * @return      none
   2140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2141          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2142          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2143            (void)newAddr;  // remove if this parameter is used
   2144          
   2145            // Notify to save info into NV
   2146            ZDApp_NVUpdate();
   2147          
   2148            // Notify the applications
   2149            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000004                ; Setup parameters for call to function osal_set_event
   \   000004   12....       LCALL   ?Subroutine4 & 0xFFFF
   2150          
   2151            // Send out a device announce
   2152            ZDApp_AnnounceNewAddress();
   \                     ??CrossCallReturnLabel_37:
   \   000007                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000007   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   2153          }
   \   00000A   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   2154          
   2155          /*********************************************************************
   2156           * @fn          ZDO_JoinIndicationCB
   2157           *
   2158           * @brief       This function allows the next higher layer of a
   2159           *              coordinator to be notified of a remote join request.
   2160           *
   2161           * @param       ShortAddress - 16-bit address
   2162           * @param       ExtendedAddress - IEEE (64-bit) address
   2163           * @param       CapabilityFlags - Association Capability Flags
   2164           * @param       type - of joining -
   2165           *                          NWK_ASSOC_JOIN
   2166           *                          NWK_ASSOC_REJOIN_UNSECURE
   2167           *                          NWK_ASSOC_REJOIN_SECURE
   2168           *
   2169           * @return      ZStatus_t
   2170           */
   2171          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2172                                          uint8 CapabilityFlags, uint8 type)
   2173          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2174            (void)ShortAddress;
   2175            (void)ExtendedAddress;
   2176          #if ZDO_NV_SAVE_RFDs
   2177            (void)CapabilityFlags;
   2178          
   2179          #else  // if !ZDO_NV_SAVE_RFDs
   2180            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2181          #endif
   2182            {
   2183              ZDApp_NVUpdate();  // Notify to save info into NV.
   2184            }
   2185          
   2186            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2187            {
   2188              if (type == NWK_ASSOC_JOIN || type == NWK_ASSOC_REJOIN_UNSECURE)
   2189              {
   2190                osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
   2191              }
   2192            }
   2193          
   2194            return ZSuccess;
   \   000000                REQUIRE ?Subroutine21
   \   000000                ; // Fall through to label ?Subroutine21

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   2195          }
   2196          
   2197          /*********************************************************************
   2198           * @fn          ZDO_ConcentratorIndicationCB
   2199           *
   2200           * @brief       This function allows the next higher layer of a
   2201           *              device to be notified of existence of the concentrator.
   2202           *
   2203           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2204           * @param       extAddr - pointer to extended Address
   2205           *                        NULL if not available
   2206           * @param       pktCost - PktCost from RREQ
   2207           *
   2208           * @return      void
   2209           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   7405         MOV     A,#0x5
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine31_0
   \   000005                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2210          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2211          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV     A,#-0x5
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   2212            zdoConcentratorInd_t conInd;
   2213          
   2214            conInd.nwkAddr = nwkAddr;
   \   000009   12....       LCALL   ?Subroutine2 & 0xFFFF
   2215            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_73:
   \   00000C   7402         MOV     A,#0x2
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   EC           MOV     A,R4
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   ED           MOV     A,R5
   \   000015   F0           MOVX    @DPTR,A
   2216            conInd.pktCost = pktCost;
   \   000016   7404         MOV     A,#0x4
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
   2217          
   2218            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001D   90....       MOV     DPTR,#(zdoCBFunc + 2)
   \   000020   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000023   E8           MOV     A,R0
   \   000024   7001         JNZ     ??ZDO_ConcentratorIndicationCB_0
   \   000026   E9           MOV     A,R1
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   000027   6011         JZ      ??ZDO_ConcentratorIndicationCB_1
   2219          {
   2220              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000029                ; Setup parameters for indirect call
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   AA82         MOV     R2,DPL
   \   000031   AB83         MOV     R3,DPH
   \   000033   8882         MOV     DPL,R0
   \   000035   8983         MOV     DPH,R1
   \   000037   12....       LCALL   ?CALL_IND
   2221            }
   2222          }
   \                     ??ZDO_ConcentratorIndicationCB_1:
   \   00003A   02....       LJMP    ?Subroutine20 & 0xFFFF
   2223          
   2224          /*********************************************************************
   2225           * @fn          ZDO_LeaveCnf
   2226           *
   2227           * @brief       This function allows the next higher layer to be
   2228           *              notified of the results of its request for this or
   2229           *              a child device to leave the network.
   2230           *
   2231           * @param       cnf - NLME_LeaveCnf_t
   2232           *
   2233           * @return      none
   2234           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2235          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2236          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   2237            // Check for this device
   2238            if ( osal_ExtAddrEqual( cnf->extAddr,
   2239                                    NLME_GetExtAddr() ) == TRUE )
   \   000009   EA           MOV     A,R2
   \   00000A   2402         ADD     A,#0x2
   \   00000C   FE           MOV     R6,A
   \   00000D   EB           MOV     A,R3
   \   00000E   3400         ADDC    A,#0x0
   \   000010   FF           MOV     R7,A
   \   000011                ; Setup parameters for call to function sAddrExtCmp
   \   000011                ; Setup parameters for call to function NLME_GetExtAddr
   \   000011   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000014   EA           MOV     A,R2
   \   000015   FC           MOV     R4,A
   \   000016   EB           MOV     A,R3
   \   000017   FD           MOV     R5,A
   \   000018   EE           MOV     A,R6
   \   000019   FA           MOV     R2,A
   \   00001A   EF           MOV     A,R7
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   ??sAddrExtCmp?relay
   \   00001F   E9           MOV     A,R1
   \   000020   6401         XRL     A,#0x1
   \   000022   7011         JNZ     ??ZDO_LeaveCnf_0
   2240            {
   2241              // Prepare to leave with reset
   2242              ZDApp_LeaveReset( cnf->rejoin );
   \   000024                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000024   E5..         MOV     A,?V0 + 0
   \   000026   240B         ADD     A,#0xb
   \   000028   F582         MOV     DPL,A
   \   00002A   E5..         MOV     A,?V0 + 1
   \   00002C   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   2243            }
   \                     ??CrossCallReturnLabel_61:
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   ??ZDApp_LeaveReset?relay
   \   000033   802C         SJMP    ??ZDO_LeaveCnf_1
   2244            else if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_LeaveCnf_0:
   \   000035   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6004         JZ      ??ZDO_LeaveCnf_2
   \   00003B   6401         XRL     A,#0x1
   \   00003D   7022         JNZ     ??ZDO_LeaveCnf_1
   2245            {
   2246              // Remove device address(optionally descendents) from data
   2247              ZDApp_LeaveUpdate( cnf->dstAddr,
   2248                                 cnf->extAddr,
   2249                                 cnf->removeChildren );
   \                     ??ZDO_LeaveCnf_2:
   \   00003F                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   00003F   85..82       MOV     DPL,?V0 + 0
   \   000042   85..83       MOV     DPH,?V0 + 1
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   EE           MOV     A,R6
   \   000052   FC           MOV     R4,A
   \   000053   EF           MOV     A,R7
   \   000054   FD           MOV     R5,A
   \   000055   85..82       MOV     DPL,?V0 + 0
   \   000058   85..83       MOV     DPH,?V0 + 1
   \   00005B   12....       LCALL   ?Subroutine7 & 0xFFFF
   2250            }
   \                     ??CrossCallReturnLabel_10:
   \   00005E   12....       LCALL   ??ZDApp_LeaveUpdate?relay
   2251          }
   \                     ??ZDO_LeaveCnf_1:
   \   000061   02....       LJMP    ??Subroutine35_0 & 0xFFFF
   2252          
   2253          /*********************************************************************
   2254           * @fn          ZDO_LeaveInd
   2255           *
   2256           * @brief       This function allows the next higher layer of a
   2257           *              device to be notified of a remote leave request or
   2258           *              indication.
   2259           *
   2260           * @param       ind - NLME_LeaveInd_t
   2261           *
   2262           * @return      none
   2263           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2264          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2265          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2266            uint8 leave;
   2267          
   2268          
   2269            // Parent is requesting the leave - NWK layer filters out illegal
   2270            // requests
   2271            if ( ind->request == TRUE )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000014   240B         ADD     A,#0xb
   \   000016   18           DEC     R0
   \   000017   EF           MOV     A,R7
   \   000018   3400         ADDC    A,#0x0
   \   00001A   F9           MOV     R1,A
   \   00001B   88..         MOV     ?V0 + 2,R0
   \   00001D   89..         MOV     ?V0 + 3,R1
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6401         XRL     A,#0x1
   \   000030   703B         JNZ     ??ZDO_LeaveInd_0
   2272            {
   2273              // Notify network of leave
   2274              if ( ZSTACK_ROUTER_BUILD )
   \   000032   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000035   E0           MOVX    A,@DPTR
   \   000036   6004         JZ      ??ZDO_LeaveInd_1
   \   000038   6401         XRL     A,#0x1
   \   00003A   7024         JNZ     ??ZDO_LeaveInd_2
   2275              {
   2276                NLME_LeaveRsp_t rsp;
   2277                rsp.rejoin         = ind->rejoin;
   \                     ??ZDO_LeaveInd_1:
   \   00003C   85..82       MOV     DPL,?V0 + 0
   \   00003F   85..83       MOV     DPH,?V0 + 1
   \   000042   E0           MOVX    A,@DPTR
   \   000043   C0E0         PUSH    A
   \   000045   7401         MOV     A,#0x1
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   D0E0         POP     A
   \   00004C   F0           MOVX    @DPTR,A
   2278                rsp.removeChildren = ind->removeChildren;
   \   00004D   8882         MOV     DPL,R0
   \   00004F   8983         MOV     DPH,R1
   \   000051   E0           MOVX    A,@DPTR
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   F0           MOVX    @DPTR,A
   2279                NLME_LeaveRsp( &rsp );
   \   000059                ; Setup parameters for call to function NLME_LeaveRsp
   \   000059   AA82         MOV     R2,DPL
   \   00005B   AB83         MOV     R3,DPH
   \   00005D   12....       LCALL   ??NLME_LeaveRsp?relay
   2280              }
   2281          
   2282              // Prepare to leave with reset
   2283              ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_2:
   \   000060                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000060   85..82       MOV     DPL,?V0 + 0
   \   000063   85..83       MOV     DPH,?V0 + 1
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   ??ZDApp_LeaveReset?relay
   \   00006B   8035         SJMP    ??ZDO_LeaveInd_3
   2284            }
   2285            else
   2286            {
   2287              leave = FALSE;
   2288          
   2289              // Check if this device needs to leave as a child or descendent
   2290              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   00006D                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00006D   12....       LCALL   ??NLME_GetCoordShortAddr?relay
   \   000070   8A..         MOV     ?V0 + 4,R2
   \   000072   8B..         MOV     ?V0 + 5,R3
   \   000074   85..82       MOV     DPL,?V0 + 2
   \   000077   85..83       MOV     DPH,?V0 + 3
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F9           MOV     R1,A
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000083   E5..         MOV     A,?V0 + 4
   \   000085   6A           XRL     A,R2
   \   000086   7003         JNZ     ??ZDO_LeaveInd_4
   \   000088   E5..         MOV     A,?V0 + 5
   \   00008A   6B           XRL     A,R3
   \                     ??ZDO_LeaveInd_4:
   \   00008B   700A         JNZ     ??ZDO_LeaveInd_5
   2291              {
   2292                if ( ( ind->removeChildren == TRUE               ) ||
   2293                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2294                       NODETYPE_DEVICE                           )    )
   \   00008D   7401         MOV     A,#0x1
   \   00008F   69           XRL     A,R1
   \   000090   60CE         JZ      ??ZDO_LeaveInd_2
   \   000092   12....       LCALL   ?Subroutine8 & 0xFFFF
   2295                {
   2296                  leave = TRUE;
   2297                }
   2298              }
   \                     ??CrossCallReturnLabel_16:
   \   000095   60C9         JZ      ??ZDO_LeaveInd_2
   2299              else if ( ind->removeChildren == TRUE )
   2300              {
   2301                // Check NWK address allocation algorithm
   2302                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2303              }
   2304          
   2305              if ( leave == TRUE )
   2306              {
   2307                // Prepare to leave with reset
   2308                ZDApp_LeaveReset( ind->rejoin );
   2309              }
   2310              else
   2311              {
   2312                // Remove device address(optionally descendents) from data
   2313                ZDApp_LeaveUpdate( ind->srcAddr,
   2314                                   ind->extAddr,
   2315                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_5:
   \   000097                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000097   EE           MOV     A,R6
   \   000098   2402         ADD     A,#0x2
   \   00009A   FC           MOV     R4,A
   \   00009B   EF           MOV     A,R7
   \   00009C   3400         ADDC    A,#0x0
   \   00009E   FD           MOV     R5,A
   \   00009F   12....       LCALL   ??ZDApp_LeaveUpdate?relay
   2316              }
   2317            }
   2318          }
   \                     ??ZDO_LeaveInd_3:
   \   0000A2   7402         MOV     A,#0x2
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A7   7F06         MOV     R7,#0x6
   \   0000A9   02....       LJMP    ?BANKED_LEAVE_XDATA
   2319          
   2320          /*********************************************************************
   2321           * @fn          ZDO_SyncIndicationCB
   2322           *
   2323           * @brief       This function allows the next higher layer of a
   2324           *              coordinator to be notified of a loss of synchronization
   2325           *                          with the parent/child device.
   2326           *
   2327           * @param       type: 0 - child; 1 - parent
   2328           *
   2329           *
   2330           * @return      none
   2331           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2332          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2333          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2334            (void)shortAddr;  // Remove this line if this parameter is used.
   2335          
   2336            if ( ZSTACK_END_DEVICE_BUILD
   2337              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6402         XRL     A,#0x2
   \   00000A   600F         JZ      ??ZDO_SyncIndicationCB_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6004         JZ      ??ZDO_SyncIndicationCB_1
   \   00000F   6401         XRL     A,#0x1
   \   000011   701B         JNZ     ??CrossCallReturnLabel_45
   \                     ??ZDO_SyncIndicationCB_1:
   \   000013   90....       MOV     DPTR,#(_NIB + 14)
   \   000016   E0           MOVX    A,@DPTR
   \   000017   A2E1         MOV     C,0xE0 /* A   */.1
   \   000019   4013         JC      ??CrossCallReturnLabel_45
   2338            {
   2339              if ( type == 1 )
   \                     ??ZDO_SyncIndicationCB_0:
   \   00001B   7401         MOV     A,#0x1
   \   00001D   69           XRL     A,R1
   \   00001E   700E         JNZ     ??CrossCallReturnLabel_45
   2340              {
   2341                // We lost contact with our parent.  Clear the neighbor Table.
   2342                nwkNeighborInitTable();
   \   000020                ; Setup parameters for call to function nwkNeighborInitTable
   \   000020   12....       LCALL   ??nwkNeighborInitTable?relay
   2343          
   2344                // Start the rejoin process.
   2345                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   000023                ; Setup parameters for call to function ZDApp_SendMsg
   \   000023   7C00         MOV     R4,#0x0
   \   000025   7D00         MOV     R5,#0x0
   \   000027   7B02         MOV     R3,#0x2
   \   000029   7A03         MOV     R2,#0x3
   \   00002B   12....       LCALL   ?Subroutine10 & 0xFFFF
   2346              }
   2347            }
   2348          }
   \                     ??CrossCallReturnLabel_45:
   \   00002E   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   2349          
   2350          /*********************************************************************
   2351           * @fn          ZDO_ManytoOneFailureIndicationCB
   2352           *
   2353           * @brief       This function allows the next higher layer of a
   2354           *              concentrator to be notified of a many-to-one route
   2355           *              failure.
   2356           *
   2357           * @param       none
   2358           *
   2359           *
   2360           * @return      none
   2361           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2362          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2363          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2364            // By default, the concentrator automatically redo many-to-one route
   2365            // discovery to update all many-to-one routes in the network
   2366            // If you want anything processing other than the default,
   2367            // please replace the following code.
   2368          
   2369            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   ??RTG_MTORouteReq?relay
   2370          }
   \   000007   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   2371          
   2372          /*********************************************************************
   2373           * @fn          ZDO_PollConfirmCB
   2374           *
   2375           * @brief       This function allows the next higher layer to be
   2376           *              notified of a Poll Confirm.
   2377           *
   2378           * @param       none
   2379           *
   2380           * @return      none
   2381           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2382          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2383          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2384            (void)status;  // Remove this line if this parameter is used.
   2385            return;
   \   000000   02....       LJMP    ?BRET
   2386          }
   2387          
   2388          /******************************************************************************
   2389           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2390           *
   2391           * @brief       Stub routine implemented by NHLE. NHLE should call
   2392           *              <AddrMgrWriteNV> when appropriate.
   2393           *
   2394           * @param       none
   2395           *
   2396           * @return      none
   2397           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2398          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   2399          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2400          #if defined ( NV_RESTORE )
   2401            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   2402            {
   2403              // Trigger to save info into NV
   2404              ZDApp_NVUpdate();
   2405            }
   2406          #endif
   2407          }
   \   000000   02....       LJMP    ?BRET
   2408          
   2409          /*********************************************************************
   2410           * Call Back Functions from Security  - API
   2411           */
   2412          
   2413           /*********************************************************************
   2414           * @fn          ZDO_UpdateDeviceIndication
   2415           *
   2416           * @brief       This function notifies the "Trust Center" of a
   2417           *              network when a device joins or leaves the network.
   2418           *
   2419           * @param       extAddr - pointer to 64 bit address of new device
   2420           * @param       status  - 0 if a new device joined securely
   2421           *                      - 1 if a new device joined un-securely
   2422           *                      - 2 if a device left the network
   2423           *
   2424           * @return      true if newly joined device should be allowed to
   2425           *                                              remain on network
   2426           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2427          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   2428          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2429            // can implement a network access policy based on the
   2430            // IEEE address of newly joining devices...
   2431            (void)extAddr;
   2432            (void)status;
   2433          
   2434            return ZSuccess;
   \   000000   02....       LJMP    ?Subroutine21 & 0xFFFF
   2435          }
   2436          
   2437          /*********************************************************************
   2438           * @fn          ZDApp_InMsgCB
   2439           *
   2440           * @brief       This function is called to pass up any message that is
   2441           *              not yet supported.  This allows for the developer to
   2442           *              support features themselves..
   2443           *
   2444           * @return      none
   2445           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2446          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   2447          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2448            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EE           MOV     A,R6
   \   00000A   240C         ADD     A,#0xc
   \   00000C   F582         MOV     DPL,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F583         MOV     DPH,A
   \   000013   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000016   7480         MOV     A,#-0x80
   \   000018   59           ANL     A,R1
   \   000019   FB           MOV     R3,A
   \   00001A   E4           CLR     A
   \   00001B   7001         JNZ     ??ZDApp_InMsgCB_0
   \   00001D   EB           MOV     A,R3
   \                     ??ZDApp_InMsgCB_0:
   \   00001E   7046         JNZ     ??ZDApp_InMsgCB_1
   2449            {
   2450              // Handle the response message
   2451            }
   2452            else
   2453            {
   2454              // Handle the request message by sending a generic "not supported".
   2455              // Device Announce doesn't have a response.
   2456              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000020   EE           MOV     A,R6
   \   000021   240B         ADD     A,#0xb
   \   000023   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000026   703E         JNZ     ??ZDApp_InMsgCB_1
   \   000028   7413         MOV     A,#0x13
   \   00002A   68           XRL     A,R0
   \   00002B   7001         JNZ     ??ZDApp_InMsgCB_2
   \   00002D   E9           MOV     A,R1
   \                     ??ZDApp_InMsgCB_2:
   \   00002E   6036         JZ      ??ZDApp_InMsgCB_1
   2457              {
   2458                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   2459                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000030                ; Setup parameters for call to function ZDP_GenericRsp
   \   000030   E8           MOV     A,R0
   \   000031   F5..         MOV     ?V0 + 0,A
   \   000033   7480         MOV     A,#-0x80
   \   000035   49           ORL     A,R1
   \   000036   F5..         MOV     ?V0 + 1,A
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   75..00       MOV     ?V0 + 0,#0x0
   \   000040   75..00       MOV     ?V0 + 1,#0x0
   \   000043   78..         MOV     R0,#?V0 + 0
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   EE           MOV     A,R6
   \   000049   240E         ADD     A,#0xe
   \   00004B   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   2460              }
   2461            }
   \                     ??CrossCallReturnLabel_65:
   \   00004E   FD           MOV     R5,A
   \   00004F   7C84         MOV     R4,#-0x7c
   \   000051   EE           MOV     A,R6
   \   000052   2402         ADD     A,#0x2
   \   000054   0A           INC     R2
   \   000055   0A           INC     R2
   \   000056   EF           MOV     A,R7
   \   000057   3400         ADDC    A,#0x0
   \   000059   FB           MOV     R3,A
   \   00005A   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00005D   F9           MOV     R1,A
   \   00005E   12....       LCALL   ??ZDP_GenericRsp?relay
   \   000061   7404         MOV     A,#0x4
   \   000063   12....       LCALL   ?DEALLOC_XSTACK8
   2462          }
   \                     ??ZDApp_InMsgCB_1:
   \   000066   02....       LJMP    ??Subroutine35_0 & 0xFFFF
   2463          
   2464          
   2465          /*********************************************************************
   2466           * @fn      ZDApp_ChangeMatchDescRespPermission()
   2467           *
   2468           * @brief   Changes the Match Descriptor Response permission.
   2469           *
   2470           * @param   endpoint - endpoint to allow responses
   2471           * @param   action - true to allow responses, false to not
   2472           *
   2473           * @return  none
   2474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2475          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   2476          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2477            // Store the action
   2478            afSetMatch( endpoint, action );
   \   000004                ; Setup parameters for call to function afSetMatch
   \   000004   12....       LCALL   ??afSetMatch?relay
   2479          }
   \   000007   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   2480          
   2481          /*********************************************************************
   2482           * @fn      ZDApp_NetworkInit()
   2483           *
   2484           * @brief   Used to start the network joining process
   2485           *
   2486           * @param   delay - mSec delay to wait before starting
   2487           *
   2488           * @return  none
   2489           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2490          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   2491          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2492            if ( delay )
   \   000004   EA           MOV     A,R2
   \   000005   7001         JNZ     ??ZDApp_NetworkInit_0
   \   000007   EB           MOV     A,R3
   \                     ??ZDApp_NetworkInit_0:
   \   000008   600B         JZ      ??ZDApp_NetworkInit_1
   2493            {
   2494              // Wait awhile before starting the device
   2495              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   00000A                ; Setup parameters for call to function osal_start_timerEx
   \   00000A   EA           MOV     A,R2
   \   00000B   FC           MOV     R4,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FD           MOV     R5,A
   \   00000E   7A01         MOV     R2,#0x1
   \   000010   12....       LCALL   ?Subroutine9 & 0xFFFF
   2496            }
   \                     ??CrossCallReturnLabel_59:
   \   000013   8005         SJMP    ??CrossCallReturnLabel_40
   2497            else
   2498            {
   2499              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_1:
   \   000015                ; Setup parameters for call to function osal_set_event
   \   000015   7A01         MOV     R2,#0x1
   \   000017   12....       LCALL   ?Subroutine24 & 0xFFFF
   2500            }
   2501          }
   \                     ??CrossCallReturnLabel_40:
   \   00001A   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   2502          
   2503          /*********************************************************************
   2504           * @fn      ZDApp_NwkStateUpdateCB()
   2505           *
   2506           * @brief   This function notifies that this device's network
   2507           *          state info has been changed.
   2508           *
   2509           * @param   none
   2510           *
   2511           * @return  none
   2512           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2513          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   2514          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2515            // Notify to save info into NV
   2516            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B02         MOV     R3,#0x2
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_get_timeoutEx?relay
   2517            {
   2518              // Trigger to save info into NV
   2519              ZDApp_NVUpdate();
   2520            }
   2521          }
   \   000010   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   2522          
   2523          /*********************************************************************
   2524           * @fn      ZDApp_NodeProfileSync()
   2525           *
   2526           * @brief   Sync node with stack profile.
   2527           *
   2528           * @param   cfm - ZDO_NetworkDiscoveryCfm_t
   2529           *
   2530           * @return  none
   2531           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2532          void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm )
   \                     ZDApp_NodeProfileSync:
   2533          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2534            networkDesc_t* desc;
   2535            uint16         panID;
   2536          
   2537            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000005   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000008   E0           MOVX    A,@DPTR
   \   000009   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000B   5058         JNC     ??ZDApp_NodeProfileSync_0
   2538            {
   2539              panID = BUILD_UINT16( cfm->panIdLSB, cfm->panIdMSB );
   2540          
   2541              desc = nwk_getNetworkDesc( cfm->extendedPANID, panID, cfm->logicalChannel );
   \   00000D                ; Setup parameters for call to function nwk_getNetworkDesc
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FE           MOV     R6,A
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FD           MOV     R5,A
   \   000028   EE           MOV     A,R6
   \   000029   FC           MOV     R4,A
   \   00002A   EA           MOV     A,R2
   \   00002B   2406         ADD     A,#0x6
   \   00002D   FA           MOV     R2,A
   \   00002E   EB           MOV     A,R3
   \   00002F   3400         ADDC    A,#0x0
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ??nwk_getNetworkDesc?relay
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   2542          
   2543              if (desc != NULL)
   \   000039   E582         MOV     A,DPL
   \   00003B   7002         JNZ     ??ZDApp_NodeProfileSync_1
   \   00003D   E583         MOV     A,DPH
   \                     ??ZDApp_NodeProfileSync_1:
   \   00003F   6024         JZ      ??ZDApp_NodeProfileSync_0
   2544              {
   2545                if ( desc->stackProfile != zgStackProfile )
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FA           MOV     R2,A
   \   00004B   90....       MOV     DPTR,#zgStackProfile
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6A           XRL     A,R2
   \   000050   6013         JZ      ??ZDApp_NodeProfileSync_0
   2546                {
   2547                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000052   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000055   E0           MOVX    A,@DPTR
   \   000056   54F8         ANL     A,#0xf8
   \   000058   4402         ORL     A,#0x2
   \   00005A   F0           MOVX    @DPTR,A
   2548                  ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00005B   740C         MOV     A,#0xc
   \   00005D   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000060   F0           MOVX    @DPTR,A
   2549                  NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000061                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000061   F9           MOV     R1,A
   \   000062   12....       LCALL   ??NLME_SetBroadcastFilter?relay
   2550                }
   2551              }
   2552            }
   2553          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000065   80..         SJMP    ??Subroutine35_0
   2554          
   2555          /*********************************************************************
   2556           * @fn      ZDApp_StartJoiningCycle()
   2557           *
   2558           * @brief   Starts the joining cycle of a device.  This will only
   2559           *          continue an already started (or stopped) joining cycle.
   2560           *
   2561           * @param   none
   2562           *
   2563           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2564           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2565          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   2566          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2567            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   2568            {
   2569              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   7401         MOV     A,#0x1
   \   000013   90....       MOV     DPTR,#continueJoining
   \   000016   F0           MOVX    @DPTR,A
   2570              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??ZDApp_NetworkInit?relay
   2571          
   2572              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   2573            }
   2574            else
   2575              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   2576          }
   2577          
   2578          /*********************************************************************
   2579           * @fn      ZDApp_StopJoiningCycle()
   2580           *
   2581           * @brief   Stops the joining or rejoining process of a device.
   2582           *
   2583           * @param   none
   2584           *
   2585           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2587          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   2588          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2589            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   2590            {
   2591              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000011   E4           CLR     A
   \   000012   90....       MOV     DPTR,#continueJoining
   \   000015   F0           MOVX    @DPTR,A
   2592              return ( TRUE );
   \   000016   7901         MOV     R1,#0x1
   \   000018   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   2593            }
   2594            else
   2595              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001A   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   00001C   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   2596          }
   2597          
   2598          /*********************************************************************
   2599           * @fn      ZDApp_AnnounceNewAddress()
   2600           *
   2601           * @brief   Send Device Announce and hold all transmissions for
   2602           *          new address timeout.
   2603           *
   2604           * @param   none
   2605           *
   2606           * @return  none
   2607           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2608          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   2609          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2610          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2611            // Turn off data request hold
   2612            APSME_HoldDataRequests( 0 );
   2613          #endif
   2614          
   2615            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   2616                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   000005                ; Setup parameters for call to function NLME_GetExtAddr
   \   000005   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000008   8A..         MOV     ?V0 + 0,R2
   \   00000A   8B..         MOV     ?V0 + 1,R3
   \   00000C   AE..         MOV     R6,?V0 + 0
   \   00000E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000E   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000011                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000011   75..00       MOV     ?V0 + 0,#0x0
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000019   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   EE           MOV     A,R6
   \   00001F   FC           MOV     R4,A
   \   000020   AD..         MOV     R5,?V0 + 1
   \   000022   12....       LCALL   ??ZDP_DeviceAnnce?relay
   \   000025   7401         MOV     A,#0x1
   \   000027   80..         SJMP    ??Subroutine34_0
   2617          
   2618          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2619            // Setup the timeout
   2620            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   2621          #endif
   2622          }
   2623          
   2624          /*********************************************************************
   2625           * @fn          ZDApp_NVUpdate
   2626           *
   2627           * @brief       Set the NV Update Timer.
   2628           *
   2629           * @param       none
   2630           *
   2631           * @return      none
   2632           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2633          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   2634          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2635          #if defined ( NV_RESTORE )
   2636            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   2637          #endif
   2638          }
   \   000000   02....       LJMP    ?BRET
   2639          
   2640          /*********************************************************************
   2641           * @fn      ZDApp_CoordStartPANIDConflictCB()
   2642           *
   2643           * @brief   Returns a PAN ID for the network layer to use during
   2644           *          a coordinator start and there is another network with
   2645           *          the intended PANID.
   2646           *
   2647           * @param   panid - the intended PAN ID
   2648           *
   2649           * @return  PANID to try
   2650           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2651          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   2652          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2653            return ( panid + 1 );
   \   000000   7401         MOV     A,#0x1
   \   000002   2A           ADD     A,R2
   \   000003   0A           INC     R2
   \   000004   E4           CLR     A
   \   000005   3B           ADDC    A,R3
   \   000006   FB           MOV     R3,A
   \   000007   02....       LJMP    ?BRET
   2654          }
   2655          
   2656          /*********************************************************************
   2657           * @fn          ZDO_SrcRtgIndCB
   2658           *
   2659           * @brief       This function notifies the ZDO available src route record received.
   2660           *
   2661           * @param       srcAddr - source address of the source route
   2662           * @param       relayCnt - number of devices in the relay list
   2663           * @param       relayList - relay list of the source route
   2664           *
   2665           * @return      none
   2666           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2667          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   2668          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV     A,#-0x5
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   2669            zdoSrcRtg_t srcRtg;
   2670          
   2671            srcRtg.srcAddr = srcAddr;
   \   000009   12....       LCALL   ?Subroutine2 & 0xFFFF
   2672            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_74:
   \   00000C   7402         MOV     A,#0x2
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E9           MOV     A,R1
   \   000012   F0           MOVX    @DPTR,A
   2673            srcRtg.pRelayList = pRelayList;
   \   000013   7403         MOV     A,#0x3
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   EC           MOV     A,R4
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   ED           MOV     A,R5
   \   00001C   F0           MOVX    @DPTR,A
   2674          
   2675            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001D   90....       MOV     DPTR,#zdoCBFunc
   \   000020   E0           MOVX    A,@DPTR
   \   000021   7002         JNZ     ??ZDO_SrcRtgIndCB_0
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000025   6013         JZ      ??ZDO_SrcRtgIndCB_1
   2676            {
   2677              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000027                ; Setup parameters for indirect call
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   AA82         MOV     R2,DPL
   \   00002F   AB83         MOV     R3,DPH
   \   000031   90....       MOV     DPTR,#zdoCBFunc
   \   000034   12....       LCALL   ?Subroutine6 & 0xFFFF
   2678            }
   \                     ??CrossCallReturnLabel_6:
   \   000037   12....       LCALL   ?CALL_IND
   2679          }
   \                     ??ZDO_SrcRtgIndCB_1:
   \   00003A   02....       LJMP    ?Subroutine20 & 0xFFFF
   2680          
   2681          
   2682          /*********************************************************************
   2683           * @fn          ZDO_RegisterForZdoCB
   2684           *
   2685           * @brief       Call this function to register the higher layer (for
   2686           *              example, the Application layer or MT layer) with ZDO
   2687           *              callbacks to get notified of some ZDO indication like
   2688           *              existence of a concentrator or receipt of a source
   2689           *              route record.
   2690           *
   2691           * @param       indID - ZDO Indication ID
   2692           * @param       pFn   - Callback function pointer
   2693           *
   2694           * @return      ZSuccess - successful, ZInvalidParameter if not
   2695           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2696          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   2697          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2698            // Check the range of the indication ID
   2699            if ( indID < MAX_ZDO_CB_FUNC )
   \   000004   E9           MOV     A,R1
   \   000005   C3           CLR     C
   \   000006   9402         SUBB    A,#0x2
   \   000008   5018         JNC     ??ZDO_RegisterForZdoCB_0
   2700            {
   2701              zdoCBFunc[indID] = pFn;
   \   00000A   E9           MOV     A,R1
   \   00000B   C3           CLR     C
   \   00000C   33           RLC     A
   \   00000D   F8           MOV     R0,A
   \   00000E   E4           CLR     A
   \   00000F   33           RLC     A
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   24..         ADD     A,#(zdoCBFunc & 0xff)
   \   000014   F582         MOV     DPL,A
   \   000016   E9           MOV     A,R1
   \   000017   34..         ADDC    A,#((zdoCBFunc >> 8) & 0xff)
   \   000019   F583         MOV     DPH,A
   \   00001B   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   2702              return ZSuccess;
   \                     ??CrossCallReturnLabel_71:
   \   00001E   7900         MOV     R1,#0x0
   \   000020   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   2703            }
   2704          
   2705            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000022   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000024   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   2706          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....0000     DW ZDAppTaskID, 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SecInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDOInitDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ReadNetworkRestoreState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppDetermineDeviceType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkStartEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceAuthEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNetworkStateEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNetworkState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitUserDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppCheckForHoldKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessOSALMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RegisterCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessNetworkJoin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerStart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerCancel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlBypass?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlStartup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendEventMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkDiscoveryConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkFormationConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartRouterConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AddrChangeIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConcentratorIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveCnf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SyncIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ManytoOneFailureIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_PollConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AddrMgrWriteNVRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateDeviceIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InMsgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ChangeMatchDescRespPermission?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkStateUpdateCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NodeProfileSync?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StartJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StopJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_AnnounceNewAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NVUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_CoordStartPANIDConflictCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SrcRtgIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB
   2707          
   2708          /*********************************************************************
   2709          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     AddrMgrWriteNVRequest              0      0      0
     ZDAppCheckForHoldKey               2      0      0
       -> HalKeyRead                    4      0      0
     ZDAppDetermineDeviceType           2      0     12
       -> nwk_ExtPANIDValid             4      0      0
     ZDApp_AnnounceNewAddress           0      0     23
       -> NLME_GetExtAddr               0      0     20
       -> NLME_GetShortAddr             0      0     20
       -> ZDP_DeviceAnnce               0      0     22
     ZDApp_ChangeMatchDescRespPermission
                                        2      0      0
       -> afSetMatch                    4      0      0
     ZDApp_CoordStartPANIDConflictCB
                                        0      0      0
     ZDApp_DeviceAuthEvt                2      0      9
       -> ZDApp_ResetTimerCancel        4      0      0
       -> osal_set_event                4      0      0
       -> NLME_StartRouterRequest       4      0      0
       -> ZDApp_SaveNwkKey              4      0      0
       -> ZDApp_AnnounceNewAddress      4      0      0
       -> NLME_SetPollRate              4      0      0
     ZDApp_InMsgCB                      0      0     14
       -> ZDP_GenericRsp                0      0     28
     ZDApp_Init                         2      0      0
       -> NLME_GetExtAddr               4      0      0
       -> ZDAppCheckForHoldKey          4      0      0
       -> ZDO_Init                      4      0      0
       -> afRegister                    4      0      0
       -> ZDOInitDevice                 4      0      0
       -> HalLedBlink                   4      0      0
       -> ZDApp_RegisterCBs             4      0      0
     ZDApp_InitUserDesc                 0      0     31
       -> osal_memset                   0      0     54
       -> osal_nv_item_init             0      0     58
       -> osal_nv_read                  0      0     62
     ZDApp_LeaveCtrlBypass              2      0      0
     ZDApp_LeaveCtrlInit                0      0     26
       -> osal_nv_item_init             0      0     24
       -> osal_nv_read                  0      0     28
     ZDApp_LeaveCtrlSet                 0      0     14
       -> osal_nv_write                 0      0     28
     ZDApp_LeaveCtrlStartup             1      0     26
       -> osal_nv_write                 0      0     28
     ZDApp_LeaveReset                   2      0     16
       -> ZDApp_LeaveCtrlSet            4      0      0
       -> ZDApp_ResetTimerStart         4      0      0
     ZDApp_LeaveUpdate                  2      0     16
       -> NLME_RemoveChild              4      0      0
     ZDApp_NVUpdate                     0      0      0
     ZDApp_NetworkInit                  2      0     16
       -> osal_start_timerEx            4      0      0
       -> osal_set_event                4      0      0
     ZDApp_NetworkStartEvt              2      0     10
       -> osal_pwrmgr_device            4      0      0
       -> osal_set_event                4      0      0
       -> NLME_GetEnergyThreshold       4      0      0
       -> NLME_GetEnergyThreshold       4      0      0
       -> NLME_SetEnergyThreshold       4      0      0
       -> osal_set_event                4      0      0
       -> osal_set_event                4      0      0
     ZDApp_NodeProfileSync              0      0     26
       -> nwk_getNetworkDesc            0      0     20
       -> NLME_SetBroadcastFilter       0      0     20
     ZDApp_NwkStateUpdateCB             2      0      0
       -> osal_get_timeoutEx            4      0      0
     ZDApp_ProcessMsgCBs                0      0     70
       -> ZDO_ParseAddrRsp              0      0    108
       -> ZDO_UpdateAddrManager         0      0    108
       -> osal_mem_free                 0      0    108
       -> ZDO_ParseBindUnbindReq        0      0    108
       -> ZDO_ProcessBindUnbindReq      0      0    108
       -> ZDMatchSendState              0      0    108
       -> ZDO_ParseEndDeviceBindReq     0      0    108
       -> ZDO_MatchEndDeviceBind        0      0    108
       -> osal_mem_free                 0      0    108
       -> osal_mem_free                 0      0    108
     ZDApp_ProcessNetworkJoin           0      0     28
       -> osal_set_event                0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> NLME_StartRouterRequest       0      0     24
       -> NLME_GetShortAddr             0      0     24
       -> ZMacSetReq                    0      0     24
       -> nwkNeighborInitTable          0      0     24
       -> NLME_NwkDiscTerm              0      0     24
       -> osal_rand                     0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> osal_set_event                0      0     24
       -> NLME_SetPollRate              0      0     24
       -> NLME_SetQueuedPollRate        0      0     24
       -> NLME_SetResponseRate          0      0     24
       -> NLME_StartRouterRequest       0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> nwkNeighborInitTable          0      0     24
       -> NLME_NwkDiscTerm              0      0     24
       -> osal_rand                     0      0     24
       -> ZDApp_NetworkInit             0      0     24
     ZDApp_ProcessOSALMsg               1      0     27
       -> ZDP_IncomingData              0      0     32
       -> ZDApp_ProcessMsgCBs           0      0     32
       -> ZDApp_NodeProfileSync         0      0     32
       -> NLME_JoinRequest              0      0     34
       -> osal_rand                     0      0     32
       -> ZDApp_NetworkInit             0      0     32
       -> osal_rand                     0      0     32
       -> ZMacSetReq                    0      0     32
       -> ZMacSetReq                    0      0     32
       -> ZMacSetReq                    0      0     32
       -> NLME_ReJoinRequest            0      0     32
       -> osal_rand                     0      0     32
       -> ZDApp_NetworkInit             0      0     32
       -> NLME_SetPollRate              0      0     32
       -> NLME_SetQueuedPollRate        0      0     32
       -> NLME_SetResponseRate          0      0     32
       -> osal_rand                     0      0     32
       -> ZDApp_NetworkInit             0      0     32
       -> ZDApp_ProcessNetworkJoin      0      0     32
       -> sAddrExtCpy                   0      0     32
       -> ZDApp_NetworkInit             0      0     32
     ZDApp_ProcessSecEvent              0      0      9
       -> ZDSecMgrNewDeviceEvent        0      0     18
       -> osal_start_timerEx            0      0     18
       -> ZDApp_DeviceAuthEvt           0      0     18
       -> ZDApp_SaveNwkKey              0      0     18
       -> ZDSecMgrSaveTCLinkKey         0      0     18
     ZDApp_ProcessSecMsg                2      0      0
       -> ZDSecMgrTransportKeyInd       4      0      0
       -> ZDSecMgrUpdateDeviceInd       4      0      0
       -> ZDSecMgrSwitchKeyInd          4      0      0
     ZDApp_ReadNetworkRestoreState      0      0      9
       -> zgReadStartupOptions          0      0     18
     ZDApp_RegisterCBs                  2      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
     ZDApp_ResetNwkKey                  0      0     35
       -> osal_memset                   0      0     62
       -> osal_nv_write                 0      0     70
     ZDApp_ResetTimerCancel             2      0      0
       -> osal_stop_timerEx             4      0      0
     ZDApp_ResetTimerStart              2      0      0
       -> osal_start_timerEx            4      0      0
     ZDApp_RestoreNetworkState          0      0      9
       -> NLME_InitNV                   0      0     18
       -> NLME_RestoreFromNV            0      0     18
       -> NLME_GetShortAddr             0      0     18
       -> sAddrExtCpy                   0      0     18
     ZDApp_RestoreNwkKey                2      0     37
       -> osal_nv_read                  0      0     74
       -> osal_memset                   0      0     66
     ZDApp_SaveNetworkStateEvt          0      0      0
     ZDApp_SaveNwkKey                   0      0     46
       -> SSP_ReadNwkActiveKey          0      0     66
       -> osal_nv_write                 0      0     74
       -> osal_memset                   0      0     66
     ZDApp_SecInit                      2      0      0
       -> ZDSecMgrInit                  4      0      0
     ZDApp_SendEventMsg                 2      0      0
       -> ZDApp_SendMsg                 4      0      0
     ZDApp_SendMsg                      1      0     55
       -> osal_msg_allocate             0      0     40
       -> osal_memcpy                   0      0     46
       -> osal_msg_send                 0      0     40
     ZDApp_StartJoiningCycle            2      0      0
       -> ZDApp_NetworkInit             4      0      0
     ZDApp_StopJoiningCycle             2      0      0
     ZDApp_event_loop                   0      0     10
       -> ZDO_StartDevice               0      0     20
       -> ZDApp_ProcessOSALMsg          0      0     20
       -> osal_msg_deallocate           0      0     20
       -> osal_msg_receive              0      0     20
       -> ZDApp_NetworkStartEvt         0      0     20
       -> osal_pwrmgr_device            0      0     20
       -> osal_set_event                0      0     20
       -> ZDO_UpdateNwkStatus           0      0     20
       -> osal_start_timerEx            0      0     20
       -> Onboard_soft_reset            0      0     20
     ZDOInitDevice                      0      0     12
       -> zgInitItems                   0      0     24
       -> ZDConfig_InitDescriptors      0      0     24
       -> ZDApp_LeaveCtrlInit           0      0     24
       -> ZDApp_LeaveCtrlStartup        0      0     24
       -> zgWriteStartupOptions         0      0     24
       -> osal_set_event                0      0     24
       -> ZDAppDetermineDeviceType      0      0     24
       -> osal_rand                     0      0     24
       -> ZDSecMgrInit                  0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> NLME_SetBroadcastFilter       0      0     24
     ZDO_AddrChangeIndicationCB         2      0      0
       -> osal_set_event                4      0      0
       -> ZDApp_AnnounceNewAddress      4      0      0
     ZDO_ConcentratorIndicationCB       3      0      5
     ZDO_JoinConfirmCB                  2      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> ZDApp_SendMsg                 4      0      0
     ZDO_JoinIndicationCB               0      0      1
     ZDO_LeaveCnf                       0      0     10
       -> NLME_GetExtAddr               0      0     20
       -> sAddrExtCmp                   0      0     20
       -> ZDApp_LeaveReset              0      0     20
       -> ZDApp_LeaveUpdate             0      0     20
     ZDO_LeaveInd                       1      0     16
       -> NLME_LeaveRsp                 0      0     32
       -> ZDApp_LeaveReset              0      0     32
       -> NLME_GetCoordShortAddr        0      0     32
       -> ZDApp_LeaveUpdate             0      0     32
     ZDO_ManytoOneFailureIndicationCB
                                        2      0      0
       -> RTG_MTORouteReq               4      0      0
     ZDO_NetworkDiscoveryConfirmCB      1      0     32
       -> nwk_ExtPANIDValid             0      0     64
       -> sAddrExtCmp                   0      0     64
       -> osal_set_event                0      0     64
       -> sAddrExtCpy                   0      0     64
       -> ZDApp_SendMsg                 0      0     64
     ZDO_NetworkFormationConfirmCB      2      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> osal_set_event                4      0      0
     ZDO_PollConfirmCB                  0      0      0
     ZDO_RegisterForZdoCB               2      0      0
     ZDO_SrcRtgIndCB                    3      0      5
     ZDO_StartRouterConfirmCB           2      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> osal_set_event                4      0      0
     ZDO_SyncIndicationCB               2      0      0
       -> nwkNeighborInitTable          4      0      0
       -> ZDApp_SendMsg                 4      0      0
     ZDO_UpdateDeviceIndication         0      0      0


   Segment part sizes:

     Function/Label                              Bytes
     --------------                              -----
     _A_P1                                          1
     zdoDiscCounter                                 1
     ZDAppNwkAddr                                   9
     zdappMgmtNwkDiscRspTransSeq                    1
     zdappMgmtNwkDiscReqInProgress                  1
     zdappMgmtNwkDiscRspAddr                        9
     zdappMgmtNwkDiscStartIndex                     1
     zdappMgmtSavedNwkState                         1
     nwkFrameCounterChanges                         2
     continueJoining                                1
     _tmpRejoinState                                1
     ZDO_UseExtendedPANID                           8
     zdoCBFunc                                      4
     ZDAppTaskID                                    1
     nwkStatus                                      1
     ZDApp_AutoFindMode_epDesc                      2
     ZDApp_LeaveCtrl                                1
     devState                                       1
     devStartMode                                   1
     retryCnt                                       1
     ZDApp_epDesc                                   6
     ZDApp_SavedPollRate                            2
     ZDApp_Init                                    81
     ??Subroutine31_0                               7
     ZDApp_SecInit                                 10
     ZDApp_event_loop                             228
     ?Subroutine24                                 11
     ??Subroutine30_0                               6
     ?Subroutine4                                   5
     ??Subroutine35_0                               5
     ZDApp_ProcessSecEvent                        148
     ?Subroutine23                                  5
     ?Subroutine9                                   5
     ?Subroutine12                                  6
     ??Subroutine36_0                               6
     ZDOInitDevice                                141
     ?Subroutine22                                  2
     ??Subroutine34_0                               3
     ?Subroutine2                                   6
     ZDApp_ReadNetworkRestoreState                 21
     ZDAppDetermineDeviceType                      74
     ZDApp_NetworkStartEvt                         75
     ?Subroutine26                                  6
     ZDApp_DeviceAuthEvt                           68
     ?Subroutine8                                   9
     ?Subroutine0                                   8
     ?Subroutine7                                   6
     ZDApp_SaveNetworkStateEvt                      3
     ZDApp_RestoreNetworkState                     67
     ?Subroutine1                                  13
     ZDApp_InitUserDesc                            93
     ?Subroutine15                                 32
     ZDAppCheckForHoldKey                          20
     ZDApp_ProcessOSALMsg                         472
     ?Subroutine6                                   9
     ?Subroutine14                                 22
     ?Subroutine13                                 20
     ?Subroutine17                                 11
     ZDApp_ProcessMsgCBs                          273
     ?Subroutine16                                  3
     ??Subroutine32_0                               3
     ??Subroutine33_0                               6
     ZDApp_RegisterCBs                             48
     ?Subroutine5                                   2
     ??Subroutine28_0                               9
     ZDApp_ProcessSecMsg                           73
     ZDApp_ProcessNetworkJoin                     404
     ?Subroutine11                                 12
     ZDApp_SaveNwkKey                              99
     ?Subroutine25                                 10
     ?Subroutine19                                  6
     ??Subroutine29_0                               8
     ZDApp_ResetNwkKey                             40
     ZDApp_RestoreNwkKey                          157
     ZDApp_ResetTimerStart                         16
     ZDApp_ResetTimerCancel                        19
     ZDApp_LeaveCtrlInit                           65
     ?Subroutine3                                  14
     ZDApp_LeaveCtrlSet                            51
     ZDApp_LeaveCtrlBypass                         17
     ZDApp_LeaveCtrlStartup                        75
     ZDApp_LeaveReset                              16
     ZDApp_LeaveUpdate                             23
     ZDApp_SendEventMsg                             8
     ?Subroutine27                                  5
     ?Subroutine10                                  9
     ZDApp_SendMsg                                100
     BeCoor                                         2
     ZDO_NetworkDiscoveryConfirmCB                458
     ZDO_NetworkFormationConfirmCB                 33
     ?Subroutine18                                 19
     ZDO_StartRouterConfirmCB                      33
     ZDO_JoinConfirmCB                             39
     ZDO_AddrChangeIndicationCB                    13
     ZDO_JoinIndicationCB                           0
     ?Subroutine21                                  5
     ?Subroutine20                                  5
     ZDO_ConcentratorIndicationCB                  61
     ZDO_LeaveCnf                                 100
     ZDO_LeaveInd                                 172
     ZDO_SyncIndicationCB                          49
     ZDO_ManytoOneFailureIndicationCB
                                                   10
     ZDO_PollConfirmCB                              3
     AddrMgrWriteNVRequest                          3
     ZDO_UpdateDeviceIndication                     3
     ZDApp_InMsgCB                                105
     ZDApp_ChangeMatchDescRespPermission
                                                   10
     ZDApp_NetworkInit                             29
     ZDApp_NwkStateUpdateCB                        19
     ZDApp_NodeProfileSync                        103
     ZDApp_StartJoiningCycle                       39
     ZDApp_StopJoiningCycle                        31
     ZDApp_AnnounceNewAddress                      41
     ZDApp_NVUpdate                                 3
     ZDApp_CoordStartPANIDConflictCB
                                                   10
     ZDO_SrcRtgIndCB                               61
     ZDO_RegisterForZdoCB                          39
     ?<Initializer for zdoDiscCounter>              1
     ?<Initializer for continueJoining>             1
     ?<Initializer for devState>                    1
     ?<Initializer for ZDApp_epDesc>                6
     ?<Initializer for ZDApp_SavedPollRate>         2
     __Constant_1                                   4
     __Constant_0                                   4
     __Constant_3e8                                 4
     ??ZDApp_Init?relay                             6
     ??ZDApp_SecInit?relay                          6
     ??ZDApp_event_loop?relay                       6
     ??ZDApp_ProcessSecEvent?relay                  6
     ??ZDOInitDevice?relay                          6
     ??ZDApp_ReadNetworkRestoreState?relay          6
     ??ZDAppDetermineDeviceType?relay               6
     ??ZDApp_NetworkStartEvt?relay                  6
     ??ZDApp_DeviceAuthEvt?relay                    6
     ??ZDApp_SaveNetworkStateEvt?relay              6
     ??ZDApp_RestoreNetworkState?relay              6
     ??ZDApp_InitUserDesc?relay                     6
     ??ZDAppCheckForHoldKey?relay                   6
     ??ZDApp_ProcessOSALMsg?relay                   6
     ??ZDApp_ProcessMsgCBs?relay                    6
     ??ZDApp_RegisterCBs?relay                      6
     ??ZDApp_ProcessSecMsg?relay                    6
     ??ZDApp_ProcessNetworkJoin?relay               6
     ??ZDApp_SaveNwkKey?relay                       6
     ??ZDApp_ResetNwkKey?relay                      6
     ??ZDApp_RestoreNwkKey?relay                    6
     ??ZDApp_ResetTimerStart?relay                  6
     ??ZDApp_ResetTimerCancel?relay                 6
     ??ZDApp_LeaveCtrlInit?relay                    6
     ??ZDApp_LeaveCtrlSet?relay                     6
     ??ZDApp_LeaveCtrlBypass?relay                  6
     ??ZDApp_LeaveCtrlStartup?relay                 6
     ??ZDApp_LeaveReset?relay                       6
     ??ZDApp_LeaveUpdate?relay                      6
     ??ZDApp_SendEventMsg?relay                     6
     ??ZDApp_SendMsg?relay                          6
     ??ZDO_NetworkDiscoveryConfirmCB?relay          6
     ??ZDO_NetworkFormationConfirmCB?relay          6
     ??ZDO_StartRouterConfirmCB?relay               6
     ??ZDO_JoinConfirmCB?relay                      6
     ??ZDO_AddrChangeIndicationCB?relay             6
     ??ZDO_JoinIndicationCB?relay                   6
     ??ZDO_ConcentratorIndicationCB?relay           6
     ??ZDO_LeaveCnf?relay                           6
     ??ZDO_LeaveInd?relay                           6
     ??ZDO_SyncIndicationCB?relay                   6
     ??ZDO_ManytoOneFailureIndicationCB?relay       6
     ??ZDO_PollConfirmCB?relay                      6
     ??AddrMgrWriteNVRequest?relay                  6
     ??ZDO_UpdateDeviceIndication?relay             6
     ??ZDApp_InMsgCB?relay                          6
     ??ZDApp_ChangeMatchDescRespPermission?relay    6
     ??ZDApp_NetworkInit?relay                      6
     ??ZDApp_NwkStateUpdateCB?relay                 6
     ??ZDApp_NodeProfileSync?relay                  6
     ??ZDApp_StartJoiningCycle?relay                6
     ??ZDApp_StopJoiningCycle?relay                 6
     ??ZDApp_AnnounceNewAddress?relay               6
     ??ZDApp_NVUpdate?relay                         6
     ??ZDApp_CoordStartPANIDConflictCB?relay        6
     ??ZDO_SrcRtgIndCB?relay                        6
     ??ZDO_RegisterForZdoCB?relay                   6

 
 4 771 bytes in segment BANKED_CODE
   342 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
    11 bytes in segment XDATA_I
    11 bytes in segment XDATA_ID
    12 bytes in segment XDATA_ROM_C
    46 bytes in segment XDATA_Z
 
 5 124 bytes of CODE  memory
     0 bytes of CONST memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  1 byte  shared)
    57 bytes of XDATA memory

Errors: none
Warnings: none
