###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                13/Aug/2011  12:11:27 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k-CC2530-2.3.1-1.4.0\Components\mt\MT_ZDO.c        #
#    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRoute #
#                          r.cfg" (-DCPU32MHZ -DROOT=__near_func              #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3. #
#                          1-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\Tools\CC2530DB\f8wConfig.cfg"            #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x11FF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Documents and           #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Components\mt\MT_ZDO.c" -D ZTOOL_P1 -D         #
#                          MT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D         #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D              #
#                          BUILD_ALL_DEVICES -D xLCD_SUPPORTED=DEBUG -D       #
#                          NWK_AUTO_POLL -D SOFT_SATRT -D ZDO_COORDINATOR     #
#                          -lC "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          ZStack-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\RouterEB\List\" -lA             #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\RouterEB\List\" --diag_suppress     #
#                          Pe001,Pa010 -o "C:\Documents and                   #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\Rou #
#                          terEB\Obj\" -e --require_prototypes --debug        #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\"   #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\SOURCE\" -I "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3. #
#                          1-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\ZMAIN\TI2530DB\" -I "C:\Documents and    #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MT\" -I "C:\Documents and   #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I            #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGE #
#                          T\CC2530EB\" -I "C:\Documents and                  #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I         #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCL #
#                          UDE\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\AF\" -I               #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\ZStack-CC2530-2.3.1-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\SEC\" -I "C:\Documents and                      #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\SAPI\" -I             #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\ZStack-CC2530-2.3.1-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\ZDO\" -I "C:\Documents and                      #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\ZMAC\F8W\" -I               #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"    #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVIC #
#                          ES\SADDR\" -I "C:\Documents and                    #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\" -I         #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLU #
#                          DE\" -I "C:\Documents and                          #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I         #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_L #
#                          EVEL\srf04\" -I "C:\Documents and                  #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_ #
#                          CHIP\" -I D:\Zigbee\IAR\8051\INC\ -I               #
#                          D:\Zigbee\IAR\8051\INC\CLIB\ -Ohz                  #
#    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\RouterEB\List\MT_ZDO.lst             #
#    Object file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\RouterEB\Obj\MT_ZDO.r51              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1.4.0\Components\mt\MT_ZDO.c
      1          /**************************************************************************************************
      2            Filename:       MT_ZDO.c
      3            Revised:        $Date: 2010-07-22 11:32:05 -0700 (Thu, 22 Jul 2010) $
      4            Revision:       $Revision: 23103 $
      5          
      6            Description:    MonitorTest functions for the ZDO layer.
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          #ifdef MT_ZDO_FUNC
     41          
     42          /**************************************************************************************************
     43           * INCLUDES
     44           **************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Nv.h"
     48          #include "MT.h"
     49          #include "MT_ZDO.h"
     50          #include "APSMEDE.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDApp.h"
     55          
     56          #if !defined( WIN32 )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #if defined ( MT_SYS_KEY_MANAGEMENT )
     61            #include "ZDSecMgr.h"
     62          #endif
     63          
     64          #include "nwk_util.h"
     65          
     66          /**************************************************************************************************
     67           * CONSTANTS
     68           **************************************************************************************************/
     69          #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
     70          #define MT_ZDO_ADDR_RSP_LEN               0x0D
     71          #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
     72          
     73          #define MTZDO_RESPONSE_BUFFER_LEN   100
     74          
     75          #define MTZDO_MAX_MATCH_CLUSTERS    16
     76          #define MTZDO_MAX_ED_BIND_CLUSTERS  15
     77          
     78          // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
     79          #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
     80          
     81          #define MT_ZDO_STATUS_LEN   1
     82          
     83          /**************************************************************************************************
     84           * GLOBAL VARIABLES
     85           **************************************************************************************************/
     86          uint32 _zdoCallbackSub;
     87          
     88          /**************************************************************************************************
     89           * LOCAL VARIABLES
     90           **************************************************************************************************/
     91          
     92          /**************************************************************************************************
     93           * LOCAL FUNCTIONS
     94           **************************************************************************************************/
     95          #if defined (MT_ZDO_FUNC)
     96          void MT_ZdoNWKAddressRequest(uint8 *pBuf);
     97          void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
     98          void MT_ZdoNodeDescRequest(uint8 *pBuf);
     99          void MT_ZdoPowerDescRequest(uint8 *pBuf);
    100          void MT_ZdoSimpleDescRequest(uint8 *pBuf);
    101          void MT_ZdoActiveEpRequest(uint8 *pBuf);
    102          void MT_ZdoMatchDescRequest(uint8 *pBuf);
    103          void MT_ZdoComplexDescRequest(uint8 *pBuf);
    104          void MT_ZdoUserDescRequest(uint8 *pBuf);
    105          void MT_ZdoEndDevAnnce(uint8 *pBuf);
    106          void MT_ZdoUserDescSet(uint8 *pBuf);
    107          void MT_ZdoServiceDiscRequest(uint8 *pBuf);
    108          void MT_ZdoEndDevBindRequest(uint8 *pBuf);
    109          void MT_ZdoBindRequest(uint8 *pBuf);
    110          void MT_ZdoUnbindRequest(uint8 *pBuf);
    111          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
    112          #if defined ( MT_SYS_KEY_MANAGEMENT )
    113          void MT_ZdoSetLinkKey(uint8 *pBuf);
    114          void MT_ZdoRemoveLinkKey(uint8 *pBuf);
    115          void MT_ZdoGetLinkKey(uint8 *pBuf);
    116          #endif /* MT_SYS_KEY_MANAGEMENT */
    117          #if defined (MT_ZDO_MGMT)
    118          void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
    119          void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
    120          void MT_ZdoMgmtBindRequest(uint8 *pBuf);
    121          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
    122          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
    123          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
    124          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
    125          #endif /* MT_ZDO_MGMT */
    126          void MT_ZdoStartupFromApp(uint8 *pBuf);
    127          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
    128          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
    129          #endif /* MT_ZDO_FUNC */
    130          
    131          #if defined (MT_ZDO_CB_FUNC)
    132          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
    133          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
    134          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
    135          void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
    136          void* MT_ZdoSrcRtgCB( void *pStr );
    137          #endif /* MT_ZDO_CB_FUNC */
    138          
    139          #if defined (MT_ZDO_FUNC)
    140          /***************************************************************************************************
    141           * @fn      MT_ZdoInit
    142           *
    143           * @brief   MT ZDO initialization
    144           *
    145           * @param   none
    146           *
    147           * @return  none
    148           ***************************************************************************************************/
    149          void MT_ZdoInit(void)
    150          {
    151          #ifdef MT_ZDO_CB_FUNC
    152            /* Register with ZDO for indication callbacks */
    153            ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
    154          #endif
    155          }
    156          
    157          /***************************************************************************************************
    158           * @fn      MT_ZdoCommandProcessing
    159           *
    160           * @brief
    161           *
    162           *   Process all the ZDO commands that are issued by test tool
    163           *
    164           * @param   pBuf - pointer to the msg buffer
    165           *
    166           *          | LEN  | CMD0  | CMD1  |  DATA  |
    167           *          |  1   |   1   |   1   |  0-255 |
    168           *
    169           * @return  status
    170           ***************************************************************************************************/
    171          uint8 MT_ZdoCommandProcessing(uint8* pBuf)
    172          {
    173            uint8 status = MT_RPC_SUCCESS;
    174          
    175            switch (pBuf[MT_RPC_POS_CMD1])
    176            {
    177          #if defined ( ZDO_NWKADDR_REQUEST )
    178              case MT_ZDO_NWK_ADDR_REQ:
    179                MT_ZdoNWKAddressRequest(pBuf);
    180                break;
    181          #endif
    182          
    183          #if defined ( ZDO_IEEEADDR_REQUEST )
    184              case MT_ZDO_IEEE_ADDR_REQ:
    185                MT_ZdoIEEEAddrRequest(pBuf);
    186                break;
    187          #endif
    188          
    189          #if defined ( ZDO_NODEDESC_REQUEST )
    190              case MT_ZDO_NODE_DESC_REQ:
    191                MT_ZdoNodeDescRequest(pBuf);
    192                break;
    193          #endif
    194          
    195          #if defined ( ZDO_POWERDESC_REQUEST )
    196              case MT_ZDO_POWER_DESC_REQ:
    197                MT_ZdoPowerDescRequest(pBuf);
    198                break;
    199          #endif
    200          
    201          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    202              case MT_ZDO_SIMPLE_DESC_REQ:
    203                MT_ZdoSimpleDescRequest(pBuf);
    204                break;
    205          #endif
    206          
    207          #if defined ( ZDO_ACTIVEEP_REQUEST )
    208              case MT_ZDO_ACTIVE_EP_REQ:
    209                MT_ZdoActiveEpRequest(pBuf);
    210                break;
    211          #endif
    212          
    213          #if defined ( ZDO_MATCH_REQUEST )
    214              case MT_ZDO_MATCH_DESC_REQ:
    215                MT_ZdoMatchDescRequest(pBuf);
    216                break;
    217          #endif
    218          
    219          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    220              case MT_ZDO_COMPLEX_DESC_REQ:
    221                MT_ZdoComplexDescRequest(pBuf);
    222                break;
    223          #endif
    224          
    225          #if defined ( ZDO_USERDESC_REQUEST )
    226              case MT_ZDO_USER_DESC_REQ:
    227                MT_ZdoUserDescRequest(pBuf);
    228                break;
    229          #endif
    230          
    231          #if defined ( ZDO_ENDDEVICE_ANNCE )
    232              case MT_ZDO_END_DEV_ANNCE:
    233                MT_ZdoEndDevAnnce(pBuf);
    234                break;
    235          #endif      
    236          
    237          #if defined ( ZDO_USERDESCSET_REQUEST )
    238              case MT_ZDO_USER_DESC_SET:
    239                MT_ZdoUserDescSet(pBuf);
    240                break;
    241          #endif
    242          
    243          #if defined ( ZDO_SERVERDISC_REQUEST )
    244              case MT_ZDO_SERVICE_DISC_REQ:
    245                MT_ZdoServiceDiscRequest(pBuf);
    246                break;
    247          #endif
    248          
    249          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    250              case MT_ZDO_END_DEV_BIND_REQ:
    251                MT_ZdoEndDevBindRequest(pBuf);
    252                break;
    253          #endif
    254          
    255          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    256              case MT_ZDO_BIND_REQ:
    257                MT_ZdoBindRequest(pBuf);
    258                break;
    259          #endif
    260          
    261          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    262              case MT_ZDO_UNBIND_REQ:
    263                MT_ZdoUnbindRequest(pBuf);
    264                break;
    265          #endif
    266                
    267          #if defined ( MT_SYS_KEY_MANAGEMENT )
    268              case MT_ZDO_SET_LINK_KEY:
    269                MT_ZdoSetLinkKey(pBuf);
    270                break;
    271          
    272              case MT_ZDO_REMOVE_LINK_KEY:
    273                MT_ZdoRemoveLinkKey(pBuf);
    274                break;
    275          
    276              case MT_ZDO_GET_LINK_KEY:
    277                MT_ZdoGetLinkKey(pBuf);
    278                break;
    279          #endif // MT_SYS_KEY_MANAGEMENT    
    280          
    281          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    282              case MT_ZDO_MGMT_NWKDISC_REQ:
    283                MT_ZdoMgmtNwkDiscRequest(pBuf);
    284                break;
    285          #endif
    286          
    287          #if defined ( ZDO_MGMT_LQI_REQUEST )
    288              case MT_ZDO_MGMT_LQI_REQ:
    289                MT_ZdoMgmtLqiRequest(pBuf);
    290                break;
    291          #endif
    292          
    293          #if defined ( ZDO_MGMT_RTG_REQUEST )
    294              case MT_ZDO_MGMT_RTG_REQ:
    295                MT_ZdoMgmtRtgRequest(pBuf);
    296                break;
    297          #endif
    298          
    299          #if defined ( ZDO_MGMT_BIND_REQUEST )
    300              case MT_ZDO_MGMT_BIND_REQ:
    301                MT_ZdoMgmtBindRequest(pBuf);
    302                break;
    303          #endif
    304          
    305          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    306              case MT_ZDO_MGMT_LEAVE_REQ:
    307                MT_ZdoMgmtLeaveRequest(pBuf);
    308                break;
    309          #endif
    310          
    311          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    312              case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
    313                MT_ZdoMgmtDirectJoinRequest(pBuf);
    314                break;
    315          #endif
    316          
    317          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    318              case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
    319                MT_ZdoMgmtPermitJoinRequest(pBuf);
    320                break;
    321          #endif
    322          
    323          #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
    324              case MT_ZDO_MGMT_NWK_UPDATE_REQ:
    325                MT_ZdoMgmtNwkUpdateRequest(pBuf);
    326                break;
    327          #endif 
    328          
    329          #if defined ( ZDO_NETWORKSTART_REQUEST )
    330              case MT_ZDO_STARTUP_FROM_APP:
    331                MT_ZdoStartupFromApp(pBuf);
    332                break;
    333          #endif
    334          
    335              case MT_ZDO_MSG_CB_REGISTER:
    336                MT_ZdoRegisterForZDOMsg(pBuf);
    337                break;
    338          
    339              case MT_ZDO_MSG_CB_REMOVE:
    340                MT_ZdoRemoveRegisteredCB(pBuf);
    341                break;
    342          
    343              default:
    344                status = MT_RPC_ERR_COMMAND_ID;
    345                break;
    346            }
    347          
    348            return status;
    349          }
    350          
    351          /***************************************************************************************************
    352           * @fn      MT_ZdoNwkAddrReq
    353           *
    354           * @brief   Handle a nwk address request.
    355           *
    356           * @param   pData  - MT message data
    357           *
    358           * @return  void
    359           ***************************************************************************************************/
    360          void MT_ZdoNWKAddressRequest(uint8 *pBuf)
    361          {
    362            uint8 cmdId;
    363            uint8 retValue;
    364            uint8 reqType;
    365            uint8 startIndex;
    366            uint8 *pExtAddr;
    367          
    368            /* parse header */
    369            cmdId = pBuf[MT_RPC_POS_CMD1];
    370            pBuf += MT_RPC_FRAME_HDR_SZ;
    371          
    372            /* parse parameters */
    373            pExtAddr = pBuf;
    374            pBuf += Z_EXTADDR_LEN;
    375          
    376            /* Request type */
    377            reqType = *pBuf++;
    378          
    379            /* Start index */
    380            startIndex = *pBuf;
    381          
    382            retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
    383          
    384            /* Build and send back the response */
    385            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    386          }
    387          
    388          /***************************************************************************************************
    389           * @fn      MT_ZdoIEEEAddrRequest
    390           *
    391           * @brief   Handle a IEEE address request.
    392           *
    393           * @param   pData  - MT message data
    394           *
    395           * @return  void
    396           ***************************************************************************************************/
    397          void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
    398          {
    399            uint8 cmdId;
    400            uint8 retValue;
    401            uint16 shortAddr;
    402            uint8 reqType;
    403            uint8 startIndex;
    404          
    405            /* parse header */
    406            cmdId = pBuf[MT_RPC_POS_CMD1];
    407            pBuf += MT_RPC_FRAME_HDR_SZ;
    408          
    409            /* Dev address */
    410            shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
    411            pBuf += 2;
    412          
    413            /* request type */
    414            reqType = *pBuf++;
    415          
    416            /* start index */
    417            startIndex = *pBuf;
    418          
    419            retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
    420          
    421            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    422          }
    423          
    424          /***************************************************************************************************
    425           * @fn      MT_ZdoNodeDescRequest
    426           *
    427           * @brief   Handle a Node Descriptor request.
    428           *
    429           * @param   pData  - MT message data
    430           *
    431           * @return  void
    432           ***************************************************************************************************/
    433          void MT_ZdoNodeDescRequest (uint8 *pBuf)
    434          {
    435            uint8 cmdId;
    436            uint8 retValue;
    437            zAddrType_t destAddr;
    438            uint16 shortAddr;
    439          
    440            /* parse header */
    441            cmdId = pBuf[MT_RPC_POS_CMD1];
    442            pBuf += MT_RPC_FRAME_HDR_SZ;
    443          
    444            /* Destination address */
    445            destAddr.addrMode = Addr16Bit;
    446            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    447            pBuf += 2;
    448          
    449            /* Network address of interest */
    450            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    451            pBuf += 2;
    452          
    453            retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
    454          
    455            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    456          }
    457          
    458          /***************************************************************************************************
    459           * @fn      MT_ZdoPowerDescRequest
    460           *
    461           * @brief   Handle a Power Descriptor request.
    462           *
    463           * @param   pData  - MT message data
    464           *
    465           * @return  void
    466           ***************************************************************************************************/
    467          void MT_ZdoPowerDescRequest(uint8 *pBuf)
    468          {
    469            uint8 cmdId;
    470            uint8 retValue;
    471            zAddrType_t destAddr;
    472            uint16 shortAddr;
    473          
    474            /* parse header */
    475            cmdId = pBuf[MT_RPC_POS_CMD1];
    476            pBuf += MT_RPC_FRAME_HDR_SZ;
    477          
    478            /* Dev address */
    479            destAddr.addrMode = Addr16Bit;
    480            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    481            pBuf += 2;
    482          
    483            /* Network address of interest */
    484            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    485            pBuf += 2;
    486          
    487            retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
    488          
    489            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    490          }
    491          
    492          /***************************************************************************************************
    493           * @fn      MT_ZdoSimpleDescRequest
    494           *
    495           * @brief   Handle a Simple Descriptor request.
    496           *
    497           * @param   pBuf  - MT message data
    498           *
    499           * @return  void
    500           ***************************************************************************************************/
    501          void MT_ZdoSimpleDescRequest(uint8 *pBuf)
    502          {
    503            uint8 cmdId;
    504            uint8 retValue;
    505            uint8 epInt;
    506            zAddrType_t destAddr;
    507            uint16 shortAddr;
    508          
    509            /* parse header */
    510            cmdId = pBuf[MT_RPC_POS_CMD1];
    511            pBuf += MT_RPC_FRAME_HDR_SZ;
    512          
    513            /* Dev address */
    514            destAddr.addrMode = Addr16Bit;
    515            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    516            pBuf += 2;
    517          
    518            /* Network address of interest */
    519            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    520            pBuf += 2;
    521          
    522            /* endpoint/interface */
    523            epInt = *pBuf++;
    524          
    525            retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
    526          
    527            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    528          }
    529          
    530          /***************************************************************************************************
    531           * @fn      MT_ZdoActiveEpRequest
    532           *
    533           * @brief   Handle a Active EP request.
    534           *
    535           * @param   pBuf  - MT message data
    536           *
    537           * @return  void
    538           ***************************************************************************************************/
    539          void MT_ZdoActiveEpRequest(uint8 *pBuf)
    540          {
    541            uint8 cmdId;
    542            uint8 retValue;
    543            zAddrType_t destAddr;
    544            uint16 shortAddr;
    545          
    546            /* parse header */
    547            cmdId = pBuf[MT_RPC_POS_CMD1];
    548            pBuf += MT_RPC_FRAME_HDR_SZ;
    549          
    550            /* Dev address */
    551            destAddr.addrMode = Addr16Bit;
    552            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    553            pBuf += 2;
    554          
    555            /* Network address of interest */
    556            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    557            pBuf += 2;
    558          
    559            retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
    560          
    561            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    562          }
    563          
    564          /***************************************************************************************************
    565           * @fn      MT_ZdoMatchDescRequest
    566           *
    567           * @brief   Handle a Match Descriptor request.
    568           *
    569           * @param   pBuf  - MT message data
    570           *
    571           * @return  void
    572           ***************************************************************************************************/
    573          void MT_ZdoMatchDescRequest(uint8 *pBuf)
    574          {
    575            uint8 cmdId;
    576            uint8 retValue = 0;
    577            uint8 i, numInClusters, numOutClusters;
    578            uint16 profileId;
    579            zAddrType_t destAddr;
    580            uint16 shortAddr;
    581            uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
    582          
    583            /* parse header */
    584            cmdId = pBuf[MT_RPC_POS_CMD1];
    585            pBuf += MT_RPC_FRAME_HDR_SZ;
    586          
    587            /* Dev address */
    588            destAddr.addrMode = Addr16Bit;
    589            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    590            pBuf += 2;
    591          
    592            /* Network address of interest */
    593            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    594            pBuf += 2;
    595          
    596            /* Profile ID */
    597            profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
    598            pBuf += 2;
    599          
    600            /* NumInClusters */
    601            numInClusters = *pBuf++;
    602            if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
    603            {
    604              /* IN clusters */
    605              for ( i = 0; i < numInClusters; i++ )
    606              {
    607                inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
    608                pBuf += 2;
    609              }
    610            }
    611            else
    612            {
    613              retValue = ZDP_INVALID_REQTYPE;
    614            }
    615          
    616            /* NumOutClusters */
    617            numOutClusters = *pBuf++;
    618            if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
    619            {
    620              /* OUT Clusters */
    621              for ( i = 0; i < numOutClusters; i++ )
    622              {
    623                outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
    624                pBuf += 2;
    625              }
    626            }
    627            else
    628            {
    629              retValue = ZDP_INVALID_REQTYPE;
    630            }
    631          
    632            if ( retValue == 0 )
    633            {
    634              retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
    635                                                 inClusters, numOutClusters, outClusters, 0);
    636            }
    637          
    638            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    639          }
    640          
    641          /***************************************************************************************************
    642           * @fn      MT_ZdoComplexDescRequest
    643           *
    644           * @brief   Handle a Complex Descriptor request.
    645           *
    646           * @param   pBuf  - MT message data
    647           *
    648           * @return  void
    649           ***************************************************************************************************/
    650          void MT_ZdoComplexDescRequest(uint8 *pBuf)
    651          {
    652            uint8 cmdId;
    653            uint8 retValue;
    654            zAddrType_t destAddr;
    655            uint16 shortAddr;
    656          
    657            /* parse header */
    658            cmdId = pBuf[MT_RPC_POS_CMD1];
    659            pBuf += MT_RPC_FRAME_HDR_SZ;
    660          
    661            /* Dev address */
    662            destAddr.addrMode = Addr16Bit;
    663            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    664            pBuf += 2;
    665          
    666            /* Network address of interest */
    667            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    668            pBuf += 2;
    669          
    670            retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
    671          
    672            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    673          }
    674          
    675          /***************************************************************************************************
    676           * @fn      MT_ZdoUserDescRequest
    677           *
    678           * @brief   Handle a User Descriptor request.
    679           *
    680           * @param   pBuf  - MT message data
    681           *
    682           * @return  void
    683           ***************************************************************************************************/
    684          void MT_ZdoUserDescRequest(uint8 *pBuf)
    685          {
    686            uint8 cmdId;
    687            uint8 retValue;
    688            zAddrType_t destAddr;
    689            uint16 shortAddr;
    690          
    691            /* parse header */
    692            cmdId = pBuf[MT_RPC_POS_CMD1];
    693            pBuf += MT_RPC_FRAME_HDR_SZ;
    694          
    695            /* Dev address */
    696            destAddr.addrMode = Addr16Bit;
    697            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
    698            pBuf += 2;
    699          
    700            /* Network address of interest */
    701            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
    702            pBuf += 2;
    703          
    704            retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
    705          
    706            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    707          }
    708          
    709          /***************************************************************************************************
    710           * @fn      MT_ZdoEndDevAnnce
    711           *
    712           * @brief   Handle a End Device Announce Descriptor request.
    713           *
    714           * @param   pBuf  - MT message data
    715           *
    716           * @return  void
    717           ***************************************************************************************************/
    718          void MT_ZdoEndDevAnnce(uint8 *pBuf)
    719          {
    720            uint8 cmdId;
    721            uint8 retValue;
    722            uint16 shortAddr;
    723            uint8 *pIEEEAddr;
    724          
    725            /* parse header */
    726            cmdId = pBuf[MT_RPC_POS_CMD1];
    727            pBuf += MT_RPC_FRAME_HDR_SZ;
    728          
    729            /* network address */
    730            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    731            pBuf += 2;
    732          
    733            /* extended address */
    734            pIEEEAddr = pBuf;
    735            pBuf += Z_EXTADDR_LEN;
    736          
    737            retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
    738          
    739            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    740          }
    741          
    742          /***************************************************************************************************
    743           * @fn      MT_ZdoUserDescSet
    744           *
    745           * @brief   Handle a User Descriptor Set.
    746           *
    747           * @param   pBuf  - MT message data
    748           *
    749           * @return  void
    750           ***************************************************************************************************/
    751          void MT_ZdoUserDescSet(uint8 *pBuf)
    752          {
    753            uint8 cmdId;
    754            uint8 retValue;
    755            zAddrType_t destAddr;
    756            uint16 shortAddr;
    757            UserDescriptorFormat_t userDesc;
    758          
    759            /* parse header */
    760            cmdId = pBuf[MT_RPC_POS_CMD1];
    761            pBuf += MT_RPC_FRAME_HDR_SZ;
    762          
    763            /* Dev address */
    764            destAddr.addrMode = Addr16Bit;
    765            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    766            pBuf += 2;
    767          
    768            /* Network address of interest */
    769            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    770            pBuf += 2;
    771          
    772            /* User descriptor */
    773            userDesc.len = *pBuf++;
    774            osal_memcpy( userDesc.desc, pBuf, userDesc.len );
    775            pBuf += 16;
    776          
    777            retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
    778          
    779            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    780          }
    781          
    782          /***************************************************************************************************
    783           * @fn      MT_ZdoServiceDiscRequest
    784           *
    785           * @brief   Handle a Server Discovery request.
    786           *
    787           * @param   pBuf  - MT message data
    788           *
    789           * @return  void
    790           ***************************************************************************************************/
    791          void MT_ZdoServiceDiscRequest(uint8 *pBuf)
    792          {
    793            uint8 cmdId;
    794            uint8 retValue;
    795            uint16 serviceMask;
    796          
    797            /* parse header */
    798            cmdId = pBuf[MT_RPC_POS_CMD1];
    799            pBuf += MT_RPC_FRAME_HDR_SZ;
    800          
    801            /* Service Mask */
    802            serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
    803            pBuf += 2;
    804          
    805            retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
    806          
    807            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    808          }
    809          
    810          /***************************************************************************************************
    811           * @fn      MT_ZdoEndDevBindRequest
    812           *
    813           * @brief   Handle a End Device Bind request.
    814           *
    815           * @param   pBuf  - MT message data
    816           *
    817           * @return  void
    818           ***************************************************************************************************/
    819          void MT_ZdoEndDevBindRequest(uint8 *pBuf)
    820          {
    821            uint8 cmdId;
    822            uint8 retValue = 0;
    823            uint8 i, epInt, numInClusters, numOutClusters;
    824            zAddrType_t destAddr;
    825            uint16 shortAddr;
    826            uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
    827          
    828            /* parse header */
    829            cmdId = pBuf[MT_RPC_POS_CMD1];
    830            pBuf += MT_RPC_FRAME_HDR_SZ;
    831          
    832            /* Dev address */
    833            destAddr.addrMode = Addr16Bit;
    834            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    835            pBuf += 2;
    836          
    837            /* Local coordinator of the binding */
    838            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    839            pBuf += 2;
    840            
    841            /* For now, skip past the extended address */
    842            pBuf += Z_EXTADDR_LEN;
    843          
    844            /* Endpoint */
    845            epInt = *pBuf++;
    846          
    847            /* Profile ID */
    848            profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
    849            pBuf += 2;
    850          
    851            /* NumInClusters */
    852            numInClusters = *pBuf++;
    853            if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
    854            {
    855              for ( i = 0; i < numInClusters; i++ )
    856              {
    857                inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
    858                pBuf += 2;
    859              }
    860            }
    861            else
    862              retValue = ZDP_INVALID_REQTYPE;
    863          
    864            /* NumOutClusters */
    865            numOutClusters = *pBuf++;
    866            if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
    867            {
    868              for ( i = 0; i < numOutClusters; i++ )
    869              {
    870                outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
    871                pBuf += 2;
    872              }
    873            }
    874            else
    875              retValue = ZDP_INVALID_REQTYPE;
    876            
    877            if ( retValue == 0 )
    878            {
    879              retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
    880                                                    numInClusters, inClusters, numOutClusters, outClusters, 0);
    881            }
    882          
    883            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    884          }
    885          
    886          /***************************************************************************************************
    887           * @fn      MT_ZdoBindRequest
    888           *
    889           * @brief   Handle a Bind request.
    890           *
    891           * @param   pBuf  - MT message data
    892           *
    893           * @return  void
    894           ***************************************************************************************************/
    895          void MT_ZdoBindRequest(uint8 *pBuf)
    896          {
    897            uint8 cmdId;
    898            uint8 retValue;
    899            zAddrType_t destAddr, devAddr;
    900            uint8 *pSrcAddr, *ptr;
    901            uint8 srcEPInt, dstEPInt;
    902            uint16 clusterID;
    903          
    904            /* parse header */
    905            cmdId = pBuf[MT_RPC_POS_CMD1];
    906            pBuf += MT_RPC_FRAME_HDR_SZ;
    907          
    908            /* Dev address */
    909            destAddr.addrMode = Addr16Bit;
    910            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    911            pBuf += 2;
    912          
    913            /* SrcAddress */
    914            pSrcAddr = pBuf;
    915            pBuf += Z_EXTADDR_LEN;
    916          
    917            /* SrcEPInt */
    918            srcEPInt = *pBuf++;
    919          
    920            /* ClusterID */
    921            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
    922            pBuf += 2;
    923          
    924            /* Destination Address mode */
    925            devAddr.addrMode = *pBuf++;
    926          
    927            /* Destination Address */
    928            if ( devAddr.addrMode == Addr64Bit )
    929            {
    930              ptr = pBuf;
    931              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
    932            }
    933            else
    934            {
    935              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    936            }
    937            /* The short address occupies LSB two bytes */
    938            pBuf += Z_EXTADDR_LEN;
    939          
    940            /* DstEPInt */
    941            dstEPInt = *pBuf;
    942          
    943            retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
    944          
    945            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    946          }
    947          
    948          /***************************************************************************************************
    949           * @fn      MT_ZdoUnbindRequest
    950           *
    951           * @brief   Handle a Unbind request.
    952           *
    953           * @param   pBuf  - MT message data
    954           *
    955           * @return  void
    956           ***************************************************************************************************/
    957          void MT_ZdoUnbindRequest(uint8 *pBuf)
    958          {
    959            uint8 cmdId;
    960            uint8 retValue;
    961            zAddrType_t destAddr, devAddr;
    962            uint8 *pSrcAddr, *ptr;
    963            uint8 srcEPInt, dstEPInt;
    964            uint16 clusterID;
    965          
    966            /* parse header */
    967            cmdId = pBuf[MT_RPC_POS_CMD1];
    968            pBuf += MT_RPC_FRAME_HDR_SZ;
    969          
    970            /* dev address */
    971            destAddr.addrMode = Addr16Bit;
    972            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    973            pBuf += 2;
    974          
    975            /* SrcAddress */
    976            pSrcAddr = pBuf;
    977            pBuf += Z_EXTADDR_LEN;
    978          
    979            /* SrcEPInt */
    980            srcEPInt = *pBuf++;
    981          
    982            /* ClusterID */
    983            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
    984            pBuf += 2;
    985          
    986            /* Destination Address mode */
    987            devAddr.addrMode = *pBuf++;
    988          
    989            /* Destination Address */
    990            if ( devAddr.addrMode == Addr64Bit )
    991            {
    992              ptr = pBuf;
    993              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
    994            }
    995            else
    996            {
    997              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    998            }
    999            /* The short address occupies LSB two bytes */
   1000            pBuf += Z_EXTADDR_LEN;
   1001          
   1002            /* dstEPInt */
   1003            dstEPInt = *pBuf;
   1004          
   1005            retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   1006          
   1007            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1008          }
   1009          
   1010          #if defined (MT_SYS_KEY_MANAGEMENT)
   1011          /***************************************************************************************************
   1012           * @fn      MT_ZdoSetLinkKey
   1013           *
   1014           * @brief   Set an application or trust center link key.
   1015           *
   1016           * @param   pBuf  - MT message data
   1017           *
   1018           * @return  void
   1019           ***************************************************************************************************/
   1020          void MT_ZdoSetLinkKey(uint8 *pBuf)
   1021          {
   1022            uint8 cmdId;
   1023            uint8 retValue;
   1024            uint8 *pExtAddr;
   1025            uint8 *pKey;
   1026            uint16 shortAddr;
   1027            
   1028            /* parse header */
   1029            cmdId = pBuf[MT_RPC_POS_CMD1];
   1030            pBuf += MT_RPC_FRAME_HDR_SZ;
   1031          
   1032            /* ShortAddr */
   1033            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1034            pBuf += 2;
   1035            
   1036            /* Extended Addr */
   1037            pExtAddr = pBuf;
   1038            pBuf += Z_EXTADDR_LEN;
   1039            
   1040            /* Key data */
   1041            pKey = pBuf;
   1042          
   1043            retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
   1044          
   1045            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1046          }
   1047          
   1048          /***************************************************************************************************
   1049           * @fn      MT_ZdoRemoveLinkKey
   1050           *
   1051           * @brief   Remove an application or trust center link key.
   1052           *
   1053           * @param   pBuf  - MT message data
   1054           *
   1055           * @return  void
   1056           ***************************************************************************************************/
   1057          void MT_ZdoRemoveLinkKey(uint8 *pBuf)
   1058          {
   1059            uint8 cmdId;
   1060            uint8 retValue;
   1061            uint8 *pExtAddr;
   1062              
   1063            /* parse header */
   1064            cmdId = pBuf[MT_RPC_POS_CMD1];
   1065            pBuf += MT_RPC_FRAME_HDR_SZ;
   1066            
   1067            /* ShortAddr */
   1068            pExtAddr = pBuf;
   1069          
   1070            retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   1071          
   1072            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1073          }
   1074          
   1075          /***************************************************************************************************
   1076           * @fn      MT_ZdoGetLinkKey
   1077           *
   1078           * @brief   Get the application link key.
   1079           *
   1080           * @param   pBuf  - MT message data
   1081           *
   1082           * @return  void
   1083           ***************************************************************************************************/
   1084          void MT_ZdoGetLinkKey(uint8 *pBuf)
   1085          {
   1086            uint8 cmdId;
   1087            uint8 retValue;
   1088            uint8 *pExtAddr;
   1089            uint8 *retBuf = NULL;
   1090            uint8 len;
   1091            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   1092            uint16 apsLinkKeyNvId;
   1093            
   1094            // parse header
   1095            cmdId = pBuf[MT_RPC_POS_CMD1];
   1096            pBuf += MT_RPC_FRAME_HDR_SZ;
   1097            
   1098            // Extended Address
   1099            pExtAddr = pBuf;
   1100          
   1101            // Fetch the key NV ID
   1102            retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
   1103          
   1104            if (retValue == ZSuccess)
   1105            {
   1106              if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
   1107              {
   1108                // retrieve key from NV
   1109                if (osal_nv_read( apsLinkKeyNvId, 0, 
   1110                                 sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
   1111                {
   1112                  retValue = ZNwkUnknownDevice;
   1113                }
   1114              }
   1115              else
   1116              {
   1117                retValue = ZNwkUnknownDevice;
   1118              }
   1119            }
   1120            
   1121            // Construct the response message
   1122            len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
   1123            if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
   1124            {  
   1125              if (retValue == ZSuccess)
   1126              {
   1127                // Extended Address
   1128                osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
   1129                
   1130                // Key data
   1131                osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );      
   1132              }
   1133              else
   1134              {
   1135                // Failed case - set the rest fields to all FF
   1136                osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );   
   1137              }    
   1138              
   1139              retBuf[0] = retValue;  // Status
   1140              
   1141              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
   1142          
   1143              // clear retBuf because it contains key data and free allocated memory
   1144              osal_memset(retBuf, 0x00, len);   
   1145              
   1146              osal_mem_free(retBuf);
   1147            }
   1148            
   1149            // clear copy of key in RAM
   1150            if (pApsLinkKey != NULL)
   1151            {
   1152              osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   1153              
   1154              osal_mem_free(pApsLinkKey);
   1155            }
   1156          
   1157            return;
   1158          }
   1159          #endif // MT_SYS_KEY_MANAGEMENT
   1160          
   1161          #if defined (MT_ZDO_MGMT)
   1162          /***************************************************************************************************
   1163           * @fn      MT_ZdoMgmtNwkDiscRequest
   1164           *
   1165           * @brief   Handle a Mgmt Nwk Discovery request.
   1166           *
   1167           * @param   pBuf  - MT message data
   1168           *
   1169           * @return  void
   1170           ***************************************************************************************************/
   1171          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
   1172          {
   1173            uint8 cmdId;
   1174            uint8 retValue;
   1175            zAddrType_t destAddr;
   1176            uint32 scanChannels;
   1177            uint8 scanDuration, startIndex;
   1178          
   1179            /* parse header */
   1180            cmdId = pBuf[MT_RPC_POS_CMD1];
   1181            pBuf += MT_RPC_FRAME_HDR_SZ;
   1182          
   1183            /* Dev address */
   1184            destAddr.addrMode = Addr16Bit;
   1185            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1186            pBuf += 2;
   1187          
   1188            /* Scan Channels */
   1189            scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
   1190            pBuf += 4;
   1191          
   1192            /* Scan Duration */
   1193            scanDuration = *pBuf++;
   1194          
   1195            /* Start Index */
   1196            startIndex = *pBuf;
   1197          
   1198            retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
   1199          
   1200            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1201          }
   1202          
   1203          /***************************************************************************************************
   1204           * @fn      MT_ZdoMgmtLqiRequest
   1205           *
   1206           * @brief   Handle a Mgmt Lqi request.
   1207           *
   1208           * @param   pBuf  - MT message data
   1209           *
   1210           * @return  void
   1211           ***************************************************************************************************/
   1212          void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
   1213          {
   1214            uint8 cmdId;
   1215            uint8 retValue;
   1216            zAddrType_t destAddr;
   1217            uint8 startIndex;
   1218          
   1219            /* parse header */
   1220            cmdId = pBuf[MT_RPC_POS_CMD1];
   1221            pBuf += MT_RPC_FRAME_HDR_SZ;
   1222          
   1223            /* Dev address */
   1224            destAddr.addrMode = Addr16Bit;
   1225            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1226            pBuf += 2;
   1227          
   1228            /* Start Index */
   1229            startIndex = *pBuf;
   1230          
   1231            retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
   1232          
   1233            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1234          }
   1235          
   1236          /***************************************************************************************************
   1237           * @fn      MT_ZdoMgmtRtgRequest
   1238           *
   1239           * @brief   Handle a Mgmt Rtg request.
   1240           *
   1241           * @param   pBuf  - MT message data
   1242           *
   1243           * @return  void
   1244           ***************************************************************************************************/
   1245          void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
   1246          {
   1247            uint8 cmdId;
   1248            uint8 retValue;
   1249            zAddrType_t destAddr;
   1250            uint8 startIndex;
   1251          
   1252            /* parse header */
   1253            cmdId = pBuf[MT_RPC_POS_CMD1];
   1254            pBuf += MT_RPC_FRAME_HDR_SZ;
   1255          
   1256            /* Dev Address */
   1257            destAddr.addrMode = Addr16Bit;
   1258            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   1259            pBuf += 2;
   1260          
   1261            /* Start Index */
   1262            startIndex = *pBuf;
   1263          
   1264            retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
   1265          
   1266            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1267          }
   1268          
   1269          /***************************************************************************************************
   1270           * @fn      MT_ZdoMgmtBindRequest
   1271           *
   1272           * @brief   Handle a Mgmt Bind request.
   1273           *
   1274           * @param   pBuf  - MT message data
   1275           *
   1276           * @return  void
   1277           ***************************************************************************************************/
   1278          void MT_ZdoMgmtBindRequest(uint8 *pBuf)
   1279          {
   1280            uint8 cmdId;
   1281            uint8 retValue;
   1282            zAddrType_t destAddr;
   1283            uint8 startIndex;
   1284          
   1285            /* parse header */
   1286            cmdId = pBuf[MT_RPC_POS_CMD1];
   1287            pBuf += MT_RPC_FRAME_HDR_SZ;
   1288          
   1289            /* Dev Address */
   1290            destAddr.addrMode = Addr16Bit;
   1291            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1292            pBuf += 2;
   1293          
   1294            /* Start Index */
   1295            startIndex = *pBuf;
   1296          
   1297            retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
   1298          
   1299            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1300          }
   1301          
   1302          /***************************************************************************************************
   1303           * @fn      MT_ZdoMgmtLeaveRequest
   1304           *
   1305           * @brief   Handle a Mgmt Leave request.
   1306           *
   1307           * @param   pBuf  - MT message data
   1308           *
   1309           * @return  void
   1310           ***************************************************************************************************/
   1311          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
   1312          {
   1313            uint8 cmdId;
   1314            uint8 retValue;
   1315            zAddrType_t destAddr;
   1316            uint8 *pIEEEAddr;
   1317            uint8 removeChildren, rejoin;
   1318          
   1319            /* parse header */
   1320            cmdId = pBuf[MT_RPC_POS_CMD1];
   1321            pBuf += MT_RPC_FRAME_HDR_SZ;
   1322          
   1323            /* Destination Address */
   1324            destAddr.addrMode = Addr16Bit;
   1325            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1326            pBuf += 2;
   1327          
   1328            /* IEEE address */
   1329            pIEEEAddr = pBuf;
   1330            pBuf += Z_EXTADDR_LEN;
   1331          
   1332            /* Remove Children */
   1333            removeChildren = *pBuf++;
   1334          
   1335            /* Rejoin */
   1336            rejoin = *pBuf;
   1337          
   1338            retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
   1339          
   1340            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1341          }
   1342          
   1343          
   1344          /***************************************************************************************************
   1345           * @fn      MT_ZdoMgmtDirectJoinRequest
   1346           *
   1347           * @brief   Handle a Mgmt Direct Join request.
   1348           *
   1349           * @param   pBuf  - MT message data
   1350           *
   1351           * @return  void
   1352           ***************************************************************************************************/
   1353          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
   1354          {
   1355            uint8 cmdId;
   1356            uint8 retValue;
   1357            zAddrType_t destAddr;
   1358            uint8 *deviceAddr;
   1359            uint8 capInfo;
   1360          
   1361            /* parse header */
   1362            cmdId = pBuf[MT_RPC_POS_CMD1];
   1363            pBuf += MT_RPC_FRAME_HDR_SZ;
   1364          
   1365            /* Destination Address */
   1366            destAddr.addrMode = Addr16Bit;
   1367            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1368            pBuf += 2;
   1369          
   1370            /* Device Address */
   1371            deviceAddr = pBuf;
   1372            pBuf += Z_EXTADDR_LEN;
   1373          
   1374            /* Capability information */
   1375            capInfo = *pBuf;
   1376          
   1377            retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
   1378          
   1379            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1380          }
   1381          
   1382          /***************************************************************************************************
   1383           * @fn      MT_ZdoMgmtPermitJoinRequest
   1384           *
   1385           * @brief   Handle a Mgmt Permit Join request.
   1386           *
   1387           * @param   pBuf  - MT message data
   1388           *
   1389           * @return  void
   1390           ***************************************************************************************************/
   1391          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
   1392          {
   1393            uint8 cmdId;
   1394            uint8 retValue;
   1395            zAddrType_t destAddr;
   1396            uint8 duration, tcSignificance;
   1397          
   1398            /* parse header */
   1399            cmdId = pBuf[MT_RPC_POS_CMD1];
   1400            pBuf += MT_RPC_FRAME_HDR_SZ;
   1401          
   1402            /* Destination Address */
   1403            destAddr.addrMode = Addr16Bit;
   1404            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1405            pBuf += 2;
   1406          
   1407            /* Duration */
   1408            duration = *pBuf++;
   1409          
   1410            /* Trust center significance */
   1411            tcSignificance = *pBuf;
   1412          
   1413            retValue = (byte)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
   1414          
   1415            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1416          }
   1417          
   1418          /***************************************************************************************************
   1419           * @fn      MT_ZdoMgmtNwkUpdateRequest
   1420           *
   1421           * @brief   Handle a Mgmt Nwk Update request.
   1422           *
   1423           * @param   pBuf  - MT message data
   1424           *
   1425           * @return  void
   1426           ***************************************************************************************************/
   1427          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
   1428          {
   1429            uint8 cmdId;
   1430            uint8 retValue;
   1431            zAddrType_t destAddr;
   1432            uint32 channelMask;
   1433            uint8 scanDuration, scanCount;
   1434            uint16 nwkManagerAddr;
   1435          
   1436              /* parse header */
   1437            cmdId = pBuf[MT_RPC_POS_CMD1];
   1438            pBuf += MT_RPC_FRAME_HDR_SZ;
   1439          
   1440            /* Destination address */
   1441            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1442            pBuf += 2;
   1443          
   1444            /* Destination address mode */
   1445            destAddr.addrMode = *pBuf++;
   1446          
   1447            channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   1448            pBuf += 4;
   1449          
   1450            /* Scan duration */
   1451            scanDuration = *pBuf++;
   1452          
   1453            /* Scan count */
   1454            scanCount = *pBuf++;
   1455          
   1456            /* NWK manager address */
   1457            nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1458          
   1459            /* Send the Management Network Update request */
   1460            retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1461                                                    scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1462          
   1463            /*
   1464              Since we don't recevied our own broadcast messages, we should
   1465              send a unicast copy of the message to ourself.
   1466            */
   1467            if ( destAddr.addrMode == AddrBroadcast )
   1468            {
   1469              destAddr.addrMode = Addr16Bit;
   1470              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   1471              retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1472                                                       scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1473            }
   1474          
   1475            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1476          }
   1477          #endif /* MT_ZDO_MGMT */
   1478          
   1479          /***************************************************************************************************
   1480           * @fn      MT_ZdoStartupFromApp
   1481           *
   1482           * @brief   Handle a Startup from App request.
   1483           *
   1484           * @param   pBuf  - MT message data
   1485           *
   1486           * @return  void
   1487           ***************************************************************************************************/
   1488          void MT_ZdoStartupFromApp(uint8 *pBuf)
   1489          {
   1490            uint8 cmd0, cmd1, retValue;
   1491          
   1492            /* parse header */
   1493            cmd0 = pBuf[MT_RPC_POS_CMD0];
   1494            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1495            pBuf += MT_RPC_FRAME_HDR_SZ;
   1496          
   1497            retValue = ZDOInitDevice(100);
   1498          
   1499            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   1500            {
   1501              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   1502            }
   1503          }
   1504          
   1505          /*************************************************************************************************
   1506           * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
   1507           *
   1508           * @brief   MT proxy for ZDO_RegisterForZDOMsg.
   1509           *
   1510           * @param   pBuf  - MT message data
   1511           *
   1512           * @return  void
   1513           *************************************************************************************************/
   1514          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
   1515          {
   1516            uint8 cmd0, cmd1, tmp;
   1517            uint16 cId;
   1518          
   1519            /* parse header */
   1520            cmd0 = pBuf[MT_RPC_POS_CMD0];
   1521            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1522            pBuf += MT_RPC_FRAME_HDR_SZ;
   1523          
   1524            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   1525            tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
   1526          
   1527            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   1528            {
   1529              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   1530            }
   1531          }
   1532          
   1533          /*************************************************************************************************
   1534           * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
   1535           *
   1536           * @brief   MT proxy for ZDO_RemoveRegisteredCB.
   1537           *
   1538           * @param   pBuf  - MT message data
   1539           *
   1540           * @return  void
   1541           *************************************************************************************************/
   1542          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
   1543          {
   1544            uint8 cmd0, cmd1, tmp;
   1545            uint16 cId;
   1546          
   1547            /* parse header */
   1548            cmd0 = pBuf[MT_RPC_POS_CMD0];
   1549            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1550            pBuf += MT_RPC_FRAME_HDR_SZ;
   1551          
   1552            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   1553            tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
   1554          
   1555            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   1556            {
   1557              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   1558            }
   1559          }
   1560          
   1561          #endif /* MT_ZDO_FUNC */
   1562          
   1563          
   1564          /***************************************************************************************************
   1565           * Callback handling function
   1566           ***************************************************************************************************/
   1567          
   1568          #if defined (MT_ZDO_CB_FUNC)
   1569          
   1570          /***************************************************************************************************
   1571           * @fn      MT_ZdoStateChangeCB
   1572           *
   1573           * @brief   Handle state change OSAL message from ZDO.
   1574           *
   1575           * @param   pMsg  - Message data
   1576           *
   1577           * @return  void
   1578           */
   1579          void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
   1580          {
   1581            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1582                                                 MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
   1583          }
   1584          
   1585          /***************************************************************************************************
   1586           * @fn     MT_ZdoDirectCB()
   1587           *
   1588           * @brief  ZDO direct callback.  Build an MT message directly from the
   1589           *         over-the-air ZDO message.
   1590           *
   1591           * @param  pData - Incoming AF frame.
   1592           *
   1593           * @return  none
   1594           ***************************************************************************************************/
   1595          void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData,  zdoIncomingMsg_t *inMsg )
   1596          {
   1597            uint8 len, *pBuf;
   1598            uint16 origClusterId;
   1599            
   1600            // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId 
   1601            origClusterId = pData->clusterId;
   1602            
   1603            // Is the message an exception or not a response?
   1604            if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
   1605            {
   1606              return;  // Handled somewhere else or not needed.
   1607            }
   1608          
   1609            /* ZDO data starts after one-byte sequence number and the msg buffer length includes
   1610             * two bytes for srcAddr.
   1611             */
   1612            len = pData->cmd.DataLength - 1 + sizeof(uint16);
   1613          
   1614            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   1615            {
   1616              uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
   1617          
   1618              pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
   1619              pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
   1620          
   1621              /* copy ZDO data, skipping one-byte sequence number */
   1622              osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
   1623          
   1624              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   1625              osal_mem_free(pBuf);
   1626            }
   1627          }
   1628          
   1629          /***************************************************************************************************
   1630           * @fn     MT_ZdoHandleExceptions()
   1631           *
   1632           * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
   1633           *
   1634           * @param  pData - Incoming AF frame.
   1635           *
   1636           * @return  TRUE if handled by this function, FALSE if not
   1637           ***************************************************************************************************/
   1638          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   1639          {
   1640            uint8 ret = TRUE;
   1641            ZDO_NwkIEEEAddrResp_t *nwkRsp = NULL;
   1642            ZDO_DeviceAnnce_t devAnnce;
   1643            uint8 doDefault = FALSE;
   1644            
   1645            switch ( inMsg->clusterID )
   1646            {
   1647              case NWK_addr_rsp:
   1648              case IEEE_addr_rsp:
   1649                nwkRsp = ZDO_ParseAddrRsp( inMsg );
   1650                MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
   1651                if ( nwkRsp )
   1652                  osal_mem_free( nwkRsp );
   1653                break;
   1654                
   1655              case Device_annce:
   1656                ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   1657                MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
   1658                break;
   1659                
   1660              case Simple_Desc_rsp:
   1661                if ( pData->cmd.DataLength > 5 )
   1662                  ret = FALSE;
   1663                else
   1664                  doDefault = TRUE;        
   1665                break;  
   1666                
   1667              default:
   1668                ret = FALSE;
   1669                break;
   1670            }
   1671            
   1672            if ( doDefault )
   1673            {
   1674              ret = FALSE;
   1675              pData->clusterId = MtZdoDef_rsp;
   1676              pData->cmd.DataLength = 2;
   1677            }
   1678          
   1679            return ( ret );
   1680          }
   1681          
   1682          /***************************************************************************************************
   1683           * @fn      MT_ZdoAddrRspCB
   1684           *
   1685           * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
   1686           *
   1687           * @param   pMsg  - Message data
   1688           *
   1689           * @return  void
   1690           */
   1691          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
   1692          {
   1693            uint8   listLen, len, *pBuf;
   1694          
   1695            /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
   1696          
   1697            /* get length, sanity check length */
   1698            listLen = pMsg->numAssocDevs;
   1699            
   1700            /* calculate msg length */
   1701            len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
   1702          
   1703            /* get buffer */
   1704            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   1705            {
   1706              uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
   1707              uint8 *pTmp = pBuf;
   1708          
   1709              *pTmp++ = pMsg->status;
   1710          
   1711              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   1712              pTmp += Z_EXTADDR_LEN;
   1713          
   1714              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   1715              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   1716          
   1717              *pTmp++ = pMsg->startIndex;
   1718              *pTmp++ = listLen;
   1719          
   1720              MT_Word2Buf(pTmp, pMsg->devList, listLen);
   1721          
   1722              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   1723              osal_mem_free(pBuf);
   1724            }
   1725          }
   1726          
   1727          /***************************************************************************************************
   1728           * @fn      MT_ZdoEndDevAnnceCB
   1729           *
   1730           * @brief   Handle end device announce OSAL message from ZDO.
   1731           *
   1732           * @param   pMsg  - Message data
   1733           *
   1734           * @return  void
   1735           */
   1736          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
   1737          {
   1738            uint8 *pBuf;
   1739          
   1740            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
   1741            {
   1742              uint8 *pTmp = pBuf;
   1743          
   1744              *pTmp++ = LO_UINT16(srcAddr);
   1745              *pTmp++ = HI_UINT16(srcAddr);
   1746          
   1747              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   1748              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   1749          
   1750              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   1751              pTmp += Z_EXTADDR_LEN;
   1752          
   1753              *pTmp = pMsg->capabilities;
   1754          
   1755              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), 
   1756                                                   MT_ZDO_END_DEVICE_ANNCE_IND, 
   1757                                                   MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
   1758              osal_mem_free(pBuf);
   1759            }
   1760          }
   1761          
   1762          /***************************************************************************************************
   1763           * @fn      MT_ZdoSrcRtgCB
   1764           *
   1765           * @brief   Handle Src Route from ZDO.
   1766           *
   1767           * @param   pStr  - pointer to the data structure for the src route
   1768           *
   1769           * @return  void* 
   1770           */
   1771          void* MT_ZdoSrcRtgCB( void *pStr )
   1772          {
   1773            uint8 len, *pBuf;
   1774            zdoSrcRtg_t *pSrcRtg = pStr;
   1775            
   1776            // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
   1777            len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
   1778          
   1779            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   1780            {
   1781              uint8 idx, *pTmp = pBuf;
   1782              uint16 *pRelay;
   1783          
   1784              // Packet payload
   1785              *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
   1786              *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
   1787              *pTmp++ = pSrcRtg->relayCnt;
   1788              
   1789              // Relay List
   1790              if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
   1791              {
   1792                for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
   1793                {
   1794                  *pTmp++ = LO_UINT16(*pRelay);
   1795                  *pTmp++ = HI_UINT16(*pRelay);
   1796                  pRelay++;
   1797                }
   1798              }
   1799              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1800                                                   MT_ZDO_SRC_RTG_IND, len, pBuf);
   1801              osal_mem_free(pBuf);
   1802            }
   1803            
   1804            return NULL;
   1805          }
   1806          #endif // MT_ZDO_CB_FUNC
   1807          
   1808          /***************************************************************************************************
   1809           * @fn      MT_ZdoSendMsgCB
   1810           *
   1811           * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
   1812           *
   1813           * @param   pMsg  - Message data
   1814           *
   1815           * @return  void
   1816           */
   1817          void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
   1818          {
   1819            uint8 len = pMsg->asduLen + 9;
   1820            uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
   1821          
   1822            if (pBuf != NULL)
   1823            {
   1824              uint8 *pTmp = pBuf;
   1825          
   1826              // Assuming exclusive use of network short addresses.
   1827              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   1828              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   1829              *pTmp++ = pMsg->wasBroadcast;
   1830              *pTmp++ = LO_UINT16(pMsg->clusterID);
   1831              *pTmp++ = HI_UINT16(pMsg->clusterID);
   1832              *pTmp++ = pMsg->SecurityUse;
   1833              *pTmp++ = pMsg->TransSeq;
   1834              // Skipping asduLen since it can be deduced from the RPC packet length.
   1835              *pTmp++ = LO_UINT16(pMsg->macDestAddr);
   1836              *pTmp++ = HI_UINT16(pMsg->macDestAddr);
   1837              (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
   1838          
   1839              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1840                                                   MT_ZDO_MSG_CB_INCOMING, len, pBuf);
   1841              
   1842              osal_mem_free(pBuf);
   1843            }
   1844          }
   1845          
   1846          #endif   /*ZDO Command Processing in MT*/
   1847          /***************************************************************************************************
   1848          ***************************************************************************************************/


 
 
 0 bytes of memory

Errors: none
Warnings: none
