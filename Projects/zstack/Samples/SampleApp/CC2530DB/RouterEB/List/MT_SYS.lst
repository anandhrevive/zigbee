###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                13/Aug/2011  12:11:26 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k-CC2530-2.3.1-1.4.0\Components\mt\MT_SYS.c        #
#    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRoute #
#                          r.cfg" (-DCPU32MHZ -DROOT=__near_func              #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3. #
#                          1-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\Tools\CC2530DB\f8wConfig.cfg"            #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x11FF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Documents and           #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Components\mt\MT_SYS.c" -D ZTOOL_P1 -D         #
#                          MT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D         #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D              #
#                          BUILD_ALL_DEVICES -D xLCD_SUPPORTED=DEBUG -D       #
#                          NWK_AUTO_POLL -D SOFT_SATRT -D ZDO_COORDINATOR     #
#                          -lC "C:\Documents and Settings\Administrator\×ÀÃæ\ #
#                          ZStack-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\RouterEB\List\" -lA             #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\RouterEB\List\" --diag_suppress     #
#                          Pe001,Pa010 -o "C:\Documents and                   #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\Rou #
#                          terEB\Obj\" -e --require_prototypes --debug        #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Documents and          #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\"   #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\SOURCE\" -I "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3. #
#                          1-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\ZMAIN\TI2530DB\" -I "C:\Documents and    #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MT\" -I "C:\Documents and   #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I            #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGE #
#                          T\CC2530EB\" -I "C:\Documents and                  #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I         #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCL #
#                          UDE\" -I "C:\Documents and                         #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\AF\" -I               #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\ZStack-CC2530-2.3.1-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\SEC\" -I "C:\Documents and                      #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\SAPI\" -I             #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\ZStack-CC2530-2.3.1-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\ZDO\" -I "C:\Documents and                      #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\ZMAC\F8W\" -I               #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"    #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          Stack-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVIC #
#                          ES\SADDR\" -I "C:\Documents and                    #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\" -I         #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLU #
#                          DE\" -I "C:\Documents and                          #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I         #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSta #
#                          ck-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_L #
#                          EVEL\srf04\" -I "C:\Documents and                  #
#                          Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_ #
#                          CHIP\" -I D:\Zigbee\IAR\8051\INC\ -I               #
#                          D:\Zigbee\IAR\8051\INC\CLIB\ -Ohz                  #
#    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\RouterEB\List\MT_SYS.lst             #
#    Object file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZStac #
#                          k-CC2530-2.3.1-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\RouterEB\Obj\MT_SYS.r51              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\×ÀÃæ\ZStack-CC2530-2.3.1-1.4.0\Components\mt\MT_SYS.c
      1          /***************************************************************************************************
      2            Filename:       MT_SYS.c
      3            Revised:        $Date: 2010-05-07 17:22:44 -0700 (Fri, 07 May 2010) $
      4            Revision:       $Revision: 22418 $
      5          
      6            Description:   MonitorTest
      7          
      8            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT.h"
     45          #include "MT_SYS.h"
     46          #include "MT_VERSION.h"
     47          #include "nwk_util.h"
     48          #include "OSAL.h"
     49          #include "OSAL_NV.h"
     50          #include "Onboard.h"  /* This is here because RAM read/write macros need it */

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1
     51          #include "hal_adc.h"
     52          #include "ZGlobals.h"
     53          
     54          /***************************************************************************************************
     55           * MACROS
     56           ***************************************************************************************************/
     57          
     58          #define MT_SYS_DEVICE_INFO_RESPONSE_LEN 14
     59          #define MT_NV_ITEM_MAX_LENGTH           250
     60          
     61          #if !defined HAL_GPIO || !HAL_GPIO
     62          #define GPIO_DIR_IN(IDX)
     63          #define GPIO_DIR_OUT(IDX)
     64          #define GPIO_TRI(IDX)
     65          #define GPIO_PULL_UP(IDX)
     66          #define GPIO_PULL_DN(IDX)
     67          #define GPIO_SET(IDX)
     68          #define GPIO_CLR(IDX)
     69          #define GPIO_TOG(IDX)
     70          #define GPIO_GET(IDX) 0
     71          #define GPIO_HiD_SET() (val = 0)
     72          #define GPIO_HiD_CLR() (val = 0)
     73          #endif
     74          
     75          /***************************************************************************************************
     76           * CONSTANT
     77           ***************************************************************************************************/
     78          
     79          #if !defined MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
     80          #define MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA  FALSE
     81          #endif
     82          

   \                                 In  segment XDATA_ROM_C, align 1
     83          const uint16 MT_SysOsalEventId [] = {
   \                     MT_SysOsalEventId:
   \   000000   00080004     DW 2048, 1024, 512, 256
   \            00020001
     84                                                MT_SYS_OSAL_EVENT_0,
     85                                                MT_SYS_OSAL_EVENT_1,
     86                                                MT_SYS_OSAL_EVENT_2,
     87                                                MT_SYS_OSAL_EVENT_3
     88                                              };
     89          
     90          typedef enum {
     91            GPIO_DIR,
     92            GPIO_TRI,
     93            GPIO_SET,
     94            GPIO_CLR,
     95            GPIO_TOG,
     96            GPIO_GET,
     97            GPIO_HiD = 0x12
     98          } GPIO_Op_t;
     99          
    100          /***************************************************************************************************
    101           * LOCAL FUNCTIONS
    102           ***************************************************************************************************/
    103          #if defined (MT_SYS_FUNC)
    104          void MT_SysReset(uint8 *pBuf);
    105          void MT_SysPing(void);
    106          void MT_SysVersion(void);
    107          void MT_SysSetExtAddr(uint8 *pBuf);
    108          void MT_SysGetExtAddr(void);
    109          void MT_SysOsalNVWrite(uint8 *pBuf);
    110          void MT_SysOsalNVRead(uint8 *pBuf);
    111          void MT_SysOsalStartTimer(uint8 *pBuf);
    112          void MT_SysOsalStopTimer(uint8 *pBuf);
    113          void MT_SysRandom(void);
    114          void MT_SysAdcRead(uint8 *pBuf);
    115          void MT_SysGpio(uint8 *pBuf);
    116          void MT_SysStackTune(uint8 *pBuf);
    117          void MT_SysGetDeviceInfo(uint8 *pBuf);
    118          #endif /* MT_SYS_FUNC */
    119          
    120          #if defined (MT_SYS_FUNC)
    121          /***************************************************************************************************
    122           * @fn      MT_SysProcessing
    123           *
    124           * @brief   Process all the SYS commands that are issued by test tool
    125           *
    126           * @param   pBuf - pointer to the msg buffer
    127           *
    128           *          | LEN  | CMD0  | CMD1  |  DATA  |
    129           *          |  1   |   1   |   1   |  0-255 |
    130           *
    131           * @return  status
    132           ***************************************************************************************************/
    133          uint8 MT_SysCommandProcessing(uint8 *pBuf)
    134          {
    135            uint8 status = MT_RPC_SUCCESS;
    136          
    137            switch (pBuf[MT_RPC_POS_CMD1])
    138            {
    139              case MT_SYS_RESET_REQ:
    140                MT_SysReset(pBuf);
    141                break;
    142          
    143              case MT_SYS_PING:
    144                MT_SysPing();
    145                break;
    146          
    147              case MT_SYS_VERSION:
    148                MT_SysVersion();
    149                break;
    150          
    151              case MT_SYS_SET_EXTADDR:
    152                MT_SysSetExtAddr(pBuf);
    153                break;
    154          
    155              case MT_SYS_GET_EXTADDR:
    156                MT_SysGetExtAddr();
    157                break;
    158          
    159              case MT_SYS_OSAL_NV_READ:
    160                MT_SysOsalNVRead(pBuf);
    161                break;
    162          
    163              case MT_SYS_OSAL_NV_WRITE:
    164                MT_SysOsalNVWrite(pBuf);
    165                break;
    166          
    167              case MT_SYS_OSAL_START_TIMER:
    168                MT_SysOsalStartTimer(pBuf);
    169                break;
    170          
    171              case MT_SYS_OSAL_STOP_TIMER:
    172                MT_SysOsalStopTimer(pBuf);
    173                break;
    174          
    175              case MT_SYS_RANDOM:
    176                MT_SysRandom();
    177                break;
    178          
    179              case MT_SYS_ADC_READ:
    180                MT_SysAdcRead(pBuf);
    181                break;
    182          
    183              case MT_SYS_GPIO:
    184                MT_SysGpio(pBuf);
    185                break;
    186          
    187              case MT_SYS_STACK_TUNE:
    188                MT_SysStackTune(pBuf);
    189                break;
    190          
    191              default:
    192                status = MT_RPC_ERR_COMMAND_ID;
    193                break;
    194            }
    195          
    196            return status;
    197          }
    198          
    199          /**************************************************************************************************
    200           * @fn      MT_SysReset
    201           *
    202           * @brief   Reset the device.
    203           * @param   typID: 0=reset, 1=serial bootloader
    204           *
    205           * @return  None
    206           *************************************************************************************************/
    207          void MT_SysReset(uint8 *pBuf)
    208          {
    209            if (pBuf[MT_RPC_POS_DAT0] == 0)
    210            {
    211              SystemReset();
    212            }
    213            else
    214            {
    215              SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
    216            }
    217          }
    218          
    219          /***************************************************************************************************
    220           * @fn      MT_SysPing
    221           *
    222           * @brief   Process the Ping command
    223           *
    224           * @param   None
    225           *
    226           * @return  None
    227           ***************************************************************************************************/
    228          void MT_SysPing(void)
    229          {
    230            uint16 tmp16;
    231            uint8 retArray[2];
    232          
    233            /* Build Capabilities */
    234            tmp16 = MT_CAP_SYS | MT_CAP_MAC | MT_CAP_NWK | MT_CAP_AF | MT_CAP_ZDO|
    235                    MT_CAP_SAPI | MT_CAP_UTIL | MT_CAP_DEBUG | MT_CAP_APP | MT_CAP_ZOAD;
    236          
    237            /* Convert to high byte first into temp buffer */
    238            retArray[0] = LO_UINT16( tmp16 );
    239            retArray[1] = HI_UINT16( tmp16 );
    240          
    241            /* Build and send back the response */
    242            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_PING,
    243                                          sizeof (tmp16), retArray );
    244          }
    245          
    246          /***************************************************************************************************
    247           * @fn      MT_SysVersion
    248           *
    249           * @brief   Process the Version command
    250           *
    251           * @param   None
    252           *
    253           * @return  None
    254           ***************************************************************************************************/
    255          void MT_SysVersion(void)
    256          {
    257            byte *verStr = (byte *)MTVersionString;
    258            uint8 respLen = sizeof(MTVersionString);
    259          
    260            /* Build and send back the response */
    261            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
    262                                         respLen, verStr);
    263          }
    264          
    265          /***************************************************************************************************
    266           * @fn      MT_SysSetExtAddr
    267           *
    268           * @brief   Set the Extended Address
    269           *
    270           * @param   pBuf
    271           *
    272           * @return  None
    273           ***************************************************************************************************/
    274          void MT_SysSetExtAddr(uint8 *pBuf)
    275          {
    276            uint8 retValue = ZFailure;
    277            uint8 cmdId;
    278          
    279            /* parse header */
    280            cmdId = pBuf[MT_RPC_POS_CMD1];
    281            pBuf += MT_RPC_FRAME_HDR_SZ;
    282          
    283            if ( ZMacSetReq(ZMacExtAddr, pBuf) == ZMacSuccess )
    284            {
    285              retValue = osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf);
    286            }
    287          
    288            /* Build and send back the response */
    289            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
    290          
    291          }
    292          
    293          /***************************************************************************************************
    294           * @fn      MT_SysGetExtAddr
    295           *
    296           * @brief   Get the Extended Address
    297           *
    298           * @param   None
    299           *
    300           * @return  None
    301           ***************************************************************************************************/
    302          void MT_SysGetExtAddr(void)
    303          {
    304            uint8 extAddr[Z_EXTADDR_LEN];
    305          
    306            ZMacGetReq( ZMacExtAddr, extAddr );
    307          
    308            /* Build and send back the response */
    309            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_GET_EXTADDR,
    310                                         Z_EXTADDR_LEN, extAddr);
    311          }
    312          
    313          /***************************************************************************************************
    314           * @fn      MT_SysOsalNVRead
    315           *
    316           * @brief  Read a NV value
    317           *
    318           * @param  uint8 pBuf - pointer to the data
    319           *
    320           * @return  None
    321           ***************************************************************************************************/
    322          void MT_SysOsalNVRead(uint8 *pBuf)
    323          {
    324            uint16 nvId;
    325            uint8 nvItemLen=0, nvItemOffset=0;
    326            uint8 *pRetBuf=NULL;
    327            uint8 respLen, cmdId;
    328          
    329            /* parse header */
    330            cmdId = pBuf[MT_RPC_POS_CMD1];
    331            pBuf += MT_RPC_FRAME_HDR_SZ;
    332          
    333            /* Get the ID */
    334            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
    335            pBuf += sizeof(uint16);
    336          
    337          #if !MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
    338            if ((ZCD_NV_IMPLICIT_CERTIFICATE == nvId) ||
    339                (ZCD_NV_CA_PUBLIC_KEY == nvId)        ||
    340                (ZCD_NV_DEVICE_PRIVATE_KEY == nvId))
    341            {
    342              uint8 tmp[2] = { INVALIDPARAMETER, 0 };
    343              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 2, tmp);
    344              return;
    345            }
    346          #endif
    347          
    348          #if !MT_SYS_KEY_MANAGEMENT
    349            if ( (nvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
    350                 (nvId == ZCD_NV_NWK_ALTERN_KEY_INFO) ||
    351                ((nvId >= ZCD_NV_TCLK_TABLE_START) && (nvId <= ZCD_NV_TCLK_TABLE_END)) ||
    352                ((nvId >= ZCD_NV_APS_LINK_KEY_DATA_START) && (nvId <= ZCD_NV_APS_LINK_KEY_DATA_END)) ||
    353                ((nvId >= ZCD_NV_MASTER_KEY_DATA_START) && (nvId <= ZCD_NV_MASTER_KEY_DATA_END)) ||
    354                 (nvId == ZCD_NV_PRECFGKEY) )
    355            {
    356              uint8 tmp1[2] = { INVALIDPARAMETER, 0 };
    357              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 2, tmp1);
    358              return;
    359            }
    360          #endif //!MT_SYS_KEY_MANAGEMENT
    361                  
    362            /* Calculate the offset */
    363            nvItemOffset = *pBuf;
    364          
    365            nvItemLen = osal_nv_item_len(nvId);
    366          
    367            /* Return only 250 bytes max */
    368            if (nvItemLen > MT_NV_ITEM_MAX_LENGTH)
    369            {
    370              nvItemLen = MT_NV_ITEM_MAX_LENGTH;
    371            }
    372          
    373            if ((nvItemLen > 0) && ((nvItemLen - nvItemOffset) > 0))
    374            {
    375              respLen = nvItemLen - nvItemOffset + 2;
    376            }
    377            else
    378            {
    379              respLen = 2;
    380            }
    381          
    382            pRetBuf = osal_mem_alloc(respLen);
    383          
    384            if (pRetBuf != NULL)
    385            {
    386              osal_memset(pRetBuf, 0, respLen);
    387          
    388              /* Default to ZFailure */
    389              pRetBuf[0] = ZFailure;
    390          
    391              if (respLen > 2)
    392              {
    393                if (((osal_nv_read( nvId, (uint16)nvItemOffset, (uint16)nvItemLen, &pRetBuf[2])) == ZSUCCESS) && (respLen > 2))
    394                {
    395                  pRetBuf[0] = ZSuccess;
    396                }
    397                pRetBuf[1] = nvItemLen - nvItemOffset;
    398              }
    399              else
    400              {
    401                pRetBuf[1] = 0;
    402              }
    403          
    404              /* Build and send back the response */
    405              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, respLen, pRetBuf );
    406          
    407              osal_mem_free(pRetBuf);
    408            }
    409          
    410          
    411          }
    412          
    413          /***************************************************************************************************
    414           * @fn      MT_SysOsalNVWrite
    415           *
    416           * @brief
    417           *
    418           * @param   uint8 pData - pointer to the data
    419           *
    420           * @return  None
    421           ***************************************************************************************************/
    422          void MT_SysOsalNVWrite(uint8 *pBuf)
    423          {
    424            uint16 nvId;
    425            uint8 nvItemLen=0, nvItemOffset=0;
    426            uint8 rtrn, cmd;
    427          
    428            /* parse header */
    429            cmd = pBuf[MT_RPC_POS_CMD1];
    430            pBuf += MT_RPC_FRAME_HDR_SZ;
    431          
    432            /* Get the ID */
    433            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
    434            pBuf += sizeof(uint16);
    435          
    436            /* Calculate the offset */
    437            nvItemOffset = *pBuf++;
    438          
    439            /* Calculate the length */
    440            nvItemLen = *pBuf++;
    441          
    442            /* Default to ZFailure */
    443            rtrn = ZFailure;
    444          
    445            /* Set the Z-Globals value of this NV item. */
    446            zgSetItem( nvId, (uint16)nvItemLen, pBuf );
    447          
    448            if ((osal_nv_write(nvId, (uint16)nvItemOffset, (uint16)nvItemLen, pBuf)) == ZSUCCESS)
    449            {
    450              if (nvId == ZCD_NV_EXTADDR)
    451              {
    452                rtrn = ZMacSetReq(ZMacExtAddr, pBuf);
    453              }
    454              else
    455              {
    456                rtrn = ZSuccess;
    457              }
    458            }
    459          
    460            /* Build and send back the response */
    461            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &rtrn);
    462          }
    463          
    464          /***************************************************************************************************
    465           * @fn      MT_SysOsalStartTimer
    466           *
    467           * @brief
    468           *
    469           * @param   uint8 pData - pointer to the data
    470           *
    471           * @return  None
    472           ***************************************************************************************************/
    473          void MT_SysOsalStartTimer(uint8 *pBuf)
    474          {
    475            uint16 eventId;
    476            uint8 retValue = ZFailure;
    477            uint8 cmdId;
    478          
    479            /* parse header */
    480            cmdId = pBuf[MT_RPC_POS_CMD1];
    481            pBuf += MT_RPC_FRAME_HDR_SZ;
    482          
    483            if (*pBuf <= 3)
    484            {
    485              eventId = (uint16) MT_SysOsalEventId[*pBuf];
    486              retValue = osal_start_timerEx(MT_TaskID, eventId, BUILD_UINT16(pBuf[1], pBuf[2]));
    487            }
    488            else
    489            {
    490              retValue = ZInvalidParameter;
    491            }
    492          
    493            /* Build and send back the response */
    494            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
    495          }
    496          
    497          /***************************************************************************************************
    498           * @fn      MT_SysOsalStopTimer
    499           *
    500           * @brief
    501           *
    502           * @param   uint8 pData - pointer to the data
    503           *
    504           * @return  None
    505           ***************************************************************************************************/
    506          void MT_SysOsalStopTimer(uint8 *pBuf)
    507          {
    508            uint16 eventId;
    509            uint8 retValue = ZFailure;
    510            uint8 cmdId;
    511          
    512            /* parse header */
    513            cmdId = pBuf[MT_RPC_POS_CMD1];
    514            pBuf += MT_RPC_FRAME_HDR_SZ;
    515          
    516            if (*pBuf <= 3)
    517            {
    518              eventId = (uint16) MT_SysOsalEventId[*pBuf];
    519              retValue = osal_stop_timerEx(MT_TaskID, eventId);
    520            }
    521            else
    522            {
    523              retValue = ZInvalidParameter;
    524            }
    525          
    526            /* Build and send back the response */
    527            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue );
    528          }
    529          
    530          /***************************************************************************************************
    531           * @fn      MT_SysRandom
    532           *
    533           * @brief
    534           *
    535           * @param   uint8 pData - pointer to the data
    536           *
    537           * @return  None
    538           ***************************************************************************************************/
    539          void MT_SysRandom()
    540          {
    541            uint16 randValue = Onboard_rand();
    542            uint8 retArray[2];
    543          
    544            retArray[0] = LO_UINT16(randValue);
    545            retArray[1] = HI_UINT16(randValue);
    546          
    547            /* Build and send back the response */
    548            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_RANDOM, 2, retArray );
    549          }
    550          
    551          /***************************************************************************************************
    552           * @fn      MT_SysAdcRead
    553           *
    554           * @brief   Reading ADC value, temperature sensor and voltage
    555           *
    556           * @param   uint8 pData - pointer to the data
    557           *
    558           * @return  None
    559           ***************************************************************************************************/
    560          void MT_SysAdcRead(uint8 *pBuf)
    561          {
    562          #ifndef HAL_BOARD_LM3S8962
    563            uint8 channel, resolution;
    564            uint16 tempValue;
    565            uint8 retArray[2];
    566            uint8 cmdId;
    567          
    568            /* parse header */
    569            cmdId = pBuf[MT_RPC_POS_CMD1];
    570            pBuf += MT_RPC_FRAME_HDR_SZ;
    571          
    572            /* Channel */
    573            channel = *pBuf++;
    574          
    575            /* Resolution */
    576            resolution = *pBuf++;
    577          
    578            /* Voltage reading */
    579            switch (channel)
    580            {
    581              /* Analog input channel */
    582              case HAL_ADC_CHANNEL_0:
    583              case HAL_ADC_CHANNEL_1:
    584              case HAL_ADC_CHANNEL_2:
    585              case HAL_ADC_CHANNEL_3:
    586              case HAL_ADC_CHANNEL_4:
    587              case HAL_ADC_CHANNEL_5:
    588              case HAL_ADC_CHANNEL_6:
    589              case HAL_ADC_CHANNEL_7:
    590                tempValue = HalAdcRead(channel, resolution);
    591                break;
    592          
    593              /* Temperature sensor */
    594              case(HAL_ADC_CHANNEL_TEMP):
    595                tempValue = HalAdcRead(HAL_ADC_CHANNEL_TEMP, HAL_ADC_RESOLUTION_14);
    596                break;
    597          
    598              /* Voltage reading */
    599              case(HAL_ADC_CHANNEL_VDD):
    600                tempValue = HalAdcRead(HAL_ADC_CHANNEL_VDD, HAL_ADC_RESOLUTION_14);
    601                break;
    602          
    603              /* Undefined channels */
    604              default:
    605                tempValue = 0x00;
    606                break;
    607            }
    608          
    609            retArray[0] = LO_UINT16(tempValue);
    610            retArray[1] = HI_UINT16(tempValue);
    611          
    612            /* Build and send back the response */
    613            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 2, retArray);
    614          #endif /* #ifndef HAL_BOARD_LM3S8962 */
    615          }
    616          
    617          /**************************************************************************************************
    618           * @fn      MT_SysGpio
    619           *
    620           * @brief   ZAccel RPC interface for controlling the available GPIO pins.
    621           *
    622           * @param   uint8 pData - Pointer to the data.
    623           *
    624           * @return  None
    625           *************************************************************************************************/
    626          void MT_SysGpio(uint8 *pBuf)
    627          {
    628            uint8 cmd, val;
    629            GPIO_Op_t op;
    630          
    631            cmd = pBuf[MT_RPC_POS_CMD1];
    632            pBuf += MT_RPC_FRAME_HDR_SZ;
    633          
    634            op = (GPIO_Op_t)(*pBuf++);
    635            val = *pBuf;
    636          
    637            switch (op)
    638            {
    639              case GPIO_DIR:
    640                if (val & BV(0)) {GPIO_DIR_OUT(0);} else {GPIO_DIR_IN(0);}
    641                if (val & BV(1)) {GPIO_DIR_OUT(1);} else {GPIO_DIR_IN(1);}
    642                if (val & BV(2)) {GPIO_DIR_OUT(2);} else {GPIO_DIR_IN(2);}
    643                if (val & BV(3)) {GPIO_DIR_OUT(3);} else {GPIO_DIR_IN(3);}
    644                break;
    645          
    646              case GPIO_TRI:
    647                if(val & BV(0)) {GPIO_TRI(0);} else if(val & BV(4)) {GPIO_PULL_DN(0);} else {GPIO_PULL_UP(0);}
    648                if(val & BV(1)) {GPIO_TRI(1);} else if(val & BV(5)) {GPIO_PULL_DN(1);} else {GPIO_PULL_UP(1);}
    649                if(val & BV(2)) {GPIO_TRI(2);} else if(val & BV(6)) {GPIO_PULL_DN(2);} else {GPIO_PULL_UP(2);}
    650                if(val & BV(3)) {GPIO_TRI(3);} else if(val & BV(7)) {GPIO_PULL_DN(3);} else {GPIO_PULL_UP(3);}
    651                break;
    652          
    653              case GPIO_SET:
    654                if (val & BV(0)) {GPIO_SET(0);}
    655                if (val & BV(1)) {GPIO_SET(1);}
    656                if (val & BV(2)) {GPIO_SET(2);}
    657                if (val & BV(3)) {GPIO_SET(3);}
    658                break;
    659          
    660              case GPIO_CLR:
    661                if (val & BV(0)) {GPIO_CLR(0);}
    662                if (val & BV(1)) {GPIO_CLR(1);}
    663                if (val & BV(2)) {GPIO_CLR(2);}
    664                if (val & BV(3)) {GPIO_CLR(3);}
    665                break;
    666          
    667              case GPIO_TOG:
    668                if (val & BV(0)) {GPIO_TOG(0);}
    669                if (val & BV(1)) {GPIO_TOG(1);}
    670                if (val & BV(2)) {GPIO_TOG(2);}
    671                if (val & BV(3)) {GPIO_TOG(3);}
    672                break;
    673          
    674              case GPIO_GET:
    675                break;
    676          
    677              case GPIO_HiD:
    678                (val) ? GPIO_HiD_SET() :  GPIO_HiD_CLR();
    679                break;
    680          
    681              default:
    682                break;
    683            }
    684          
    685            val  = (GPIO_GET(0)) ? BV(0) : 0;
    686            val |= (GPIO_GET(1)) ? BV(1) : 0;
    687            val |= (GPIO_GET(2)) ? BV(2) : 0;
    688            val |= (GPIO_GET(3)) ? BV(3) : 0;
    689          
    690            /* Build and send back the response */
    691            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &val);
    692          }
    693          
    694          /**************************************************************************************************
    695           * @fn      MT_SysStackTune
    696           *
    697           * @brief   ZAccel RPC interface for tuning the stack parameters to adjust performance
    698           *
    699           * @param   uint8 pData - Pointer to the data.
    700           *
    701           * @return  None
    702           *************************************************************************************************/
    703          void MT_SysStackTune(uint8 *pBuf)
    704          {
    705            uint8 cmd, rtrn;
    706          
    707            cmd = pBuf[MT_RPC_POS_CMD1];
    708            pBuf += MT_RPC_FRAME_HDR_SZ;
    709          
    710            switch (*pBuf++)
    711            {
    712            case STK_TX_PWR:
    713              rtrn = ZMacSetReq(ZMacPhyTransmitPowerSigned, pBuf);
    714              break;
    715          
    716            case STK_RX_ON_IDLE:
    717              if ((*pBuf != TRUE) && (*pBuf != FALSE))
    718              {
    719                (void)ZMacGetReq(ZMacRxOnIdle, &rtrn);
    720              }
    721              else
    722              {
    723                rtrn = ZMacSetReq(ZMacRxOnIdle, pBuf);
    724              }
    725              break;
    726          
    727            default:
    728              rtrn = ZInvalidParameter;
    729              break;
    730            }
    731          
    732            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &rtrn);
    733          }
    734          #endif /* MT_SYS_FUNC */
    735          
    736          /***************************************************************************************************
    737           * SUPPORT
    738           ***************************************************************************************************/
    739          
    740          /***************************************************************************************************
    741           * @fn      MT_SysResetInd()
    742           *
    743           * @brief   Sends a ZTOOL "reset response" message.
    744           *
    745           * @param   None
    746           *
    747           * @return  None
    748           *
    749           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    750          void MT_SysResetInd(void)
   \                     MT_SysResetInd:
    751          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    752            uint8 retArray[6];
    753          
    754            retArray[0] = ResetReason();   /* Reason */
   \   00000A   E59D         MOV     A,0x9d
   \   00000C   13           RRC     A
   \   00000D   13           RRC     A
   \   00000E   13           RRC     A
   \   00000F   541F         ANL     A,#0x1f
   \   000011   5403         ANL     A,#0x3
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   F0           MOVX    @DPTR,A
    755            osal_memcpy( &retArray[1], MTVersionString, 5 );   /* Revision info */
   \   00001A                ; Setup parameters for call to function osal_memcpy
   \   00001A   75....       MOV     ?V0 + 0,#(MTVersionString & 0xff)
   \   00001D   75....       MOV     ?V0 + 1,#((MTVersionString >> 8) & 0xff)
   \   000020   75..00       MOV     ?V0 + 2,#0x0
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000028   7C05         MOV     R4,#0x5
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7404         MOV     A,#0x4
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   AA82         MOV     R2,DPL
   \   000033   AB83         MOV     R3,DPH
   \   000035   12....       LCALL   ??osal_memcpy?relay
   \   000038   7403         MOV     A,#0x3
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
    756          
    757            /* Send out Reset Response message */
    758            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_RESET_IND,
    759                                          sizeof(retArray), retArray);
   \   00003D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   AC82         MOV     R4,DPL
   \   000045   AD83         MOV     R5,DPH
   \   000047   7B06         MOV     R3,#0x6
   \   000049   7A80         MOV     R2,#-0x80
   \   00004B   7941         MOV     R1,#0x41
   \   00004D   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    760          }
   \   000050   7406         MOV     A,#0x6
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   \   000055   7F03         MOV     R7,#0x3
   \   000057   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00005A                REQUIRE SLEEPSTA
    761          
    762          /***************************************************************************************************
    763           * @fn      MT_SysOsalTimerExpired()
    764           *
    765           * @brief   Sends a SYS Osal Timer Expired
    766           *
    767           * @param   None
    768           *
    769           * @return  None
    770           *
    771           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    772          void MT_SysOsalTimerExpired(uint8 Id)
   \                     MT_SysOsalTimerExpired:
    773          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    774            uint8 retValue;
    775            retValue = Id;
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
    776            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_OSAL_TIMER_EXPIRED, 1, &retValue);
   \   000011                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000011   AC82         MOV     R4,DPL
   \   000013   AD83         MOV     R5,DPH
   \   000015   7B01         MOV     R3,#0x1
   \   000017   7A81         MOV     R2,#-0x7f
   \   000019   7941         MOV     R1,#0x41
   \   00001B   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    777          }
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
   \   000023   D083         POP     DPH
   \   000025   D082         POP     DPL
   \   000027   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysResetInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysResetInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysOsalTimerExpired?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalTimerExpired
    778          
    779          /***************************************************************************************************
    780           ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     MT_SysOsalTimerExpired             3      0      1
       -> MT_BuildAndSendZToolResponse
                                        4      0      2
     MT_SysResetInd                     1      0     20
       -> osal_memcpy                   0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     34


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     SLEEPSTA                          1
     MT_SysOsalEventId                 8
     MT_SysResetInd                   90
     MT_SysOsalTimerExpired           42
     ??MT_SysResetInd?relay            6
     ??MT_SysOsalTimerExpired?relay    6

 
 132 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   1 byte  in segment SFR_AN
   8 bytes in segment XDATA_ROM_C
 
 144 bytes of CODE  memory
   8 bytes of CONST memory
   0 bytes of DATA  memory (+ 1 byte shared)

Errors: none
Warnings: none
